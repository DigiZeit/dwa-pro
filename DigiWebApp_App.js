
// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: Activity
// ==========================================================================

DigiWebApp.Activity = M.Model.create({

    /* Define the name of your model. Do not delete this property! */
    __name__: 'Activity'

    , id: M.Model.attr('String', {
        isRequired: NO
    })

    , name: M.Model.attr('String', {
        isRequired: NO
    })
    
    , istStandardPause: M.Model.attr('Boolean', {
        isRequired: NO
    })
    
    , istUnterschriftsAbnahme: M.Model.attr('Boolean', {
        isRequired: NO
    })
    
    , istFahrzeitRelevant: M.Model.attr('Boolean', {
        isRequired: NO
    })
    
    , positionId: M.Model.attr('String',{
            isRequired: NO // 0: nicht MA-zugeordnet, 1: MA-zugeordnet
    })

    , getById: function(selectedId) {
		var that = this;
		return _.find(DigiWebApp[that.name].find(), function(item) {
			return (item.get('id') == selectedId);
		});
	}

	, getList: function(paramObj) {
		if (!paramObj) paramObj = {};
		var resultList = [];
		var position = null;
		if (paramObj.parentId) {
			position = _.find(DigiWebApp.Position.find(), function(p) {return p.get('id') == paramObj.parentId});
		}
		var items = null
		if (position) {
			items = position.getTaetigkeiten();
		} else {
			items = _.filter(DigiWebApp.Activity.findSorted(), function(act){ return (act.get('positionId') == 1)});
		}
		var itemSelected = NO;
		_.each(items, function(obj){
    		var item = { label: obj.get('name'), value: obj.get('id') };
    		if ((paramObj.selectedId && obj.get('id') == paramObj.selectedId) || items.length == 1) {
    			item.isSelected = YES;
    			itemSelected = YES;
    		}
    		resultList.push(item);
		});
		if (!itemSelected && resultList.length > 0) {
			resultList.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:YES});
		} else if (resultList.length == 0) {
			resultList.push({label: M.I18N.l('noData'), value: '0', isSelected:YES});
		}
		return resultList;
	}

    , deleteAll: function() {
    	var that = this;
        _.each(this.find(), function(el) {
            el.del();
        });
        localStorage.removeItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
    }

	, findById: function(queryId) {
		var foundElement = null;
		var that = this;
		$.each(that.find(),function(key, el){
			if (parseInt(queryId) === parseInt(el.get("id"))) {
				foundElement = el;
				return false; // break
			}
			return true;
		});
		return foundElement;
	}
	
    , findSorted: function() {
        var that = this;
        var keys = [];
        try {
            keys = JSON.parse(localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + this.name.toLowerCase() + 'Keys'));
        } catch(e2) {
        	console.error("ERROR in findSorted: " + e2);
        }

        var records = [];

        if (keys){
            _.each(keys, function(k) {
                records.push(that.find({key:M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX + that.name + '_' + k}));
            });
        }
        return records;
    }

    , saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso
//
// Project: DigiWebApp
// Model: Anwesenheitsliste
// ==========================================================================

DigiWebApp.Anwesenheitsliste = M.Model.create({
    
      __name__: 'Anwesenheitsliste'

      	//"auftragsBezeichnung": "27.08.2012",
    	  	, auftragsBezeichnung: M.Model.attr('String', {})
    	//"auftragsId": "27.08.2012",
    	    , auftragsId: M.Model.attr('String', {})
    	//"bis": "10:37:08",
    	    , bis: M.Model.attr('String', {})
    	//"datum": "27.08.2012",
    	    , datum: M.Model.attr('String', {})
    	    , datumLabel: M.Model.attr('String', {})
    	//"farbeAmpel": "",
    	    , farbeAmpel: M.Model.attr('String', {})
    	//"farbeAnwesenheit": "#00FF00",
    	    , farbeAnwesenheit: M.Model.attr('String', {})
    	//"fehlzeitBezeichnung": "",
    	    , fehlzeitBezeichnung: M.Model.attr('String', {})
    	//"gpsBreite": "0.0",
    	    , gpsBreite: M.Model.attr('String', {})
    	//"gpsBreitePosition": "0.0",
    	    , gpsBreitePosition: M.Model.attr('String', {})
    	//"gpsLaenge": "0.0",
    	    , gpsLaenge: M.Model.attr('String', {})
    	//"gpsLaengePosition": "0.0",
    	    , gpsLaengePosition: M.Model.attr('String', {})
    	//"handauftragsBezeichnung": "",
    	    , handauftragsBezeichnung: M.Model.attr('String', {})
    	//"handauftragsId": "",
    	    , handauftragsId: M.Model.attr('String', {})
    	//"mitarbeiterId": "29",
    	    , mitarbeiterId: M.Model.attr('String', {})
    	//"name": "Maier",
    	    , name: M.Model.attr('String', {})
    	//"nameVorname": "Maier, Peter",
    	    , nameVorname: M.Model.attr('String', {})
    	//"positionsBezeichnung": "1446DEKRA",
    	    , positionsBezeichnung: M.Model.attr('String', {})
    	//"positionsId": "1929",
    	    , positionsId: M.Model.attr('String', {})
    	//"taetigkeit": "05Stromversorger",
    	    , taetigkeit: M.Model.attr('String', {})
    	//"taetigkeitsId": "89",
    	    , taetigkeitsId: M.Model.attr('String', {})
    	//"taetigkeitsart": "0",
    	    , taetigkeitsart: M.Model.attr('String', {})
    	//"uhrzeit": "27-08-2012 11:50:52",
    	    , uhrzeit: M.Model.attr('String', {})
    	//"vorname": "Peter"
    	    , vorname: M.Model.attr('String', {})

}, M.DataConsumer.configure({

      appendRecords: NO

    , responsePath: 'anwesenheitsliste'

    , url: function() {
		var myURL = 'http://' + DigiWebApp.RequestController.DatabaseServer + '/WebAppServices/anwesenheitsliste?modus=0&firmenId=' + DigiWebApp.SettingsController.getSetting('company') + '&kennwort=' + DigiWebApp.SettingsController.getSetting('password') + '&geraeteId=' + DigiWebApp.SettingsController.getSetting('workerId') + '&geraeteTyp=2&softwareVersion=' + DigiWebApp.RequestController.softwareVersion + '&requestTimestamp=' + M.Date.now().date.valueOf();
        if (DigiWebApp.ApplicationController.profilingIntervalVar === null) {
        	console.log('Anwesenheitsliste: using ' + myURL);
        }
		return myURL;
    }

    /* map needs to return record obj which can be handled by createRecord */
    , map: function(obj) {
    	//console.log(obj);
        var outObj = {
        	//"auftragsBezeichnung":"1234Hermann"
        	  auftragsBezeichnung: obj.auftragsBezeichnung
        	//"auftragsId":"947"
			, auftragsId: obj.auftragsId
			//"bis": "10:37:08",
			, bis: obj.bis
			//"datum": "27.08.2012",
			, datum: obj.datum
			, datumLabel: ''
			//"farbeAmpel": "",
			, farbeAmpel: obj.farbeAmpel
			//"farbeAnwesenheit": "#00FF00",
			, farbeAnwesenheit: obj.farbeAnwesenheit
			//"fehlzeitBezeichnung": "",
			, fehlzeitBezeichnung: obj.fehlzeitBezeichnung 
			//"gpsBreite": "0.0",
			, gpsBreite: obj.gpsBreite
			//"gpsBreitePosition": "0.0",
			, gpsBreitePosition: obj.gpsBreitePosition
			//"gpsLaenge": "0.0",
			, gpsLaenge: obj.gpsLaenge
			//"gpsLaengePosition": "0.0",
			, gpsLaengePosition: obj.gpsLaengePosition
			//"handauftragsBezeichnung": "",
			, handauftragsBezeichnung: obj.handauftragsBezeichnung
			//"handauftragsId": "",
			, handauftragsId: obj.handauftragsId
			//"mitarbeiterId": "29",
			, mitarbeiterId: obj.mitarbeiterId
			//"name": "Maier",
			, name: obj.name
			//"nameVorname": "Maier, Peter",
			, nameVorname: obj.nameVorname
			//"positionsBezeichnung": "1446DEKRA",
			, positionsBezeichnung: obj.positionsBezeichnung
			//"positionsId": "1929",
			, positionsId: obj.positionsId
			//"taetigkeit": "05Stromversorger",
			, taetigkeit: obj.taetigkeit
			//"taetigkeitsId": "89",
			, taetigkeitsId: obj.taetigkeitsId
			//"taetigkeitsart": "0",
			, taetigkeitsart: obj.taetigkeitsart
			//"uhrzeit": "27-08-2012 11:50:52",
			, uhrzeit: obj.uhrzeit
			//"vorname": "Peter"
			, vorname: obj.vorname
        };
		if (outObj.datum !== "-") {
			if (outObj.bis === "-") {
				outObj.datumLabel = M.I18N.l('bookingSince') + ': ';
			} else {
				outObj.datumLabel = M.I18N.l('lastWorkday') + ': ';
				outObj.uhrzeit = '-';
			}
		} else {
			outObj.datumLabel = M.I18N.l('noData');
			outObj.uhrzeit = '-';
			outObj.bis = '-';
		}
		return outObj;
    }

}));
// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: BautagebuchBautagesbericht
// ==========================================================================

DigiWebApp.BautagebuchBautagesbericht = M.Model.create({
    
    /* Define the name of your model. Do not delete this property! */
    __name__: 'BautagebuchBautagesbericht'

    , id: M.Model.attr('String', {
        isRequired: YES
    })

    , datum: M.Model.attr('String', {
        isRequired: YES
    })

    , startUhrzeit: M.Model.attr('String', {
        isRequired: YES
    })
    
    , bautagesberichtId: M.Model.attr('String', {
        isRequired: NO
    })

    , bautagesberichtTyp: M.Model.attr('String', {
        isRequired: NO
    })

    , transferCompleted: M.Model.attr('Boolean', {
        isRequired: NO
    })

    , projektleiterId: M.Model.attr('String', {
        isRequired: NO
    })
    
    , selektierteMitarbeiter: M.Model.attr('String', {
        isRequired: NO
        // list of ids
    })

    , orderId: M.Model.attr('String',{
        isRequired: NO
    })

    , orderName: M.Model.attr('String',{
        isRequired: NO
    })
	
    , handOrderId: M.Model.attr('String', {
        isRequired: NO
    })

    , handOrderName: M.Model.attr('String',{
        isRequired: NO
    })

    , positionId: M.Model.attr('String',{
        isRequired: NO
    })

    , positionName: M.Model.attr('String',{
        isRequired: NO
    })
	
    , temperatur: M.Model.attr('String',{
        isRequired: NO
    })

    , luftfeuchtigkeit: M.Model.attr('String',{
        isRequired: NO
    })

    , bewoelkung: M.Model.attr('String',{
        isRequired: NO
    })

    , niederschlag: M.Model.attr('String',{
        isRequired: NO
    })

    , wind: M.Model.attr('String',{
        isRequired: NO
    })

    , wechselhaft: M.Model.attr('String',{
        isRequired: NO
    })

    , latitude: M.Model.attr('String', {
    	// wird verwendet, falls Auto-StartUhrzeit gesetzt
        isRequired:NO
    })

    , longitude: M.Model.attr('String', {
    	// wird verwendet, falls Auto-StartUhrzeit gesetzt
        isRequired: NO
    })
    
    , abgeschlossen: M.Model.attr('String', {
        isRequired: NO
    })

    , unterschrift: M.Model.attr('String', {
        isRequired: NO
    })

    , unterschrift_hoehe: M.Model.attr('String', {
        isRequired: NO
    })

    , unterschrift_breite: M.Model.attr('String', {
        isRequired: NO
    })

    , fileName: M.Model.attr('String', {
        isRequired: NO
    })

    , fileType: M.Model.attr('String', {
        isRequired: NO
    })

	, hasFileName: function() {
    	var that = this;
		if ((!(that.get('fileName'))) || (that.get('fileName') && (that.get('fileName').length === 0))) {
			return NO;
		} else {
			return YES;
		}
    	
    }
    
	, saveToFile: function(myWriteContent, successCallback, myErrorCallback) {		
		var that = this;
		var writeContent = new String(myWriteContent);
		
		// check if fileName is set
		//if ((!(that.get('fileName'))) || (that.get('fileName') && (that.get('fileName').length === 0))) {
		if (!that.hasFileName()) {
			that.set('fileName', that.__proto__.name + '_Signature_' + D8.now().getTimestamp());
			that.save();
	    }
	
		// check for successCallback is a function
		if (typeof successCallback !== "function") {
			console.error("saveToFileError: successCallback is not a function");
	        return false;
	    }
	
		// check for errorCallback is a function (optional)
		var errorCallback;
	    if (!myErrorCallback || (typeof myErrorCallback !== "function")) {
			//console.error("saveToFileError: errorCallback is not a function");
	    	errorCallback = function(evt) {
	            //console.log("deleteFileError: " + evt.target.error.code);
	    		console.error("saveToFileError", evt);
	    	};
	    } else {
	    	errorCallback = myErrorCallback;
	    }
		
		// check if LocalFileSystem is defined
		if (typeof window.requestFileSystem === "undefined") {
			console.error("saveToFileError: no LocalFileSystem available");
			successCallback("");
	        return true;
	    }
	
		try {
			var myQuota = DigiWebApp.ApplicationController.CONSTApplicationQuota;
		    // open filesystem
			if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
				navigator.webkitPersistentStorage.requestQuota(myQuota, function(grantedBytes) {
				    window.requestFileSystem(PERSISTENT, grantedBytes, function(fileSystem) {
				    	
				    	// get dataDirectory from filesystem (create if not exists)
				    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
				
					    	// get fileEntry from filesystem (create if not exists)
					    	dataDirectory.getFile(that.get("fileName"), {create: true, exclusive: false}, function(fileEntry) {
				
					    		fileEntry.createWriter(function(writer) {
					    				
					    			writer.onerror = function(evt) {
					    				console.error("writeError", evt);
					    				errorCallback(evt);
					    			};
					    			
					    			writer.onwriteend = function(evt) {
						    			writer.onwriteend = function(ev) {
					    					successCallback(ev);
						    			};
					    				writer.truncate(writeContent.length);
					    	        };
					    	        // Create a new Blob and write it to log.txt.
					    	        var blob = new Blob([writeContent], {type: 'text/plain'});
					    	        
				    	        	writer.write(blob);
				
					    		}, errorCallback); // fileEntry.createWriter
					   		}, errorCallback);     // dataDirectory.getFile
					   	}, errorCallback);         // fileSystem.root.getDirectory
				    }, errorCallback);             // window.requestFileSystem
				}, function(e) {
					  console.error('Error while requesting Quota', e);
	  		            DigiWebApp.ApplicationController.nativeAlertDialogView({
			                title: M.I18N.l('error')
			              , message: M.I18N.l('errorWhileRequestingQuota') + ": " + err
			            });	    		        					
				});
	
			} else {
		    
			    window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
			    	
			    	// get dataDirectory from filesystem (create if not exists)
			    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
			
				    	// get fileEntry from filesystem (create if not exists)
				    	dataDirectory.getFile(that.get("fileName"), {create: true, exclusive: false}, function(fileEntry) {
			
				    		fileEntry.createWriter(function(writer) {
				    				
				    			writer.onerror = function(evt) {
				    				console.error("writeError", evt);
				    				errorCallback(evt);
				    			};
				    			
				    			writer.onwriteend = function(evt) {
					    			writer.onwriteend = function(ev) {
				    					successCallback(ev);
					    			};
				    				writer.truncate(writeContent.length);
				    	        };
				    	        
			    	        	writer.write(writeContent.toString());
			
				    		}, errorCallback); // fileEntry.createWriter
				   		}, errorCallback);     // dataDirectory.getFile
				   	}, errorCallback);         // fileSystem.root.getDirectory
			    }, errorCallback);             // window.requestFileSystem
			}
		} catch(e3) {
			errorCallback(e3);
		}
	
	}
	
	, readFromFile: function(successCallback, myErrorCallback) {
		var that = this;
		
		// check if fileName is set
		//if ((!(that.get('fileName'))) || (that.get('fileName') && (that.get('fileName').length === 0))) {
		if (!that.hasFileName()) {
			console.error("readFromFileError: no fileName given");
	        return false;
	    }
	
		// check for successCallback is a function
		if (typeof successCallback !== "function") {
			console.error("readFromFileError: successCallback is not a function");
	        return false;
	    }
		
		// check for errorCallback is a function (optional)
		var errorCallback;
	    if (!myErrorCallback || (typeof myErrorCallback !== "function")) {
			//console.error("saveToFileError: errorCallback is not a function");
	    	errorCallback = function(evt) {
	            //console.log("deleteFileError: " + evt.target.error.code);
	    		console.error("readFromFileError", evt);
	    	};
	    } else {
	    	errorCallback = myErrorCallback;
	    }
	    
		// check if LocalFileSystem is defined
		if (typeof window.requestFileSystem === "undefined") {
			console.error("readFromFileError: no LocalFileSystem available");
			successCallback("");
	        return true;
	    }
		
		try {
			var myQuota = DigiWebApp.ApplicationController.CONSTApplicationQuota;
		    // open filesystem
			if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
				navigator.webkitPersistentStorage.requestQuota(myQuota, function(grantedBytes) {
				    window.requestFileSystem(PERSISTENT, grantedBytes, function(fileSystem) {
				
				    	// get dataDirectory from filesystem (create if not exists)
				    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
					    			
					    	// get fileEntry from filesystem
					    	dataDirectory.getFile(that.get("fileName"), null, function(fileEntry) {
					    		
					    		// get file from fileEntry
					    		fileEntry.file(function(file) {
					    			
					    			// read from file
					    			var reader = new FileReader();
					    			reader.onloadend = function(evt) {
					    		    	
					    		    	// return content via successCallback
					    				successCallback(this.result);
					    				
					    	        };
					    			reader.readAsText(file);
					    	        
					        	}, errorCallback); // fileEntry.file
					    	}, errorCallback);     // dataDirectory.getFile
					    }, errorCallback);         // fileSystem.root.getDirectory
				    }, errorCallback);             // window.requestFileSystem
				}, function(e) {
					  console.error('Error while requesting Quota', e);
	  		            DigiWebApp.ApplicationController.nativeAlertDialogView({
			                title: M.I18N.l('error')
			              , message: M.I18N.l('errorWhileRequestingQuota') + ": " + err
			            });	    		        					
				});
			} else {
	
			    window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
					
			    	// get dataDirectory from filesystem (create if not exists)
			    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
				    			
				    	// get fileEntry from filesystem
				    	dataDirectory.getFile(that.get("fileName"), null, function(fileEntry) {
				    		
				    		// get file from fileEntry
				    		fileEntry.file(function(file) {
				    			
				    			// read from file
				    			var reader = new FileReader();
				    			reader.onloadend = function(evt) {
				    		    	
				    		    	// return content via successCallback
				    				successCallback(evt.target.result);
				    				
				    	        };
				    			reader.readAsText(file);
				    	        
				        	}, errorCallback); // fileEntry.file
				    	}, errorCallback);     // dataDirectory.getFile
				    }, errorCallback);         // fileSystem.root.getDirectory
			    }, errorCallback);             // window.requestFileSystem
			}
		} catch(e4) {
			errorCallback(e4);
		}
	}
	
	, deleteFile: function(successCallback, myErrorCallback) {
		var that = this;
		
		// check if fileName is set
		//if ((!(that.get('fileName'))) || (that.get('fileName') && (that.get('fileName').length === 0))) {
		if (!that.hasFileName()) {
			console.error("deleteFileError: no fileName given");
	        return false;
	    }
	
		// check for successCallback is a function
		if (typeof successCallback !== "function") {
			console.error("deleteFileError: successCallback is not a function");
	        return false;
	    }
		
		// check for errorCallback is a function (optional)
		var errorCallback;
	    if (!myErrorCallback || (typeof myErrorCallback !== "function")) {
			//console.error("saveToFileError: errorCallback is not a function");
	    	errorCallback = function(evt) {
	            //console.log("deleteFileError: " + evt.target.error.code);
	    		console.error("deleteFileError", evt);
	    	};
	    } else {
	    	errorCallback = myErrorCallback;
	    }
	    
		// check if LocalFileSystem is defined
		if (typeof window.requestFileSystem === "undefined") {
			console.error("deleteFileError: no LocalFileSystem available");
			successCallback("");
	        return true;
	    }
	
		try {
			var myQuota = DigiWebApp.ApplicationController.CONSTApplicationQuota;
		    // open filesystem
			if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
				navigator.webkitPersistentStorage.requestQuota(myQuota, function(grantedBytes) {
					window.requestFileSystem(PERSISTENT, grantedBytes, function(fileSystem) {
						
				    	// get dataDirectory from filesystem (create if not exists)
				    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
					    			
					    	// get fileEntry from filesystem
					    	dataDirectory.getFile(that.get("fileName"), null, function(fileEntry) {
					    		
					    		// remove fileEntry
					    		fileEntry.remove(successCallback, errorCallback);
					    		
					    	}, errorCallback);     // dataDirectory.getFile
					    }, errorCallback);         // fileSystem.root.getDirectory
				    }, errorCallback);             // window.requestFileSystem
				}, function(e) {
					  console.error('Error while requesting Quota', e);
	  		            DigiWebApp.ApplicationController.nativeAlertDialogView({
			                title: M.I18N.l('error')
			              , message: M.I18N.l('errorWhileRequestingQuota') + ": " + err
			            });	    		        					
				});
			} else {
				window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
			
			    	// get dataDirectory from filesystem (create if not exists)
			    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
				    			
				    	// get fileEntry from filesystem
				    	dataDirectory.getFile(that.get("fileName"), null, function(fileEntry) {
				    		
				    		// remove fileEntry
				    		fileEntry.remove(successCallback, errorCallback);
				    		
				    	}, errorCallback);     // dataDirectory.getFile
				    }, errorCallback);         // fileSystem.root.getDirectory
			    }, errorCallback);             // window.requestFileSystem
			}
		} catch(e5) {
			errorCallback(e5);
		}
	}

	, deleteAll: function() {
        _.each(this.find(), function(el) {
			el.deleteSorted();
        });
    }

	, deleteSorted: function(successCallback,errorCallback) {
	    var that = this;
	    
	    // alle zugehörigen Zeiten löschen
	    _.each(DigiWebApp.BautagebuchZeitbuchung.find({bautagesberichtId: that.get('id')}), function(el) {
	    	el.deleteSorted();
	    });
	    
	    // alle zugehörigen Materialbuchungen löschen
	    _.each(DigiWebApp.BautagebuchMaterialBuchung.find({bautagesberichtId: that.get('id')}), function(el) {
	    	el.deleteSorted();
	    });
	    
	    // alle zugehörigen Notizen löschen
	    _.each(DigiWebApp.BautagebuchNotiz.find({bautagesberichtId: that.get('id')}), function(el) {
	    	el.deleteSorted();
	    });

	    // alle zugehörigen Medien löschen
	    _.each(DigiWebApp.BautagebuchMediaFile.find({bautagesberichtId: that.get('id')}), function(el) {
	    	el.deleteSorted();
	    });

	    // remove m_id from Key-Stringlist
	    var keys = [];
	    var newKeys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
        	if ( keyString !== null) {
        		keys = JSON.parse(keyString);
        	}
	    } catch(e6) {
	    	console.error("ERROR in " + that.name + ".deleteSorted: " + e6);
	    }
        if(keys){
            _.each(keys, function(k) {
            	if (k !== that.m_id) {
            		newKeys.push(k);
            	}
            });
    	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(newKeys));
        }

        if (that.hasFileName()) {
	    	// delete mediafile from device
        	that.deleteFile(function(n){
		    	// delete record from localStorage only if file
	    		// was deleted successfully from device
	    		that.del();
	    		if (typeof(successCallback) === "function") successCallback();
	    	}
        	, function(n){
		    	// delete record from localStorage anyway
	    		that.del();
	    		if (typeof(successCallback) === "function") successCallback();
	    	});
    	} else {
    		// there is no file to delete, so delete the record
    		that.del();
    		if (typeof(successCallback) === "function") successCallback();
    	}	    
	}
	
	, saveSorted: function() {
        var that = this;
        if (!that.save()) return false;

        // add m_id to Key-Stringlist
        var keys = [];
        try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
        	if ( keyString !== null) {
        		keys = JSON.parse(keyString);
        	}
        } catch(e7) {
        	console.error("ERROR in " + that.name + ".saveSorted: " + e7);
        }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
        localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
        return true;
	}

    , findSorted: function() {
        var that = this;
        var keys = [];
        try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
        	if ( keyString !== null) {
        		keys = JSON.parse(keyString);
        	}
        } catch(e8) {
        	console.error("ERROR in " + that.name + ".findSorted: " + e8);
        }

        var records = [];

        if(keys){
            _.each(keys, function(k) {
                records.push(that.find({key:DigiWebApp.ApplicationController.storagePrefix + that.name + '_' + k}));
            });
        }
        return records;
    }

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: BautagebuchEinstellungen
// ==========================================================================

DigiWebApp.BautagebuchEinstellungen = M.Model.create({
    
    /* Define the name of your model. Do not delete this property! */
    __name__: 'BautagebuchEinstellungen'

    , startUhrzeit: M.Model.attr('String', {
          isRequired: NO
    })

    , inStundenBuchen: M.Model.attr('String', {
          isRequired: NO
    })
    
    , falscheZeitenIgnorieren: M.Model.attr('String', {
        isRequired: NO
    })

    , positionVorselektieren: M.Model.attr('String', {
        isRequired: NO
    })

    , in15MinutenSchritten: M.Model.attr('String', {
        isRequired: NO
    })

	, deleteAll: function() {
        _.each(this.find(), function(el) {
    		el.deleteSorted();
        });
    }

	, deleteSorted: function() {
	    var that = this;
	
	    // remove m_id from Key-Stringlist
	    var keys = [];
	    var newKeys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e2) {
	    	console.error("ERROR in " + that.name + ".deleteSorted: " + e2);
	    }
	    if (keys){
	        _.each(keys, function(k) {
	        	if (k !== that.m_id) {
	        		newKeys.push(k);
	        	}
	        });
		    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(newKeys));
	    }
	
	    that.del();
	}
	
	, saveSorted: function() {
	    var that = this;
	    that.save();
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	}
	
	, findSorted: function() {
	    var that = this;
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e4) {
	    	console.error("ERROR in " + that.name + ".findSorted: " + e4);
	    }
	
	    var records = [];
	
	    if (keys) {
	        _.each(keys, function(k) {
	            records.push(that.find({key:DigiWebApp.ApplicationController.storagePrefix + that.name + '_' + k}));
	        });
	    }
	    return records;
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: BautagebuchHersteller
// 
// zu bestücken mittels WebService
// ==========================================================================

DigiWebApp.BautagebuchHersteller = M.Model.create({
    
    /* Define the name of your model. Do not delete this property! */
    __name__: 'BautagebuchHersteller'

    , id: M.Model.attr('String', {
        isRequired: NO
    })
    
    , bezeichnung: M.Model.attr('String', {
        isRequired: NO
    })

	, getMaterialien: function() {
		var that = this;
		return _.filter(DigiWebApp.BautagebuchMaterial.findSorted(), function(mat) {
			var foundIndex = _.find([JSON.parse(mat.get('herstellerId'))], function(myId) {
				return (that.get('id') == myId);
			});
			return (foundIndex);
		});
	}
	
	, getList: function(paramObj) {
		if (!paramObj) paramObj = {};
		var that = this;
		var resultList = [];
		var items = DigiWebApp[that.name].findSorted();
		var itemSelected = NO;
		_.each(items, function(obj){
			var item = { label: obj.get('bezeichnung'), value: obj.get('id') };
			if ((paramObj.selectedId && obj.get('id') == paramObj.selectedId) || items.length == 1) {
				item.isSelected = YES;
				itemSelected = YES;
			}
			resultList.push(item);
		});
		resultList.push({label: M.I18N.l('alle'), value: '0', isSelected:!itemSelected});
		return resultList;
	}
	
    , deleteAll: function() {
        _.each(this.find(), function(el) {
    		el.deleteSorted();
        });
    }

	, deleteSorted: function() {
	    var that = this;
	
	    // remove m_id from Key-Stringlist
	    var keys = [];
	    var newKeys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e2) {
	    	console.error("ERROR in " + that.name + ".deleteSorted: " + e2);
	    }
	    if (keys) {
	        _.each(keys, function(k) {
	        	if (k !== that.m_id) {
	        		newKeys.push(k);
	        	}
	        });
		    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(newKeys));
	    }
	
	    return that.del();
	}
	
	, saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	
	, findSorted: function() {
	    var that = this;
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e4) {
	    	console.error("ERROR in " + that.name + ".findSorted: " + e4);
	    }
	
	    var records = [];
	
	    if (keys) {
	        _.each(keys, function(k) {
	            records.push(that.find({key:DigiWebApp.ApplicationController.storagePrefix + that.name + '_' + k}));
	        });
	    }
	    return records;
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: BautagebuchLieferant
// 
// zu bestücken mittels WebService
// ==========================================================================

DigiWebApp.BautagebuchLieferant = M.Model.create({
    
    /* Define the name of your model. Do not delete this property! */
    __name__: 'BautagebuchLieferant'

    , id: M.Model.attr('String', {
        isRequired: NO
    })
    
    , bezeichnung: M.Model.attr('String', {
        isRequired: NO
    })

    , nummer: M.Model.attr('String', {
        isRequired: NO
    })

	, getMaterialien: function() {
		var that = this;
		return _.filter(DigiWebApp.BautagebuchLieferant.findSorted(), function(mat) {
			var foundIndex = _.find(JSON.parse(mat.get('lieferantenIds')), function(myId) {
				return (that.get('id') == myId);
			});
			return (foundIndex);
		});
	}

	, getList: function(paramObj) {
		if (!paramObj) paramObj = {};
		var that = this;
		var resultList = [];
		var items = DigiWebApp[that.name].findSorted();
		var itemSelected = NO;
		_.each(items, function(obj){
			var item = { label: obj.get('bezeichnung'), value: obj.get('id') };
			if ((paramObj.selectedId && obj.get('id') == paramObj.selectedId) || items.length == 1) {
				item.isSelected = YES;
				itemSelected = YES;
			}
			resultList.push(item);
		});
		resultList.push({label: M.I18N.l('alle'), value: '0', isSelected:!itemSelected});
		return resultList;
	}
	
    , deleteAll: function() {
        _.each(this.find(), function(el) {
    		el.deleteSorted();
        });
    }

	, deleteSorted: function() {
	    var that = this;
	
	    // remove m_id from Key-Stringlist
	    var keys = [];
	    var newKeys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e2) {
	    	console.error("ERROR in " + that.name + ".deleteSorted: " + e2);
	    }
	    if (keys) {
	        _.each(keys, function(k) {
	        	if (k !== that.m_id) {
	        		newKeys.push(k);
	        	}
	        });
		    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(newKeys));
	    }
	
	    return that.del();
	}
	
	, saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	
	, findSorted: function() {
	    var that = this;
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e4) {
	    	console.error("ERROR in " + that.name + ".findSorted: " + e4);
	    }
	
	    var records = [];
	
	    if (keys) {
	        _.each(keys, function(k) {
	            records.push(that.find({key:DigiWebApp.ApplicationController.storagePrefix + that.name + '_' + k}));
	        });
	    }
	    return records;
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: BautagebuchMaterial
// 
// zu bestücken mittels WebService
// ==========================================================================

DigiWebApp.BautagebuchMaterial = M.Model.create({
    
    /* Define the name of your model. Do not delete this property! */
    __name__: 'BautagebuchMaterial'

    , id: M.Model.attr('String', {
        isRequired: NO
    })
    
    , bezeichnung: M.Model.attr('String', {
        isRequired: NO
    })

    , nummer: M.Model.attr('String', {
        isRequired: NO
    })

    , standardEinheitId: M.Model.attr('String', {
        isRequired: NO
    })

    , einheitenIds: M.Model.attr('String', {
        isRequired: NO
    })

    , lieferantenIds: M.Model.attr('String', {
        isRequired: NO
    })

    , herstellerId: M.Model.attr('String', {
        isRequired: NO
    })

    , materialgruppenIds: M.Model.attr('String', {
        isRequired: NO
    })

    , einzelpreis: M.Model.attr('String', {
        isRequired: NO
    })

    , materialtypId: M.Model.attr('String', {
        isRequired: NO
    })

    , getHersteller: function() {
		return DigiWebApp.BautagebuchHersteller.find({query:{identifier: 'id', operator: '=', value: "" + this.get('herstellerId')}})[0];
	}
    
	, getMaterialtyp: function() {
		return DigiWebApp.BautagebuchMaterialtyp.find({query:{identifier: 'id', operator: '=', value: "" + this.get('materialtypId')}})[0];
	}
	
	, getLieferanten: function() {
		var result = [];
		_.each(JSON.parse(this.get('lieferantenIds')), function(myId){
			var item = DigiWebApp.BautagebuchLieferant.find({query:{identifier: 'id', operator: '=', value: "" + myId}})[0];
			if (item) {
				result.push(item);
			}
		});
		return result;
	}

	, getMaterialgruppen: function() {
		var result = [];
		_.each(JSON.parse(this.get('materialgruppenIds')), function(myId){
			var item = DigiWebApp.BautagebuchMaterialgruppe.find({query:{identifier: 'id', operator: '=', value: "" + myId}})[0];
			if (item) {
				result.push(item);
			}
		});
		return result;
	}

	, getMaterialbuchungen: function() {
		return DigiWebApp.BautagebuchMaterialbuchung.find({query:{identifier: 'materialId', operator: '=', value: "" + this.get('id')}});
	}

	, getStandardEinheit: function() {
		return DigiWebApp.BautagebuchMengeneinheit.find({query:{identifier: 'standardEinheitId', operator: '=', value: "" + this.get('id')}});
	}

	, getMengeneinheiten: function() {
		var result = [];
		_.each(JSON.parse(this.get('einheitenIds')), function(myId){
			var item = DigiWebApp.BautagebuchMengeneinheit.find({query:{identifier: 'id', operator: '=', value: "" + myId}})[0];
			if (item) {
				result.push(item);
			}
		});
		return result;
	}

    , getList: function(paramObj) {
		if (!paramObj) paramObj = {};
    	var that = this;
		var resultList = [];
		var items = DigiWebApp[that.name].findSorted();
		var itemSelected = NO;
		if (paramObj.lieferantId) {
			items = _.filter(items, function(mat) {
				return _.contains(JSON.parse(mat.get('lieferantenIds')), "" + paramObj.lieferantId);
			});
		}
		if (paramObj.herstellerId) {
			items = _.filter(items, function(mat) {
				return _.contains([mat.get('herstellerId')], "" + paramObj.herstellerId);
			});
		}
		if (paramObj.materialgruppeId) {
			items = _.filter(items, function(mat) {
				return _.contains(JSON.parse(mat.get('materialgruppenIds')), "" + paramObj.materialgruppeId);
			});
		}
		if (paramObj.materialtypId) {
			items = _.filter(items, function(mat) {
				return _.contains([mat.get('materialtypId')], "" + paramObj.materialtypId);
			});
		}
		_.each(items, function(obj){
    		var item = { label: obj.get('bezeichnung'), value: obj.get('id') };
    		if ((paramObj.selectedId && obj.get('id') == paramObj.selectedId) || items.length == 1) {
    			item.isSelected = YES;
    			itemSelected = YES;
    		}
    		resultList.push(item);
		});
		if (!itemSelected) {
			resultList.push({label: M.I18N.l('BautagebuchManuelleEingabe'), value: '0', isSelected:YES});
		} else {
			resultList.push({label: M.I18N.l('BautagebuchManuelleEingabe'), value: '0'});
		} 
		return resultList;
	}

    , getById: function(selectedId) {
		var that = this;
		return _.find(DigiWebApp[that.name].find(), function(item) {
			return (item.get('id') == selectedId);
		});
	}

    , deleteAll: function() {
        _.each(this.find(), function(el) {
    		el.deleteSorted();
        });
    }

	, deleteSorted: function() {
	    var that = this;
	
	    // remove m_id from Key-Stringlist
	    var keys = [];
	    var newKeys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e2) {
	    	console.error("ERROR in " + that.name + ".deleteSorted: " + e2);
	    }
	    if (keys) {
	        _.each(keys, function(k) {
	        	if (k !== that.m_id) {
	        		newKeys.push(k);
	        	}
	        });
		    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(newKeys));
	    }
	
	    return that.del();
	}
	
	, saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	
	, findSorted: function() {
	    var that = this;
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e4) {
	    	console.error("ERROR in " + that.name + ".findSorted: " + e4);
	    }
	
	    var records = [];
	
	    if (keys) {
	        _.each(keys, function(k) {
	            records.push(that.find({key:DigiWebApp.ApplicationController.storagePrefix + that.name + '_' + k}));
	        });
	    }
	    return records;
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: BautagebuchMaterialBuchung
// ==========================================================================

DigiWebApp.BautagebuchMaterialBuchung = M.Model.create({
    
    /* Define the name of your model. Do not delete this property! */
    __name__: 'BautagebuchMaterialBuchung'

    , id: M.Model.attr('Number', {
        isRequired: NO
    })
    
    , bautagesberichtId: M.Model.attr('String', {
        isRequired: YES
    })

    , artikel: M.Model.attr('String', {
        isRequired: NO
    })

    , menge: M.Model.attr('String', {
        isRequired: NO
    })

    , einheit: M.Model.attr('String', {
        isRequired: NO
    })

    , materialId: M.Model.attr('String', {
        isRequired: NO
    })

    , mengeneinheitId: M.Model.attr('String', {
        isRequired: NO
    })

    , positionId: M.Model.attr('String', {
        isRequired: NO
    })

    , positionName: M.Model.attr('String',{
        isRequired: NO
    })

    , handOrderId: M.Model.attr('String', {
        isRequired: NO
    })

    , handOrderName: M.Model.attr('String',{
        isRequired: NO
    })

    , activityId: M.Model.attr('String', {
        isRequired: NO
    })

    , activityName: M.Model.attr('String',{
        isRequired: NO
    })

    , materialgruppeId: M.Model.attr('String', {
        isRequired: NO
    })

    , materialtypId: M.Model.attr('String', {
        isRequired: NO
    })

    , lieferantId: M.Model.attr('String', {
        isRequired: NO
    })

    , herstellerId: M.Model.attr('String', {
        isRequired: NO
    })

    , deleteAll: function() {
        _.each(this.find(), function(el) {
    		el.deleteSorted();
        });
    }

	, deleteSorted: function() {
	    var that = this;
	
	    // remove m_id from Key-Stringlist
	    var keys = [];
	    var newKeys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e2) {
	    	console.error("ERROR in " + that.name + ".deleteSorted: " + e2);
	    }
	    if (keys) {
	        _.each(keys, function(k) {
	        	if (k !== that.m_id) {
	        		newKeys.push(k);
	        	}
	        });
		    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(newKeys));
	    }
	
	    return that.del();
	}
	
	, saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	
	, findSorted: function(bautagesberichtId) {
	    var that = this;
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e4) {
	    	console.error("ERROR in " + that.name + ".findSorted: " + e4);
	    }
	
	    var records = [];
	
	    if (keys) {
	        _.each(keys, function(k) {
	        	var loadedItem = that.find({key:DigiWebApp.ApplicationController.storagePrefix + that.name + '_' + k});
	        	if ( (bautagesberichtId && loadedItem.get("bautagesberichtId") === bautagesberichtId) || (typeof(bautagesberichtId) === "undefined") ) {
		            records.push(loadedItem);
	        	}
	        });
	    }
	    return records;
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: BautagebuchMaterialgruppe
// 
// zu bestücken mittels WebService
// ==========================================================================

DigiWebApp.BautagebuchMaterialgruppe = M.Model.create({
    
    /* Define the name of your model. Do not delete this property! */
    __name__: 'BautagebuchMaterialgruppe'

    , id: M.Model.attr('String', {
        isRequired: NO
    })
    
    , vaterId: M.Model.attr('String', {
        isRequired: NO
    })
    
    , bezeichnung: M.Model.attr('String', {
        isRequired: NO
    })

	, getMaterialien: function() {
		var that = this;
		return _.filter(DigiWebApp.BautagebuchMaterial.findSorted(), function(mat) {
			var foundIndex = _.find(JSON.parse(mat.get('materialgruppenIds')), function(myId) {
				return (that.get('id') == myId);
			});
			return (foundIndex);
		});
	}

	, getList: function(paramObj) {
		if (!paramObj) paramObj = {};
		var that = this;
		var resultList = [];
		var items = DigiWebApp[that.name].findSorted();
		var itemSelected = NO;
		_.each(items, function(obj){
			var item = { label: obj.get('bezeichnung'), value: obj.get('id') };
			if ((paramObj.selectedId && obj.get('id') == paramObj.selectedId) || items.length == 1) {
				item.isSelected = YES;
				itemSelected = YES;
			}
			resultList.push(item);
		});
		resultList.push({label: M.I18N.l('alle'), value: '0', isSelected:!itemSelected});
		return resultList;
	}

	, deleteAll: function() {
        _.each(this.find(), function(el) {
    		el.deleteSorted();
        });
    }

	, deleteSorted: function() {
	    var that = this;
	
	    // remove m_id from Key-Stringlist
	    var keys = [];
	    var newKeys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e2) {
	    	console.error("ERROR in " + that.name + ".deleteSorted: " + e2);
	    }
	    if (keys) {
	        _.each(keys, function(k) {
	        	if (k !== that.m_id) {
	        		newKeys.push(k);
	        	}
	        });
		    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(newKeys));
	    }
	
	    return that.del();
	}
	
	, saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	
	, findSorted: function() {
	    var that = this;
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e4) {
	    	console.error("ERROR in " + that.name + ".findSorted: " + e4);
	    }
	
	    var records = [];
	
	    if (keys) {
	        _.each(keys, function(k) {
	            records.push(that.find({key:DigiWebApp.ApplicationController.storagePrefix + that.name + '_' + k}));
	        });
	    }
	    return records;
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: BautagebuchMaterialtyp
// 
// zu bestücken mittels WebService
// ==========================================================================

DigiWebApp.BautagebuchMaterialtyp = M.Model.create({
    
    /* Define the name of your model. Do not delete this property! */
    __name__: 'BautagebuchMaterialtyp'

    , id: M.Model.attr('String', {
        isRequired: NO
    })
    
    , bezeichnung: M.Model.attr('String', {
        isRequired: NO
    })

	, getMaterialien: function() {
		var that = this;
		return _.filter(DigiWebApp.BautagebuchMaterial.findSorted(), function(mat) {
			var foundIndex = _.find([JSON.parse(mat.get('materialtypId'))], function(myId) {
				return (that.get('id') == myId);
			});
			return (foundIndex);
		});
	}

	, getList: function(paramObj) {
		if (!paramObj) paramObj = {};
		var that = this;
		var resultList = [];
		var items = DigiWebApp[that.name].findSorted();
		var itemSelected = NO;
		_.each(items, function(obj){
			var item = { label: obj.get('bezeichnung'), value: obj.get('id') };
			if ((paramObj.selectedId && obj.get('id') == paramObj.selectedId) || items.length == 1) {
				item.isSelected = YES;
				itemSelected = YES;
			}
			resultList.push(item);
		});
		resultList.push({label: M.I18N.l('alle'), value: '0', isSelected:!itemSelected});
		return resultList;
	}
	
    , deleteAll: function() {
        _.each(this.find(), function(el) {
    		el.deleteSorted();
        });
    }

	, deleteSorted: function() {
	    var that = this;
	
	    // remove m_id from Key-Stringlist
	    var keys = [];
	    var newKeys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e2) {
	    	console.error("ERROR in " + that.name + ".deleteSorted: " + e2);
	    }
	    if (keys) {
	        _.each(keys, function(k) {
	        	if (k !== that.m_id) {
	        		newKeys.push(k);
	        	}
	        });
		    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(newKeys));
	    }
	
	    return that.del();
	}
	
	, saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	
	, findSorted: function() {
	    var that = this;
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e4) {
	    	console.error("ERROR in " + that.name + ".findSorted: " + e4);
	    }
	
	    var records = [];
	
	    if (keys) {
	        _.each(keys, function(k) {
	            records.push(that.find({key:DigiWebApp.ApplicationController.storagePrefix + that.name + '_' + k}));
	        });
	    }
	    return records;
	}

}, M.DataProviderLocalStorage);

"use strict";
// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: BautagebuchMediaFile
// ==========================================================================
DigiWebApp.BautagebuchMediaFile = M.Model.create({

    /* Define the name of your model. Do not delete this property! */
    __name__: 'BautagebuchMediaFile'

    , name: M.Model.attr('String',{
    	isRequired: NO
    })

    , bautagesberichtId: M.Model.attr('String', {
        isRequired: NO
    })

    , positionId: M.Model.attr('String', {
        isRequired: NO
    })

    , positionName: M.Model.attr('String',{
        isRequired: NO
    })

    , handOrderId: M.Model.attr('String', {
        isRequired: NO
    })

    , handOrderName: M.Model.attr('String',{
        isRequired: NO
    })

    , activityId: M.Model.attr('String', {
        isRequired: NO
    })

    , activityName: M.Model.attr('String',{
        isRequired: NO
    })

    , fileName: M.Model.attr('String', {
        isRequired: NO
    })

    , fileType: M.Model.attr('String', {
        isRequired: YES
    })

    , timeStamp: M.Model.attr('String', {
        isRequired: NO
    })

    , date: M.Model.attr('String', { // is aggregated by the timestamp value above

    })

    , icon: M.Model.attr('String',{
        isRequired: NO
    })
    
    , latitude: M.Model.attr('String', {
        isRequired:NO
    })

    , longitude: M.Model.attr('String', {
        isRequired: NO
    })
    
    , mitarbeiterId: M.Model.attr('String', {
        isRequired: NO
    })    

    , remark: M.Model.attr('String', {
        isRequired: NO
    })

    , data: M.Model.attr('String',{
    	isRequired: NO
    })

    , setRemark: function(v) {
        this.set('remark', v);
    }

    , writeError: M.Model.attr('Boolean', {
        isRequired: NO
    })
    
    , deleteAll: function() {
		var that = this;
	    _.each(that.find(), function(el) {
			el.deleteSorted();
	    });
	}
		
	, hasFileName: function() {
    	var that = this;
		if ((!(that.get('fileName'))) || (that.get('fileName') && (that.get('fileName').length === 0))) {
			return NO;
		} else {
			return YES;
		}
    	
    }
    
	, saveToFile: function(myWriteContent, successCallback, myErrorCallback) {		
		var that = this;
		var writeContent = new String(myWriteContent);
		
		// check if fileName is set
		//if ((!(that.get('fileName'))) || (that.get('fileName') && (that.get('fileName').length === 0))) {
		if (!that.hasFileName()) {
			that.set('fileName', that.__proto__.name + '_' + D8.now().getTimestamp());
			that.save();
	    }
	
		// check for successCallback is a function
		if (typeof successCallback !== "function") {
			console.error("saveToFileError: successCallback is not a function");
	        return false;
	    }
	
		// check for errorCallback is a function (optional)
		var errorCallback;
	    if (!myErrorCallback || (typeof myErrorCallback !== "function")) {
	    	errorCallback = function(evt) {
	    		console.error("saveToFileError", evt);
	    	};
	    } else {
	    	errorCallback = myErrorCallback;
	    }
		
		// check if LocalFileSystem is defined
		if (typeof window.requestFileSystem === "undefined") {
			console.error("saveToFileError: no LocalFileSystem available");
			successCallback("");
	        return true;
	    }
	
		try {
			var myQuota = DigiWebApp.ApplicationController.CONSTApplicationQuota;
		    // open filesystem
			if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
				navigator.webkitPersistentStorage.requestQuota(myQuota, function(grantedBytes) {
				    window.requestFileSystem(PERSISTENT, grantedBytes, function(fileSystem) {
				    	
				    	// get dataDirectory from filesystem (create if not exists)
				    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
				
					    	// get fileEntry from filesystem (create if not exists)
					    	dataDirectory.getFile(that.get("fileName"), {create: true, exclusive: false}, function(fileEntry) {
				
					    		fileEntry.createWriter(function(writer) {
					    				
					    			writer.onerror = function(evt) {
					    				console.error("writeError", evt);
					    				errorCallback(evt);
					    			};
					    			
					    			writer.onwriteend = function(evt) {
						    			writer.onwriteend = function(ev) {
					    					successCallback(ev);
						    			};
					    				writer.truncate(writeContent.length);
					    	        };
					    	        // Create a new Blob and write it to log.txt.
					    	        var blob = new Blob([writeContent], {type: 'text/plain'});
					    	        
				    	        	writer.write(blob);
				
					    		}, errorCallback); // fileEntry.createWriter
					   		}, errorCallback);     // dataDirectory.getFile
					   	}, errorCallback);         // fileSystem.root.getDirectory
				    }, errorCallback);             // window.requestFileSystem
				}, function(e) {
					  console.error('Error while requesting Quota', e);
	  		            DigiWebApp.ApplicationController.nativeAlertDialogView({
			                title: M.I18N.l('error')
			              , message: M.I18N.l('errorWhileRequestingQuota') + ": " + err
			            });	    		        					
				});
	
			} else {
		    
			    window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
			    	
			    	// get dataDirectory from filesystem (create if not exists)
			    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
			
				    	// get fileEntry from filesystem (create if not exists)
				    	dataDirectory.getFile(that.get("fileName"), {create: true, exclusive: false}, function(fileEntry) {
			
				    		fileEntry.createWriter(function(writer) {
				    				
				    			writer.onerror = function(evt) {
				    				console.error("writeError", evt);
				    				errorCallback(evt);
				    			};
				    			
				    			writer.onwriteend = function(evt) {
					    			writer.onwriteend = function(ev) {
				    					successCallback(ev);
					    			};
				    				writer.truncate(writeContent.length);
				    	        };
				    	        
			    	        	writer.write(writeContent.toString());
			
				    		}, errorCallback); // fileEntry.createWriter
				   		}, errorCallback);     // dataDirectory.getFile
				   	}, errorCallback);         // fileSystem.root.getDirectory
			    }, errorCallback);             // window.requestFileSystem
			}
		} catch(e3) {
			errorCallback(e3);
		}
	
	}
	
	, readFromFile: function(successCallback, myErrorCallback) {
		var that = this;
		
		// check for errorCallback is a function (optional)
		var errorCallback;
	    if (!myErrorCallback || (typeof myErrorCallback !== "function")) {
	    	errorCallback = function(evt) {
	    		console.error("readFromFileError", evt);
	    	};
	    } else {
	    	errorCallback = myErrorCallback;
	    }
	    
		// check for successCallback is a function
		if (typeof successCallback !== "function") {
			console.error("readFromFileError: successCallback is not a function");
	        return false;
	    }
		
		// check if fileName is set
		//if ((!(that.get('fileName'))) || (that.get('fileName') && (that.get('fileName').length === 0))) {
		if (!that.hasFileName()) {
			console.error("readFromFileError: no fileName given");
			errorCallback();
	        return false;
	    }
	    
		// check if LocalFileSystem is defined
		if (typeof window.requestFileSystem === "undefined") {
			console.error("readFromFileError: no LocalFileSystem available");
			successCallback("");
	        return true;
	    }
		
		try {
			var myQuota = DigiWebApp.ApplicationController.CONSTApplicationQuota;
		    // open filesystem
			if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
				navigator.webkitPersistentStorage.requestQuota(myQuota, function(grantedBytes) {
				    window.requestFileSystem(PERSISTENT, grantedBytes, function(fileSystem) {
				
				    	// get dataDirectory from filesystem (create if not exists)
				    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
					    			
					    	// get fileEntry from filesystem
					    	dataDirectory.getFile(that.get("fileName"), null, function(fileEntry) {
					    		
					    		// get file from fileEntry
					    		fileEntry.file(function(file) {
					    			
					    			// read from file
					    			var reader = new FileReader();
					    			reader.onloadend = function(evt) {
					    		    	
					    		    	// return content via successCallback
					    				successCallback(this.result);
					    				
					    	        };
					    			reader.readAsText(file);
					    	        
					        	}, errorCallback); // fileEntry.file
					    	}, errorCallback);     // dataDirectory.getFile
					    }, errorCallback);         // fileSystem.root.getDirectory
				    }, errorCallback);             // window.requestFileSystem
				}, function(e) {
					  console.error('Error while requesting Quota', e);
	  		            DigiWebApp.ApplicationController.nativeAlertDialogView({
			                title: M.I18N.l('error')
			              , message: M.I18N.l('errorWhileRequestingQuota') + ": " + err
			            });	    		        					
				});
			} else {
	
			    window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
					
			    	// get dataDirectory from filesystem (create if not exists)
			    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
				    			
				    	// get fileEntry from filesystem
				    	dataDirectory.getFile(that.get("fileName"), null, function(fileEntry) {
				    		
				    		// get file from fileEntry
				    		fileEntry.file(function(file) {
				    			
				    			// read from file
				    			var reader = new FileReader();
				    			reader.onloadend = function(evt) {
				    		    	
				    		    	// return content via successCallback
				    				successCallback(evt.target.result);
				    				
				    	        };
				    			reader.readAsText(file);
				    	        
				        	}, errorCallback); // fileEntry.file
				    	}, errorCallback);     // dataDirectory.getFile
				    }, errorCallback);         // fileSystem.root.getDirectory
			    }, errorCallback);             // window.requestFileSystem
			}
		} catch(e4) {
			errorCallback(e4);
		}
	}
	
	, deleteFile: function(successCallback, myErrorCallback) {
		var that = this;
		
		// check if fileName is set
		//if ((!(that.get('fileName'))) || (that.get('fileName') && (that.get('fileName').length === 0))) {
		if (!that.hasFileName()) {
			console.error("deleteFileError: no fileName given");
	        return false;
	    }
	
		// check for successCallback is a function
		if (typeof successCallback !== "function") {
			console.error("deleteFileError: successCallback is not a function");
	        return false;
	    }
		
		// check for errorCallback is a function (optional)
		var errorCallback;
	    if (!myErrorCallback || (typeof myErrorCallback !== "function")) {
	    	errorCallback = function(evt) {
	    		console.error("deleteFileError", evt);
	    	};
	    } else {
	    	errorCallback = myErrorCallback;
	    }
	    
		// check if LocalFileSystem is defined
		if (typeof window.requestFileSystem === "undefined") {
			console.error("deleteFileError: no LocalFileSystem available");
			successCallback("");
	        return true;
	    }
	
		try {
			var myQuota = DigiWebApp.ApplicationController.CONSTApplicationQuota;
		    // open filesystem
			if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
				navigator.webkitPersistentStorage.requestQuota(myQuota, function(grantedBytes) {
					window.requestFileSystem(PERSISTENT, grantedBytes, function(fileSystem) {
						
				    	// get dataDirectory from filesystem (create if not exists)
				    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
					    			
					    	// get fileEntry from filesystem
					    	dataDirectory.getFile(that.get("fileName"), null, function(fileEntry) {
					    		
					    		// remove fileEntry
					    		fileEntry.remove(successCallback, errorCallback);
					    		
					    	}, errorCallback);     // dataDirectory.getFile
					    }, errorCallback);         // fileSystem.root.getDirectory
				    }, errorCallback);             // window.requestFileSystem
				}, function(e) {
					  console.error('Error while requesting Quota', e);
	  		            DigiWebApp.ApplicationController.nativeAlertDialogView({
			                title: M.I18N.l('error')
			              , message: M.I18N.l('errorWhileRequestingQuota') + ": " + err
			            });	    		        					
				});
			} else {
				window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
			
			    	// get dataDirectory from filesystem (create if not exists)
			    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
				    			
				    	// get fileEntry from filesystem
				    	dataDirectory.getFile(that.get("fileName"), null, function(fileEntry) {
				    		
				    		// remove fileEntry
				    		fileEntry.remove(successCallback, errorCallback);
				    		
				    	}, errorCallback);     // dataDirectory.getFile
				    }, errorCallback);         // fileSystem.root.getDirectory
			    }, errorCallback);             // window.requestFileSystem
			}
		} catch(e5) {
			errorCallback(e5);
		}
	}

	, deleteSorted: function() {
	    var that = this;
	
	    // remove m_id from Key-Stringlist
	    var keys = [];
	    var newKeys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e6) {
	    	console.error("ERROR in " + that.name + ".deleteSorted: " + e6);
	    }
	    if (keys) {
	        _.each(keys, function(k) {
	        	if (k !== that.m_id) {
	        		newKeys.push(k);
	        	}
	        });
		    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(newKeys));
	    }
	
        if (that.hasFileName()) {
	    	// delete mediafile from device
        	that.deleteFile(function(n){
		    	// delete record from localStorage only if file
	    		// was deleted successfully from device
	    		return that.del();
	    	});
    	} else {
    		// there is no file to delete, so delete the record
    		return that.del();
    	}	    
	}
	
	, saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e7) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e7);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	
	, findSorted: function(bautagesberichtId) {
	    var that = this;
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e8) {
	    	console.error("ERROR in " + that.name + ".findSorted: " + e8);
	    }
	
	    var records = [];
	
	    if (keys) {
	        _.each(keys, function(k) {
	        	var loadedItem = that.find({key:DigiWebApp.ApplicationController.storagePrefix + that.name + '_' + k});
	        	if ( (bautagesberichtId && loadedItem.get("bautagesberichtId") === bautagesberichtId) || (typeof(bautagesberichtId) === "undefined") ) {
		            records.push(loadedItem);
	        	}
	        });
	    }
	    return records;
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: BautagebuchMengeneinheit
// 
// zu bestücken mittels WebService
// ==========================================================================

DigiWebApp.BautagebuchMengeneinheit = M.Model.create({
    
    /* Define the name of your model. Do not delete this property! */
    __name__: 'BautagebuchMengeneinheit'

    , id: M.Model.attr('String', {
        isRequired: NO
    })
    
    , kuerzel: M.Model.attr('String', {
        isRequired: NO
    })

	, getMaterialien: function() {
		var that = this;
		return _.filter(DigiWebApp.BautagebuchMaterial.findSorted(), function(mat) {
			var foundIndex = _.find(JSON.parse(mat.get('einheitenIds')), function(myId) {
				return (that.get('id') == myId);
			});
			return (foundIndex);
		});
	}

	, getList: function(paramObj) {
		if (!paramObj) paramObj = {};
		var that = this;
		var resultList = [];
		var items = null;
		if (paramObj.items) {
			items = paramObj.items;
		} else {
			items = DigiWebApp[that.name].findSorted();
		}
		var itemSelected = NO;
		_.each(items, function(obj){
			var item = { label: obj.get('kuerzel'), value: obj.get('id') };
			if ((paramObj.selectedId && obj.get('id') == paramObj.selectedId) || items.length == 1) {
				item.isSelected = YES;
				itemSelected = YES;
			}
			resultList.push(item);
		});
		if (!itemSelected && resultList.length > 0) {
			resultList.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:YES});
		} else if (resultList.length == 0) {
			resultList.push({label: M.I18N.l('noData'), value: '0', isSelected:YES});
		}
		return resultList;
	}
	
    , getById: function(selectedId) {
		var that = this;
		return _.find(DigiWebApp[that.name].find(), function(item) {
			return (item.get('id') == selectedId);
		});
	}

    , deleteAll: function() {
        _.each(this.find(), function(el) {
    		el.deleteSorted();
        });
    }

	, deleteSorted: function() {
	    var that = this;
	
	    // remove m_id from Key-Stringlist
	    var keys = [];
	    var newKeys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e2) {
	    	console.error("ERROR in " + that.name + ".deleteSorted: " + e2);
	    }
	    if (keys) {
	        _.each(keys, function(k) {
	        	if (k !== that.m_id) {
	        		newKeys.push(k);
	        	}
	        });
		    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(newKeys));
	    }
	
	    return that.del();
	}
	
	, saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	
	, findSorted: function(idToFind) {
	    var that = this;
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e4) {
	    	console.error("ERROR in " + that.name + ".findSorted: " + e4);
	    }
	
	    var records = [];
	
	    if (keys) {
	        _.each(keys, function(k) {
	        	var item = that.find({key:DigiWebApp.ApplicationController.storagePrefix + that.name + '_' + k});
	        	if ( (idToFind && item.get("id") === idToFind) || (typeof(idToFind) === "undefined") ) {
	        		records.push(item);
	        	}
	        });
	    }
	    return records;
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: BautagebuchMitarbeiter
// 
// zu bestücken mittels WebService
// ==========================================================================

DigiWebApp.BautagebuchMitarbeiter = M.Model.create({
    
    /* Define the name of your model. Do not delete this property! */
    __name__: 'BautagebuchMitarbeiter'

    , id: M.Model.attr('Number', {
        isRequired: NO
    })

    , vorname: M.Model.attr('String', {
        isRequired: NO
    })

    , nachname: M.Model.attr('String', {
        isRequired: NO
    })
    
    , webAppId: M.Model.attr('String', {
        isRequired: NO
    })

    , webAppPin: M.Model.attr('String', {
        isRequired: NO
    })

    , projektleiterId: M.Model.attr('Number', {
        isRequired: NO
    })

    , vollername: function() {
        return this.get("vorname") + " " + this.get("nachname");
    }

    , deleteAll: function() {
        _.each(this.find(), function(el) {
    		el.deleteSorted();
        });
    }

	, deleteSorted: function() {
	    var that = this;
	
	    // remove m_id from Key-Stringlist
	    var keys = [];
	    var newKeys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e2) {
	    	console.error("ERROR in " + that.name + ".deleteSorted: " + e2);
	    }
	    if (keys) {
	        _.each(keys, function(k) {
	        	if (k !== that.m_id) {
	        		newKeys.push(k);
	        	}
	        });
		    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(newKeys));
	    }
	
	    return that.del();
	}
	
	, saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	
	, findSorted: function() {
	    var that = this;
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e4) {
	    	console.error("ERROR in " + that.name + ".findSorted: " + e4);
	    }
	
	    var records = [];
	
	    if (keys) {
	        _.each(keys, function(k) {
	            records.push(that.find({key:DigiWebApp.ApplicationController.storagePrefix + that.name + '_' + k}));
	        });
	    }
	    return records;
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: BautagebuchNotiz
// ==========================================================================

DigiWebApp.BautagebuchNotiz = M.Model.create({
    
    /* Define the name of your model. Do not delete this property! */
    __name__: 'BautagebuchNotiz'

    , bautagesberichtId: M.Model.attr('String', {
        isRequired: NO
    })

    , data: M.Model.attr('String', {
        isRequired: NO
    })

    , positionId: M.Model.attr('String', {
        isRequired: NO
    })

    , positionName: M.Model.attr('String',{
        isRequired: NO
    })

    , activityId: M.Model.attr('String', {
        isRequired: NO
    })

    , activityName: M.Model.attr('String',{
        isRequired: NO
    })

    , handOrderId: M.Model.attr('String', {
        isRequired: NO
    })

    , handOrderName: M.Model.attr('String',{
        isRequired: NO
    })

    , deleteAll: function() {
        _.each(this.find(), function(el) {
    		el.deleteSorted();
        });
    }

	, deleteSorted: function() {
	    var that = this;
	
	    // remove m_id from Key-Stringlist
	    var keys = [];
	    var newKeys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e2) {
	    	console.error("ERROR in " + that.name + ".deleteSorted: " + e2);
	    }
	    if (keys) {
	        _.each(keys, function(k) {
	        	if (k !== that.m_id) {
	        		newKeys.push(k);
	        	}
	        });
		    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(newKeys));
	    }
	
	    return that.del();
	}
	
	, saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	
	, findSorted: function(bautagesberichtId) {
	    var that = this;
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e4) {
	    	console.error("ERROR in " + that.name + ".findSorted: " + e4);
	    }
	
	    var records = [];
	
	    if (keys) {
	        _.each(keys, function(k) {
	        	var loadedItem = that.find({key:DigiWebApp.ApplicationController.storagePrefix + that.name + '_' + k});
	        	if ( (bautagesberichtId && loadedItem.get("bautagesberichtId") === bautagesberichtId) || (typeof(bautagesberichtId) === "undefined") ) {
		            records.push(loadedItem);
	        	}
	        });
	    }
	    return records;
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: BautagebuchProjektleiter
// 
// zu bestücken mittels WebService (alle Gruppenführer)
// ==========================================================================

DigiWebApp.BautagebuchProjektleiter = M.Model.create({
    
    /* Define the name of your model. Do not delete this property! */
    __name__: 'BautagebuchProjektleiter'

    , id: M.Model.attr('Number', {
        isRequired: NO
    })

    , vorname: M.Model.attr('String', {
        isRequired: NO
    })

    , nachname: M.Model.attr('String', {
        isRequired: NO
    })

    , vollername: function() {
		return this.get("vorname") + " " + this.get("nachname");
    }

	, getList: function(paramObj) {
		if (!paramObj) paramObj = {};
		var that = this;
		var resultList = [];
		var items = DigiWebApp[that.name].findSorted();
		var itemSelected = NO;
		_.each(items, function(obj){
			var item = { label: obj.get('vollername'), value: obj.get('id') };
			if ((paramObj.selectedId && obj.get('id') == paramObj.selectedId) || items.length == 1) {
				item.isSelected = YES;
				itemSelected = YES;
			}
			resultList.push(item);
		});
		if (!itemSelected && resultList.length > 0) {
			resultList.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:YES});
		} else if (resultList.length == 0) {
			resultList.push({label: M.I18N.l('noData'), value: '0', isSelected:YES});
		}
		return resultList;
	}
	
    , deleteAll: function() {
        _.each(this.find(), function(el) {
    		el.deleteSorted();
        });
    }

	, deleteSorted: function() {
	    var that = this;
	
	    // remove m_id from Key-Stringlist
	    var keys = [];
	    var newKeys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e2) {
	    	console.error("ERROR in " + that.name + ".deleteSorted: " + e2);
	    }
	    if (keys) {
	        _.each(keys, function(k) {
	        	if (k !== that.m_id) {
	        		newKeys.push(k);
	        	}
	        });
		    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(newKeys));
	    }
	
	    return that.del();
	}
	
	, saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	
	, findSorted: function() {
	    var that = this;
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e4) {
	    	console.error("ERROR in " + that.name + ".findSorted: " + e4);
	    }
	
	    var records = [];
	
	    if (keys) {
	        _.each(keys, function(k) {
	            records.push(that.find({key:DigiWebApp.ApplicationController.storagePrefix + that.name + '_' + k}));
	        });
	    }
	    return records;
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: BautagebuchZeitbuchung
// ==========================================================================

DigiWebApp.BautagebuchZeitbuchung = M.Model.create({
    
    /* Define the name of your model. Do not delete this property! */
    __name__: 'BautagebuchZeitbuchung'

    , id: M.Model.attr('Number', {
        isRequired: NO
    })
    
    , bautagesberichtId: M.Model.attr('String', {
        isRequired: NO
    })
    
    , mitarbeiterIds: M.Model.attr('String', {
        isRequired: NO
    })

    , mitarbeiterId: M.Model.attr('String', {
    	// runtime only (für das senden)
        isRequired: NO
    })

    , von: M.Model.attr('String', {
        isRequired: NO
    })

    , bis: M.Model.attr('String', {
        isRequired: NO
    })

    , dauer: M.Model.attr('String', {
        isRequired: NO
    })

    , remark: M.Model.attr('String', {
        isRequired: NO
    })

    , timeStampStart: M.Model.attr('String', {
    	// wird nach Abschluss eines Bautageberichtes berechnet (dient nur der Übertragung)
        isRequired: NO
    })

    , timeStampEnd: M.Model.attr('String', {
    	// wird nach Abschluss eines Bautageberichtes berechnet (dient nur der Übertragung)
        isRequired: NO
    })

    , verbuchen: M.Model.attr('String', {
        isRequired:NO
    })

    , latitude: M.Model.attr('String', {
        isRequired:NO
    })

    , longitude: M.Model.attr('String', {
        isRequired: NO
    })

    , latitude_bis: M.Model.attr('String', {
        isRequired:NO
    })

    , longitude_bis: M.Model.attr('String', {
        isRequired: NO
    })

    , positionId: M.Model.attr('String',{
        isRequired: NO
    })

    , positionName: M.Model.attr('String',{
        isRequired: NO
    })

    , handOrderId: M.Model.attr('String', {
        isRequired: NO
    })

    , handOrderName: M.Model.attr('String',{
        isRequired: NO
    })

    , activityId: M.Model.attr('String', {
        isRequired: NO
    })

    , activityName: M.Model.attr('String',{
        isRequired: NO
    })

    , deleteAll: function() {
        _.each(this.find(), function(el) {
    		el.deleteSorted();
        });
    }

	, deleteSorted: function() {
	    var that = this;
	
	    // remove m_id from Key-Stringlist
	    var keys = [];
	    var newKeys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e2) {
	    	console.error("ERROR in " + that.name + ".deleteSorted: " + e2);
	    }
	    if (keys) {
	        _.each(keys, function(k) {
	        	if (k !== that.m_id) {
	        		newKeys.push(k);
	        	}
	        });
		    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(newKeys));
	    }
	
	    return that.del();
	}
	
	, saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	
	, findSorted: function(bautagesberichtId) {
	    var that = this;
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e4) {
	    	console.error("ERROR in " + that.name + ".findSorted: " + e4);
	    }
	
	    var records = [];
	
	    if (keys) {
	        _.each(keys, function(k) {
	        	var loadedItem = that.find({key:DigiWebApp.ApplicationController.storagePrefix + that.name + '_' + k});
	        	if ( (bautagesberichtId && loadedItem.get("bautagesberichtId") === bautagesberichtId) || (typeof(bautagesberichtId) === "undefined") ) {
		            records.push(loadedItem);
	        	}
	        });
	    }
	    return records;
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: Booking
// ==========================================================================

DigiWebApp.Booking = M.Model.create({

    /* Define the name of your model. Do not delete this property! */
    __name__: 'Booking'

    , modelVersion: M.Model.attr('String', {
        isRequired: NO
    })

    , fileName: M.Model.attr('String', {
        isRequired: NO
    })

    , fileType: M.Model.attr('String', {
        isRequired: NO
    })

    , orderId: M.Model.attr('String',{
        isRequired: NO
    })

    , orderName: M.Model.attr('String',{
        isRequired: NO
    })

    , timezoneOffset: M.Model.attr('String', {
        isRequired: NO
    })

    , timezone: M.Model.attr('String', {
        isRequired: NO
    })

    , timeStampStart: M.Model.attr('String', {
        isRequired: NO
    })
    
    , timeStampEnd: M.Model.attr('String', {
        isRequired: NO
    })

    , date: M.Model.attr('String', { // is aggregated by the two timestamp values above

    })

    , startTimeString: M.Model.attr('String', {
        isRequired: NO
    })

    , endeTimeString: M.Model.attr('String', {
        isRequired: NO
    })

    , startDateString: M.Model.attr('String', {
        isRequired: NO
    })

    , endeDateString: M.Model.attr('String', {
        isRequired: NO
    })

    , latitude: M.Model.attr('String', {
        isRequired:NO
    })

    , longitude: M.Model.attr('String', {
        isRequired: NO
    })

    , latitude_bis: M.Model.attr('String', {
        isRequired:NO
    })

    , longitude_bis: M.Model.attr('String', {
        isRequired: NO
    })

    , gpsLaengeVon: M.Model.attr('String', {
    	// runtime only (für das senden)
        isRequired: NO
    })

    , gpsBreiteVon: M.Model.attr('String', {
    	// runtime only (für das senden)
        isRequired: NO
    })

    , gpsLaengeBis: M.Model.attr('String', {
    	// runtime only (für das senden)
        isRequired: NO
    })

    , gpsBreiteBis: M.Model.attr('String', {
    	// runtime only (für das senden)
        isRequired: NO
    })

    , handOrderId: M.Model.attr('String', {
        isRequired: NO
    })

    , handOrderName: M.Model.attr('String', {
        isRequired: NO
    })

    , handauftragsId: M.Model.attr('String', {
        isRequired: NO
    })

    , handauftragsBezeichnung: M.Model.attr('String', {
        isRequired: NO
    })

    , positionId: M.Model.attr('String', {
        isRequired: NO
    })

    , positionName: M.Model.attr('String',{
        isRequired: NO
    })

    , activityId: M.Model.attr('String', {
        isRequired: NO
    })

    , activityName: M.Model.attr('String',{
        isRequired: NO
    })

    , isCurrent: M.Model.attr('Boolean', {
        isRequired: NO
    })
    
    , spesenAuswahl: M.Model.attr('String', {
        isRequired: NO
    })

    , uebernachtungAuswahl: M.Model.attr('String', {
        isRequired: NO
    })

    , gefahreneKilometer: M.Model.attr('Number', {
        isRequired: NO
    })

    , employees: M.Model.attr('String', {
        isRequired: NO
    })

    , mitarbeiterId: M.Model.attr('String', {
    	// runtime only (für das senden)
        isRequired: NO
    })
    
    , remark: M.Model.attr('String', {
        isRequired: NO
    })

    , unterschrift_hoehe: M.Model.attr('String', {
        isRequired: NO
    })

    , unterschrift_breite: M.Model.attr('String', {
        isRequired: NO
    })
    
    , istFeierabend: M.Model.attr('Boolean', {
    	isRequired: NO
    })
    
    , istKolonnenbuchung: M.Model.attr('Boolean', {
    	isRequired: NO
    })
    
    , genauigkeitVon: M.Model.attr('String', {
    	isRequired: NO
    })

    , gps_zeitstempelVon: M.Model.attr('String', {
    	isRequired: NO
    })

    , ermittlungsverfahrenVon: M.Model.attr('String', {
    	isRequired: NO
    })

    , genauigkeitBis: M.Model.attr('String', {
    	isRequired: NO
    })

    , gps_zeitstempelBis: M.Model.attr('String', {
    	isRequired: NO
    })

    , ermittlungsverfahrenBis: M.Model.attr('String', {
    	isRequired: NO
    })

    , ServiceApp_Status: M.Model.attr('String', {
    	isRequired: NO
    })

    , closeBooking: function(location) {
		var that = this;
		var myTimeStampEnd = null;
		try {
			myTimeStampEnd = DigiWebApp.BookingController.currentBookingTimesStampBook.getTime();
		} catch (e2) {
			var timeEnd = new Date();
			myTimeStampEnd = timeEnd.getTime();
		}

		if (
		      (M.Date.create(that.get("timeStampStart")).format('HH:MM') == M.Date.create(myTimeStampEnd).format('HH:MM')) 
		   && ((that.get("timeStampEnd") == null) || (that.get("timeStampEnd") == "") || (parseInt(that.get("timeStampEnd")) == 0))
		
		) {

			// innerhalb einer Minute mehrfach umgebucht
	        return false;
	        
		} else if (M.Date.create(that.get("timeStampStart")).format('HH:MM:ss') == M.Date.create(myTimeStampEnd).format('HH:MM:ss')) {
			
        	var thatToLog = this;

        	// bereits abgeschlossene Buchung laden und aktualisieren, um erneut gesendet zu werden (Webservice kann damit umgehen)
        	writeToLog("bereits abgeschlossene Buchung laden und aktualisieren, um erneut gesendet zu werden (" + JSON.stringify(thatToLog));

        	// ---
			var found = _.find(DigiWebApp.Booking.find(), function(booking) {
				  return (M.Date.create(that.get("timeStampEnd")).format('HH:MM:ss') == M.Date.create(myTimeStampEnd).format('HH:MM:ss'));
			});
	        
	        if (found) {
	        	
	        	writeToLog("gefunden in Bookings");

	        	// etwaige Geokoordinaten nachtragen
	            if (found.get("latitude_bis") == null) {
	            	found.set("latitude_bis", location.latitude);
	            }
	            if (found.get("longitude_bis") == null) {
	            	found.set("longitude_bis", location.longitude);
	            }
	
	        	found.save();
	        	
	        } else {
	        	
	        	// evtl. wurde diese Buchung bereits gesendet (kann erneut gesendet werden - das wird vom Webservice erkannt (dann UPDATE statt INSERT))
	        
	            var found = _.find(DigiWebApp.SentBooking.find(), function(booking) {
					  return (M.Date.create(that.get("timeStampEnd")).format('HH:MM:ss') == M.Date.create(myTimeStampEnd).format('HH:MM:ss'));
	            });
	
	            if (found) {
	            	
		        	writeToLog("gefunden in SentBookings");

		        	// für jede gesendete gibt es (falls Freischaktung aktiv) auch eine archivierte
	                var foundSentArchived = _.find(DigiWebApp.SentBookingArchived.find(), function(booking) {
	                	return (M.Date.create(that.get("timeStampEnd")).format('HH:MM:ss') == M.Date.create(myTimeStampEnd).format('HH:MM:ss'));
	                });
	                if (foundSentArchived) {
	                	foundSentArchived.del(); // archivierte Buchung löschen (wird beim erneuten Senden wieder angelegt)
	                }
	
	                // gesendete Buchung als neue, ungesendete Buchung anlegen
		            var newUnsent = DigiWebApp.Booking.createRecord({}); // neue Buchung erzeugen
		            newUnsent.m_id = found.m_id; // Identität der Buchung kopieren
		            newUnsent.record = JSON.parse(JSON.stringify(found.record)); // Inhalt umkopieren
	
		            // etwaige Geokoordinaten nachtragen
		            if (newUnsent.get("latitude_bis") == null) {
		            	newUnsent.set("latitude_bis", location.latitude);
		            }
		            if (newUnsent.get("longitude_bis") == null) {
		            	newUnsent.set("longitude_bis", location.longitude);
		            }
	
		            newUnsent.save(); // neue Buchung speichern
		            found.del(); // bereits gesendete Buchung löschen
		            
	            } else {
	            	
	            	writeToLog("unexpectedErrorWhileHandlingBooking");
	            	writeToLog("all Bookings: " + JSON.stringify(DigiWebApp.Booking.find()));
	            	writeToLog("all SentBookings: " + JSON.stringify(DigiWebApp.SentBooking.find()));
	                DigiWebApp.ApplicationController.nativeAlertDialogView({
	                    title: M.I18N.l('error')
	                  , message: M.I18N.l('unexpectedErrorWhileHandlingBooking')
	              });
	                
	            }
	        }
        	
        	// ---
			return false;
			
		} else {
				
	        if (location) {
	        	that.set('latitude_bis',  location.latitude);
	        	that.set('longitude_bis', location.longitude);
	        }
	        that.set('timeStampEnd', myTimeStampEnd);
	
			var dateDate = new Date(Number(that.get('timeStampEnd')) + (1000 * 60 * (new Date().getTimezoneOffset() - that.get('timezoneOffset'))));
	        var dateMDate = M.Date.create(dateDate.getTime());
	        var dateString = dateMDate.format('dd.mm.yyyy');
	        var timeString = dateMDate.format('HH:MM');
	        that.set('endeDateString', dateString);
	        that.set('endeTimeString', timeString);
	        			        
	        return true;
	        
		}
    }

    , setRemark: function(v) {
        this.set('remark', v);
    }

    , setAsCurrent: function() {
        this.set('isCurrent', YES);
    }

    , removeAsCurrent: function() {
        this.set('isCurrent', NO);
    }

    , deleteAll: function() {
    	try {
			var that = this;
		    _.each(that.find(), function(el) {
				if (el.hasFileName()) {
			    	// delete signature from device
			    	try {
			    		el.deleteFile(function(n){
			    			// delete record from localStorage only if file
			    			// was deleted successfully from device
			    			el.del();	    		
			    		});
			    	} catch(e3) {
		    			el.del();	    		
			    	}
		    	} else {
		    		// there is no file to delete, so delete the record
		    		el.del();
		    	}
		    });
    	} catch(e4) { console.error(e4); }
    }
	
	, hasFileName: function() {
    	var that = this;
		if ((!(that.get('fileName'))) || (that.get('fileName') && (that.get('fileName').length === 0))) {
			return NO;
		} else {
			return YES;
		}
    	
    }
    
    , saveToFile: function(myWriteContent, successCallback, myErrorCallback) {		
		var that = this;
		var writeContent = new String(myWriteContent);
		
		// check if fileName is set
		//if ((!(that.get('fileName'))) || (that.get('fileName') && (that.get('fileName').length === 0))) {
		if (!that.hasFileName()) {
			that.set('fileName', that.__proto__.name + '_Signature_' + D8.now().getTimestamp());
			that.save();
	    }
	
		// check for successCallback is a function
		if (typeof successCallback !== "function") {
			console.error("saveToFileError: successCallback is not a function");
	        return false;
	    }
	
		// check for errorCallback is a function (optional)
		var errorCallback;
	    if (!myErrorCallback || (typeof myErrorCallback !== "function")) {
	    	errorCallback = function(evt) {
	    		console.error("saveToFileError", evt);
	    	};
	    } else {
	    	errorCallback = myErrorCallback;
	    }
		
		// check if LocalFileSystem is defined
		if (typeof window.requestFileSystem === "undefined") {
			console.error("saveToFileError: no LocalFileSystem available");
			successCallback("");
	        return true;
	    }

		try {
			var myQuota = DigiWebApp.ApplicationController.CONSTApplicationQuota;
		    // open filesystem
			if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
				navigator.webkitPersistentStorage.requestQuota(myQuota, function(grantedBytes) {
				    window.requestFileSystem(PERSISTENT, grantedBytes, function(fileSystem) {
				    	
				    	// get dataDirectory from filesystem (create if not exists)
				    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
				
					    	// get fileEntry from filesystem (create if not exists)
					    	dataDirectory.getFile(that.get("fileName"), {create: true, exclusive: false}, function(fileEntry) {
				
					    		fileEntry.createWriter(function(writer) {
					    				
					    			writer.onerror = function(evt) {
					    				console.error("writeError", evt);
					    				errorCallback(evt);
					    			};
					    			
					    			writer.onwriteend = function(evt) {
						    			writer.onwriteend = function(ev) {
					    					successCallback(ev);
						    			};
					    				writer.truncate(writeContent.length);
					    	        };
					    	        // Create a new Blob and write it to log.txt.
					    	        var blob = new Blob([writeContent], {type: 'text/plain'});
					    	        
				    	        	writer.write(blob);
				
					    		}, errorCallback); // fileEntry.createWriter
					   		}, errorCallback);     // dataDirectory.getFile
					   	}, errorCallback);         // fileSystem.root.getDirectory
				    }, errorCallback);             // window.requestFileSystem
				}, function(e) {
					  console.error('Error while requesting Quota', e);
	  		            DigiWebApp.ApplicationController.nativeAlertDialogView({
			                title: M.I18N.l('error')
			              , message: M.I18N.l('errorWhileRequestingQuota') + ": " + err
			            });	    		        					
				});

			} else {
		    
			    window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
			    	
			    	// get dataDirectory from filesystem (create if not exists)
			    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
			
				    	// get fileEntry from filesystem (create if not exists)
				    	dataDirectory.getFile(that.get("fileName"), {create: true, exclusive: false}, function(fileEntry) {
			
				    		fileEntry.createWriter(function(writer) {
				    				
				    			writer.onerror = function(evt) {
				    				console.error("writeError", evt);
				    				errorCallback(evt);
				    			};
				    			
				    			writer.onwriteend = function(evt) {
					    			writer.onwriteend = function(ev) {
				    					successCallback(ev);
					    			};
				    				writer.truncate(writeContent.length);
				    	        };
				    	        
			    	        	writer.write(writeContent.toString());
			
				    		}, errorCallback); // fileEntry.createWriter
				   		}, errorCallback);     // dataDirectory.getFile
				   	}, errorCallback);         // fileSystem.root.getDirectory
			    }, errorCallback);             // window.requestFileSystem
			}
		} catch(e5) {
			errorCallback(e5);
		}

    }
	
	, readFromFile: function(successCallback, myErrorCallback) {
		var that = this;
			
		// check for errorCallback is a function (optional)
		var errorCallback;
	    if (!myErrorCallback || (typeof myErrorCallback !== "function")) {
	    	errorCallback = function(evt) {
	    		console.error("readFromFileError", evt);
	    	};
	    } else {
	    	errorCallback = myErrorCallback;
	    }
	    
		// check for successCallback is a function
		if (typeof successCallback !== "function") {
			console.error("readFromFileError: successCallback is not a function");
	        return false;
	    }
		
		// check if fileName is set
		//if ((!(that.get('fileName'))) || (that.get('fileName') && (that.get('fileName').length === 0))) {
		if (!that.hasFileName()) {
			console.error("readFromFileError: no fileName given");
			errorCallback();
	        return false;
	    }

		// check if LocalFileSystem is defined
		if (typeof window.requestFileSystem === "undefined") {
			console.error("readFromFileError: no LocalFileSystem available");
			successCallback("");
	        return true;
	    }
		
		try {
			var myQuota = DigiWebApp.ApplicationController.CONSTApplicationQuota;
		    // open filesystem
			if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
				navigator.webkitPersistentStorage.requestQuota(myQuota, function(grantedBytes) {
				    window.requestFileSystem(PERSISTENT, grantedBytes, function(fileSystem) {
				
				    	// get dataDirectory from filesystem (create if not exists)
				    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
					    			
					    	// get fileEntry from filesystem
					    	dataDirectory.getFile(that.get("fileName"), null, function(fileEntry) {
					    		
					    		// get file from fileEntry
					    		fileEntry.file(function(file) {
					    			
					    			// read from file
					    			var reader = new FileReader();
					    			reader.onloadend = function(evt) {
					    		    	
					    		    	// return content via successCallback
					    				successCallback(this.result);
					    				
					    	        };
					    			reader.readAsText(file);
					    	        
					        	}, errorCallback); // fileEntry.file
					    	}, errorCallback);     // dataDirectory.getFile
					    }, errorCallback);         // fileSystem.root.getDirectory
				    }, errorCallback);             // window.requestFileSystem
				}, function(e) {
					  console.error('Error while requesting Quota', e);
	  		            DigiWebApp.ApplicationController.nativeAlertDialogView({
			                title: M.I18N.l('error')
			              , message: M.I18N.l('errorWhileRequestingQuota') + ": " + err
			            });	    		        					
				});
			} else {

			    window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
					
			    	// get dataDirectory from filesystem (create if not exists)
			    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
				    			
				    	// get fileEntry from filesystem
				    	dataDirectory.getFile(that.get("fileName"), null, function(fileEntry) {
				    		
				    		// get file from fileEntry
				    		fileEntry.file(function(file) {
				    			
				    			// read from file
				    			var reader = new FileReader();
				    			reader.onloadend = function(evt) {
				    		    	
				    		    	// return content via successCallback
				    				successCallback(evt.target.result);
				    				
				    	        };
				    			reader.readAsText(file);
				    	        
				        	}, errorCallback); // fileEntry.file
				    	}, errorCallback);     // dataDirectory.getFile
				    }, errorCallback);         // fileSystem.root.getDirectory
			    }, errorCallback);             // window.requestFileSystem
			}
		} catch(e6) {
			errorCallback(e6);
		}
	}
	
	, deleteFile: function(successCallback, myErrorCallback) {
		var that = this;
		
		// check if fileName is set
		//if ((!(that.get('fileName'))) || (that.get('fileName') && (that.get('fileName').length === 0))) {
		if (!that.hasFileName()) {
			console.error("deleteFileError: no fileName given");
	        return false;
	    }
	
		// check for successCallback is a function
		if (typeof successCallback !== "function") {
			console.error("deleteFileError: successCallback is not a function");
	        return false;
	    }
		
		// check for errorCallback is a function (optional)
		var errorCallback;
	    if (!myErrorCallback || (typeof myErrorCallback !== "function")) {
	    	errorCallback = function(evt) {
	    		console.error("deleteFileError", evt);
	    	};
	    } else {
	    	errorCallback = myErrorCallback;
	    }
	    
		// check if LocalFileSystem is defined
		if (typeof window.requestFileSystem === "undefined") {
			console.error("deleteFileError: no LocalFileSystem available");
			successCallback("");
	        return true;
	    }

		try {
			var myQuota = DigiWebApp.ApplicationController.CONSTApplicationQuota;
		    // open filesystem
			if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
				navigator.webkitPersistentStorage.requestQuota(myQuota, function(grantedBytes) {
					window.requestFileSystem(PERSISTENT, grantedBytes, function(fileSystem) {
						
				    	// get dataDirectory from filesystem (create if not exists)
				    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
					    			
					    	// get fileEntry from filesystem
					    	dataDirectory.getFile(that.get("fileName"), null, function(fileEntry) {
					    		
					    		// remove fileEntry
					    		fileEntry.remove(successCallback, errorCallback);
					    		
					    	}, errorCallback);     // dataDirectory.getFile
					    }, errorCallback);         // fileSystem.root.getDirectory
				    }, errorCallback);             // window.requestFileSystem
				}, function(e) {
					  console.error('Error while requesting Quota', e);
	  		            DigiWebApp.ApplicationController.nativeAlertDialogView({
			                title: M.I18N.l('error')
			              , message: M.I18N.l('errorWhileRequestingQuota') + ": " + err
			            });	    		        					
				});
			} else {
				window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
			
			    	// get dataDirectory from filesystem (create if not exists)
			    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
				    			
				    	// get fileEntry from filesystem
				    	dataDirectory.getFile(that.get("fileName"), null, function(fileEntry) {
				    		
				    		// remove fileEntry
				    		fileEntry.remove(successCallback, errorCallback);
				    		
				    	}, errorCallback);     // dataDirectory.getFile
				    }, errorCallback);         // fileSystem.root.getDirectory
			    }, errorCallback);             // window.requestFileSystem
			}
		} catch(e7) {
			errorCallback(e7);
		}
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: Employee
// ==========================================================================

DigiWebApp.Employee = M.Model.create({
    
    /* Define the name of your model. Do not delete this property! */
    __name__: 'Employee'

    , id: M.Model.attr('String', {
        isRequired: NO
    })

    , name: M.Model.attr('String', {
        isRequired: NO
    })

    , kolonnenId: M.Model.attr('String', {
        isRequired: NO
    })

    , isSelected: M.Model.attr('Boolean', {
        isRequired: NO
    })

    , deleteAll: function() {
        _.each(this.find(), function(el) {
            el.del();
        });
    }

    , findSorted: function() {
        var that = this;
        var keys = [];
        try {
            keys = JSON.parse(localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + this.name.toLowerCase() + 'Keys'));
        } catch(e2) {
        	console.error("ERROR in findSorted: " + e2);
        }

        var records = [];

        if (keys) {
            _.each(keys, function(k) {
                records.push(that.find({key:M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX + that.name + '_' + k}));
            });
        }
        return records;
    }

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: Features
// ==========================================================================

DigiWebApp.Features = M.Model.create({

    /* Define the name of your model. Do not delete this property! */
    __name__: 'Features'

    , id: M.Model.attr('String', {
        isRequired: NO
    })

    , name: M.Model.attr('String', {
        isRequired: NO
    })
    
    , isAvailable: M.Model.attr('Boolean', {
        isRequired: NO
    })
    
    , deleteAll: function() {
        _.each(this.find(), function(el) {
            el.del();
        });
    }

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: Festepausendefinition
// ==========================================================================

DigiWebApp.Festepausendefinition = M.Model.create({

    /* Define the name of your model. Do not delete this property! */
    __name__: 'Festepausendefinition'

    , id: M.Model.attr('String', {
        isRequired: YES
    })

    , ressourceId: M.Model.attr('String', {
    	isRequired: NO
    })

    , wochentagId: M.Model.attr('String', {
    	// 0 = Sonntag, 1 = Montag, ...
        isRequired: YES
    })
    
    , von: M.Model.attr('String', {
    	// "23:00"
        isRequired: NO
    })
    
    , bis: M.Model.attr('String', {
    	// "00:15"
        isRequired: NO
    })

    , deleteAll: function() {
    	var that = this;
        _.each(this.find(), function(el) {
            el.del();
        });
        localStorage.removeItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
    }

	, findById: function(queryId) {
		var foundElement = null;
		var that = this;
		$.each(that.find(),function(key, el){
			if (parseInt(queryId) === parseInt(el.get("id"))) {
				foundElement = el;
				return false; // break
			}
			return true;
		});
		return foundElement;
	}
	
    , findSorted: function() {
        var that = this;
        var keys = [];
        try {
            keys = JSON.parse(localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + this.name.toLowerCase() + 'Keys'));
        } catch(e2) {
        	console.error("ERROR in findSorted: " + e2);
        }

        var records = [];

        if (keys){
            _.each(keys, function(k) {
                records.push(that.find({key:M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX + that.name + '_' + k}));
            });
        }
        return records;
    }

    , saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null ) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: HandOrder
// ==========================================================================

DigiWebApp.HandOrder = M.Model.create({

    /* Define the name of your model. Do not delete this property! */
    __name__: 'HandOrder'

    , id: M.Model.attr('String', {
        isRequired: NO
    })

    , name: M.Model.attr('String', {
        isRequired: NO
    })

    , isLocalOnly: M.Model.attr('Boolean', {
        isRequired: NO
    })

    , deleteAll: function() {
        var bookings = DigiWebApp.Booking.find();
        var openBooking = _.detect(bookings, function(b) {
            return b.get('isCurrent') === true;
        });

        _.each(this.find(), function(el) {
            if(openBooking) {
                if(!(el.get('id') == openBooking.get('handOrderId') || el.get('name') == openBooking.get('handOrderName'))) {
                    el.del();
                }
            } else {
                el.del();
            }
        });
    }
    
    , findSorted: function() {
        var that = this;

        // Die handorderKeys stimmen nicht, daher normales find benutzen
        //TODO: handorderKeys richtig setzen, bzw. im Code suchen wo die (falsch) gesetzt werden
    	return that.find();
    	
        var keys = [];
        try {
            keys = JSON.parse(localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + this.name.toLowerCase() + 'Keys'));
        } catch(e2) {
        	console.error("ERROR in findSorted: " + e2);
        }

        var records = [];

        if (keys) {
            _.each(keys, function(k) {
            	var myKey = M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX + that.name + '_' + k;
               	//console.log(myKey);
            	var r = that.find({key:myKey});
            	//console.log(r);
                records.push(r);
            });
        }
        return records;
    }

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: MediaFile
// ==========================================================================

DigiWebApp.MediaFile = M.Model.create({

    /* Define the name of your model. Do not delete this property! */
    __name__: 'MediaFile'

    , name: M.Model.attr('String',{
    	isRequired: NO
    })

    , fileName: M.Model.attr('String', {
        isRequired: NO
    })

    , fileType: M.Model.attr('String', {
        isRequired: YES
    })

    , timeStamp: M.Model.attr('String', {
        isRequired: NO
    })

    , date: M.Model.attr('String', { // is aggregated by the two timestamp values above

    })

    , icon: M.Model.attr('String',{
        isRequired: NO
    })

    , orderId: M.Model.attr('String',{
        isRequired: NO
    })

    , orderName: M.Model.attr('String',{
        isRequired: NO
    })

    , positionId: M.Model.attr('String', {
        isRequired: NO
    })

    , positionName: M.Model.attr('String', {
        isRequired: NO
    })

    , activityId: M.Model.attr('String', {
        isRequired: NO
    })

    , activityName: M.Model.attr('String', {
        isRequired: NO
    })

    , mitarbeiterId: M.Model.attr('String', {
        isRequired: NO
    })
    
    , handOrderName: M.Model.attr('String', {
        isRequired: NO
    })

    , handOrderId: M.Model.attr('String', {
        isRequired: NO
    })
    
    , latitude: M.Model.attr('String', {
        isRequired:NO
    })

    , longitude: M.Model.attr('String', {
        isRequired: NO
    })

    , remark: M.Model.attr('String', {
        isRequired: NO
    })

    , data: M.Model.attr('String',{
    	isRequired: NO
    })

    , setRemark: function(v) {
        this.set('remark', v);
    }

    , writeError: M.Model.attr('Boolean', {
        isRequired: NO
    })
    
    , deleteAll: function(successCallback) {
		var that = this;
		var files = that.find();
		var iMax = files.length;
		var i = 0;
		var internalSuccessCallback = function(el) {
			el.del();
			i = i + 1;
			if (i === iMax && typeof(successCallback) === "function") successCallback(); 
		};
	    _.each(that.find(), function(el) {
			if (el.hasFileName()) {
		    	// delete mediafile from device
		    	el.deleteFile(function(n){
			    	// delete record from localStorage only if file
		    		// was deleted successfully from device
		    		internalSuccessCallback(el);	    		
		    	}, function() {
		    		internalSuccessCallback(el);
		    	});
	    	} else {
	    		// there is no file to delete, so delete the record
	    		internalSuccessCallback(el);
	    	}
	    });
	}
		
	, hasFileName: function() {
    	var that = this;
		if ((!(that.get('fileName'))) || (that.get('fileName') && (that.get('fileName').length === 0))) {
			return NO;
		} else {
			return YES;
		}
    	
    }
    
    , saveToFile: function(myWriteContent, successCallback, myErrorCallback) {		
		var that = this;
		var writeContent = new String(myWriteContent);
		
		// check if fileName is set
		//if ((!(that.get('fileName'))) || (that.get('fileName') && (that.get('fileName').length === 0))) {
		if (!that.hasFileName()) {
			that.set('fileName', that.__proto__.name + '_' + D8.now().getTimestamp());
			//alert("saving with fileName " + that.get("fileName"));
			that.save();
	    }
	
		// check for successCallback is a function
		if (typeof successCallback !== "function") {
			console.error("saveToFileError: successCallback is not a function");
	        return false;
	    }
	
		// check for errorCallback is a function (optional)
		var errorCallback;
	    if (!myErrorCallback || (typeof myErrorCallback !== "function")) {
	    	errorCallback = function(evt) {
	    		console.error("saveToFileError", evt);
	    	};
	    } else {
	    	errorCallback = myErrorCallback;
	    }
		
		// check if LocalFileSystem is defined
		if (typeof window.requestFileSystem === "undefined") {
			console.error("saveToFileError: no LocalFileSystem available");
			successCallback("");
	        return true;
	    }

		try {
			var myQuota = DigiWebApp.ApplicationController.CONSTApplicationQuota;
		    // open filesystem
			if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
				//alert("using navigator.webkitPersistentStorage");
				navigator.webkitPersistentStorage.requestQuota(myQuota, function(grantedBytes) {
				    window.requestFileSystem(PERSISTENT, grantedBytes, function(fileSystem) {
				    	
				    	// get dataDirectory from filesystem (create if not exists)
				    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
				
					    	// get fileEntry from filesystem (create if not exists)
					    	dataDirectory.getFile(that.get("fileName"), {create: true, exclusive: false}, function(fileEntry) {
				
					    		fileEntry.createWriter(function(writer) {
					    				
					    			writer.onerror = function(evt) {
					    				console.error("writeError", evt);
					    				errorCallback(evt);
					    			};
					    			
					    			writer.onwriteend = function(evt) {
						    			writer.onwriteend = function(ev) {
					    					successCallback(ev);
						    			};
					    				writer.truncate(writeContent.length);
					    	        };
					    	        // Create a new Blob and write it to log.txt.
					    	        var blob = new Blob([writeContent], {type: 'text/plain'});
					    	        
				    	        	writer.write(blob);
				
					    		}, errorCallback); // fileEntry.createWriter
					   		}, errorCallback);     // dataDirectory.getFile
					   	}, errorCallback);         // fileSystem.root.getDirectory
				    }, errorCallback);             // window.requestFileSystem
				}, function(e) {
					  console.error('Error while requesting Quota', e);
	  		            DigiWebApp.ApplicationController.nativeAlertDialogView({
			                title: M.I18N.l('error')
			              , message: M.I18N.l('errorWhileRequestingQuota') + ": " + err
			            });	    		        					
				});

			} else {
				//alert("using window.requestFileSystem");

			    window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
			    	
			    	// get dataDirectory from filesystem (create if not exists)
			    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
			
				    	// get fileEntry from filesystem (create if not exists)
				    	dataDirectory.getFile(that.get("fileName"), {create: true, exclusive: false}, function(fileEntry) {
			
				    		fileEntry.createWriter(function(writer) {
				    				
				    			writer.onerror = function(evt) {
				    				console.error("writeError", evt);
				    				errorCallback(evt);
				    			};
				    			
				    			writer.onwriteend = function(evt) {
					    			writer.onwriteend = function(ev) {
				    					successCallback(ev);
					    			};
				    				writer.truncate(writeContent.length);
				    	        };
				    	        
			    	        	writer.write(writeContent.toString());
			
				    		}, errorCallback); // fileEntry.createWriter
				   		}, errorCallback);     // dataDirectory.getFile
				   	}, errorCallback);         // fileSystem.root.getDirectory
			    }, errorCallback);             // window.requestFileSystem
			}
		} catch(e3) {
			errorCallback(e3);
		}

    }
	
	, readFromFile: function(successCallback, myErrorCallback) {
		var that = this;
		
		// check if fileName is set
		//if ((!(that.get('fileName'))) || (that.get('fileName') && (that.get('fileName').length === 0))) {
		if (!that.hasFileName()) {
			console.error("readFromFileError: no fileName given");
	        return false;
	    }
	
		// check for successCallback is a function
		if (typeof successCallback !== "function") {
			console.error("readFromFileError: successCallback is not a function");
	        return false;
	    }
		
		// check for errorCallback is a function (optional)
		var errorCallback;
	    if (!myErrorCallback || (typeof myErrorCallback !== "function")) {
	    	errorCallback = function(evt) {
	    		console.error("readFromFileError", evt);
	    	};
	    } else {
	    	errorCallback = myErrorCallback;
	    }
	    
		// check if LocalFileSystem is defined
		if (typeof window.requestFileSystem === "undefined") {
			console.error("readFromFileError: no LocalFileSystem available");
			successCallback("");
	        return true;
	    }
		
		try {
			var myQuota = DigiWebApp.ApplicationController.CONSTApplicationQuota;
		    // open filesystem
			if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
				//alert("using navigator.webkitPersistentStorage");
				navigator.webkitPersistentStorage.requestQuota(myQuota, function(grantedBytes) {
				    window.requestFileSystem(PERSISTENT, grantedBytes, function(fileSystem) {
				
				    	// get dataDirectory from filesystem (create if not exists)
				    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
					    			
					    	// get fileEntry from filesystem
					    	dataDirectory.getFile(that.get("fileName"), null, function(fileEntry) {
					    		
					    		// get file from fileEntry
					    		fileEntry.file(function(file) {
					    			
					    			// read from file
					    			var reader = new FileReader();
					    			reader.onloadend = function(evt) {
					    		    	
					    		    	// return content via successCallback
					    				successCallback(this.result);
					    				
					    	        };
					    			reader.readAsText(file);
					    	        
					        	}, errorCallback); // fileEntry.file
					    	}, errorCallback);     // dataDirectory.getFile
					    }, errorCallback);         // fileSystem.root.getDirectory
				    }, errorCallback);             // window.requestFileSystem
				}, function(e) {
					  console.error('Error while requesting Quota', e);
	  		            DigiWebApp.ApplicationController.nativeAlertDialogView({
			                title: M.I18N.l('error')
			              , message: M.I18N.l('errorWhileRequestingQuota') + ": " + err
			            });	    		        					
				});
			} else {

			    window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {

			    	// get dataDirectory from filesystem (create if not exists)
			    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
				    			
				    	// get fileEntry from filesystem
				    	dataDirectory.getFile(that.get("fileName"), null, function(fileEntry) {
				    		
				    		// get file from fileEntry
				    		fileEntry.file(function(file) {
				    			
				    			// read from file
				    			var reader = new FileReader();
				    			reader.onloadend = function(evt) {
				    		    	// return content via successCallback
				    				successCallback(evt.target.result);
				    				
				    	        };
				    			reader.readAsText(file);
				    	        
				        	}, errorCallback); // fileEntry.file
				    	}, errorCallback);     // dataDirectory.getFile
				    }, errorCallback);         // fileSystem.root.getDirectory
			    }, errorCallback);             // window.requestFileSystem
			}
		} catch(e4) {
			errorCallback(e4);
		}
	}
	
	, deleteFile: function(successCallback, myErrorCallback) {
		var that = this;
		
		// check if fileName is set
		//if ((!(that.get('fileName'))) || (that.get('fileName') && (that.get('fileName').length === 0))) {
		if (!that.hasFileName()) {
			console.error("deleteFileError: no fileName given");
	        return false;
	    }
	
		// check for successCallback is a function
		if (typeof successCallback !== "function") {
			console.error("deleteFileError: successCallback is not a function");
	        return false;
	    }
		
		// check for errorCallback is a function (optional)
		var errorCallback;
	    if (!myErrorCallback || (typeof myErrorCallback !== "function")) {
	    	errorCallback = function(evt) {
	    		console.error("deleteFileError", evt);
	    	};
	    } else {
	    	errorCallback = myErrorCallback;
	    }
	    
		// check if LocalFileSystem is defined
		if (typeof window.requestFileSystem === "undefined") {
			console.error("deleteFileError: no LocalFileSystem available");
			successCallback("");
	        return true;
	    }

		try {
			var myQuota = DigiWebApp.ApplicationController.CONSTApplicationQuota;
		    // open filesystem
			if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
				navigator.webkitPersistentStorage.requestQuota(myQuota, function(grantedBytes) {
					window.requestFileSystem(PERSISTENT, grantedBytes, function(fileSystem) {
						
				    	// get dataDirectory from filesystem (create if not exists)
				    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
					    			
					    	// get fileEntry from filesystem
					    	dataDirectory.getFile(that.get("fileName"), null, function(fileEntry) {
					    		
					    		// remove fileEntry
					    		fileEntry.remove(successCallback, errorCallback);
					    		
					    	}, errorCallback);     // dataDirectory.getFile
					    }, errorCallback);         // fileSystem.root.getDirectory
				    }, errorCallback);             // window.requestFileSystem
				}, function(e) {
					  console.error('Error while requesting Quota', e);
	  		            DigiWebApp.ApplicationController.nativeAlertDialogView({
			                title: M.I18N.l('error')
			              , message: M.I18N.l('errorWhileRequestingQuota') + ": " + err
			            });	    		        					
				});
			} else {
				window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
			
			    	// get dataDirectory from filesystem (create if not exists)
			    	fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
				    			
				    	// get fileEntry from filesystem
				    	dataDirectory.getFile(that.get("fileName"), null, function(fileEntry) {
				    		
				    		// remove fileEntry
				    		fileEntry.remove(successCallback, errorCallback);
				    		
				    	}, errorCallback);     // dataDirectory.getFile
				    }, errorCallback);         // fileSystem.root.getDirectory
			    }, errorCallback);             // window.requestFileSystem
			}
		} catch(e5) {
			errorCallback(e5);
		}
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: OnlinePosition
// ==========================================================================

DigiWebApp.OnlinePosition = M.Model.create({

    __name__: 'OnlinePosition'

    , positionsId: M.Model.attr('String',{
    	isRequired: NO
    })

    , auftragsBezeichnung: M.Model.attr('String', {
        isRequired: NO
    })

    , auftragsBeginn: M.Model.attr('String', {
        isRequired: NO
    })

    , auftragsEnde: M.Model.attr('String', {
        isRequired: NO
    })

    , positionsBezeichnung: M.Model.attr('String', {
        isRequired: NO
    })

    , strasse: M.Model.attr('String', {
        isRequired: NO
    })

    , hausnummer: M.Model.attr('String', {
        isRequired: NO
    })

    , plz: M.Model.attr('String', {
        isRequired: NO
    })

    , ort: M.Model.attr('String', {
        isRequired: NO
    })

    , land: M.Model.attr('String', {
        isRequired: NO
    })

    , countrycode: M.Model.attr('String', {
        isRequired: NO
    })

    , telefon: M.Model.attr('String', {
        isRequired: NO
    })

    , fax: M.Model.attr('String', {
        isRequired: NO
    })

    , email: M.Model.attr('String', {
        isRequired: NO
    })

    , ansprechpartner: M.Model.attr('String', {
        isRequired: NO
    })

    , kundenname: M.Model.attr('String', {
        isRequired: NO
    })

    , longitude: M.Model.attr('String', {
        isRequired: NO
    })

    , latitude: M.Model.attr('String', {
        isRequired: NO
    })

    , positionsBeschreibung: M.Model.attr('String', {
        isRequired: NO
    })

    , orderId: M.Model.attr('String', {
        isRequired: NO
    })

    , arbeitsbeginn: M.Model.attr('String', {
        isRequired: NO
    })
    	
    , arbeitsende: M.Model.attr('String', {
        isRequired: NO
    })
    	
    , deleteAll: function() {
        _.each(this.find(), function(el) {
            el.del();
        });
    }

}, M.DataConsumer.configure({

      appendRecords: NO

    , responsePath: 'positionen'

    , url: function(datum, mitarbeiterID) {
		var positionsId = DigiWebApp.ZeitbuchungenController.itemForDetails.get("positionsId");
		var myURL = 'http://' + DigiWebApp.RequestController.DatabaseServer + '/WebAppServices/positionen?modus=0&firmenId=' + DigiWebApp.SettingsController.getSetting('company') + '&kennwort=' + DigiWebApp.SettingsController.getSetting('password') + '&geraeteId=' + DigiWebApp.SettingsController.getSetting('workerId') + '&geraeteTyp=2&softwareVersion=' + DigiWebApp.RequestController.softwareVersion + '&positionsId=' + positionsId + '&requestTimestamp=' + M.Date.now().date.valueOf();
        if (DigiWebApp.ApplicationController.profilingIntervalVar === null) {
        	console.log('Positionen: using ' + myURL);
        }
		return myURL;
    }

    /* map needs to return record obj which can be handled by createRecord */
    , map: function(obj) {
    	if (obj === null) {
    		return {
            	positionsId: null
	      	  , positionsBezeichnung: null
	      	  , strasse: null
	      	  , hausnummer: null
	      	  , plz: null
	      	  , ort: null
	      	  , land: null
	      	  , countrycode: null
	      	  , telefon: null
	      	  , fax: null
	      	  , email: null
	      	  , ansprechpartner: null
	      	  , kundenname: null
	      	  , longitude: null
	      	  , latitude: null
	      	  , positionsBeschreibung: null
	      	  , orderId: null
	      	  , auftragsBezeichnung: null
	      	  , arbeitsbeginn: null
	      	  , arbeitsende: null
    		};
    	} 
    	//console.log(obj);
        return {
//            , id: M.Model.attr('String',{
        	positionsId: obj.positionsId
//            , name: M.Model.attr('String', {
    	  , positionsBezeichnung: obj.positionsBezeichnung
//            , strasse: M.Model.attr('String', {
    	  , strasse: obj.strasse
//            , hausnummer: M.Model.attr('String', {
    	  , hausnummer: obj.hausnummer
//            , plz: M.Model.attr('String', {
    	  , plz: obj.plz
//            , ort: M.Model.attr('String', {
    	  , ort: obj.ort
//            , land: M.Model.attr('String', {
    	  , land: obj.land
//            , countrycode: M.Model.attr('String', {
    	  , countrycode: obj.countrycode
//            , telefon: M.Model.attr('String', {
    	  , telefon: obj.telefon
//            , fax: M.Model.attr('String', {
    	  , fax: obj.fax
//            , email: M.Model.attr('String', {
    	  , email: obj.email
//            , ansprechpartner: M.Model.attr('String', {
    	  , ansprechpartner: obj.ansprechpartner
//            , kundenname: M.Model.attr('String', {
    	  , kundenname: obj.kundenname
//            , longitude: M.Model.attr('String', {
    	  , longitude: obj.longitude
//            , latitude: M.Model.attr('String', {
    	  , latitude: obj.latitude
//            , description: M.Model.attr('String', {
    	  , positionsBeschreibung: obj.positionsBeschreibung
//            , orderId: M.Model.attr('String', {
    	  , orderId: obj.orderId
    	  
    	  , auftragsBezeichnung: obj.auftragsBezeichnung

    	  , arbeitsbeginn: obj.arbeitsbeginn
    	  , arbeitsende: obj.arbeitsende

        };
    }

}));
// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: Order
// ==========================================================================

DigiWebApp.Order = M.Model.create({

    /* Define the name of your model. Do not delete this property! */
    __name__: 'Order'

    , id: M.Model.attr('String', {
        isRequired: NO
    })

    , name: M.Model.attr('String', {
        isRequired: NO
    })

    , getById: function(selectedId) {
		var that = this;
		return _.find(DigiWebApp[that.name].find(), function(item) {
			return (item.get('id') == selectedId);
		});
	}

    , getList: function(paramObj) {
		if (!paramObj) paramObj = {};
		var that = this;
		var resultList = [];
		var auftraege = DigiWebApp.Order.findSorted();
		var handauftraege = DigiWebApp.HandOrder.findSorted();
		var alleAuftraege = handauftraege.concat(auftraege);
		var itemSelected = NO;
		_.each(alleAuftraege, function(obj){
    		var item = { label: obj.get('name'), value: obj.get('id') };
    		if ((paramObj.selectedId && obj.get('id') == paramObj.selectedId) || alleAuftraege.length == 1) {
    			item.isSelected = YES;
    			itemSelected = YES;
    		}
    		resultList.push(item);
		});
		if (!itemSelected && resultList.length > 0) {
			resultList.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:YES});
		} else if (resultList.length == 0) {
			resultList.push({label: M.I18N.l('noData'), value: '0', isSelected:YES});
		}
		return resultList;
	}

	, getPositionen: function() {
		var that = this;
		return _.compact(_.filter(DigiWebApp.Position.findSorted(), function(item) {
			var foundIndex = _.find([item.get('orderId')], function(myId) {
				return (that.get('id') == myId);
			});
			return (foundIndex);
		}));
	}
	
    , deleteAll: function() {
		var that = this;
        _.each(this.find(), function(el) {
            el.del();
        });
	    localStorage.removeItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
    }

    , findSorted: function() {
        var that = this;
        var keys = [];
        try {
            keys = JSON.parse(localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + this.name.toLowerCase() + 'Keys'));
        } catch(e2) {
        	console.error("ERROR in findSorted: " + e2);
        }

        var records = [];

        if (keys) {
            _.each(keys, function(k) {
                records.push(that.find({key:M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX + that.name + '_' + k}));
            });
        }
        return records;
    }

    , saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: Position
// ==========================================================================

DigiWebApp.Position = M.Model.create({

    /* Define the name of your model. Do not delete this property! */
    __name__: 'Position'

    , id: M.Model.attr('String',{
    	isRequired: NO
    })

    , name: M.Model.attr('String', {
        isRequired: NO
    })

    , strasse: M.Model.attr('String', {
        isRequired: NO
    })

    , hausnummer: M.Model.attr('String', {
        isRequired: NO
    })

    , plz: M.Model.attr('String', {
        isRequired: NO
    })

    , ort: M.Model.attr('String', {
        isRequired: NO
    })

    , land: M.Model.attr('String', {
        isRequired: NO
    })

    , countrycode: M.Model.attr('String', {
        isRequired: NO
    })

    , telefon: M.Model.attr('String', {
        isRequired: NO
    })

    , fax: M.Model.attr('String', {
        isRequired: NO
    })

    , email: M.Model.attr('String', {
        isRequired: NO
    })

    , ansprechpartner: M.Model.attr('String', {
        isRequired: NO
    })

    , kundenname: M.Model.attr('String', {
        isRequired: NO
    })

    , longitude: M.Model.attr('String', {
        isRequired: NO
    })

    , latitude: M.Model.attr('String', {
        isRequired: NO
    })

    , description: M.Model.attr('String', {
        isRequired: NO
    })

    , orderId: M.Model.attr('String', {
        isRequired: NO
    })
    
    , positionBegin: M.Model.attr('String', {
        isRequired: NO
    })
    
    , positionEnd: M.Model.attr('String', {
        isRequired: NO
    })
    
    , appointments: M.Model.attr('String', {
        isRequired: NO
    })

    , arbeitsbeginn: M.Model.attr('String', {
        isRequired: NO
    })
    	
    , arbeitsende: M.Model.attr('String', {
        isRequired: NO
    })
    	
    , getById: function(selectedId) {
		var that = this;
		return _.find(DigiWebApp[that.name].find(), function(item) {
			return (item.get('id') == selectedId);
		});
	}

    , getAuftrag: function() {
		return DigiWebApp.Order.getById(this.get('orderId'));
	}

	, getTaetigkeiten: function() {
		var that = this;
		var workPlans = _.select(DigiWebApp.WorkPlan.find(), function(wp) {
            if (wp) return wp.get('id') == that.get('id');
        });
        var activities;
        if (workPlans.length > 0) {
            activities = that.getActivitiesFromWorkplan(workPlans[0]);
        } else {
            activities = _.filter(DigiWebApp.Activity.findSorted(), function(act){ return (act.get('positionId') == 1)});
        }
        return _.compact(activities);
	}

    , getActivitiesFromWorkplan: function(workplan) {
        var actIds = workplan.get('activityIds').split(',');
        var activities = [];
        if (actIds && actIds.length > 0) {
        	var alleTaetigkeiten = DigiWebApp.Activity.find(); 
            for (var i = 0; i < actIds.length; i++) {
            	var taet = _.find(alleTaetigkeiten, function(t){ return parseInt(t.get("id")) === parseInt(actIds[i])});
            	if (taet) activities.push(taet);
            }

        }
        if (parseInt(workplan.get("workplanType")) === 1) {
        	// only those activities which are bound to employee
            activities = _.map(activities, function(act) {
            	if ( typeof(act) === "undefined" ) {
            		console.log("UNDEFINED ACTIVITY");
            		return null;
            	} else {
        			var zugeordnet = NO;
            		var allActivities = DigiWebApp.Activity.findSorted();
            		_.each(allActivities, function(acti) {
            			// herausfinden, ob diese Tätigkeit dem Mitarbeiter zugeordnet ist.
            			if (act.get("id") === acti.get("id") && parseInt(acti.get("positionId")) === 1) {
            				zugeordnet = YES;
            			}
            		});
        			if (zugeordnet) {
        				return act;
        			} else {
        				return null;	
        			}
            	}
            });
        }
        activities = _.compact(activities);
        return activities;
    }

    , getList: function(paramObj) {
		if (!paramObj) paramObj = {};
		var that = this;
		var resultList = [];
		var items = DigiWebApp.Position.findSorted();
		if (paramObj.parentId) {
			items = _.filter(items, function(item){
				return (item.get('orderId') == paramObj.parentId);
			});
		}
		var itemSelected = NO;
		_.each(items, function(obj){
    		var item = { label: obj.get('name'), value: obj.get('id') };
    		if ((paramObj.selectedId && obj.get('id') == paramObj.selectedId) || items.length == 1) {
    			item.isSelected = YES;
    			itemSelected = YES;
    		}
    		resultList.push(item);
		});
		if (!itemSelected && resultList.length > 0) {
			resultList.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:YES});
		} else if (resultList.length == 0) {
			resultList.push({label: M.I18N.l('noData'), value: '0', isSelected:YES});
		}
		return resultList;
	}

	, deleteAll: function() {
		var that = this;
	    _.each(this.find(), function(el) {
	        el.del();
	    });
	    localStorage.removeItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	}

    , findSorted: function() {
        var that = this;
        var keys = [];
        try {
            keys = JSON.parse(localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + this.name.toLowerCase() + 'Keys'));
        } catch(e2) {
        	console.error("ERROR in findSorted: " + e2);
        }

        var records = [];

        if (keys) {
            _.each(keys, function(k) {
                records.push(that.find({key:M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX + that.name + '_' + k}));
            });
        }
        return records;
    }

    , saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}

}, M.DataProviderLocalStorage);
// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: SentBooking
// ==========================================================================

DigiWebApp.SentBooking = M.Model.create({

    /* Define the name of your model. Do not delete this property! */
    __name__: 'SentBooking'

    , fileName: M.Model.attr('String', {
        isRequired: NO
    })

    , fileType: M.Model.attr('String', {
        isRequired: NO
    })

    , orderId: M.Model.attr('String',{
        isRequired: NO
    })

    , orderName: M.Model.attr('String',{
        isRequired: NO
    })

    , timezoneOffset: M.Model.attr('String', {
        isRequired: NO
    })

    , timezone: M.Model.attr('String', {
        isRequired: NO
    })

    , timeStampStart: M.Model.attr('String', {
        isRequired: NO
    })

    , timeStampEnd: M.Model.attr('String', {
        isRequired: NO
    })

    , date: M.Model.attr('String', { // is aggregated by the two timestamp values above

    })

    , startTimeString: M.Model.attr('String', {
        isRequired: NO
    })

    , endeTimeString: M.Model.attr('String', {
        isRequired: NO
    })

    , startDateString: M.Model.attr('String', {
        isRequired: NO
    })

    , endeDateString: M.Model.attr('String', {
        isRequired: NO
    })

    , latitude: M.Model.attr('String', {
        isRequired:NO
    })

    , longitude: M.Model.attr('String', {
        isRequired: NO
    })

    , latitude_bis: M.Model.attr('String', {
        isRequired:NO
    })

    , longitude_bis: M.Model.attr('String', {
        isRequired: NO
    })

    , gpsLaengeVon: M.Model.attr('String', {
    	// runtime only (für das senden)
        isRequired: NO
    })

    , gpsBreiteVon: M.Model.attr('String', {
    	// runtime only (für das senden)
        isRequired: NO
    })

    , gpsLaengeBis: M.Model.attr('String', {
    	// runtime only (für das senden)
        isRequired: NO
    })

    , gpsBreiteBis: M.Model.attr('String', {
    	// runtime only (für das senden)
        isRequired: NO
    })

    , handOrderName: M.Model.attr('String', {
        isRequired: NO
    })

    , handOrderId: M.Model.attr('String', {
        isRequired: NO
    })

    , positionId: M.Model.attr('String', {
        isRequired: NO
    })

    , positionName: M.Model.attr('String', {
        isRequired: NO
    })

    , activityId: M.Model.attr('String', {
        isRequired: NO
    })

    , activityName: M.Model.attr('String', {
        isRequired: NO
    })

    , isCurrent: M.Model.attr('Boolean', {
        isRequired: NO
    })

    , spesenAuswahl: M.Model.attr('String', {
        isRequired: NO
    })

    , uebernachtungAuswahl: M.Model.attr('String', {
        isRequired: NO
    })

    , gefahreneKilometer: M.Model.attr('Number', {
        isRequired: NO
    })

    , employees: M.Model.attr('String', {
        isRequired: NO
    })

    , mitarbeiterId: M.Model.attr('String', {
    	// runtime only (für das senden)
        isRequired: NO
    })
    
    , remark: M.Model.attr('String', {
        isRequired: NO
    })

    , istFeierabend: M.Model.attr('Boolean', {
    	isRequired: NO
    })
    
    , istKolonnenbuchung: M.Model.attr('Boolean', {
    	isRequired: NO
    })
    
    , genauigkeitVon: M.Model.attr('String', {
    	isRequired: NO
    })

    , gps_zeitstempelVon: M.Model.attr('String', {
    	isRequired: NO
    })

    , ermittlungsverfahrenVon: M.Model.attr('String', {
    	isRequired: NO
    })

    , genauigkeitBis: M.Model.attr('String', {
    	isRequired: NO
    })

    , gps_zeitstempelBis: M.Model.attr('String', {
    	isRequired: NO
    })

    , ermittlungsverfahrenBis: M.Model.attr('String', {
    	isRequired: NO
    })

    , ServiceApp_Status: M.Model.attr('String', {
    	isRequired: NO
    })

    , closeBooking: function() {
        this.set('timeStampEnd', +new Date());
    }

    , setRemark: function(v) {
        this.set('remark', v);
    }

    , setAsCurrent: function() {
        this.set('isCurrent', YES);
    }

    , removeAsCurrent: function() {
        this.set('isCurrent', NO);
    }

    , deleteAll: function() {
        _.each(this.find(), function(el) {
            el.del();
        });
    }

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: SentBookingArchived
// ==========================================================================

DigiWebApp.SentBookingArchived = M.Model.create({

    /* Define the name of your model. Do not delete this property! */
    __name__: 'SentBookingArchived'

    , fileName: M.Model.attr('String', {
        isRequired: NO
    })

    , fileType: M.Model.attr('String', {
        isRequired: NO
    })

    , orderId: M.Model.attr('String',{
        isRequired: NO
    })

    , orderName: M.Model.attr('String',{
        isRequired: NO
    })

    , timezoneOffset: M.Model.attr('String', {
        isRequired: NO
    })

    , timezone: M.Model.attr('String', {
        isRequired: NO
    })

    , timeStampStart: M.Model.attr('String', {
        isRequired: NO
    })

    , timeStampEnd: M.Model.attr('String', {
        isRequired: NO
    })

    , tagLabel: M.Model.attr('String', {
        isRequired: NO
    })

    , date: M.Model.attr('String', { // is aggregated by the two timestamp values above

    })

    , startTimeString: M.Model.attr('String', {
        isRequired: NO
    })

    , endeTimeString: M.Model.attr('String', {
        isRequired: NO
    })

    , startDateString: M.Model.attr('String', {
        isRequired: NO
    })

    , endeDateString: M.Model.attr('String', {
        isRequired: NO
    })

    , latitude: M.Model.attr('String', {
        isRequired:NO
    })

    , longitude: M.Model.attr('String', {
        isRequired: NO
    })

    , latitude_bis: M.Model.attr('String', {
        isRequired:NO
    })

    , longitude_bis: M.Model.attr('String', {
        isRequired: NO
    })

    , gpsLaengeVon: M.Model.attr('String', {
    	// runtime only (für das senden)
        isRequired: NO
    })

    , gpsBreiteVon: M.Model.attr('String', {
    	// runtime only (für das senden)
        isRequired: NO
    })

    , gpsLaengeBis: M.Model.attr('String', {
    	// runtime only (für das senden)
        isRequired: NO
    })

    , gpsBreiteBis: M.Model.attr('String', {
    	// runtime only (für das senden)
        isRequired: NO
    })

    , handOrderName: M.Model.attr('String', {
        isRequired: NO
    })

    , handOrderId: M.Model.attr('String', {
        isRequired: NO
    })

    , positionId: M.Model.attr('String', {
        isRequired: NO
    })

    , positionName: M.Model.attr('String', {
        isRequired: NO
    })

    , activityId: M.Model.attr('String', {
        isRequired: NO
    })

    , activityName: M.Model.attr('String', {
        isRequired: NO
    })

    , isCurrent: M.Model.attr('Boolean', {
        isRequired: NO
    })

    , spesenAuswahl: M.Model.attr('String', {
        isRequired: NO
    })

    , uebernachtungAuswahl: M.Model.attr('String', {
        isRequired: NO
    })

    , gefahreneKilometer: M.Model.attr('Number', {
        isRequired: NO
    })

    , employees: M.Model.attr('String', {
        isRequired: NO
    })

    , mitarbeiterId: M.Model.attr('String', {
    	// runtime only (für das senden)
        isRequired: NO
    })
    
    , remark: M.Model.attr('String', {
        isRequired: NO
    })

    , istFeierabend: M.Model.attr('Boolean', {
    	isRequired: NO
    })
    
    , istKolonnenbuchung: M.Model.attr('Boolean', {
    	isRequired: NO
    })
    
    , genauigkeitVon: M.Model.attr('String', {
    	isRequired: NO
    })

    , gps_zeitstempelVon: M.Model.attr('String', {
    	isRequired: NO
    })

    , ermittlungsverfahrenVon: M.Model.attr('String', {
    	isRequired: NO
    })

    , genauigkeitBis: M.Model.attr('String', {
    	isRequired: NO
    })

    , gps_zeitstempelBis: M.Model.attr('String', {
    	isRequired: NO
    })

    , ermittlungsverfahrenBis: M.Model.attr('String', {
    	isRequired: NO
    })

    , ServiceApp_Status: M.Model.attr('String', {
    	isRequired: NO
    })

    , closeBooking: function() {
        this.set('timeStampEnd', +new Date());
    }

    , setRemark: function(v) {
        this.set('remark', v);
    }

    , setAsCurrent: function() {
        this.set('isCurrent', YES);
    }

    , removeAsCurrent: function() {
        this.set('isCurrent', NO);
    }

    , deleteAll: function() {
        _.each(this.find(), function(el) {
            el.del();
        });
    }

	, deleteOld: function() {
		var daysToHoldBookingsOnDevice = 0;
		try {
			daysToHoldBookingsOnDevice = 0 + new Number(DigiWebApp.SettingsController.getSetting('daysToHoldBookingsOnDevice'));
		} catch(e2) {
//            DigiWebApp.ApplicationController.nativeAlertDialogView({
//                title: M.I18N.l('error')
//              , message: M.I18N.l('daysToHoldBookingsOnDeviceNaN')
//	        });
			daysToHoldBookingsOnDevice = DigiWebApp.SettingsController.defaultsettings.get('daysToHoldBookingsOnDevice');
		}
		var oldestDayTimestamp = D8.create(D8.now().format("dd.mm.yyyy")).addDays(-daysToHoldBookingsOnDevice).getTimestamp();
        _.each(this.find(), function(el) {
    		var elTimestamp = D8.create(el.get("timeStampStart")).getTimestamp();
    		if (elTimestamp < oldestDayTimestamp) {
    			el.del();
    		}
        });
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: SentTimeDataDays
// ==========================================================================

DigiWebApp.SentTimeDataDays = M.Model.create({

    /* Define the name of your model. Do not delete this property! */
    __name__: 'SentTimeDataDays'

    , tagLabel: M.Model.attr('String', {
        isRequired: NO
    })

    , deleteAll: function() {
        _.each(this.find(), function(el) {
            el.del();
        });
    }

	, deleteOld: function() {
		var daysToHoldBookingsOnDevice = 0;
		try {
			daysToHoldBookingsOnDevice = 0 + new Number(DigiWebApp.SettingsController.getSetting('daysToHoldBookingsOnDevice'));
		} catch(e2) {
//            DigiWebApp.ApplicationController.nativeAlertDialogView({
//                title: M.I18N.l('error')
//              , message: M.I18N.l('daysToHoldBookingsOnDeviceNaN')
//	        });
			daysToHoldBookingsOnDevice = DigiWebApp.SettingsController.defaultsettings.get('daysToHoldBookingsOnDevice');
		}
		var oldestDayTimestamp = D8.create(D8.now().format("dd.mm.yyyy")).addDays(-daysToHoldBookingsOnDevice).getTimestamp();
        _.each(this.find(), function(el) {
    		var elTimestamp = D8.create(el.get("tagLabel")).getTimestamp();
    		if (elTimestamp < oldestDayTimestamp) {
    			el.del();
    		}
        });
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: Settings
// ==========================================================================

DigiWebApp.Settings = M.Model.create({

    __name__: 'Settings'

    , debug: M.Model.attr('Boolean')
    
    , settingsPassword: M.Model.attr('String')

    , treatAllAsTablet: M.Model.attr('Boolean')

    , treatAllAsPhone: M.Model.attr('Boolean')

    , company: M.Model.attr('String')

    , password: M.Model.attr('String')

    , connectionCode: M.Model.attr('String')

    , workerId: M.Model.attr('String')

    , timeouthappened: M.Model.attr('String')

    , skipEvents: M.Model.attr('String')

    , platform: M.Model.attr('String')

    , userAgent: M.Model.attr('String')

    , mapType: M.Model.attr('String')

    , autoTransferAfterBookTime: M.Model.attr('Boolean')

    , autoTransferAfterClosingDay: M.Model.attr('Boolean')

    , autoSyncAfterBookTime: M.Model.attr('Boolean')

    , stammdatenabgleichBeimAppStart: M.Model.attr('Boolean')
    
    , autoSaveGPSData: M.Model.attr('Boolean')

    , GPSDataIsMandatory: M.Model.attr('Boolean')
    
    , remarkIsMandatory: M.Model.attr('Boolean')

    , remarkIsOptional: M.Model.attr('Boolean')

    , useTransitionsSetting: M.Model.attr('Boolean')
    
    , daysToHoldBookingsOnDevice: M.Model.attr('String')

    , bautagebuchLimit_autoStartUhrzeit: M.Model.attr('Boolean')
    
    , datatransfer_min_delay: M.Model.attr('String')

    , branding: M.Model.attr('String')

    , GPSTimeOut: M.Model.attr('Integer')
    
    , WebserviceTimeOut: M.Model.attr('Integer')
    
    , LoaderTimeOut: M.Model.attr('Integer')
    
    , silentLoader: M.Model.attr('Boolean')
    
    , ServiceApp_ermittleGeokoordinate: M.Model.attr('Boolean')

    , ServiceApp_datenUebertragen: M.Model.attr('Boolean')

    , ServiceApp_engeKopplung: M.Model.attr('Boolean')
    
    , ServiceApp_PORT: M.Model.attr('String')

    , ServiceApp_FallBack: M.Model.attr('Boolean')

    , currentTimezoneOffset: M.Model.attr('String')
    
    , currentTimezone: M.Model.attr('String')
    
    , debugDatabaseServer: M.Model.attr('String')
    
    , mitarbeiterVorname: M.Model.attr('String')
    
    , mitarbeiterNachname: M.Model.attr('String')
    
    , mitarbeiterId: M.Model.attr('String')
    
    , auftragsDetailsKoppeln: M.Model.attr('Boolean')

    , detailierteZeitdaten: M.Model.attr('Boolean')
    
    , vibrationsDauer: M.Model.attr('String')
    
    , terminliste_keineKuenstlichenTermine: M.Model.attr('Boolean') 
    
    , terminliste_ignoriereAuftragszeitraum: M.Model.attr('Boolean')

    , festePauseStornieren_nurAktuellerTag: M.Model.attr('Boolean')

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: Sonderbuchung
// ==========================================================================

DigiWebApp.Sonderbuchung = M.Model.create({

    /* Define the name of your model. Do not delete this property! */
    __name__: 'Sonderbuchung'

    , id: M.Model.attr('String', {
        isRequired: NO // wird erst benötigt, wenn Sonderbuchungen vom WebService geholt werden müssten
    })

    , ressourceId: M.Model.attr('String', {
    	isRequired: NO
    })

    , sonderbuchungstyp: M.Model.attr('String', {
//	    1	<pausenStorno>
//	    2	<audio>
//	    3	<spesen>
//	    4	<uebernachtung>
//	    5	<gefahreneKilometer>
//	    6	<image>
        isRequired: NO
    })

    , sonderbuchungseigenschaften: M.Model.attr('String', {
    	// z.B.:
    	// [   {"SonderbuchungId": "123", "Key": "<FestepausendefinitionId>", "StringValue": "23"}
    	//   , {"SonderbuchungId": "123", "Key": "<Datum>", "StringValue": "01.02.2014"}
    	// ]
        isRequired: NO
    })
    
    , uebertragen: M.Model.attr('String', {
    	isRequired: NO
    })
    
    , status: M.Model.attr('String', {
    	isRequired: NO
    })

    , festepausendefinitionId: M.Model.attr('String', {
    	isRequired: NO
    })
    
    , datum: M.Model.attr('String', {
    	isRequired: NO
    })
    
    , deleteAll: function() {
    	var that = this;
        _.each(this.find(), function(el) {
            el.del();
        });
        localStorage.removeItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
    }

	, findById: function(queryId) {
		var foundElement = null;
		var that = this;
		$.each(that.find(),function(key, el){
			if (parseInt(queryId) === parseInt(el.get("id"))) {
				foundElement = el;
				return false; // break
			}
			return true;
		});
		return foundElement;
	}
	
    , findSorted: function() {
        var that = this;
        var keys = [];
        try {
            keys = JSON.parse(localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + this.name.toLowerCase() + 'Keys'));
        } catch(e2) {
        	console.error("ERROR in findSorted: " + e2);
        }

        var records = [];

        if (keys){
            _.each(keys, function(k) {
                records.push(that.find({key:M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX + that.name + '_' + k}));
            });
        }
        return records;
    }

    , saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null ) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: SpesenAuswahlOption
// ==========================================================================

DigiWebApp.SpesenAuswahlOption = M.Model.create({
    
    /* Define the name of your model. Do not delete this property! */
    __name__: 'SpesenAuswahlOption'

    , id: M.Model.attr('String', {
        isRequired: NO
    })

    , beschreibung: M.Model.attr('String', {
        isRequired: NO
    })

    , deleteAll: function() {
        _.each(this.find(), function(el) {
    		el.deleteSorted();
        });
    }

	, deleteSorted: function() {
	    var that = this;
	
	    // remove m_id from Key-Stringlist
	    var keys = [];
	    var newKeys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e2) {
	    	console.error("ERROR in " + that.name + ".deleteSorted: " + e2);
	    }
	    if (keys) {
	        _.each(keys, function(k) {
	        	if (k !== that.m_id) {
	        		newKeys.push(k);
	        	}
	        });
		    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(newKeys));
	    }
	
	    return that.del();
	}
	
	, saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	
	, findSorted: function() {
	    var that = this;
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e4) {
	    	console.error("ERROR in " + that.name + ".findSorted: " + e4);
	    }
	
	    var records = [];
	
	    if (keys) {
	        _.each(keys, function(k) {
	        	var loadedItem = that.find({key:DigiWebApp.ApplicationController.storagePrefix + that.name + '_' + k});
	            records.push(loadedItem);
	        });
	    }
	    return records;
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: UebernachtungAuswahlOption
// ==========================================================================

DigiWebApp.UebernachtungAuswahlOption = M.Model.create({
    
    /* Define the name of your model. Do not delete this property! */
    __name__: 'UebernachtungAuswahlOption'

    , id: M.Model.attr('String', {
        isRequired: NO
    })

    , beschreibung: M.Model.attr('String', {
        isRequired: NO
    })

    , deleteAll: function() {
        _.each(this.find(), function(el) {
    		el.deleteSorted();
        });
    }

	, deleteSorted: function() {
	    var that = this;
	
	    // remove m_id from Key-Stringlist
	    var keys = [];
	    var newKeys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e2) {
	    	console.error("ERROR in " + that.name + ".deleteSorted: " + e2);
	    }
	    if (keys) {
	        _.each(keys, function(k) {
	        	if (k !== that.m_id) {
	        		newKeys.push(k);
	        	}
	        });
		    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(newKeys));
	    }
	
	    return that.del();
	}
	
	, saveSorted: function() {
	    var that = this;
	    if (!that.save()) return false;
	
	    // add m_id to Key-Stringlist
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e3) {
	    	console.error("ERROR in " + that.name + ".saveSorted: " + e3);
	    }
        var found = NO;
        _.each(keys, function(k) {
        	if (that.m_id === k) { found = YES; }
        });
        if (found === NO) { keys.push(that.m_id); }
	    localStorage.setItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys', JSON.stringify(keys));
	    return true;
	}
	
	, findSorted: function() {
	    var that = this;
	    var keys = [];
	    try {
	    	var keyString = localStorage.getItem(DigiWebApp.ApplicationController.storagePrefix + '_' + that.name.toLowerCase() + 'Keys');
	    	if ( keyString !== null) {
	    		keys = JSON.parse(keyString);
	    	}
	    } catch(e4) {
	    	console.error("ERROR in " + that.name + ".findSorted: " + e4);
	    }
	
	    var records = [];
	
	    if (keys) {
	        _.each(keys, function(k) {
	        	var loadedItem = that.find({key:DigiWebApp.ApplicationController.storagePrefix + that.name + '_' + k});
	            records.push(loadedItem);
	        });
	    }
	    return records;
	}

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Model: WorkPlan
// ==========================================================================

DigiWebApp.WorkPlan = M.Model.create({

    __name__: 'WorkPlan'

    , id: M.Model.attr('String', {
        isRequired: NO
    })

    , workplanType: M.Model.attr('String', {
        isRequired: NO          // 0: alle, 1: normal (gefiltert)
    })

    , activityIds: M.Model.attr('String', {
        isRequired: NO          // saved as string comma-separated
    })

    , activityPositions: M.Model.attr('String', {
        isRequired: NO          // saved as string comma-separated
    })

    , deleteAll: function() {
        _.each(this.find(), function(el) {
            el.del();
        });
    }

}, M.DataProviderLocalStorage);

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso
//
// Project: DigiWebApp
// Model: Zeitbuchungen
// ==========================================================================

DigiWebApp.Zeitbuchungen = M.Model.create({
    
      __name__: 'Zeitbuchungen'

//    	  	  auftragsBezeichnung: "6657Heim"
    	  , auftragsBezeichnung: M.Model.attr('String', {})
//    		  auftragsId: "950"
    	  , auftragsId: M.Model.attr('String', {})
//    		  bis: "10:37:08"
    	  , bis: M.Model.attr('String', {})
//    		  datum: "14.06.2012"
    	  , datum: M.Model.attr('String', {})
//    		  dauer: "00:00"
    	  , dauer: M.Model.attr('String', {})
//    		  farbeAmpel: ""
    	  , farbeAmpel: M.Model.attr('String', {})
//    		  gpsBreite: "0.0"
    	  , gpsBreite: M.Model.attr('String', {})
//    		  gpsBreitePosition: "0.0"
    	  , gpsBreitePosition: M.Model.attr('String', {})
//    		  gpsLaenge: "0.0"
    	  , gpsLaenge: M.Model.attr('String', {})
//    		  gpsLaengePosition: "0.0"
    	  , gpsLaengePosition: M.Model.attr('String', {})
//			  handauftragsBezeichnung: "",
    	  , handauftragsBezeichnung: M.Model.attr('String', {})
//			  handauftragsId: "",
    	  , handauftragsId: M.Model.attr('String', {})
//    		  mitarbeiterId: "12"
    	  , mitarbeiterId: M.Model.attr('String', {})
//    		  name: "Alber"
    	  , name: M.Model.attr('String', {})
//    		  nameVorname: "Alber, Michael"
    	  , nameVorname: M.Model.attr('String', {})
//    		  positionsBezeichnung: "6657Heim"
    	  , positionsBezeichnung: M.Model.attr('String', {})
//    		  positionsId: "1874"
    	  , positionsId: M.Model.attr('String', {})
//    		  taetigkeit: "HolzLackraum"
    	  , taetigkeit: M.Model.attr('String', {})
//    		  taetigkeitsId: "21"
    	  , taetigkeitsId: M.Model.attr('String', {})
//    		  taetigkeitsart: "0"
    	  , taetigkeitsart: M.Model.attr('String', {})
//    		  von: "10:36:45"
    	  , von: M.Model.attr('String', {})
//    		  vorname: "Michael"
    	  , vorname: M.Model.attr('String', {})

    	  , remark: M.Model.attr('String', {})

}, M.DataConsumer.configure({

      appendRecords: NO

    , responsePath: 'zeitbuchungen'

    , url: function(datum, mitarbeiterID) {
		var myURL = 'http://' + DigiWebApp.RequestController.DatabaseServer + '/WebAppServices/zeitdaten?modus=0&firmenId=' + DigiWebApp.SettingsController.getSetting('company') + '&kennwort=' + DigiWebApp.SettingsController.getSetting('password') + '&geraeteId=' + DigiWebApp.SettingsController.getSetting('workerId') + '&geraeteTyp=2&softwareVersion=' + DigiWebApp.RequestController.softwareVersion + '&mitarbeiterId=' + mitarbeiterID + '&datum=' + datum + '&requestTimestamp=' + M.Date.now().date.valueOf();
        if (DigiWebApp.ApplicationController.profilingIntervalVar === null) {
        	console.log('Zeitbuchungen: using ' + myURL);
        }
		return myURL;
    }

    /* map needs to return record obj which can be handled by createRecord */
    , map: function(obj) {
    	if (obj === null) {
    		return {
        	    auftragsBezeichnung: null
	      	  , auftragsId: null
	      	  , bis: null
	      	  , datum: null
	      	  , dauer: null
	      	  , farbeAmpel: null
	      	  , gpsBreite: null
	      	  , gpsBreitePosition: null
	      	  , gpsLaenge: null
	      	  , gpsLaengePosition: null
		      , handauftragsBezeichnung: null
		      , handauftragsId: null
	      	  , mitarbeiterId: null
	      	  , name: null
	      	  , nameVorname: null
	      	  , positionsBezeichnung: null
	      	  , positionsId: null
	      	  , taetigkeit: null
	      	  , taetigkeitsId: null
	      	  , taetigkeitsart: null
	      	  , von: null
	      	  , vorname: null
	      	  , remark: null
    		};
    	} 
    	//console.log(obj);
        return {
//    	  	  auftragsBezeichnung: "6657Heim"
    	    auftragsBezeichnung: obj.auftragsBezeichnung
//    		  auftragsId: "950"
    	  , auftragsId: obj.auftragsId
//    		  bis: "10:37:08"
    	  , bis: obj.bis
//    		  datum: "14.06.2012"
    	  , datum: obj.datum
//    		  dauer: "00:00"
    	  , dauer: obj.dauer
//    		  farbeAmpel: ""
    	  , farbeAmpel: obj.farbeAmpel
//    		  gpsBreite: "0.0"
    	  , gpsBreite: obj.gpsBreite
//    		  gpsBreitePosition: "0.0"
    	  , gpsBreitePosition: obj.gpsBreitePosition
//    		  gpsLaenge: "0.0"
    	  , gpsLaenge: obj.gpsLaenge
//    		  gpsLaengePosition: "0.0"
    	  , gpsLaengePosition: obj.gpsLaengePosition
//            handauftragsBezeichnung: "",
  	      , handauftragsBezeichnung: obj.handauftragsBezeichnung
//			  handauftragsId: "",
  	      , handauftragsId: obj.handauftragsId
//    		  mitarbeiterId: "12"
    	  , mitarbeiterId: obj.mitarbeiterId
//    		  name: "Alber"
    	  , name: obj.name
//    		  nameVorname: "Alber, Michael"
    	  , nameVorname: obj.nameVorname
//    		  positionsBezeichnung: "6657Heim"
    	  , positionsBezeichnung: obj.positionsBezeichnung
//    		  positionsId: "1874"
    	  , positionsId: obj.positionsId
//    		  taetigkeit: "HolzLackraum"
    	  , taetigkeit: obj.taetigkeit
//    		  taetigkeitsId: "21"
    	  , taetigkeitsId: obj.taetigkeitsId
//    		  taetigkeitsart: "0"
    	  , taetigkeitsart: obj.taetigkeitsart
//    		  von: "10:36:45"
    	  , von: obj.von
//    		  vorname: "Michael"
    	  , vorname: obj.vorname

    	  , remark: obj.bemerkung

        };
    }

}));
// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: AnwesenheitslisteController
// ==========================================================================
//var-checked
DigiWebApp.AnwesenheitslisteController = M.Controller.extend({

	  items: null
	
	, init: function(isFirstLoad) {
		//console.log("Anwesenheitsliste: showing Loader");		
		DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('AnwesenheitslisteLaden'));
		var that = DigiWebApp.AnwesenheitslisteController;
		if (that.items === null) {
			DigiWebApp.RequestController.getDatabaseServer(DigiWebApp.AnwesenheitslisteController.initWithServer, isFirstLoad);
		} else {
			DigiWebApp.AnwesenheitslisteController.initWithServer(isFirstLoad);
		}
	}

    , initWithServer: function(isFirstLoad) {
    	var that = DigiWebApp.AnwesenheitslisteController;
		if (that.items === null) {

			//console.log("Anwesenheitsliste: find --> request");		
			DigiWebApp.Anwesenheitsliste.find({
	              urlParams: {}
	            , callbacks: {
	                success: {
	                      action: function(records) {
	                        if(records && records.length === 0) {
		            			DigiWebApp.ApplicationController.DigiLoaderView.hide();
	                    		//console.log("Anwesenheitsliste: error length==0");		
	            		        DigiWebApp.ApplicationController.nativeAlertDialogView({
	            		              title: M.I18N.l('error')
	            		            , message: M.I18N.l('AnwesenheitslisteKonnteNichtGeladenWerden')
	            		            , callbacks: {
	            		                confirm: {
	            		                      target: that
	            		                    , action: function () {
				            					if (DigiWebApp.SettingsController.featureAvailable('404')) {
				            						DigiWebApp.NavigationController.backToButtonDashboardPageFlipTransition();
				            					} else {
			        		        				DigiWebApp.NavigationController.backToDashboardPageFlipTransition();
				            					}
	            		                    }
	            		                }
	            		            }
	            		        });
	                        } else {
	                    		//console.log("Anwesenheitsliste: success");		
	                        	DigiWebApp.AnwesenheitslisteController.set('items', records);
		            			DigiWebApp.ApplicationController.DigiLoaderView.hide();
	                        }
	                    }
	                }
	                , error: {
	                    action: function(request, error) {
	        				DigiWebApp.ApplicationController.DigiLoaderView.hide();
	                		//console.log("Anwesenheitsliste: error request failed");		
	        		        DigiWebApp.ApplicationController.nativeAlertDialogView({
	        		              title: M.I18N.l('error')
	        		            , message: M.I18N.l('AnwesenheitslisteKonnteNichtGeladenWerden')
	        		            , callbacks: {
	        		                confirm: {
	        		                      target: that
	        		                    , action: function () {
			            					if (DigiWebApp.SettingsController.featureAvailable('404')) {
			            						DigiWebApp.NavigationController.backToButtonDashboardPageFlipTransition();
			            					} else {
			    		        				DigiWebApp.NavigationController.backToDashboardPageFlipTransition();
			            					}
	        		                    }
	        		                }
	        		            }
	        		        });
	                    }
	                }
	            }
	        });    	
        }
		
    }

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: ApplicationController
// ==========================================================================
// manuell var-checked
DigiWebApp.ApplicationController = M.Controller.extend({
	
	  CONSTImageFiletype: "image/jpeg;base64"
	, CONSTAudioFiletype: "audio/wav;base64"
	, CONSTVideoFiletype: "video/mp4;base64"
	, CONSTTextFiletype: "text/plain"
		
	, CONSTApplicationQuota: 20*1024*1024
	
	, CONSTVibrateDuration: 100
	
	// Namespace for XML-Results in IE
	// gets reset in getOrdersFromRemoteSuccess
	, myns: "ax21"

    , dayNamesShort: [
          M.I18N.l('Sunday').substr(0,3)
        , M.I18N.l('Monday').substr(0,3)
        , M.I18N.l('Tuesday').substr(0,3)
        , M.I18N.l('Wednesday').substr(0,3)
        , M.I18N.l('Thursday').substr(0,3)
        , M.I18N.l('Friday').substr(0,3)
        , M.I18N.l('Saturday').substr(0,3)
    ]
    , dayNames: [
          M.I18N.l('Sunday')
        , M.I18N.l('Monday')
        , M.I18N.l('Tuesday')
        , M.I18N.l('Wednesday')
        , M.I18N.l('Thursday')
        , M.I18N.l('Friday')
        , M.I18N.l('Saturday')
    ]

    , monthNamesShort: [
          M.I18N.l('january').substr(0,3)
        , M.I18N.l('february').substr(0,3)
        , M.I18N.l('march').substr(0,3)
        , M.I18N.l('april').substr(0,3)
        , M.I18N.l('may').substr(0,3)
        , M.I18N.l('june').substr(0,3)
        , M.I18N.l('july').substr(0,3)
        , M.I18N.l('august').substr(0,3)
        , M.I18N.l('september').substr(0,3)
        , M.I18N.l('october').substr(0,3)
        , M.I18N.l('november').substr(0,3)
        , M.I18N.l('december').substr(0,3)
    ]
    , monthNames: [
          M.I18N.l('january')
        , M.I18N.l('february')
        , M.I18N.l('march')
        , M.I18N.l('april')
        , M.I18N.l('may')
        , M.I18N.l('june')
        , M.I18N.l('july')
        , M.I18N.l('august')
        , M.I18N.l('september')
        , M.I18N.l('october')
        , M.I18N.l('november')
        , M.I18N.l('december')
    ]

	, restartApp: NO
	
	, activeFeaturesBeforeTransfer: []
	
	, syncStartTimestamp: null
	
	, syncStopTimestamp: null
	
	, syncLastDuration: null 
	
	, syncRunning: NO
	
	, savedUseTransitions: NO

	, triggerUpdate: NO
	
	, useSplashJustForFade: NO
	
	, makeUnselectable: function(node) {
		return null;
//	    if (node.nodeType == 1) {
//	        node.unselectable = true;
//	    }
//	    var child = node.firstChild;
//	    while (child) {
//	    	DigiWebApp.ApplicationController.makeUnselectable(child);
//	        child = child.nextSibling;
//	    }
	}

	, blackBerryRestart_var: null
	
	, blackBerryRestart: function() {
		//console.log("blackBerryRestart");
		//alert("blackBerryRestart");
		if (DigiWebApp.ApplicationController.blackBerryRestart_var !== null) {clearTimeout(DigiWebApp.ApplicationController.blackBerryRestart_var);}
		DigiWebApp.app = M.Application.design(DigiWebAppOrdinaryDesign);
		/* now lets render all other pages 
        _.each(M.ViewManager.pageList, function(page) {
        	console.log(page);
        	if (page.html === '') {
        		//page.render();
        	}
        });*/
        
		DigiWebApp.app.main();
		DigiWebApp.ApplicationController.regSecEv(YES);
	}
	
	, nativeAlertDialogView: function (obj) {
		
		// etwaigen Loader ausblenden
		DigiWebApp.ApplicationController.DigiLoaderView.hide()
		
		if (M.Environment.getPlatform().substr(0,10) === "BlackBerry") {
			//console.log("falling back to non-native-dialog");
			//return M.DialogView.alert(obj);
		}
		//console.log("using a native-dialog");
		if (typeof(obj.confirmButtonValue) === "undefined") obj.confirmButtonValue = "Ok";
		if (typeof(obj.title) === "undefined") obj.title = "Alert";
		if (typeof(obj.message) === "undefined") obj.message = "";
		var mycallback = function() { return; };
		if (typeof(obj.callbacks) !== "undefined") {
			// we have callbacks
			if(typeof(obj.callbacks.confirm.target) === undefined) {
				// without target
				if (typeof(obj.callbacks.confirm.action) === "function") {
					mycallback = obj.callbacks.confirm.action;
				} else {
					console.error("ERROR: callback without target given but action is not a function!");
				}
			} else if (typeof(obj.callbacks.confirm.target) === "function") {
				// with function-target
				mycallback = obj.callbacks.confirm.target;
			} else {
				// with other target
				if (typeof(obj.callbacks.confirm.action) === "string") {
					mycallback = obj.callbacks.confirm.target[obj.callbacks.confirm.action];
				} else if (typeof(obj.callbacks.confirm.action) === "function") {
					mycallback = obj.callbacks.confirm.action;
				} else {
					console.error("ERROR: action is neither a string nor a function!");
				}
			}
		};
		if (typeof(navigator.notification) === "undefined") {
			M.DialogView.alert(obj);
		} else {
			navigator.notification.alert(
				  obj.message					// message
				, function (button) {
					switch(button) {
					case 0:
						mycallback();
						break;
					case '0':
						mycallback();
						break;
					case 1:
						mycallback();
						break;
					case '1':
						mycallback();
						break;
					case obj.confirmButtonValue:
						mycallback();
						break;
					case 'OK':
						mycallback();
						break;
					default:
						alert("ERROR: yet unknown button \"" + button + "\" pressed.");
						return;
					}
					//try { $.mobile.fixedToolbars.show(); } catch(e) { console.error(e); }; // this line is for pre TMP 1.1
				} // callback
				, obj.title						// title
				, obj.confirmButtonValue			// buttonLabel
				);
		}
	}    

	, nativeConfirmDialogView: function (obj) {

		// etwaigen Loader ausblenden
		DigiWebApp.ApplicationController.DigiLoaderView.hide()
		
		if (M.Environment.getPlatform().substr(0,10) === "BlackBerry") {
			//console.log("falling back to non-native-dialog");
			//return M.DialogView.confirm(obj);
		}
		//console.log("using a native-dialog");
		if (typeof(obj.confirmButtonValue) === "undefined") obj.confirmButtonValue = "Ok";
		if (typeof(obj.cancelButtonValue) === "undefined") obj.cancelButtonValue = "Cancel";
		if (typeof(obj.title) === "undefined") obj.title = "Confirm";
		if (typeof(obj.message) === "undefined") obj.message = "";
		if (typeof(navigator.notification) === "undefined") {
			M.DialogView.confirm(obj);
		} else {
			navigator.notification.confirm(
				  obj.message  // message
				, function (button) {
					switch(button) {
						case 0:
							obj.callbacks.confirm.action();
							break;
						case 1:
							obj.callbacks.confirm.action();
							break;
						case 2:
							obj.callbacks.cancel.action();
							break;
						case '0':
							obj.callbacks.confirm.action();
							break;
						case '1':
							obj.callbacks.confirm.action();
							break;
						case '2':
							obj.callbacks.cancel.action();
							break;
						case obj.confirmButtonValue:
							obj.callbacks.confirm.action();
							break;
						case obj.cancelButtonValue:
							obj.callbacks.cancel.action();
							break;
						case 'OK':
							obj.callbacks.confirm.action();
							break;
						case 'CANCEL':
							obj.callbacks.cancel.action();
							break;
						default:
							alert("ERROR: yet unknown button \"" + button + "\" pressed.");
							return;
					}
					//try { $.mobile.fixedToolbars.show(); } catch(e) { console.error(e); }; // this line is for pre TMP 1.1
				}  // callback to invoke with index of button pressed
				, obj.title // title
				, [obj.confirmButtonValue, obj.cancelButtonValue]          // buttonLabels
				);
		}
	}
	
	/*
	 * part of ApplicationController
	 */
	, DigiLoaderView: { 
		
		/*
		 *  DigiLoaderView wrapps M.LoaderView to allow only one Loader at a time.
		 *
		 *  It also allows to query if it is visible.
		 *
		 */

		  loaderMessage: " "
			  
		, timeoutId: null

		, isVisible: function() { 
			return M.LoaderView.refCount !== 0;
		} 

		, hide: function() {
			this.loaderMessage = " ";
			window.clearTimeout(this.timeoutId);
			this.timeoutId = null;
			return M.LoaderView.hide(true);
		}

		, show: function(title, timeout) {

			if (this.isVisible()) { 
				this.hide(); 
			}
		
			if (DigiWebApp.SettingsController.getSetting('silentLoader') !== YES) {
				this.loaderMessage = title;
			}

			// Loader nach definiertem TimeOut automatisch verstecken
			var myTimeout = timeout;
			if (!myTimeout) myTimeout = DigiWebApp.SettingsController.getSetting('LoaderTimeOut');
			window.clearTimeout(this.timeoutId);
			this.timeoutId = window.setTimeout(myTimeout);
			
			return M.LoaderView.show(this.loaderMessage);
		}
		
		, getTitle: function() {
			return this.loaderMessage;
		}

		, setTitle: function(title) {
			return this.show(title);
		}
		
		, changeTitle: function(title) {
			return this.setTitle(title);

		}

	} // End of DigiLoaderView


    , infoMsg: ''
    
	//, shallTransferBookings: NO

    /*
     * callbackStatus object contains the state of the model
     * useful for checking if application is able to run,
     * used in isReadyToProceed() in this controller.
    */
    , callbackStatus: null

    , storagePrefix: M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX
    
    , clickCounter: 0
    , clickLimit: 9
    
    , skipEvents: false
    
    , regSecEv: function(isFirstLoad) {
    	console.log(DigiWebApp.app.config.version);
    	var that = this;
    	setTimeout(function() {
    		that.realregSecEv(isFirstLoad);
    	}, 100);
    }
    
	, realregSecEv: function(isFirstLoad) {
    	//console.log("in regSecEv");
    	
        DigiWebApp.ApplicationController.setImageClass();
        
        M.I18N.defaultLanguage = "de_de";

		if (isFirstLoad) {
			
			var that = this;

            var img2 = M.ViewManager.getView('infoPage', 'logo');    // info page logo

            that.clickCounter = 0;
            $('#'+ img2.id).bind('touchstart', function(ev) {
                if (DigiWebApp.InfoPage.lastTimePageWasLoaded < (+new Date() - 1000)) {
                	that.clickCounter++;
                	if (that.clickCounter > that.clickLimit) {
                		that.clickCounter = 0;
                		that.showConfirmDialog();
                	}
                }
            });

            $('#'+ img2.id).bind('mousedown', function(ev) {
            	if (DigiWebApp.InfoPage.lastTimePageWasLoaded < (+new Date() - 1000)) {
            		that.clickCounter++;
                	if (that.clickCounter > that.clickLimit) {
                		that.clickCounter = 0;
                		that.showConfirmDialog();
                	}
            	}
            });

//            // hide footer while softkeyboard is showing
//            $('input').focus(function() {
//            	$('[data-role=footer]').hide();
//            });
//            $('input').blur(function() {
//            	$('[data-role=footer]').show();
//            });
                        
        	if ( M.Environment.getPlatform().substr(0,10) === "BlackBerry" ) {
        		console.log("registering emergencyhandler");
        		$(document).bind('keydown', DigiWebApp.ApplicationController.keydownHandler);
        	}

        }
				
		// no fade-effects on header
		_.each(DigiWebApp.app.pages, function(myPage) {
			if ( typeof(myPage.header) !== "undefined" ) {
				$('#' + myPage.header.id ).removeClass("fade");
			}
		});
		// no fade-effects on footer
		$('[id=' + DigiWebApp.TabBar.id  + ']').each(function() {
			$(this).removeClass("fade");
		});
		
		this.setSkipEvents();

		if (this.skipEvents) {
        	// i guess we are not on a mobile device --> no deviceready-event
        	this.devicereadyhandler();
        } else {
        	if (typeof(device) === "undefined") { 
	        	// register deviceready-event and wait for it to fire
        		// or start deviceready-handler after a timeout of 10 seconds (we are not on a mobile device)
        		DigiWebApp.ApplicationController.timeoutdeviceready_var = setTimeout("DigiWebApp.ApplicationController.timeoutdevicereadyhandler()", 10000);
        		//document.addEventListener("deviceready", DigiWebApp.ApplicationController.devicereadyhandler, false);
        		$(document).bind('deviceready', DigiWebApp.ApplicationController.devicereadyhandler);
        	} else {
        		DigiWebApp.ApplicationController.devicereadyhandler();
        	}
        }

    }

    , setSkipEvents: function() {
        /*
         * Platfroms in the wild:
         * 		"BlackBerry"
         * 		"iPad"
         * 		"Linux armv5tejl" (Android 2.3.3 Emulator)
         * 		"Linux armv7l" (Samsung Galaxy Xcover, Probleme mit GPS (POSITION_UNAVAILABLE trotz aktiviertem GPS-Sensor))
         * 		"Linux armv7l" (Samsung Galaxy S2)
         * 		"Linux armv7l" (HTC Desire)
         */
		//alert("Platform: \"" + M.Environment.getPlatform() + "\"");
//    	var myPlattform = M.Environment.getPlatform();
//        if (       ( myPlatform.substr(-2)  === "86" )
//        		|| ( myPlatform.substr(-3)  === "_64" )
//        		|| ( myPlatform.substr(-5)  === "Win32" )
//        		|| ( myPlatform.substr(-5)  === "Win64" )
//        		|| ( myPlatform.substr(0,3) === "Mac" )
//        ) {
//        	this.skipEvents = true;
//        } else {
//        	this.skipEvents = false;
//        }

        // using timeout-detection
        this.skipEvents = false;
    }
	
    , sizeMode: null
    
    , checkSizeModeChange: function() {
    	if (this.sizeMode === null || this.timeouthappened) {
			switch(true) {
				case(                          $(window).width()<320):
					if (this.sizeMode !== "w320") {
						this.sizeMode = "w320";
						return true;
					} else {
						return false;
					}
					break;
				case($(window).width()>=320  && $(window).width()<480):
					if (this.sizeMode !== "w480") {
						this.sizeMode = "w480";
						return true;
					} else {
						return false;
					}
					break;
				case($(window).width()>=480  && $(window).width()<640):
					if (this.sizeMode !== "w640") {
						this.sizeMode = "w640";
						return true;
					} else {
						return false;
					}
					break;
				case($(window).width()>=640  && $(window).width()<800):
					if (this.sizeMode !== "w800") {
						this.sizeMode = "w800";
						return true;
					} else {
						return false;
					}
					break;
				case($(window).width()>=800  && $(window).width()<1024):
					if (this.sizeMode !== "w1024") {
						this.sizeMode = "w1024";
						return true;
					} else {
						return false;
					}
					break;
				case($(window).width()>=1024  && $(window).width()<1080):
					if (this.sizeMode !== "w1080") {
						this.sizeMode = "w1080";
						return true;
					} else {
						return false;
					}
					break;
				case($(window).width()>=1080 && $(window).width()<1536):
					if (this.sizeMode !== "w1536") {
						this.sizeMode = "w1536";
						return true;
					} else {
						return false;
					}
					break;
				default:
					if (this.sizeMode !== "w5000") {
						this.sizeMode = "w5000";
						return true;
					} else {
						return false;
					}
					break;
			}
    	} else {
    		return false;
    	}
    }
    
    , setImageClass: function () {
    	var disableOnBlackBerry = true;
    	if ((M.Environment.getPlatform().substr(0,10) === "BlackBerry") && (disableOnBlackBerry)) {
    		console.log("We are on BlackBerry, so we skip dynamic Background!");
    	} else {
    		if (this.checkSizeModeChange()) {
		        _.each(DigiWebApp.app.pages, function(myPage) {
		        	if (
		        			($('#' + myPage.id).get("0").classList && (!$('#' + myPage.id).get("0").classList.contains(DigiWebApp.ApplicationController.sizeMode)))
		        	     || ($('#' + myPage.id).get("0").className.split(" ").indexOf(DigiWebApp.ApplicationController.sizeMode) === -1)
		        	) {
    					if ( typeof(DigiWebApp) != "undefined" ) {
    						if ( typeof(DigiWebApp.SettingsController) != "undefined" ) {
	    						if ( typeof(DigiWebApp.SettingsController.getSetting("branding")) != "undefined" && DigiWebApp.SettingsController.getSetting("branding") != "" ) {
	    							var myBranding = DigiWebApp.SettingsController.getSetting("branding").toUpperCase();
	    							// remove old gloobal branding from body
	    							$('body').classes(function(n) {
	    								if (n.substring(n.length - "branding".length) === "branding") {
	    									$('body').removeClass(n);
	    								}
	    							});
	    							// apply branding
	    							$('body').addClass(myBranding + "branding");
	    	    					$('#' + myPage.id).removeClass("w320").removeClass("w480").removeClass("w640").removeClass("w800").removeClass("w1024").removeClass("w1080").removeClass("w1536").removeClass("w5000");
	    	    					$('#' + myPage.id).removeClass(myBranding + "_w320").removeClass(myBranding + "_w480").removeClass(myBranding + "_w640").removeClass(myBranding + "_w800").removeClass(myBranding + "_w1024").removeClass(myBranding + "_w1080").removeClass(myBranding + "_w1536").removeClass(myBranding + "_w5000");
	    	        				$('#' + myPage.id).addClass(myBranding + "_" + DigiWebApp.ApplicationController.sizeMode);	        					
	    						} else {
	    	    					$('#' + myPage.id).removeClass("w320").removeClass("w480").removeClass("w640").removeClass("w800").removeClass("w1024").removeClass("w1080").removeClass("w1536").removeClass("w5000");
	    	        				$('#' + myPage.id).addClass(DigiWebApp.ApplicationController.sizeMode);	        					
	    						}
    						} else {
    	    					$('#' + myPage.id).removeClass("w320").removeClass("w480").removeClass("w640").removeClass("w800").removeClass("w1024").removeClass("w1080").removeClass("w1536").removeClass("w5000");
    	        				$('#' + myPage.id).addClass(DigiWebApp.ApplicationController.sizeMode);	        					
    						}
    					} else {
	    					$('#' + myPage.id).removeClass("w320").removeClass("w480").removeClass("w640").removeClass("w800").removeClass("w1024").removeClass("w1080").removeClass("w1536").removeClass("w5000");
	        				$('#' + myPage.id).addClass(DigiWebApp.ApplicationController.sizeMode);	        					
    					}
		        	}
		        });
    		}
    	}
	}

	, timeoutdeviceready_var: null
	, timeouthappened: false
	
	, timeoutdevicereadyhandler: function() {
		if (DigiWebApp.ApplicationController.timeoutdeviceready_var !== null) clearTimeout(DigiWebApp.ApplicationController.timeoutdeviceready_var);
		DigiWebApp.ApplicationController.timeouthappened = true;
		var myStartInfo = "DIGI-WebApp hat Plattform \"" + M.Environment.getPlatform() + "\" (" + navigator.userAgent + ") erkannt. Es werden keine Eventhandler registriert! (Version " + M.Application.getConfig('version') + ")";
        console.log(myStartInfo);
        //writeToLog(myStartInfo);
        // if in Chrome: enable FileSystem
        if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
        	window.requestFileSystem  = window.requestFileSystem || window.webkitRequestFileSystem;
        }
        this.skipEvents = true;
		this.devicereadyhandler();
	}
	
	, emergencyCode: "007RESET007"
	, emergencyStartedTimestamp: null
	, emergencyStringEntered: ''
	
	, keydownHandler: function(event) {
		if (event.timeStamp - DigiWebApp.ApplicationController.emergencyStartedTimestamp > 20000) {
			console.log("timeout: reset emergency-mechanism");
			DigiWebApp.ApplicationController.emergencyStartedTimestamp = event.timeStamp;
			DigiWebApp.ApplicationController.emergencyStringEntered = "";
		}
		var pos = DigiWebApp.ApplicationController.emergencyStringEntered.length;
		var whichKey = String.fromCharCode(event.which).toUpperCase();
		if (whichKey === DigiWebApp.ApplicationController.emergencyCode.substr(pos,1)) {
			DigiWebApp.ApplicationController.emergencyStringEntered = DigiWebApp.ApplicationController.emergencyStringEntered + whichKey;
		} else {
			DigiWebApp.ApplicationController.emergencyStartedTimestamp = event.timeStamp;
			DigiWebApp.ApplicationController.emergencyStringEntered = "";
			return true;
		}
		if (DigiWebApp.ApplicationController.emergencyStringEntered === DigiWebApp.ApplicationController.emergencyCode) {
			DigiWebApp.ApplicationController.emergencyStartedTimestamp = event.timeStamp;
			DigiWebApp.ApplicationController.emergencyStringEntered = "";
			DigiWebApp.ApplicationController.showConfirmDialog();
		}
		return true;
	}
	
	, fixToobarsIntervalVar: null
	
	, devicereadyhandler: function() {
		
        $(window).bind('resize', function() {
            DigiWebApp.ApplicationController.setImageClass();
        });
        
//		if (DigiWebApp.ApplicationController.timeouthappened) {
//	        $(window).bind('resize', function() {
//	            DigiWebApp.ApplicationController.setImageClass();
//	        });
//		} else {
//            var portraitScreenHeight;
//            var landscapeScreenHeight;
//
//            if(window.orientation === 0 || window.orientation === 180){
//                portraitScreenHeight = $(window).height();
//                landscapeScreenHeight = $(window).width();
//            }
//            else{
//                portraitScreenHeight = $(window).width();
//                landscapeScreenHeight = $(window).height();
//            }
//	        var tolerance = 25;
//	        $(window).bind('resize', function() {
//	            if ((window.orientation === 0 || window.orientation === 180) 
//	            && ((window.innerHeight + tolerance) < portraitScreenHeight)) {
//	                // keyboard visible in portrait
//	            	$('[data-role=footer]').hide();
//	            } else if((window.innerHeight + tolerance) < landscapeScreenHeight) {
//	                // keyboard visible in landscape
//	            	$('[data-role=footer]').hide();
//	            } else {
//	                // keyboard NOT visible
//	            	$('[data-role=footer]').show();
//	            }
//	            DigiWebApp.ApplicationController.setImageClass();
//	        });
//		}

		try {
			navigator.splashscreen.hide();
		} catch(e) {
			console.log("unable to hide splashscreen");
		}
		
		try {
			StatusBar.show();
			StatusBar.overlaysWebView(false);
			StatusBar.styleLightContent();
		} catch(e) {
			console.log("unable to modify StatusBar");
		}

		DigiWebApp.SettingsController.init(YES,YES);
        
        if (DigiWebApp.SettingsController.getSetting('debug')) { 
        	DigiWebApp.SettingsController.globalDebugMode = YES; 
        } else {
        	DigiWebApp.SettingsController.globalDebugMode = NO; 
        }
		try {
			if (DigiWebApp.SettingsController.featureAvailable('417')) {
				var fileNamesToDelete = [];
				DigiWebApp.ServiceAppController.listDirectory(function(results) {
					fileNamesToDelete = [];
					_.each(results, function(fileName) {
						if (fileName.search("DigiWebAppServiceApp.*.response.json") === 0) {
							if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("delete " + fileName);
							fileNamesToDelete.push(fileName);
						}
					});
					DigiWebApp.ServiceAppController.deleteFilesInServiceApp(fileNamesToDelete, function(data){
						DigiWebApp.ApplicationController.realDeviceReadyHandler();
					}, function(){
						DigiWebApp.ApplicationController.realDeviceReadyHandler();
					});
				});
			} else {
				DigiWebApp.ApplicationController.realDeviceReadyHandler();
			}
		} catch (exDeleteFiles) {
			DigiWebApp.ApplicationController.realDeviceReadyHandler();
		}
	}
	
	, realDeviceReadyHandler: function() {
		
    	writeToLog("DIGI-WebApp deviceReady " + new Date().toString());

//		try {
		    	
			DigiWebApp.ApplicationController.DigiLoaderView.hide();
			
			try {
				//alert("hiding splash");
				navigator.splashscreen.hide();
			} catch(e) {
				console.log("unable to hide splashscreen");
			}
			
			if ( M.Environment.getPlatform().substr(0,10) === "BlackBerry" ) {
	    		// unfix header
				_.each(DigiWebApp.app.pages, function(myPage) {
					if ( typeof(myPage.header) !== "undefined" ) {
						$('#' + myPage.header.id ).removeClass("ui-header-fixed");
					}
				});
	    		// unfix footer
	    		$('[id=' + DigiWebApp.TabBar.id  + ']').each(function() {
					$(this).removeClass("ui-footer-fixed");
				});
	    		//$(document).keydown(DigiWebApp.ApplicationController.keypressedHandler);
			} else {
				// refresh fixed toolbars every second
				//DigiWebApp.ApplicationController.fixToobarsIntervalVar = setInterval(function() {try { $.mobile.fixedToolbars.show(); } catch(e) { console.error(e); };}, 1000);
			}
	    	
	    	if (DigiWebApp.ApplicationController.timeoutdeviceready_var !== null) clearTimeout(DigiWebApp.ApplicationController.timeoutdeviceready_var);
			
	    	DigiWebApp.ApplicationController.setImageClass();
	
//	    	$(window).resize(function() {
//	    		DigiWebApp.ApplicationController.setImageClass();
//	    	});
	
	    	//console.log("DIGI-WebApp running on platform: " + M.Environment.getPlatform());
	    	//alert("typeof(DigiWebApp.ApplicationController.init)=" + typeof(DigiWebApp.ApplicationController.init));
	    	DigiWebApp.ApplicationController.init(true);
	    	//alert("nach ApplicationController.init");
	        if ((this.skipEvents !== true) || (( M.Environment.getPlatform().substr(0,10) === "BlackBerry") && (DigiWebApp.ApplicationController.timeouthappened !== true))) {
	        	//document.addEventListener("backbutton", DigiWebApp.ApplicationController.backbuttonhandler, false);
	        	$(document).bind('backbutton', DigiWebApp.ApplicationController.backbuttonhandler);
	        	//document.addEventListener("menubutton", DigiWebApp.ApplicationController.menubuttonhandler, false);
	        	$(document).bind('menubutton', DigiWebApp.ApplicationController.menubuttonhandler);
	        	// just in case again in 10 seconds via timeout (just for BlackBerry)
	        	//DigiWebApp.ApplicationController.registerButtonHandlerByTimeoutVar = setTimeout("DigiWebApp.ApplicationController.registerButtonHandlerByTimeout()",10000);
	        } else {
	        	//console.log("skipping eventhandlerregistration for back- and menubutton (" + this.skipEvents + ")");
	        }
	        
			//document.addEventListener("pause", DigiWebApp.ApplicationController.closeChildbrowser, false);

//		} catch(e) {
//			//trackError(e);
//			console.error(e);
//		}
	}
	
	, inAppBrowser_var: null
	
	, closeChildbrowser: function() {
		//alert("pause");
		try {
			plugins.childBrowser.close();
		} catch(e) {
		}
		try {
			DigiWebApp.ApplicationController.inAppBrowser_var.close();
		} catch(e) {
		}
	}
       
    , backButtonTimeoutVar: null
    
    , backbuttonhandler: function() {
    	var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));
		if ((!DigiWebApp.SettingsController.showCredentialsAlert)) {
	    	if (
	    	   (DigiWebApp.TabBar.tabItem1.isActive) 
	    	|| (ChefToolOnly && (M.ViewManager.getCurrentPage().get("id") === DigiWebApp.DashboardPage.get("id")))
	    	) {
	   
	    		if ( typeof(navigator.app) !== "undefined" ) {
	        		DigiWebApp.ApplicationController.nativeConfirmDialogView({
		            	  title: M.I18N.l('quitQuestion')
	    		        , message: M.I18N.l('quitQuestionMsg')
			            , confirmButtonValue: M.I18N.l('yes')
	            		, cancelButtonValue: M.I18N.l('no')
	            		, callbacks: {
	                		  confirm: {
	                    		  target: this
	                    		, action: function() {
				                        	navigator.app.exitApp();
	                    				}
	                			}
	                		, cancel: {
	                    		  target: this
	                    		, action: function() {
	                        				return;
	                    				}
	                		}
	            		}
	        		});
	
	    		}
	    		
	    	} else {
	    		// catch double-fire of backbutton-event via timeout
	    		DigiWebApp.ApplicationController.backButtonTimeoutVar = setTimeout("DigiWebApp.ApplicationController.backButtonToBookTimePage()",500);
	    		//DigiWebApp.NavigationController.toBookTimePage();
			}
		}
    }
    
    , registerButtonHandlerByTimeoutVar: null
    
    , registerButtonHandlerByTimeout: function() {
    	if (( M.Environment.getPlatform().substr(0,10) === "BlackBerry") && (DigiWebApp.ApplicationController.timeouthappened !== true)) {
    		console.log("registering buttonhandler again on blackberry");
        	$(document).bind('backbutton', DigiWebApp.ApplicationController.backbuttonhandler);
        	$(document).bind('menubutton', DigiWebApp.ApplicationController.menubuttonhandler);
    	}
    	clearTimeout(DigiWebApp.ApplicationController.registerButtonHandlerByTimeoutVar);
    }
    
    , backButtonToBookTimePage: function() {
    	clearTimeout(DigiWebApp.ApplicationController.backButtonTimeoutVar);
    	var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));
    	if (ChefToolOnly) {
			if (DigiWebApp.SettingsController.featureAvailable('404')) {
	    		DigiWebApp.NavigationController.toButtonDashboardPageFlipTransition();
			} else {
	    		DigiWebApp.NavigationController.toDashboardPageFlipTransition();
			}
    	} else {
    		DigiWebApp.NavigationController.toBookTimePageFlipTransition();
    	}
    }

    , menubuttonhandler: function() {
		if (!DigiWebApp.SettingsController.showCredentialsAlert) {
			if (DigiWebApp.SettingsController.featureAvailable('404')) {
				DigiWebApp.NavigationController.backToButtonDashboardPageFlipTransition();
			} else {
				DigiWebApp.NavigationController.backToDashboardPageFlipTransition();
			}
		}
    }
    
    , showConfirmDialog: function() {
    	var that = this;
        //M.DialogView.confirm({
        DigiWebApp.ApplicationController.nativeConfirmDialogView({
              title: M.I18N.l('secretQuestion')
            , message: M.I18N.l('secretQuestionMsg')
            , confirmButtonValue: M.I18N.l('yes')
            , cancelButtonValue: M.I18N.l('no')
            , callbacks: {
                confirm: {
                      target: this
                    , action: function() {
                        // only clears entries of the app
                        // (with prefix: M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX)            
        				var zuruecksetzen = function(mycompany, mypassword, myconnectionCode, myworkerId) {
        					writeToLog("DIGI-WebApp wird zurückgesetzt");
        					DigiWebApp.SettingsController.credentialsAlertShown = false;
	    					DigiWebApp.ApplicationController.deleteAllData(); 
	                    	DigiWebApp.BookingController.currentBooking = null;
	                    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
	                        	$('#' + DigiWebApp.BookingPageWithIconsScholpp.content.currentBookingLabel.id).html("");
	                    	} else {
	                        	$('#' + DigiWebApp.BookingPage.content.currentBookingLabel.id).html("");
	                    	}
	                        // reset app by setting location new => like web page reload
	                        //location.href = location.protocol + '//' + location.host + location.pathname;
	                    	DigiWebApp.SettingsController.showIOSMessage = false;
	                    	//console.log(mycompany, mypassword, myconnectionCode, myworkerId);
	                    	if (mycompany !== null && mypassword !== null && myconnectionCode !== null && myworkerId !== null) {
	        					writeToLog("Zugangsdaten blieben erhalten");
	                    		DigiWebApp.SettingsController.init(YES);
								DigiWebApp.SettingsController.setSetting("company", mycompany);
								DigiWebApp.SettingsController.setSetting("password", mypassword);
								DigiWebApp.SettingsController.setSetting("connectionCode", myconnectionCode);
								DigiWebApp.SettingsController.setSetting("workerId", myworkerId);
	                    	}
	                        DigiWebApp.ApplicationController.init(true);
        				};
        	            DigiWebApp.ApplicationController.nativeConfirmDialogView({
	        	                title: M.I18N.l('keepCredentials')
	        	              , message: M.I18N.l('keepCredentialsMsg')
	        	              , confirmButtonValue: M.I18N.l('yes')
	        	              , cancelButtonValue: M.I18N.l('no')
	        	              , callbacks: {
		        	                  confirm: {
			    	                        target: this
			    	                      , action: function() {
			    								var Scompany = DigiWebApp.SettingsController.getSetting("company");
			    								var Spassword = DigiWebApp.SettingsController.getSetting("password");
			    								var SconnectionCode = DigiWebApp.SettingsController.getSetting("connectionCode");
			    								var SworkerId = DigiWebApp.SettingsController.getSetting("workerId");
			    								zuruecksetzen(Scompany, Spassword, SconnectionCode, SworkerId);
			    	            		  }
		        	            	}
			                        , cancel: {
				                            target: this
				                          , action: function() {
				                        		zuruecksetzen(null, null, null, null);
				                          }
				                    }
	        	              }
        	            });
                    }
                }
                , cancel: {
                      target: this
                    , action: function() {
                    	that.clickCounter = 0;
                    }
                }
            }
        });
    }

    , setTransitionsSetting: function() {
        /*
         * Platfroms in the wild:
         * 		"BlackBerry"
         * 		"iPad"
         * 		"Linux armv5tejl" (Android 2.3.3 Emulator)
         * 		"Linux armv7l" (Samsung Galaxy Xcover, Probleme mit GPS (POSITION_UNAVAILABLE trotz aktiviertem GPS-Sensor))
         * 		"Linux armv7l" (Samsung Galaxy S2)
         * 		"Linux armv7l" (HTC Desire)
         */
    	var deviceversion = "0";
    	if (typeof(device) !== "undefined") deviceversion = new String(device.version);

    	var deviceplatform = "";
    	if (typeof(device) !== "undefined") deviceplatform = new String(device.platform);

    	var myPlatform = M.Environment.getPlatform();
        if (       ( myPlatform.substr(-2)  === "86" )
        		|| ( myPlatform.substr(-3)  === "_64" )
        		|| ( myPlatform.substr(-5)  === "Win32" )
        		|| ( myPlatform.substr(-5)  === "Win64" )
        		|| ( myPlatform.substr(0,3) === "Mac" )
        		|| ( myPlatform.substr(0,6) === "iPhone")
        		|| ( myPlatform.substr(0,4) === "iPad")
        		|| ( ( deviceversion.substr(0,1) >= 4 ) && ( deviceplatform.substr(0,7) >= "Android" ) )
        	) {
        	// enable Transitions (if not ButtonMenu is enabled (404 yet breaks Transitions))
            M.Application.config.useTransitions = (DigiWebApp.SettingsController.getSetting('useTransitionsSetting') && !DigiWebApp.SettingsController.featureAvailable('404'));
            //M.Application.config.useTransitions = NO; // transitions are ugly in jquery 1.1.0
        } else {
            M.Application.config.useTransitions = NO;
        }
    }
    
    /**
     * init is called by the pageshow event defined in DigiWebApp.SplashViewPage.
     * It initializes the callbackStatus object and the application's settings.
     * After that it reads the company and password setting. If they are not defined, an alert appears, indicating that
     * no credentials are entered and the app redirects to the settings page.
     * If credentials are entered, the data receiving process is started by calling
     * authenticate of this controller.
     *
     *
     * @param isFirstLoad is passed if this function is used in a page event like pageshow => determines that the page is loaded for the very
     * first time during this application life cycle
     */
    , init: function(isFirstLoad) {
    	//alert("in DigiWebApp.ApplicationController.init");
    	//alert("vor DigiWebApp.TabBar.tabItem1.internalEvents.tap.action = function ()");
    	DigiWebApp.TabBar.tabItem1.internalEvents.tap.action = function () {
    		//console.log("tabItem1");
            if(this.page) {
                M.Controller.switchToTab(this,YES);
            } else {
                this.parentView.setActiveTab(this);
            }
        };
    	//alert("vor DigiWebApp.TabBar.tabItem2.internalEvents.tap.action = function ()");
    	DigiWebApp.TabBar.tabItem2.internalEvents.tap.action = function () {
    		//console.log("tabItem2");
            if(this.page) {
                M.Controller.switchToTab(this,NO);
            } else {
                this.parentView.setActiveTab(this);
            }
        };
        /*
        $('#' + DigiWebApp.app.pages.bookingPage.id).touchwipe({
              wipeLeft: function() { alert("bookingPageleft"); }
            , wipeRight: function() { alert("bookingPageright"); }
            , wipeUp: function() { alert("bookingPageup"); }
            , wipeDown: function() { alert("bookingPagedown"); }
            , min_move_x: 100
            , min_move_y: 100
            , preventDefaultEvents: true
       });
        $('#' + DigiWebApp.app.pages.dashboard.id).touchwipe({
              wipeLeft: function() { alert("dashboardleft"); }
            , wipeRight: function() { alert("dashboardright"); }
            , wipeUp: function() { alert("dashboardup"); }
            , wipeDown: function() { alert("dashboarddown"); }
            , min_move_x: 100
            , min_move_y: 100
            , preventDefaultEvents: true
       });
       */
       //console.warn("ApplicationController.init at timestamp " + M.Date.now().date.valueOf());
       //alert("vor DigiWebApp.ApplicationController.callbackStatus = {");
       
       DigiWebApp.ApplicationController.callbackStatus = {
            position: {
                  remote: NO
                , local: NO
            }
            , activity: {
                  remote: NO
                , local: NO
            }
            , order: {
                  remote: NO
                , local: NO
            }
            , workPlan: {
                  remote: NO
                , local: NO
            }
            , handOrder: {
                  remote: NO
                , local: NO
            }
            , kolonne: {
                  remote: NO
                , local: NO
            }
            , features: {
                  remote: NO
                , local: NO
            }
        };
        
        //alert("vor SettingsController.init");
        // set settings
        DigiWebApp.SettingsController.init(YES,YES);
        
        if (DigiWebApp.SettingsController.getSetting('debug')) { 
        	DigiWebApp.SettingsController.globalDebugMode = YES; 
        } else {
        	DigiWebApp.SettingsController.globalDebugMode = NO; 
        }
        
        DigiWebApp.ApplicationController.setTransitionsSetting();
        
        var fortfahren = function() {
        	//alert("suche nach offener Buchung");
	        // gibt es eine offene Buchung?
	        var bookings = DigiWebApp.Booking.find();
	        //alert("typeof(bookings)=" + typeof(bookings));
	        //alert("bookings.length=" + bookings.length);
	        if (bookings.length > 0) {
	            var isCurrentBookingAvailable = NO;
	            for (var i = 0; i < bookings.length; i++) {
	            	//alert("in for i=" + i);
	            	//if (DigiWebApp.SettingsController.globalDebugMode) console.log('booking[' + i + '].isCurrent = ' + bookings[i].get('isCurrent'));
	                if (bookings[i].get('isCurrent') === YES) {
	                	//alert("currentBooking found");
	                	//if (DigiWebApp.SettingsController.globalDebugMode) console.log('isCurrentBookingAvailable --> YES');
	                	isCurrentBookingAvailable = YES;
	                    break;
	                }
	            }
	            //if (DigiWebApp.SettingsController.globalDebugMode) console.log('isCurrentBookingAvailable = ' + isCurrentBookingAvailable);
	            if (isCurrentBookingAvailable === YES) {
	            	//alert("go to BookTimePage");
	            	DigiWebApp.NavigationController.toBookTimePage();
	            	if (parseBool(DigiWebApp.SettingsController.getSetting('stammdatenabgleichBeimAppStart'))) {
	    	        	//DigiWebApp.ApplicationController.startsync();
		                DigiWebApp.BookingController.sendBookings(NO, YES);
	            	}
	                return;
	            } else {
	            	DigiWebApp.NavigationController.toBookTimePage();
	                DigiWebApp.BookingController.sendBookings(NO, YES);
	            }
	        } else if (DigiWebApp.SettingsController.featureAvailable("402") && !DigiWebApp.BookingController.currentBooking) {
                	// Datenübertragung für Materialerfassung-only und Feierabend
              	  sendBautageberichtFunc = function() {
                	  			DigiWebApp.BautagebuchZusammenfassungController.load(DigiWebApp.BautagebuchZusammenfassungController.item);
			    				DigiWebApp.BautagebuchDatenuebertragungController.senden(
			    						DigiWebApp.BautagebuchZusammenfassungController.item
			    					    , function(msg) {
			    							DigiWebApp.BautagebuchBautageberichtDetailsController.deleteBautagesbericht(DigiWebApp.ApplicationController.startsync, DigiWebApp.ApplicationController.startsync, YES);
			    						}
			    						, function(xhr,err) {
			    							DigiWebApp.ApplicationController.startsync();
			    						}
			    				);
                	  	}
                	  	
              		DigiWebApp.BautagebuchBautageberichteListeController.init();
              		var bautagesberichte = DigiWebApp.BautagebuchBautagesbericht.find();
              		var matBautagesbericht = null;
              		_.each(bautagesberichte, function(bautagesbericht){
              			if (bautagesbericht.get('bautagesberichtTyp') == "<materialerfassung_only>") {
              				matBautagesbericht = bautagesbericht;
              			}
              		});
              		
              		if (matBautagesbericht) {
              			DigiWebApp.BautagebuchBautageberichtDetailsController.load(matBautagesbericht);
                  	  	DigiWebApp.BautagebuchZusammenfassungController.load(DigiWebApp.BautagebuchBautageberichtDetailsController.item);
                  	  	DigiWebApp.BautagebuchZusammenfassungController.finish(sendBautageberichtFunc);
              		} else {
              			DigiWebApp.ApplicationController.startsync();
              		}

            } else {
	        	DigiWebApp.NavigationController.toBookTimePage();
	        	DigiWebApp.ApplicationController.startsync();
	        }
        };
        
        var company = DigiWebApp.SettingsController.getSetting('company');
        var password = DigiWebApp.SettingsController.getSetting('password');
		if(!company || !password) {
            DigiWebApp.NavigationController.toBookTimePage(YES);
            DigiWebApp.SettingsController.showCredentialsAlert = YES;
            DigiWebApp.NavigationController.toSettingsPage(YES);
            return;
        } else {
            DigiWebApp.ApplicationController.updateModels(fortfahren);        	
        }
        
        //alert("startsync");
		//this.startsync();
        //DigiWebApp.BookingController.sendBookings(NO, YES);
        
    }
    
    , enforceChefToolOnly: function() {
    	//var debug = DigiWebApp.SettingsController.globalDebugMode;
    	var hideOverride = (DigiWebApp.SettingsController.showCredentialsAlert);
    	//if (debug) console.log("enforcing ChefToolOnly, hideOverride=" + hideOverride);
    	var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));
		if (DigiWebApp.SettingsController.featureAvailable('417')) { 
			try{$('[id=' + DigiWebApp.SettingsPage.content.ServiceApp_ermittleGeokoordinate.id  + ']').each(function() { $(this).show(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.ServiceApp_datenUebertragen.id  + ']').each(function() { $(this).show(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.ServiceApp_engeKopplung.id  + ']').each(function() { $(this).show(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.ServiceApp_PORTGrid.id  + ']').each(function() { $(this).show(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.ServiceApp_FallBack.id  + ']').each(function() { $(this).show(); });}catch(e){}
		} else {
			try{$('[id=' + DigiWebApp.SettingsPage.content.ServiceApp_ermittleGeokoordinate.id  + ']').each(function() { $(this).hide(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.ServiceApp_datenUebertragen.id  + ']').each(function() { $(this).hide(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.ServiceApp_engeKopplung.id  + ']').each(function() { $(this).hide(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.ServiceApp_PORTGrid.id  + ']').each(function() { $(this).hide(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.ServiceApp_FallBack.id  + ']').each(function() { $(this).hide(); });}catch(e){}
		}
		if (ChefToolOnly || hideOverride) {
			//if (debug) console.log("enforcing ChefToolOnly, HIDE");
	    	// hide tabbar
			try{$('[id=' + DigiWebApp.TabBar.id  + ']').each(function() { $(this).hide(); });}catch(e){}
			// hide checkboxes in settings
			try{$('[id=' + DigiWebApp.SettingsPage.content.autoTransferAfterBookTimeCheck.id  + ']').each(function() { $(this).hide(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.autoTransferAfterClosingDayCheck.id  + ']').each(function() { $(this).hide(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.autoSyncAfterBookTimeCheck.id  + ']').each(function() { $(this).hide(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.stammdatenabgleichBeimAppStartCheck.id  + ']').each(function() { $(this).hide(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.remarkIsMandatory.id  + ']').each(function() { $(this).hide(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.autoSaveGPSData.id  + ']').each(function() { $(this).hide(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.daysToHoldBookingsOnDeviceSliderContainer.id  + ']').each(function() { $(this).hide(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.auftragsDetailsKoppeln.id  + ']').each(function() { $(this).hide(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.detailierteZeitdaten.id  + ']').each(function() { $(this).hide(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.vibrationsDauerSliderContainer.id  + ']').each(function() { $(this).hide(); });}catch(e){}
		} else {
			//if (debug) console.log("enforcing ChefToolOnly, SHOW");
	    	// show tabbar
			try{$('[id=' + DigiWebApp.TabBar.id  + ']').each(function() { $(this).show(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.detailierteZeitdaten.id  + ']').each(function() { $(this).show(); });}catch(e){}
			// show checkboxes in settings
			try{$('[id=' + DigiWebApp.SettingsPage.content.autoTransferAfterBookTimeCheck.id  + ']').each(function() { $(this).show(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.autoTransferAfterClosingDayCheck.id  + ']').each(function() { $(this).show(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.autoSyncAfterBookTimeCheck.id  + ']').each(function() { $(this).show(); });}catch(e){}
			try{$('[id=' + DigiWebApp.SettingsPage.content.stammdatenabgleichBeimAppStartCheck.id  + ']').each(function() { $(this).show(); });}catch(e){}
			if (DigiWebApp.SettingsController.featureAvailable('403')) { 
				try{$('[id=' + DigiWebApp.SettingsPage.content.remarkIsMandatory.id  + ']').each(function() { $(this).show(); });}catch(e){}
			}
			try{$('[id=' + DigiWebApp.SettingsPage.content.autoSaveGPSData.id  + ']').each(function() { $(this).show(); });}catch(e){}
			if (DigiWebApp.SettingsController.featureAvailable('411')) { 
				try{$('[id=' + DigiWebApp.SettingsPage.content.daysToHoldBookingsOnDeviceSliderContainer.id  + ']').each(function() { $(this).show(); });}catch(e){}
			}
			if (DigiWebApp.SettingsController.featureAvailable('406')) { 
				try{$('[id=' + DigiWebApp.SettingsPage.content.auftragsDetailsKoppeln.id  + ']').each(function() { $(this).show(); });}catch(e){}
			}
			try{$('[id=' + DigiWebApp.SettingsPage.content.vibrationsDauerSliderContainer.id  + ']').each(function() { $(this).show(); });}catch(e){}
		}
		

    }
    
    , startsync: function(isFirstLoad) {
    	//alert("in startsync");
    	DigiWebApp.ApplicationController.syncStartTimestamp = D8.now().getTimestamp();

        // authentication data
        var company = DigiWebApp.SettingsController.getSetting('company');
        var password = DigiWebApp.SettingsController.getSetting('password');

		if(!company || !password) {
            DigiWebApp.NavigationController.toBookTimePage(YES);
            DigiWebApp.SettingsController.showCredentialsAlert = YES;
            DigiWebApp.NavigationController.toSettingsPage(YES);
            return;
        }

        M.Application.config.useTransitions = NO;

    	DigiWebApp.ApplicationController.syncRunning = YES;

        // nach Upload der Sonderbuchungen mit regulärem Stammdatenabgleich weitermachen
        var contSync = function() {
            DigiWebApp.SettingsController.sendConfiguration();
        }
        
        // lade Sonderbuchungen
        var isClosingDay = (!DigiWebApp.BookingController.currentBooking);
        var mySonderbuchungen = _.filter(DigiWebApp.Sonderbuchung.find(), function(n) { return !parseBool(n.get("uebertragen")) });
        DigiWebApp.JSONDatenuebertragungController.sendeSonderbuchungen(mySonderbuchungen, contSync, contSync, isClosingDay);
            	
    }
    
    /**
     * Simply displays an alert dialog indicating an connection error.
     * The button of the dialog is linked to the proceedWithLocalData function of this controller.
     * That means, when a connection error during data retrieval appears, the app proceeds with local data (if possible).
     */
    , connectionError: function() {
    	//DialogView.alert with action
        //M.DialogView.alert({
        DigiWebApp.ApplicationController.nativeAlertDialogView({
              title: M.I18N.l('connectionError')
            , message: M.I18N.l('connectionErrorMsg')
            , callbacks: {
                confirm: {
                      target: this
                    , action: 'proceedWithLocalData'
                }
            }
        });
    }

    /**
     * Checks whether it is possible to work with local data.
     * Possible if Orders, Positions and Activities are available locally.
     *
     * Navigates to booking page if it is possible and displays an alert dialog showing the user
     * that the app is working with offline data.
     *
     * Otherwise it displays an alert dialog showing that offline work is not possible
     */
    , proceedWithLocalData: function(fromwhere) {

		var that = DigiWebApp.ApplicationController;

		that.enforceChefToolOnly();
    	var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));    	
    	if (!ChefToolOnly) {

	        // check order
	        if(DigiWebApp.Order.findSorted().length > 0) {
	            that.setCallbackStatus('order', 'local', YES);
	        }
	        
	        // check positions
	        if(DigiWebApp.Position.findSorted().length > 0) {
	            that.setCallbackStatus('position', 'local', YES);
	        }
	        
	        // check activities
	        if(DigiWebApp.Activity.findSorted().length > 0) {
	            that.setCallbackStatus('activity', 'local', YES);
	        }
	        
	        // check features
	        if(DigiWebApp.Features.find().length > 0) {
	            that.setCallbackStatus('features', 'local', YES);
	        }
	
	        if (DigiWebApp.SettingsController.globalDebugMode) {
	            DigiWebApp.ApplicationController.nativeAlertDialogView({
	                  title: M.I18N.l('offlineWork')
	                , message: fromwhere
	            });
	        }
	        
	        if(that.isReadyToProceed()) {
	            DigiWebApp.NavigationController.toBookTimePage(YES);
	
	            //M.DialogView.alert({
	            DigiWebApp.ApplicationController.nativeAlertDialogView({
	                  title: M.I18N.l('offlineWork')
	                , message: M.I18N.l('offlineWorkMsg')
	            });
	        } else {
	        	var Bautagebuch = (DigiWebApp.SettingsController.featureAvailable('412'));
	        	var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));
	    		if (ChefToolOnly && Bautagebuch) {
	        		DigiWebApp.NavigationController.startBautagebuch();    			
	    		} else {
					if (DigiWebApp.SettingsController.featureAvailable('404')) {
			            DigiWebApp.NavigationController.toButtonDashboardPage();
					} else {
			            DigiWebApp.NavigationController.toDashboardPage();
					}
	    		}
	            //M.DialogView.alert({
	            DigiWebApp.ApplicationController.nativeAlertDialogView({
	                  title: M.I18N.l('offlineWorkNotPossible')
	                , message: M.I18N.l('offlineWorkNotPossibleMsg')
	            });
	        }
    	} else {
        	var Bautagebuch = (DigiWebApp.SettingsController.featureAvailable('412'));
        	var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));
    		if (ChefToolOnly && Bautagebuch) {
        		DigiWebApp.NavigationController.startBautagebuch();    			
    		} else {
				if (DigiWebApp.SettingsController.featureAvailable('404')) {
		            DigiWebApp.NavigationController.toButtonDashboardPage();
				} else {
		            DigiWebApp.NavigationController.toDashboardPage();
				}
    		}
    	}
    }


    /**
     * Routes to authenticate function of the DigiWebApp.RequestController.
     * Success callback calls authenticateSuccess of this controller.
     * Error callback calls proceedWithLocalData to check whether offline work is possible.
     */
    , authenticate: function() {
		
    	DigiWebApp.RequestController.authenticate({
              success: {
                  target: this
                , action: 'authenticateSuccess'
            }
            , error: {
                  target: this
                , action: function() {
            		console.error("authenticate-error");
        			this.proceedWithLocalData("authenticate");
                }
            }
        });

    }
    
    , timestampMitarbeiterZuletztGeladen: null
    
    /**
     *
     * The success callback for authenticate.
     * Dispatches between different return codes inside the server response.
     * 1: successful login
     * 2: invalid device id
     * 3: company id or password invalid
     *
     * when 1 is returned by the server, the order request is started
     * otherwise alert according to the kind of authentication error are shown and the view is switched
     * to the settings page to let the user adjust the credentials.
     *
     * @param data The returned data of the server in JSON, means JS object.
     * @param msg 
     * @param xhr The XMLHTTPRequest object.
     */
    , authenticateSuccess: function(data, msg, xhr) {

    	if ( typeof(data['return']) === "undefined" && typeof(data['ns:return']) !== "undefined" ) data['return'] = data['ns:return'];
        
    	switch(data['return']) {
            case '1':
                // Clear features from storage
	            	DigiWebApp.ApplicationController.activeFeaturesBeforeTransfer = []; 
	            	_.each(DigiWebApp.Features.find(), function(el) { 
	            		if (el.get("isAvailable") === "true") {
	            			DigiWebApp.ApplicationController.activeFeaturesBeforeTransfer.push(el.get("id"));
	            		}
	            	});
	            	DigiWebApp.Features.deleteAll();

	            this.setCallbackStatus('features', 'local', NO);
                DigiWebApp.ApplicationController.triggerUpdate = YES;
                DigiWebApp.DashboardController.init(YES);
                DigiWebApp.MediaListController.init(YES);
                	
        		var timestampNow = D8.now().getTimestamp();
        		if (DigiWebApp.ApplicationController.timestampMitarbeiterZuletztGeladen === null 
        		|| (timestampNow - DigiWebApp.ApplicationController.timestampMitarbeiterZuletztGeladen > 60000)) {
            		writeToLog("aktualisiere Mitarbeiter des Benutzers nach authenticate");
            		var recieveObj = {
          				  webservice: "mitarbeiter"
          				, loaderText: M.I18N.l('BautagebuchLadeMitarbeiter')
          				, successCallback: function(data){
	        	    		if (data && data.mitarbeiter && data.mitarbeiter.length > 0) {
	        	    			DigiWebApp.SettingsController.setSetting("mitarbeiterVorname", data.mitarbeiter[0].vorname);
	        	    			DigiWebApp.SettingsController.setSetting("mitarbeiterNachname", data.mitarbeiter[0].nachname);
	        	    			DigiWebApp.SettingsController.setSetting("mitarbeiterId", data.mitarbeiter[0].mitarbeiterId);
	        	    		}
	        	    		DigiWebApp.ApplicationController.timestampMitarbeiterZuletztGeladen = D8.now().getTimestamp();
	        	    		DigiWebApp.ApplicationController.getFeaturesFromRemote();        		
	        	    	}
          				, errorCallback: function(error) {
            	    		DigiWebApp.ApplicationController.DigiLoaderView.hide();
                			// Fehlermeldung
                			DigiWebApp.ApplicationController.nativeAlertDialogView({
                                title: M.I18N.l('offlineWorkNotPossible')
                              , message: M.I18N.l('offlineWorkNotPossibleMsg')
                			});
            	    	}
          				, additionalQueryParameter: "getAll=true&webAppId=" + DigiWebApp.SettingsController.getSetting("workerId")
          				//, timeout: 
          				, geraeteIdOverride: true
          				//, modus: 
            		};
            		DigiWebApp.JSONDatenuebertragungController.recieveData(recieveObj);
        		} else {
    	    		DigiWebApp.ApplicationController.getFeaturesFromRemote();        		
        		}

                DigiWebApp.ApplicationController.enforceChefToolOnly();
        		break;
            
            case '2':
                //M.DialogView.alert({
                DigiWebApp.ApplicationController.nativeAlertDialogView({
                      title: M.I18N.l('authenticationError2')
                    , message: M.I18N.l('authenticationErrorMsg2')
                });
                DigiWebApp.NavigationController.toSettingsPage(YES);
                break;

            case '3':
                //M.DialogView.alert({
                DigiWebApp.ApplicationController.nativeAlertDialogView({
                      title: M.I18N.l('authenticationError3')
                    , message: M.I18N.l('authenticationErrorMsg3')
                });
                DigiWebApp.NavigationController.toSettingsPage(YES);
                break;

            default:
                //M.DialogView.alert({
                DigiWebApp.ApplicationController.nativeAlertDialogView({
                      title: M.I18N.l('authenticationError')
                    , message: M.I18N.l('authenticationErrorMsg')
                });
                DigiWebApp.NavigationController.toSettingsPage(YES);
                break;
        }
    }

    /**
     * Calls getOrders on DigiWebApp.RequestController.
     * Success callback calls proceeds received orders and afterwards starts retrieving positions.
     * Error callback calls proceedWithLocalData to check whether offline work is possible.
     */
    , getOrdersFromRemote: function() {

        DigiWebApp.RequestController.getOrders({
              success: {
                  target: this
                , action: function(data, msg, xhr) {
                    if (this.getOrdersFromRemoteSuccess(data, msg, xhr) === true) {
                    	// get data sequentially
                    	this.getPositionsFromRemote();
                    } else {
                		//M.DialogView.alert({
                		DigiWebApp.ApplicationController.nativeAlertDialogView({
                			  title: M.I18N.l('noOrdersAvailable')
                			, message: M.I18N.l('noOrdersAvailableMsg')
                		});
                		//DigiWebApp.NavigationController.toSettingsPage(YES);
                    }
                }
            }
            , error: {
                  target: this
                , action: function() {
        			console.error("getOrdersFromRemote-error");
                    this.proceedWithLocalData("getOrdersFromRemote");
                }
            }
        });
    }

    /**
     * The success callback for getOrdersFromRemote.
     * If correct data is in response the following is done:
     * 1) the callback status for 'order' and 'remote' is set (means orders are correctly returned by server)
     * 2) the local available orders are deleted, the corresponding callback status is set
     * 3) orders, received from remote service, are saved in localstorage again and the corresponding status is set to YES
     *
     * @param data The returned data of the server in JSON, means JS object.
     * @param msg
     * @param xhr The XMLHTTPRequest object.
     */
    , getOrdersFromRemoteSuccess: function(data, msg, xhr) {
            	
   		if ( typeof(data['return']) === "undefined" && typeof(data['ns:return']) !== "undefined" ) {
    		data['return'] = data['ns:return'];
    		try {
    			this.myns = data['return'][0]['xsi:type'].split(":")[0];
    			var myns = this.myns;
    			 _.each(data['return'], function(el) {
    				 el.auftragsId = el[myns + ':auftragsId'];
    				 el.auftragsBezeichnung = el[myns + ':auftragsBezeichnung'];
    			 });
    		} catch(e) {
    		}
    	}

    	if(data['return']) {
            this.setCallbackStatus('order', 'remote', YES);

            // Clear orders from storages
            DigiWebApp.Order.deleteAll();
            this.setCallbackStatus('order', 'local', NO);
            var mIdArray = [];
            var rec = null;

            if(_.isObject(data['return']) && !_.isArray(data['return'])) {
                data['return'] = [data['return']];
            }

            // create a record for each order returned from the server and save it
            _.each(data['return'], function(el) {
                rec = DigiWebApp.Order.createRecord({
                      id: el.auftragsId
                    , name: el.auftragsBezeichnung
                });
                try {
                    rec.save();
                    mIdArray.push(rec.m_id);
                } catch(e) {
                    // maybe do something here
                	console.error("ERROR in getOrdersFromRemoteSuccess: " + e);
                }
            });

            localStorage.setItem(this.storagePrefix + '_orderKeys', JSON.stringify(mIdArray));

            this.setCallbackStatus('order', 'local', YES);

            return true;

        } else {

    		return false;
        }


    }

    /**
     * Calls getPositions on DigiWebApp.RequestController.
     * Success callback calls proceeds received positions and afterwards starts retrieving activities.
     * Error callback calls proceedWithLocalData to check whether offline work is possible.
     */
    , getPositionsFromRemote: function() {
    	var that = this;

    	that.setCallbackStatus('position', 'local', NO);
    	DigiWebApp.JSONDatenuebertragungController.empfangePositionen(
    			  function() {
      				that.setCallbackStatus('position', 'remote', YES);
    		    	that.setCallbackStatus('position', 'local', (DigiWebApp.Position.find().length > 0));
    				that.setCallbackStatus('order', 'remote', YES);
    		    	that.setCallbackStatus('order', 'local', (DigiWebApp.Order.find().length > 0));
    				that.getActivitiesFromRemote();
    			  }
    			, function() {
  				  	that.setCallbackStatus('position', 'remote', NO);
  				  	that.setCallbackStatus('order', 'remote', NO);
    				that.proceedWithLocalData("getPositionsFromRemote");
    			}
    	);

//    	DigiWebApp.RequestController.getPositions({
//              success: {
//                  target: this
//                , action: function(data, msg, xhr) {
//                    this.getPositionsFromRemoteSuccess(data, msg, xhr);
//                    this.getActivitiesFromRemote();
//                }
//            }
//            , error: {
//                  target: this
//                , action: function() {
//            		console.error("getPositionsFromRemote-error");
//            		this.proceedWithLocalData("getPositionsFromRemote");
//                }
//            }
//        });
    }

//    /**
//     * The success callback for getPositionsFromRemote.
//     * If correct data is in response the following is done:
//     * 1) the callback status for 'position' and 'remote' is set (means positions are correctly returned by server)
//     * 2) the local available positions are deleted, the corresponding callback status is set
//     * 3) positions, received from remote service, are saved in localstorage again and the corresponding status is set to YES
//     *
//     * @param data The returned data of the server in JSON, means JS object.
//     * @param msg
//     * @param xhr The XMLHTTPRequest object.
//     */
//    , getPositionsFromRemoteSuccess: function(data, msg, xhr) {
//
//   		if ( typeof(data['return']) === "undefined" && typeof(data['ns:return']) !== "undefined" ) {
//    		data['return'] = data['ns:return'];
//    		try {
//    			//myns = data['return'][0]['xsi:type'].split(":")[0];
//    			var myns = this.myns;
//    			 _.each(data['return'], function(el) {
//
//    				 el.positionsId = el[myns + ':positionsId'];
//    				 el.positionsBezeichnung = el[myns + ':positionsBezeichnung'];
//    				 el.auftragsId = el[myns + ':auftragsId'];
//
//    				 el.positionHausnummer = el[myns + ':positionHausnummer'];
//    				 el.positionPlz = el[myns + ':positionPlz'];
//    				 el.positionOrt = el[myns + ':positionOrt'];
//    				 el.positionLand = el[myns + ':positionZusatz'];
//    				 el.positionLongitude = el[myns + ':positionLongitude'];
//    				 el.positionLatitude = el[myns + ':positionLatitude'];
//    				 el.positionBeschreibung = el[myns + ':positionBeschreibung'];
//    				 el.positionTelefon = el[myns + ':positionTelefon'];
//
//    			 });
//    		} catch(e) {
//    		}
//    	}
//   		 
//    	if(data['return']) {
//            this.setCallbackStatus('position', 'remote', YES);
//
//            // Clear positions from storage
//            DigiWebApp.Position.deleteAll();
//            this.setCallbackStatus('position', 'local', NO);
//
//            var mIdArray = [];
//            var rec = null;
//
//
//            if(_.isObject(data['return']) && !_.isArray(data['return'])) {
//                data['return'] = [data['return']];
//            }
//
//            // create a record for each position returned from the server and save it
//            _.each(data['return'], function(el) {
//            	            	
//            	var posid = el.positionsId;
//                var posname = el.positionsBezeichnung;
//                var posstrasse = el.positionStrasse;
//                var poshausnummer = el.positionHausnummer;
//                var posplz = el.positionPlz;
//                var posort = el.positionOrt;
//                var posland = el.positionZusatz;
//                var poscountrycode = el.positionLand;
//                var posphone = el.positionTelefon;
//                var posfax = el.positionFax;
//                var posemail = el.positionEmail;
//                var posansprechpartner = el.positionAnsprechpartner;
//                var poskundenname = el.positionKundenname;
//                var poslongitude = el.positionLongitude;
//                var poslatitude = el.positionLatitude;
//                var posdescription = el.positionBeschreibung;
//                var posorderId = el.auftragsId;
//                
//            	if (typeof(posid) === "object") { posid = ""; } 
//            	if (typeof(posname) === "object") { posname = ""; } 
//            	if (typeof(posstrasse) === "object") { posstrasse = ""; } 
//            	if (typeof(poshausnummer) === "object") { poshausnummer = ""; } 
//            	if (typeof(posplz) === "object") { posplz = ""; } 
//            	if (typeof(posort) === "object") { posort = ""; } 
//            	if (typeof(posland) === "object") { posland = ""; } 
//            	if (typeof(poscountrycode) === "object") { poscountrycode = ""; } 
//            	if (typeof(posphone) === "object") { posphone = ""; } 
//            	if (typeof(posfax) === "object") { posfax = ""; } 
//            	if (typeof(posemail) === "object") { posemail = ""; } 
//            	if (typeof(posansprechpartner) === "object") { posansprechpartner = ""; } 
//            	if (typeof(poskundenname) === "object") { poskundenname = ""; } 
//            	if (typeof(poslongitude) === "object") { poslongitude = ""; } 
//            	if (typeof(poslatitude) === "object") { poslatitude = ""; } 
//            	if (typeof(posdescription) === "object") { posdescription = ""; } 
//            	if (typeof(posorderId) === "object") { posorderId = ""; } 
//
//        		rec = DigiWebApp.Position.createRecord({
//                      id: posid
//                    , name: posname
//                    , strasse: posstrasse
//                    , hausnummer: poshausnummer
//                    , plz: posplz
//                    , ort: posort
//                    , land: posland
//                    , countrycode: poscountrycode
//                    , telefon: posphone
//                    , fax: posfax
//                    , email: posemail
//                    , ansprechpartner: posansprechpartner
//                    , kundenname: poskundenname
//                    , longitude: poslongitude
//                    , latitude: poslatitude
//                    , description: posdescription
//                    , orderId: posorderId
//                });
//        		
//                try {
//                    rec.save();
//                    mIdArray.push(rec.m_id);
//                } catch(e) {
//                	console.error("ERROR in getPositionsFromRemoteSuccess: " + e);
//                }
//                
//            });
//
//            localStorage.setItem(this.storagePrefix + '_positionKeys', JSON.stringify(mIdArray));
//
//            this.setCallbackStatus('position', 'local', YES);
//        }
//    }


    /**
     * Calls getActivities on DigiWebApp.RequestController.
     * Success callback proceeds received activities and afterwards starts retrieving workplans.
     * Error callback calls proceedWithLocalData to check whether offline work is possible.
     */
    , getActivitiesFromRemote: function() {
    	var that = this;

    	that.setCallbackStatus('activity', 'local', NO);
    	DigiWebApp.JSONDatenuebertragungController.empfangeTaetigkeiten(
    			  function() {
    				that.setCallbackStatus('activity', 'remote', YES);
    		    	that.setCallbackStatus('activity', 'local', (DigiWebApp.Activity.find().length > 0));
    				that.getWorkPlansFromRemote();
    			  }
    			, function() {
  				  	that.setCallbackStatus('activity', 'remote', NO);
    				that.proceedWithLocalData("getActivitiesFromRemote");
    			}
    	);
    	
//        DigiWebApp.RequestController.getActivities({
//              success: {
//                  target: this
//                , action: function(data, msg, xhr, getActivities) {
//                    this.getActivitiesFromRemoteSuccess(data, msg, xhr);
//                    this.getWorkPlansFromRemote();
//                }
//            }
//            , error: {
//                  target: this
//                , action: function() {
//        			console.error("getActivitiesFromRemote-error");
//                    this.proceedWithLocalData("getActivitiesFromRemote");
//                }
//            }
//        });
    }

//    /**
//     * The success callback for getActivitiesFromRemote.
//     * If correct data is in response the following is done:
//     * 1) the callback status for 'activity' and 'remote' is set (means activities are correctly returned by server)
//     * 2) the local available activities are deleted, the corresponding callback status is set
//     * 3) activities, received from remote service, are saved in localstorage again and the corresponding status is set to YES
//     *
//     * @param data The returned data of the server in JSON, means JS object.
//     * @param msg
//     * @param xhr The XMLHTTPRequest object.
//     */
//    , getActivitiesFromRemoteSuccess: function(data, msg, xhr) {
//    	
//   		if ( typeof(data['return']) === "undefined" && typeof(data['ns:return']) !== "undefined" ) {
//    		data['return'] = data['ns:return'];
//    		try {
//    			//myns = data['return'][0]['xsi:type'].split(":")[0];
//    			var myns = this.myns;
//    			 _.each(data['return'], function(el) {
//    				 el.taetigkeitsId = el[myns + ':taetigkeitsId'];
//    				 el.taetigkeitsBezeichnung = el[myns + ':taetigkeitsBezeichnung'];
//    				 el.positionsId = el[myns + ':positionsId'];
//    			 });
//    		} catch(e) {
//    		}
//    	}
//   		
//    	if(data['return']) {
//    		
//            this.setCallbackStatus('activity', 'remote', YES);
//
//            // Clear activities from storage
//            DigiWebApp.Activity.deleteAll();
//            this.setCallbackStatus('activity', 'local', NO);
//
//            var mIdArray = [];
//            var rec = null;
//
//            if(_.isObject(data['return']) && !_.isArray(data['return'])) {
//                data['return'] = [data['return']];
//            }
//
//            // create a record for each order returned from the server and save it
//            _.each(data['return'], function(el) {
//            	if (DigiWebApp.Activity.find({query:{identifier: 'id', operator: '=', value: "" + el.taetigkeitsId}}).length === 0) {
//	                rec = DigiWebApp.Activity.createRecord({
//	                    id: el.taetigkeitsId,
//	                    name: el.taetigkeitsBezeichnung,
//	                    positionId: el.positionsId
//	                });
//	
//	                try {
//	                    rec.save();
//	                    mIdArray.push(rec.m_id);
//	                } catch(e) {
//	                	console.error("ERROR in getActivitiesFromRemoteSuccess: " + e);
//	                }
//            	}
//            });
//
//            localStorage.setItem(this.storagePrefix + '_activityKeys', JSON.stringify(mIdArray));
//
//            this.setCallbackStatus('activity', 'local', YES);
//        }
//    }

    /**
     * Calls getWorkPlans on DigiWebApp.RequestController.
     * Success callback proceeds received work plans and afterwards starts retrieving hand orders.
     * Error callback calls proceedWithLocalData to check whether offline work is possible.
     */
    , getWorkPlansFromRemote: function() {
    	var that = DigiWebApp.ApplicationController;
        DigiWebApp.RequestController.getWorkPlans({
              success: {
                  target: that
                , action: function(data, msg, xhr, getWorkplan) {
        			that.getWorkPlansFromRemoteSuccess(data, msg, xhr);
        			that.getHandOrdersFromRemote();
                }
            }
            , error: {
                  target: that
                , action: function() {
            		console.error("getWorkPlansFromRemote-error");
            		that.proceedWithLocalData("getWorkPlansFromRemote");
                }
            }
        });
    }


    /**
     * The success callback for getWorkPlansFromRemote.
     * If correct data is in response the following is done:
     * 1) the callback status for 'workplan' and 'remote' is set (means work plans are correctly returned by server)
     * 2) the local available work plans are deleted, the corresponding callback status is set
     * 3) work plans, received from remote service, are saved in localstorage again and the corresponding status is set to YES
     *
     * @param data The returned data of the server in JSON, means JS object.
     * @param msg
     * @param xhr The XMLHTTPRequest object.
     */
    , getWorkPlansFromRemoteSuccess: function(data, msg, xhr) {

   		if ( typeof(data['return']) === "undefined" && typeof(data['ns:return']) !== "undefined" ) {
    		data['return'] = data['ns:return'];
    		try {
    			//myns = data['return'][0]['xsi:type'].split(":")[0];
    			var myns = this.myns;
    			 _.each(data['return'], function(el) {
    				 el.arbeitsplanId = el[myns + ':arbeitsplanId'];
    				 el.positionen = el[myns + ':positionen'];
    				 el.taetigkeitsIds = el[myns + ':taetigkeitsIds'];
    				 el.arbeitsplanTyp = el[myns + ':arbeitsplanTyp'];
    			 });
    		} catch(e) {
    		}
    	}

    	if (data['return']) {
            
            this.setCallbackStatus('workPlan', 'remote', YES);
            
            // Clear activities from storage
            DigiWebApp.WorkPlan.deleteAll();
            this.setCallbackStatus('workPlan', 'local', NO);
            // create a record for each order returned from the server and save it
            _.each(data['return'], function(el) {
                DigiWebApp.WorkPlan.createRecord({
                      id: el.arbeitsplanId
                    , workplanType: el.arbeitsplanTyp
                    , activityPositions: el.positionen.join(',') // join collects references to positionen in a string
                    , activityIds: el.taetigkeitsIds.join(',')    // join collects references to taetigkeitsIds in a string
                }).save();
            });

            this.setCallbackStatus('workPlan', 'local', YES);
        }
    }


    /**
     * Calls getHandOrders on DigiWebApp.RequestController.
     * Success callback proceeds received hand orders and afterwards starts retrieving features.
     * Error callback calls proceedWithLocalData to check whether offline work is possible.
     */
    , getHandOrdersFromRemote: function() {
        
        DigiWebApp.RequestController.getHandOrders({
              success: {
                  target: this
                , action: function(data, msg, xhr) {
                    this.getHandOrdersFromRemoteSuccess(data, msg, xhr);
                    this.getKolonneFromRemote();
                }
            }
            , error: {
                  target: this
                , action: function() {
            		console.error("getHandOrdersFromRemote-error");
                    this.proceedWithLocalData("getHandOrdersFromRemote");
                }
            }
        });
    }

    /**
     * The success callback for getHandOrdersFromRemote.
     * If correct data is in response the following is done:
     * 1) the callback status for 'handOrder' and 'remote' is set (means hand orders are correctly returned by server)
     * 2) the local available hand orders are deleted, the corresponding callback status is set
     * 3) hand orders, received from remote service, are saved in localstorage again and the corresponding status is set to YES
     *
     * @param data The returned data of the server in JSON, means JS object.
     * @param msg
     * @param xhr The XMLHTTPRequest object.
     */
    , getHandOrdersFromRemoteSuccess: function(data, msg, xhr) {
        
   		if ( typeof(data['return']) === "undefined" && typeof(data['ns:return']) !== "undefined" ) {
    		data['return'] = data['ns:return'];
    		try {
    			//myns = data['return'][0]['xsi:type'].split(":")[0];
    			var myns = this.myns;
    			 _.each(data['return'], function(el) {
    				 el.handauftragsId = el[myns + ':handauftragsId'];
    				 el.handauftragsBezeichnung = el[myns + ':handauftragsBezeichnung'];
    			 });
    		} catch(e) {
    		}
    	}

    	if (data['return']) {
            this.setCallbackStatus('handOrder', 'remote', YES);

            // Clear handorders from storage
            DigiWebApp.HandOrder.deleteAll();
            this.setCallbackStatus('handOrder', 'local', NO);
            
            if(typeof(data['return']) === 'object' && !_.isArray(data['return'])) {
                data['return'] = [data['return']];
            }

            var mIdArray = [];
            var rec = null;

            if (_.isObject(data['return']) && !_.isArray(data['return'])) {
                data['return'] = [data['return']];
            }

            // create a record for each order returned from the server and save it
            _.each(data['return'], function(el) {
            	if (
            			(DigiWebApp.HandOrder.find({query:{identifier: 'id', operator: '=', value: el.handauftragsId}}).length === 0)
            		&&	(DigiWebApp.HandOrder.find({query:{identifier: 'name', operator: '=', value: el.handauftragsBezeichnung}}).length === 0)
            	) {
	                rec = DigiWebApp.HandOrder.createRecord({
	                      id: el.handauftragsId
	                    , name: el.handauftragsBezeichnung
	                    , isLocalOnly: NO
	                });
            	} else if (DigiWebApp.HandOrder.find({query:{identifier: 'id', operator: '=', value: el.handauftragsId}}).length !== 0) {
            		rec = DigiWebApp.HandOrder.find({query:{identifier: 'id', operator: '=', value: el.handauftragsId}})[0];
            		rec.set("id", el.handauftragsId);
            		rec.set("name", el.handauftragsBezeichnung);
            		rec.set("isLocalOnly", NO);
            	} else if (DigiWebApp.HandOrder.find({query:{identifier: 'name', operator: '=', value: el.handauftragsBezeichnung}}).length !== 0) {
            		rec = DigiWebApp.HandOrder.find({query:{identifier: 'name', operator: '=', value: el.handauftragsBezeichnung}})[0];
            		rec.set("id", el.handauftragsId);
            		rec.set("name", el.handauftragsBezeichnung);
            		rec.set("isLocalOnly", NO);
            	}
                try {
                    rec.save();
                    mIdArray.push(rec.m_id);
                    //_.each(DigiWebApp.Booking.find({query:{identifier: 'handOrderId', operator: '=', value: el.handauftragsBezeichnung}}), function(booking) {
                    _.each(DigiWebApp.Booking.find(), function(booking) {
                    	if (booking.get('handOrderId') !== null && booking.get('handOrderId') === el.handauftragsBezeichnung) {
                    		booking.set("handOrderId", el.handauftragsId);
                    		booking.save();
                    	}
                    });
                } catch(e) {
                	console.error("ERROR in getHandOrdersFromRemoteSuccess: " + e);
                }
            });

            // get locally saved hand orders and push them into mId array
            var locals = _.select(DigiWebApp.HandOrder.findSorted(), function(ho) {
                if (ho) return ho.get('isLocalOnly') === YES;
            });
            
            _.each(locals, function(el) {
                mIdArray.push(el.m_id);
            });
            
            localStorage.setItem(this.storagePrefix + '_handorderKeys', JSON.stringify(mIdArray));

            this.setCallbackStatus('handOrder', 'local', YES);
        } else {
        	
            this.setCallbackStatus('handOrder', 'remote', NO);

            // Clear handorders from storage
            DigiWebApp.HandOrder.deleteAll();
            this.setCallbackStatus('handOrder', 'local', NO);
            
        }
    }

    /**
     * Calls getFeatures on DigiWebApp.RequestController.
     * Success callback proceeds received features data.
     * Error callback calls proceedWithLocalData to check whether offline work is possible.
     */
    , getFeaturesFromRemote: function() {
        
        DigiWebApp.RequestController.getFeatures({
              success: {
                  target: this
                , action: function(data, msg, xhr) {
                    this.getFeaturesFromRemoteSuccess(data, msg, xhr);
                	var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));
                	var Bautagebuch = (DigiWebApp.SettingsController.featureAvailable('412'));
                	if (ChefToolOnly && !Bautagebuch) {
                		//TODO: Stammdaten für Bautagebuch laden
                		this.endSession();
                	} else {
                		//this.getOrdersFromRemote();
                		this.getPositionsFromRemote();
                	}
                }
            }
            , error: {
                  target: this
                , action: function() {
        			console.error("getFeaturesFromRemote-error");
                    //this.getOrdersFromRemote();
            		this.getPositionsFromRemote();
        			//this.proceedWithLocalData("getFeaturesFromRemote");
                }
            }
        });
    }


    /**
     * The success callback for getFeaturesFromRemote.
     *
     * @param data The returned data of the server in JSON, means JS object.
     * @param msg
     * @param xhr The XMLHTTPRequest object.
     */
    , getFeaturesFromRemoteSuccess: function(data, msg, xhr) {
    	        
        if (data) {
	   		if ( typeof(data['return']) === "undefined" && typeof(data['ns:return']) !== "undefined" ) {
	    		data['return'] = data['ns:return'];
	    		try {
	    			//myns = data['return'][0]['xsi:type'].split(":")[0];
	    			var myns = this.myns;
	    			 _.each(data['return'], function(el) {
	    				 el.keyId = el[myns + ':keyId'];
	    				 el.value = el[myns + ':value'];
	    			 });
	    		} catch(e) {
	    		}
	    	}
    	}

    	if (data && data['return']) {
        	
        	//if (DigiWebApp.SettingsController.globalDebugMode) console.log("Features empfangen");
        	
            this.setCallbackStatus('features', 'remote', YES);

            var k = null;

            if(_.isObject(data['return']) && !_.isArray(data['return'])) {
            	//console.log("data['return'] = [data['return']];");
                data['return'] = [data['return']];
            }

            // reset settings without gui-elements
            //DigiWebApp.SettingsController.setSetting('debug', false);
            DigiWebApp.SettingsController.setSetting('treatAllAsTablet', DigiWebApp.SettingsController.defaultsettings.get('treatAllAsTablet'));
            DigiWebApp.SettingsController.setSetting('treatAllAsPhone', DigiWebApp.SettingsController.defaultsettings.get('treatAllAsPhone'));
            DigiWebApp.SettingsController.setSetting('settingsPassword', DigiWebApp.SettingsController.defaultsettings.get('settingsPassword'));
            var oldBranding = DigiWebApp.SettingsController.getSetting('branding');
            DigiWebApp.SettingsController.setSetting('branding', DigiWebApp.SettingsController.defaultsettings.get('branding'));
            DigiWebApp.SettingsController.setSetting('silentLoader', DigiWebApp.SettingsController.defaultsettings.get('silentLoader'));
            DigiWebApp.SettingsController.setSetting('mapType', DigiWebApp.SettingsController.defaultsettings.get('mapType'));
            //DigiWebApp.SettingsController.setSetting('useTransitionsSetting', DigiWebApp.SettingsController.defaultsettings.get('useTransitionsSetting'));
            DigiWebApp.SettingsController.setSetting('datatransfer_min_delay', DigiWebApp.SettingsController.defaultsettings.get('datatransfer_min_delay'));
            DigiWebApp.SettingsController.setSetting('GPSTimeOut', DigiWebApp.SettingsController.defaultsettings.get('GPSTimeOut'));
            DigiWebApp.SettingsController.setSetting('WebserviceTimeOut', DigiWebApp.SettingsController.defaultsettings.get('WebserviceTimeOut'));
            DigiWebApp.SettingsController.setSetting('LoaderTimeOut', DigiWebApp.SettingsController.defaultsettings.get('LoaderTimeOut'));
            DigiWebApp.SettingsController.setSetting('debugDatabaseServer', DigiWebApp.SettingsController.defaultsettings.get('debugDatabaseServer'));

            DigiWebApp.ApplicationController.triggerUpdate = NO;
            
            // Wir gehen zunächst davon aus, dass es im Folgenden keine neuen Features gibt:
            //DigiWebApp.ApplicationController.restartApp = NO; // es kann auch vor dem Speichern der Settings gesetzt worden sein.
            
            // create a record for each feature returned from the server and save it
            _.each(data['return'], function(el, i) {
            	var prefix = "";
            	if ( typeof(el.valueType) === "undefined" ) {
            		// we are probably in InternetExplorer
            		prefix = DigiWebApp.ApplicationController.myns + ":";
            	}
            	//console.log("el['" + prefix + "valueType'] = " + el[prefix + 'valueType']);
            	if (el[prefix + 'valueType'] === "Setting_WebApp") {
            		//if (DigiWebApp.SettingsController.globalDebugMode) console.log("Setting: " + el[prefix + 'keyId'] + "=" + el[prefix + 'value']);
            		var prop_setting = el[prefix + 'value'];
            		if (prop_setting === "false" || prop_setting === "true" ) { prop_setting = ( prop_setting === "true" ); }
            		DigiWebApp.SettingsController.setSetting(el[prefix + 'keyId'], prop_setting);
            	} else if (el[prefix + 'valueType'] === "Feature") {
            		//if (DigiWebApp.SettingsController.globalDebugMode) console.log("Feature: " + el[prefix + 'keyId'] + "=" + el[prefix + 'value']);
	                k = DigiWebApp.Features.createRecord({
	                      id: el[prefix + 'keyId']
	                    , name: el[prefix + 'keyId']
	                    , isAvailable: el[prefix + 'value']
	                }).save();
	                
	                // muss die App wegen des neu empfangenen Features neu gestartet werden?
	                var activeFeatureFound = NO;
	                _.each(DigiWebApp.ApplicationController.activeFeaturesBeforeTransfer, function(activeFeature) {
	                	// ist die empfangene Feature-ID schon vor dem Abgelich aktiv gewesen?
	                	if (el[prefix + 'keyId'] === activeFeature) activeFeatureFound = YES;
	                });
	                // die App neu starten, wenn:
	                //		- das Feature vorher aktiv war und jetzt inaktiv gesetzt wird
	                //		- das Feature vorher inaktiv war und jetzt aktiv gesetzt wird
	                if ((el[prefix + 'value'] === "true" && !activeFeatureFound) || (el[prefix + 'value'] === "false" && activeFeatureFound)) {
	                	if (el[prefix + 'keyId'] === "400") DigiWebApp.ApplicationController.restartApp = YES;		// Foto
	                	if (el[prefix + 'keyId'] === "401") DigiWebApp.ApplicationController.restartApp = YES;		// Sprachaufzeichnung
	                	//if (el[prefix + 'keyId'] === "402") DigiWebApp.ApplicationController.restartApp = YES;	// Materialerfassung 
	                	if (el[prefix + 'keyId'] === "403") DigiWebApp.ApplicationController.restartApp = YES;		// Bemerkungsfeld
	                	if (el[prefix + 'keyId'] === "404") DigiWebApp.ApplicationController.restartApp = YES;		// Button-Menü
	                	if (el[prefix + 'keyId'] === "405") DigiWebApp.ApplicationController.restartApp = YES;		// Unterschrift
	                	if (el[prefix + 'keyId'] === "406") DigiWebApp.ApplicationController.restartApp = YES;		// Auftragsinfo
	                	//if (el[prefix + 'keyId'] === "407") DigiWebApp.ApplicationController.restartApp = YES;	// Tagescheckliste
	                	if (el[prefix + 'keyId'] === "408") DigiWebApp.ApplicationController.restartApp = YES;		// Anwesenheitsliste
	                	if (el[prefix + 'keyId'] === "409") DigiWebApp.ApplicationController.restartApp = YES;		// ChefTool-Only
	                	if (el[prefix + 'keyId'] === "410") DigiWebApp.ApplicationController.restartApp = YES;		// "Handauftrag" ausblenden
	                	if (el[prefix + 'keyId'] === "411") DigiWebApp.ApplicationController.restartApp = YES;		// Zeitbuchungen X Tage auf Gerät behalten
	                	if (el[prefix + 'keyId'] === "412") DigiWebApp.ApplicationController.restartApp = YES;		// Bautagebuch
	                	if (el[prefix + 'keyId'] === "413") DigiWebApp.ApplicationController.restartApp = YES;		// GPS-Funktion ausblenden
	                	if (el[prefix + 'keyId'] === "414") DigiWebApp.ApplicationController.restartApp = YES;		// Kommen/Gehen-Only
	                	//if (el[prefix + 'keyId'] === "415") DigiWebApp.ApplicationController.restartApp = YES;	// Feierabend-Icon oben rechts
	                	if (el[prefix + 'keyId'] === "416") DigiWebApp.ApplicationController.restartApp = YES;		// Tätigkeitsicons auf Buchungs-Screen
	                	if (el[prefix + 'keyId'] === "417") DigiWebApp.ApplicationController.restartApp = YES;	// DIGI-ServiceApp
	                	if (el[prefix + 'keyId'] === "418") DigiWebApp.ApplicationController.restartApp = YES;		// Spesen/Auslöse
	                	if (el[prefix + 'keyId'] === "419") DigiWebApp.ApplicationController.restartApp = YES;		// Scholpp-Spesen
	                	if (el[prefix + 'keyId'] === "422") DigiWebApp.ApplicationController.restartApp = YES;		// gefahreneKilometer
	                	if (el[prefix + 'keyId'] === "423") DigiWebApp.ApplicationController.restartApp = YES;		// Terminliste
	                	if (el[prefix + 'keyId'] === "424") DigiWebApp.ApplicationController.restartApp = YES;		// Buchen mit Tätigkeitsbuttons für Kunde Stooss
	                	if (el[prefix + 'keyId'] === "425") DigiWebApp.ApplicationController.restartApp = YES;		// feste Pause stornieren
	                }
	                
	                // auch bei geändertem branding neu starten
	                if ((el[prefix + 'keyId'] === "branding") && (el[prefix + 'value'] !== oldBranding)) DigiWebApp.ApplicationController.restartApp = YES;
	                
	            }
                DigiWebApp.ApplicationController.triggerUpdate = YES;
            });
            // zueinander inkompatible Einstellungen korrigieren
            if (DigiWebApp.SettingsController.getSetting('remarkIsOptional')) {
            	DigiWebApp.SettingsController.setSetting('remarkIsMandatory', false);
            }
            if (DigiWebApp.ApplicationController.triggerUpdate) {
            	DigiWebApp.DashboardPage.needsUpdate = true;
                DigiWebApp.MediaListPage.needsUpdate = true;
                DigiWebApp.DashboardController.init(YES);
                DigiWebApp.MediaListController.init(YES);
            }
            DigiWebApp.ApplicationController.triggerUpdate = NO;
            this.setCallbackStatus('features', 'local', YES);
            
        } else {

        	//if (DigiWebApp.SettingsController.globalDebugMode) console.log("keine Features empfangen");

        	// keine Features empfangen
            this.setCallbackStatus('features', 'remote', YES);

            // Clear Features from storage
            DigiWebApp.Features.deleteAll();
            this.setCallbackStatus('features', 'local', NO);
            /*DigiWebApp.Employee.createRecord({
                  id: '0'
                , name: 'Standardmitarbeiter'
                , kolonnenId: ''
                , isSelected: YES
            }).save();*/
            this.setCallbackStatus('features', 'local', YES);
        }

        if (DigiWebApp.SettingsController.getSetting('debug')) { 
        	DigiWebApp.SettingsController.globalDebugMode = YES; 
        } else {
        	DigiWebApp.SettingsController.globalDebugMode = NO; 
        }

    	if ((DigiWebApp.SettingsController.featureAvailable('409')) && (DigiWebApp.ApplicationController.profilingIntervalVar === null)) {
			if (DigiWebApp.SettingsController.featureAvailable('412')) {
	            //DigiWebApp.NavigationController.toBautagebuchBautageberichteListePageTransition(YES);
				DigiWebApp.NavigationController.startBautagebuch();
			} else {
				if (DigiWebApp.SettingsController.featureAvailable('404')) {
		            DigiWebApp.NavigationController.toButtonDashboardPage(YES);
				} else {
		            DigiWebApp.NavigationController.toDashboardPage(YES);
				}
			}
        	// Falls neue Features aktiviert wurden, muss sich die WebApp ggfs. neu starten
        	if (DigiWebApp.ApplicationController.restartApp === YES) {
    			DigiWebApp.ApplicationController.nativeAlertDialogView({
      			  	title: M.I18N.l('newFeatureActive')
      			  , message: M.I18N.l('newFeatureActiveMsg')
                  , callbacks: {
                    	confirm: {
                        	//  target: this
                        	//, action: 'proceedWithLocalData'
    						action: function() {
    							if (typeof(navigator.app) !== "undefined") {
    								if (typeof(location.origin) !== "undefined") {
    									navigator.app.loadUrl(location.origin + location.pathname);					
    								} else {
    									navigator.app.loadUrl(location.protocol + '//' + location.pathname);
    								}
    							} else {
    								window.location.reload();
    							}
    						}
                    	}
                  }
    			});
        	}
    	}

    	// go to next page
    	/*
        if(this.isReadyToProceed()) {
            DigiWebApp.NavigationController.toBookTimePage(YES);
        } else {
            //M.DialogView.alert({
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                  title: M.I18N.l('offlineWorkNotPossible')
                , message: M.I18N.l('offlineWorkNotPossibleMsg')
            });
        }
		*/
    }

    /**
     * Calls getKolonne on DigiWebApp.RequestController.
     * Success callback proceeds received kolonnen data.
     * Error callback calls proceedWithLocalData to check whether offline work is possible.
     */
    , getKolonneFromRemote: function() {
        
        DigiWebApp.RequestController.getKolonne({
              success: {
                  target: this
                , action: function(data, msg, xhr) {
                    this.getKolonneFromRemoteSuccess(data, msg, xhr);
                }
            }
            , error: {
                  target: this
                , action: function() {
        			console.error("getKolonneFromRemote-error");
        			this.proceedWithLocalData("getKolonneFromRemote");
                }
            }
        });
    }


    /**
     * The success callback for getKolonneFromRemote.
     *
     * Distinguishes between two scenarios:
     * 1) A Kolonne is returned
     * 2) No Kolonne is returned
     *
     * Case 1:
     * 1) the callback status for 'kolonne' and 'remote' is set (means a kolonne is correctly returned by server)
     * 2) the local available employees are deleted, the corresponding callback status is set
     * 3) employees, received from remote service, are saved in localstorage again and the corresponding status is set to YES
     *
     * 4) If a switch from a "No Kolonne" state of the app occured, the employee selection LS is cleared
     * 5) If the employee state of the app is different from "Emp Selection done" set to 1 (kolonne loaded but no selection yet)
     *
     *
     * Case 2:
     * 1) the callback status for 'kolonne' and 'remote' is set (means a kolonne is correctly returned by server, even though it's not a kolonnes)
     * 2) the local available employees are deleted, the corresponding callback status is set
     * 3) a standard employee with id=0 and name=Standardmitarbeiter is created and preselected and the corresponding local state set
     *
     *
     * In both cases:
     * 
     * 1) By calling isReadyToProceed() it is checked, whether the app is available to move to the next screen. otherwise an alert is shown.
     *    If the app is ready to proceed toBookTimePage() is called on DigiWebApp.NavigationController
     *
     * 2) endSession is called to close the session on the remote server
     *
     * 
     *
     * @param data The returned data of the server in JSON, means JS object.
     * @param msg
     * @param xhr The XMLHTTPRequest object.
     */
    , getKolonneFromRemoteSuccess: function(data, msg, xhr) {
    	
    	if (data) {
    		if ( typeof(data['return']) === "undefined" ) data['return'] = data['ns:return'];
    	}

        var mIdArray = [];
        var k = null;

        if (data && data['return']) {
            this.setCallbackStatus('kolonne', 'remote', YES);

            // Clear employees from storage
            DigiWebApp.Employee.deleteAll();
            this.setCallbackStatus('kolonne', 'local', NO);

            if ( _.isObject(data['return']) && !_.isArray(data['return']) ) {
                data['return'] = [data['return']];
            }

            // create a record for each order returned from the server and save it
            _.each(data['return'], function(el) {
                k = DigiWebApp.Employee.createRecord({
                      id: el.id
                    , name: el.name
                    , kolonnenId: el.kolonnenId
                    , isSelected: NO
                });

                try {
                	k.save();
                    mIdArray.push(k.m_id);
                } catch(e) {
                	console.error("ERROR in getKolonneFromRemoteSuccess: " + e);
                }

            });
            
            localStorage.setItem(this.storagePrefix + '_employeeKeys', JSON.stringify(mIdArray));
            
            this.setCallbackStatus('kolonne', 'local', YES);

            // clear local storage when switch from no kolonne
            if(localStorage.getItem(DigiWebApp.EmployeeController.empSelectionKey) == 0) {
                localStorage.removeItem(DigiWebApp.EmployeeController.empSelectionKey);
            }
            if(DigiWebApp.EmployeeController.getEmployeeState() != 2) {
                DigiWebApp.EmployeeController.setEmployeeState(1); // set it to "kolonne loaded but no selection yet"
            }
            
        } else {
            // no kolonne => mitarbeiterId = 0
            this.setCallbackStatus('kolonne', 'remote', YES);

            // Clear employees from storage
            DigiWebApp.Employee.deleteAll();
            this.setCallbackStatus('kolonne', 'local', NO);

            k = DigiWebApp.Employee.createRecord({
                  id: '0'
                , name: 'Standardmitarbeiter'
                , kolonnenId: ''
                , isSelected: YES
            }).save();
            mIdArray.push(k.m_id);
            localStorage.setItem(this.storagePrefix + '_employeeKeys', JSON.stringify(mIdArray));
            this.setCallbackStatus('kolonne', 'local', YES);
            DigiWebApp.EmployeeController.setEmployeeState(0);
        }

        // end session on server
        this.endSession();

        var empfangeBautagebuch = function() {
        	var that = DigiWebApp.ApplicationController;
            if (DigiWebApp.SettingsController.featureAvailable('412') || DigiWebApp.SettingsController.featureAvailable('402')) {
    	    	DigiWebApp.BautagebuchDatenuebertragungController.empfangen(that.afterTransfer, that.afterTransfer);
        	} else {
        		that.afterTransfer();
        	}
        }

        var empfangeFestepausendefinitionen = function() {
        	var that = DigiWebApp.ApplicationController;
            if (DigiWebApp.SettingsController.featureAvailable('425')) {
            	DigiWebApp.JSONDatenuebertragungController.empfangeFestepausendefinitionen(empfangeBautagebuch, empfangeBautagebuch); 
        	} else {
        		empfangeBautagebuch();
        	}
        }
    	
        empfangeFestepausendefinitionen();
    }
    
    , afterTransfer: function() {
    	var that = DigiWebApp.ApplicationController;
    	that.syncStopTimestamp = D8.now().getTimestamp();
    	that.syncLastDuration = that.syncStopTimestamp - that.syncStartTimestamp;
        if (that.profilingIntervalVar !== null) {
        	console.log('DIGI-WebApp-Profiling ' + D8.now().format("yyyymmdd-HHMMss") + ' ' + that.syncLastDuration + 'ms');
        }
    	if (that.profilingShowAlert) {
    		alert('DIGI-WebApp-Profiling: ' + M.I18N.l('profilingTook') + ' ' + that.syncLastDuration + 'ms');
    	}
    	
    	DigiWebApp.ApplicationController.syncRunning = NO;
    	
        // go to next page
        if(that.isReadyToProceed()) {
            if (DigiWebApp.ApplicationController.profilingIntervalVar === null) {
            	if (DigiWebApp.SettingsController.featureAvailable('409')) {
    	        	var Bautagebuch = (DigiWebApp.SettingsController.featureAvailable('412'));
    	    		if (Bautagebuch) {
    	    			DigiWebApp.NavigationController.startBautagebuch();    			
    	    		} else {
	    				if (DigiWebApp.SettingsController.featureAvailable('404')) {
	    		            DigiWebApp.NavigationController.toButtonDashboardPage(YES);
	    				} else {
	    		            DigiWebApp.NavigationController.toDashboardPage(YES);
	    				}
    	    		}
            	} else {
            		DigiWebApp.NavigationController.toBookTimePage(YES);
                	DigiWebApp.BookingController.init();
            	}
            	
            	// Falls neue Features aktiviert wurden, muss sich die WebApp ggfs. neu starten
            	if (DigiWebApp.ApplicationController.restartApp === YES) {
        			DigiWebApp.ApplicationController.nativeAlertDialogView({
          			  	title: M.I18N.l('newFeatureActive')
          			  , message: M.I18N.l('newFeatureActiveMsg')
                      , callbacks: {
                        	confirm: {
                            	//  target: this
                            	//, action: 'proceedWithLocalData'
        						action: function() {
									if (typeof(navigator.app) !== "undefined") {
										if (typeof(location.origin) !== "undefined") {
											navigator.app.loadUrl(location.origin + location.pathname);					
										} else {
											navigator.app.loadUrl(location.protocol + '//' + location.pathname);
										}
									} else {
										window.location.reload();
									}
        						}
                        	}
                      }
        			});
            	}
            	
            }
            DigiWebApp.ApplicationController.setTransitionsSetting();
        } else {
            DigiWebApp.ApplicationController.setTransitionsSetting();
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                  title: M.I18N.l('offlineWorkNotPossible')
                , message: M.I18N.l('offlineWorkNotPossibleMsg')
            });
        }

        if (that.profilingSingleRun) {
        	that.profilingIntervalVar = null;
    	}

    }

    /**
     * Calls endSession on DigiWebApp.RequestController.
     * Both callbacks do nothing.
     */
    , endSession: function() {
		DigiWebApp.ApplicationController.enforceChefToolOnly();
        DigiWebApp.RequestController.endSession({
              success: {
                  target: this
                , action: function(data, msg, xhr) {
        		}
            }
            , error: {
                  target: this
                , action: function() {
    				console.error("endSession-error");
            	}
            }
        });
    }

    /**
     * Sets the callback status of the callback status object (that is a controller property),,,,,,,,,,,,,,,,,,,,,,
     * @param {String} modelName The name of the model
     * @param {String} type Either 'local' or 'remote'
     * @param {Boolean} isSuccess Boolean determing the state
     */
    , setCallbackStatus: function(modelName, type, isSuccess) {
        this.callbackStatus[modelName][type] = isSuccess;
    }

    /**
     * by disjunction of local and remote value conjuncted with each other
     * it is calculated, whether the state of the app allows a proceed step
     */
    , isReadyToProceed: function() {

        var pos = this.callbackStatus['position'];
        var act = this.callbackStatus['activity'];
        var ord = this.callbackStatus['order'];
        var wpl = this.callbackStatus['workPlan'];

        return (pos.remote || pos.local) && (act.remote || act.local) && (ord.remote || ord.local); // && (wpl.remote || wpl.local);
    }
        
    , profilingIntervalVar: null
    , profilingSingleRun: NO
    , profilingShowAlert: NO
    
    , startProfiling: function(interval) {
    	if (DigiWebApp.ApplicationController.profilingIntervalVar === null) {
	    	if (typeof(interval) === "undefined") {
	    		DigiWebApp.ApplicationController.profilingIntervalVar = null;
	    	} else {
	    		if (interval !== 0) {
	    			if (interval > 10000) {
	    				DigiWebApp.ApplicationController.profilingSingleRun = NO;
	    				DigiWebApp.ApplicationController.profilingIntervalVar = setInterval(function() { DigiWebApp.ApplicationController.startsync(); }, interval);
	    			} else {
	    				console.error("Profiling-Interval too low!");
	    			}
	    		} else {
    				DigiWebApp.ApplicationController.profilingSingleRun = YES;
	    			DigiWebApp.ApplicationController.profilingIntervalVar = setTimeout(function() { clearTimeout(DigiWebApp.ApplicationController.profilingIntervalVar); DigiWebApp.ApplicationController.startsync(); }, 10);
	    		}
	    	}
    	} else {
			console.error("Profiling already running!");
    	}
    }

    , stopProfiling: function() {
    	clearInterval(DigiWebApp.ApplicationController.profilingIntervalVar);
    	DigiWebApp.ApplicationController.profilingIntervalVar = null;
    }
    
    , deleteAllData: function() {
		try {
			DigiWebApp.Booking.deleteAll();
		} catch(e) { console.error(e); }
		try {
			DigiWebApp.MediaFile.deleteAll();
		} catch(e) { console.error(e); }
		try {
			localStorage.clear('f');
		} catch(e) { console.error(e); }
    }

    , updateModels: function(callback) {
    	
		// aktuelle Zeitzone und Verschiebung merken
    	if (
    			(typeof(DigiWebApp.SettingsController.getSetting("currentTimezone")) === "undefined" || DigiWebApp.SettingsController.getSetting("currentTimezone") === "") 
    		||	(typeof(DigiWebApp.SettingsController.getSetting("currentTimezoneOffset")) === "undefined" || DigiWebApp.SettingsController.getSetting("currentTimezoneOffset") === "") 
    	){
	    	DigiWebApp.SettingsController.setSetting("currentTimezoneOffset", new Date().getTimezoneOffset());
	    	DigiWebApp.SettingsController.setSetting("currentTimezone", jstz.determine().name());
    	}

    	var doUpdate = function() {
    		    		
        	var allBookings_version0 = _.filter(DigiWebApp.Booking.find(), function(obj){return typeof(obj.get("modelVersion")) === "undefined";});
    		//var allBookings = DigiWebApp.Booking.find();
    		
    		if (allBookings_version0.length > 0) {

		    	// ganz alte Bookings aktualisieren (vor modelVersion 1)
	        	_.each(allBookings_version0, function(booking) {
	    			
	    	    	// booking.mitarbeiterId setzen (DigiWebApp.SettingsController.getSetting("mitarbeiterId"))
	    			booking.set("mitarbeiterId", DigiWebApp.SettingsController.getSetting("mitarbeiterId"));
		        		
	            	// Zeitzone setzen (wir wissen nicht welche es war, also wird die aktuelle verwendet)
	            	if (
	            			(typeof(booking.get("timezoneOffset")) === "undefined" || booking.get("timezoneOffset") === "") 
	            		||	(typeof(booking.get("timezone")) === "undefined" || booking.get("timezone") === "") 
	            	){
            			booking.set("timezoneOffset", new Date(Number(booking.get('timeStampStart'))).getTimezoneOffset());
	            		booking.set("timezone", jstz.determine().name());
	            	}

	            	var startDate = booking.get('startDateString');
	            	var startTime = booking.get('startTimeString');
	            	if ((typeof(startDate) === "undefined" || !startDate || startDate === "")
	            	||  (typeof(startTime) === "undefined" || !startTime || startTime === "")
	            	) {
	            		// Buchung aus alter WebApp-Version
	            		var d8start = D8.create(new Date(Number(booking.get('timeStampStart')) + (1000 * 60 * (new Date(Number(booking.get('timeStampStart'))).getTimezoneOffset() - booking.get('timezoneOffset')))));
	                    startDate = d8start.format('dd.mm.yyyy');
	                    startTime = d8start.format('HH:MM');
	                    booking.set('startDateString', startDate);
	                    booking.set('startTimeString', startTime);
	            	}
	            	
	            	var endeDate = booking.get('endeDateString');
	            	var endeTime = booking.get('endeTimeString');
	            	if ((typeof(endeDate) === "undefined" || !endeDate || endeDate === "")
	            	||  (typeof(endeTime) === "undefined" || !endeTime || endeTime === "")
	            	) {
	            		// Buchung aus alter WebApp-Version
	            		var d8ende = D8.create(new Date(Number(booking.get('timeStampEnd')) + (1000 * 60 * (new Date(Number(booking.get('timeStampEnd'))).getTimezoneOffset() - booking.get('timezoneOffset')))));
	                    endeDate = d8ende.format('dd.mm.yyyy');
	                    endeTime = d8ende.format('HH:MM');
	                    booking.set('endeDateString', endeDate);
	                    booking.set('endeTimeString', endeTime);
	            	}
	    				         
	            	booking.set("modelVersion", "1");
	    			booking.save();
	            	writeToLog("Buchung auf modelVersion 1 aktualisiert: " + JSON.stringify(booking));
		    			
	        	});
	        }
	        	
        	// von modelVersion 1 auf 2
//        	var allBookings_version1 = _.filter(DigiWebApp.Booking.find(), function(obj){return obj.get("modelVersion") === "1";});
//        	if (allBookings_version1.length > 0) {
//		    	_.each(allBookings_version1, function(booking) {
//		    		
//		    		// TODO: modelVersion 1 auf 2
//					
//		        	//booking.set("modelVersion", "2");
//					//booking.save();
//		        	//writeToLog("Buchung auf modelVersion 2 aktualisiert: " + JSON.stringify(booking));
//				});
//        	}
	    	
        	// von modelVersion 2 auf 3
//        	var allBookings_version1 = _.filter(DigiWebApp.Booking.find(), function(obj){return obj.get("modelVersion") === "1";});
//        	if (allBookings_version1.length > 0) {
//		    	_.each(allBookings_version1, function(booking) {
//		    		
//		    		// TODO: modelVersion 1 auf 2
//					
//		        	//booking.set("modelVersion", "2");
//					//booking.save();
//		        	//writeToLog("Buchung auf modelVersion 2 aktualisiert: " + JSON.stringify(booking));
//				});
//        	}

        	// mit dem übergebenen callback weitermachen
	    	callback();
	    	
    	}

    	//alert(DigiWebApp.SettingsController.getSetting("mitarbeiterId"));
    	// zunächst muss die mitarbeiterId des Benutzers bekannt sein (ab modelVersion 1)
    	if (
    	   (typeof(DigiWebApp.SettingsController.getSetting("mitarbeiterId")) === "undefined") 
    	|| (DigiWebApp.SettingsController.getSetting("mitarbeiterId") === "")
    	|| (parseInt(DigiWebApp.SettingsController.getSetting("mitarbeiterId")) === 0)
    	) {
    		//alert("aktualisiere Mitarbeiter des Benutzers in updateModels (" + DigiWebApp.SettingsController.getSetting("mitarbeiterId") + ")");
    		writeToLog("aktualisiere Mitarbeiter des Benutzers in updateModels (" + DigiWebApp.SettingsController.getSetting("mitarbeiterId") + ")");
    		var recieveObj = {
    				  webservice: "mitarbeiter"
    				, loaderText: M.I18N.l('BautagebuchLadeMitarbeiter')
    				, successCallback: function(data){
			    		DigiWebApp.ApplicationController.DigiLoaderView.hide();
			    		if (data && data.mitarbeiter && data.mitarbeiter.length > 0) {
			    			//alert(data.mitarbeiter.length);
			    			DigiWebApp.SettingsController.setSetting("mitarbeiterVorname", data.mitarbeiter[0].vorname);
			    			DigiWebApp.SettingsController.setSetting("mitarbeiterNachname", data.mitarbeiter[0].nachname);
			    			DigiWebApp.SettingsController.setSetting("mitarbeiterId", data.mitarbeiter[0].mitarbeiterId);
				    		doUpdate();
			    		} else {
			    			// Fehlermeldung
			    			DigiWebApp.ApplicationController.nativeAlertDialogView({
			                    title: M.I18N.l('offlineWorkNotPossible')
			                  , message: M.I18N.l('offlineWorkNotPossibleMsg')
			              });
			    		}
			    	}
    				, errorCallback: function(error) {
    		    		DigiWebApp.ApplicationController.DigiLoaderView.hide();
    	    			// Fehlermeldung
    	    			DigiWebApp.ApplicationController.nativeAlertDialogView({
    	                    title: M.I18N.l('offlineWorkNotPossible')
    	                  , message: M.I18N.l('offlineWorkNotPossibleMsg')
    	    			});
    		    	}
    				, additionalQueryParameter: "getAll=true&webAppId=" + DigiWebApp.SettingsController.getSetting("workerId")
    				//, timeout: 
    				, geraeteIdOverride: true
    				//, modus: 
      		};
    		DigiWebApp.JSONDatenuebertragungController.recieveData(recieveObj);

    	} else {
    		doUpdate();
    	}
    	
    }
    
    , sonderzeichenCheck: function(str) {
        return ( /[^\w\säöüÄÖÜß \x40(){}*%\$§€=/\\!?.,;:+-]+/.test(str) );
    }
    
    , vibrate: function() {
    	try {
	    	var vibrationsDauer = DigiWebApp.ApplicationController.CONSTVibrateDuration;
	    	if (typeof(DigiWebApp.SettingsController.getSetting("vibrationsDauer")) !== "undefined") {
	    		vibrationsDauer = DigiWebApp.SettingsController.getSetting("vibrationsDauer");
	    	}
	    	if (vibrationsDauer > 0) {
	    		navigator.notification.vibrate(vibrationsDauer)
	    	}
    	} catch (vibrateError) {}
    }

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: AudioController
// ==========================================================================
// manuell var-checked
DigiWebApp.AudioController = M.Controller.extend({

	/*
	 * http://docs.phonegap.com/en/1.0.0/phonegap_media_media.md.html
	 */
	
      myAudioObject: {}
    , myTimeStamp: null
    , myFilename: null
    , myState: null

    /*
    * Sample function
    * To handle the first load of a page.
    */
    , init: function(isFirstLoad) {
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('init');
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('this.myState = ' + this.myState);
		if (isFirstLoad) {
            /* do something here, when page is loaded the first time. */
        }
        /* do something, for any other load. */

		// rewire audioIcon for record
    	DigiWebApp.AudioPage.content.grid.button.events = { tap: { action: DigiWebApp.AudioController.recordAudio } };
    	DigiWebApp.AudioPage.content.grid.button.registerEvents();
    	DigiWebApp.AudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.AudioController.recordAudio } };
		//DigiWebApp.AudioPage.content.audioIcon.events = { tap: { target: DigiWebApp.AudioController, action: 'recordAudio' } };
    	DigiWebApp.AudioPage.content.audioIcon.registerEvents();
    	//DigiWebApp.AudioPage.content.audioIcon.value = 'file:///android_asset/www/theme/images/icon_record.png';
    	//DigiWebApp.AudioPage.content.audioIcon.renderUpdate();
    	document.getElementById(DigiWebApp.AudioPage.content.audioIcon.id).src = 'theme/images/icon_record.png';

    	
        this.myTimeStamp = M.Date.create(new Date()).format('yymmddHHMMss');
        this.myFilename = 'DIGI-WebApp-recording-' + this.myTimeStamp + '.wav';
        this.myState = null;
    	
        DigiWebApp.AudioController.myAudioObject = new Media(this.myFilename, this.onSuccess, this.onError, this.mediaStatus, this.mediaPosition);
        if (DigiWebApp.SettingsController.globalDebugMode) console.log(this.myFilename);
        if (DigiWebApp.SettingsController.globalDebugMode) console.log(DigiWebApp.AudioController.myAudioObject);
    	
    }

    , mediaStatus: function(status) {
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('mediaStatus: ' + status);
    }
    
    , mediaPosition: function(position) {
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('mediaPosition: ' + position);
    }
    
    , onSuccess: function() {
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('onSuccess');
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('this.myState = ' + this.myState);
		switch(this.myState) {
			case 'play':
				
				// rewire audioIcon for stopPlayback
				DigiWebApp.AudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.AudioController.stopPlayback } };
				DigiWebApp.AudioPage.content.audioIcon.registerEvents();
				document.getElementById(DigiWebApp.AudioPage.content.audioIcon.id).src = 'theme/images/icon_stop.png';
				
				break;
				
			case 'record':
				
				// rewire audioIcon for stopRecord
		    	DigiWebApp.AudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.AudioController.stopRecord } };
		    	DigiWebApp.AudioPage.content.audioIcon.registerEvents();
		    	document.getElementById(DigiWebApp.AudioPage.content.audioIcon.id).src = 'theme/images/icon_stop.png';

		    	// rewire digi-button to setup a new recording
		    	DigiWebApp.AudioPage.content.grid.button.events = { tap: { action: DigiWebApp.AudioController.init } };
		    	DigiWebApp.AudioPage.content.grid.button.registerEvents();

		    	break;
		    	
			case 'stop':
				
				// rewire audioIcon for playbackAudio
				DigiWebApp.AudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.AudioController.playbackAudio } };
				DigiWebApp.AudioPage.content.audioIcon.registerEvents();
				document.getElementById(DigiWebApp.AudioPage.content.audioIcon.id).src = 'theme/images/icon_playbackAudio.png';
				
				break;
				
			default:

				// rewire audioIcon for playbackAudio
				DigiWebApp.AudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.AudioController.playbackAudio } };
				DigiWebApp.AudioPage.content.audioIcon.registerEvents();
				document.getElementById(DigiWebApp.AudioPage.content.audioIcon.id).src = 'theme/images/icon_playbackAudio.png';

				break;
		}
    }
    
    , onError: function(error) {
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('onError');
    	console.log('code: '    + error.code    + '\n' + 'message: ' + error.message + '\n');
    	console.log('Filename: ' + this.myFilename);
    	
    	// rewire audioIcon for playbackAudio
    	DigiWebApp.AudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.AudioController.playbackAudio } };
    	DigiWebApp.AudioPage.content.audioIcon.registerEvents();
    	document.getElementById(DigiWebApp.AudioPage.content.audioIcon.id).src = 'theme/images/icon_playbackAudio.png';

    	// rewire digi-button to setup a new recording
    	DigiWebApp.AudioPage.content.grid.button.events = { tap: { action: DigiWebApp.AudioController.init } };
    	DigiWebApp.AudioPage.content.grid.button.registerEvents();
    }
    
    , recordAudio: function() {
    	this.myState = 'record';
    	DigiWebApp.AudioController.myAudioObject.startRecord();

		// rewire audioIcon for stopRecord
    	DigiWebApp.AudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.AudioController.stopRecord } };
    	DigiWebApp.AudioPage.content.audioIcon.registerEvents();
    	document.getElementById(DigiWebApp.AudioPage.content.audioIcon.id).src = 'theme/images/icon_stop.png';

    	// rewire digi-button to setup a new recording
    	DigiWebApp.AudioPage.content.grid.button.events = { tap: { action: DigiWebApp.AudioController.init } };
    	DigiWebApp.AudioPage.content.grid.button.registerEvents();

		if (DigiWebApp.SettingsController.globalDebugMode) console.log('recordAudio');
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('this.myState = ' + this.myState);
    }
   
    , stopRecord: function() {
    	this.myState = 'stop';
    	DigiWebApp.AudioController.myAudioObject.stopRecord();

    	// rewire audioIcon for playbackAudio
    	DigiWebApp.AudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.AudioController.playbackAudio } };
    	DigiWebApp.AudioPage.content.audioIcon.registerEvents();
    	document.getElementById(DigiWebApp.AudioPage.content.audioIcon.id).src = 'theme/images/icon_playbackAudio.png';

    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('stopRecord');
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('this.myState = ' + this.myState);
    }
        
    , playbackAudio: function() {
    	this.myState = 'play';
    	DigiWebApp.AudioController.myAudioObject.play();

		// rewire audioIcon for stopPlayback
		DigiWebApp.AudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.AudioController.stopPlayback } };
		DigiWebApp.AudioPage.content.audioIcon.registerEvents();
		document.getElementById(DigiWebApp.AudioPage.content.audioIcon.id).src = 'theme/images/icon_stop.png';

		if (DigiWebApp.SettingsController.globalDebugMode) console.log('playbackAudio');
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('this.myState = ' + this.myState);
    }
    
    , stopPlayback: function() {
    	this.myState = 'stop';
    	DigiWebApp.AudioController.myAudioObject.stop();
    	
		// rewire audioIcon for playbackAudio
    	DigiWebApp.AudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.AudioController.playbackAudio } };
    	DigiWebApp.AudioPage.content.audioIcon.registerEvents();
    	document.getElementById(DigiWebApp.AudioPage.content.audioIcon.id).src = 'theme/images/icon_playbackAudio.png';

    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('stopPlayback');
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('this.myState = ' + this.myState);
    }
    
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: BautagebuchBautageberichtDetailsController
// ==========================================================================
// manuell var-checked
DigiWebApp.BautagebuchBautageberichtDetailsController = M.Controller.extend({

	  item: null // model itself
	
	, projektleiterId: null // in model
	, projektleiterList: [{label:"",value:0}] // runtime
	  
	, mitarbeiterIds: null // in model
	, mitarbeiterList: [{label:"",value:0}] // runtime
	, mitarbeiterListSelected: null // runtime
	
	, datum: null // in model
	, datumAsDate: null // runtime to feed date-textinput
	
	, handOrderId: null // in model
	, handOrderName: null // in model

	, auftragsId: null // in model
	, auftragsName: null // in model
	, auftraegeList: [{label:"",value:0}] // runtime
	
	, positionId: null // in model
	, positionName: null // in model
	, positionenList: null // runtime
	
	, latitude: null
	, longitude: null
	
	, bautagesberichtTyp: null
		
	, wetter: null // in model
	, wetterBackup: null // als Zwischenspeicher für Wetter-Zurück-Button
	
	, setWetter: function(wetterObject) {
		var that = this;
		if (typeof(wetterObject) === "undefined") {
			return NO;
		} else {
			that.set("wetter", JSON.parse(JSON.stringify(wetterObject)));
			return YES;
		}
	}
	
	, startUhrzeit: null
		
	, init: function(isFirstLoad) {
		var that = this;
		if (isFirstLoad) {
			// setting defaults for contentBinding
			that.setWetter(DigiWebApp.BautagebuchMainController.wetterDefaults);
			DigiWebApp.BautagebuchBautageberichtDetailsController.set("mitarbeiterIds", _.map(DigiWebApp.BautagebuchMainController.mitarbeiter,function(obj){return obj.value;}));
		}
	}
	
	, load: function(myItem) {
		
		var that = this;
		
		that.set("item", myItem); 
		
		that.set("datum", myItem.get("datum"));
		that.set("projektleiterId", myItem.get("projektleiterId"));
		that.set("auftragsId", myItem.get("orderId"));
		that.set("auftragsName", myItem.get("orderName"));
		that.set("handOrderId", myItem.get("handOrderId"));
		that.set("handOrderName", myItem.get("handOrderName"));
		that.set("positionId", myItem.get("positionId"));
		that.set("positionName", myItem.get("positionName"));
		that.set("mitarbeiterIds", myItem.get("selektierteMitarbeiter"));
		that.set("startUhrzeit", myItem.get("startUhrzeit"));
		that.set("bautagesberichtTyp", myItem.get('bautagesberichtTyp'));

		that.setWetter(DigiWebApp.BautagebuchMainController.wetterDefaults);
		that.set("wetter.temperatur", myItem.get("temperatur"));
		that.set("wetter.luftfeuchtigkeit", myItem.get("luftfeuchtigkeit"));
		that.set("wetter.bewoelkung", myItem.get("bewoelkung"));
		that.set("wetter.niederschlag", myItem.get("niederschlag"));
		that.set("wetter.wind", myItem.get("wind"));
		that.set("wetter.wechselhaft", myItem.get("wechselhaft"));
		that.set("wetter.wechselhaftItem", [{
	        value: 'wechselhaft'
	      , label: M.I18N.l('BautagebuchWechselhaft')
	      , isSelected: myItem.get("wechselhaft")
		}]);		
		that.setPositionen(myItem.get("orderId"));
	}

	, save: function(successcallback, errorcallback, skipChecks) {
		var that = this;
		
		if (!skipChecks) {
			var orderSelected = (M.ViewManager.getView('bautagebuchBautageberichtDetailsPage', 'auftragComboBox').getSelection() !== "0" );
			var projektleiterSelected = (M.ViewManager.getView('bautagebuchBautageberichtDetailsPage', 'projektleiterComboBox').getSelection() !== "0" );
			var mitarbeiterSelected = (!(DigiWebApp.BautagebuchBautageberichtDetailsController.mitarbeiterIds === null || DigiWebApp.BautagebuchBautageberichtDetailsController.mitarbeiterIds.length === 0));
			
			if (!orderSelected) {
	            DigiWebApp.ApplicationController.nativeAlertDialogView({
	                title: M.I18N.l('noOrderSelected')
	              , message: M.I18N.l('noOrderSelectedMsg')
	            });
				return false;
			}
			if (!projektleiterSelected) {
	            DigiWebApp.ApplicationController.nativeAlertDialogView({
	                title: M.I18N.l('noProjektleiterSelected')
	              , message: M.I18N.l('noProjektleiterSelectedMsg')
	            });
				return false;
			}
			if (!mitarbeiterSelected) {
	            DigiWebApp.ApplicationController.nativeAlertDialogView({
	                title: M.I18N.l('noMitarbeiterSelected')
	              , message: M.I18N.l('noMitarbeiterSelectedMsg')
	            });
				return false;
			}
		}
	
		that.item.set("datum", that.datum);
		
		that.item.set("bautagesberichtTyp", that.bautagesberichtTyp);
				
		that.item.set("startUhrzeit", that.startUhrzeit);

		that.item.set("projektleiterId", that.projektleiterId);
		
		that.item.set("orderId", that.auftragsId);
		that.item.set("orderName", that.auftragsName);
		
		that.item.set("handOrderId", that.handOrderId);
		that.item.set("handOrderName", that.handOrderName);

		if (M.ViewManager.getView('bautagebuchBautageberichtDetailsPage', 'positionComboBox').getSelection() !== "0" ) {
			that.item.set("positionId", that.positionId);
			that.item.set("positionName", that.positionName);
		}
		
		that.item.set("selektierteMitarbeiter", that.mitarbeiterIds);

		that.item.set("temperatur", that.wetter.temperatur);
		that.item.set("luftfeuchtigkeit", that.wetter.luftfeuchtigkeit);
		that.item.set("bewoelkung", that.wetter.bewoelkung);
		that.item.set("niederschlag", that.wetter.niederschlag);
		that.item.set("wind", that.wetter.wind);
		that.item.set("wechselhaft", that.wetter.wechselhaft);
		
		if (that.item.saveSorted()) {		
			DigiWebApp.BautagebuchBautageberichteListeController.set("items", DigiWebApp.BautagebuchBautagesbericht.findSorted());
			if (typeof(successcallback) === "function") successcallback();
			return true;
		} else {
			if (typeof(errorcallback) === "function") errorcallback();
			return false;
		}
	}
	
	, deleteBautagesbericht: function(successCallback, errorCallback, skipQuestion) {
		var that = this;
		if (skipQuestion) {
			that.item.deleteSorted(function() {
				DigiWebApp.BautagebuchBautageberichteListeController.set("items", DigiWebApp.BautagebuchBautagesbericht.findSorted());
				if (typeof(successCallback) === "function") successCallback();
			});
		} else {
			DigiWebApp.ApplicationController.nativeConfirmDialogView({
	      	  title: M.I18N.l('deleteLabel')
		        , message: M.I18N.l('wirklichLoeschenMsg')
	            , confirmButtonValue: M.I18N.l('yes')
	    		, cancelButtonValue: M.I18N.l('no')
	    		, callbacks: {
	        		  confirm: {
	            		  target: this
	            		, action: function() {
	            			that.item.deleteSorted(function() {
	            				DigiWebApp.BautagebuchBautageberichteListeController.set("items", DigiWebApp.BautagebuchBautagesbericht.findSorted());
	            				if (typeof(successCallback) === "function") successCallback();
	            			});
						}
	        		}
	        		, cancel: {
	            		  target: this
	            		, action: function() {
		        			return true;
	    				}
	        		}
	    		}
			});
		}
	}

	, finish: function(successcallback, errorcallback) {
		var that = this;
		if (that.save()) {
			DigiWebApp.BautagebuchZusammenfassungController.load(that.item);
			DigiWebApp.NavigationController.toBautagebuchZusammenfassungPageTransition();
			if (typeof(successcallback) === "function") successcallback();
			return true;
		} else {
			if (typeof(errorcallback) === "function") errorcallback();
			return false;
		}
	}

	, setPositionen: function(auftragsId) {
		var that = this;
		if (typeof(auftragsId) === "undefined") {
			return false;
		} else {
			// verfügbare Positionen kopieren und ausgewähltes selektieren
			var itemSelected = NO;
		    var positionenArray = _.map(DigiWebApp.Position.find(), function(pos) {
		    	if ( typeof(pos) === "undefined" ) {
		    		console.log("UNDEFINED Position");
		    	} else {
		    		if (parseInt(pos.get('orderId')) == parseInt(auftragsId)) {
		    			var obj = { label: pos.get('name'), value: pos.get('id'), isSelected: NO };
			    		if (parseInt(pos.get('id')) == parseInt(that.item.get("positionId"))) {
			    			obj.isSelected = YES;
			    			itemSelected = YES;
			    			that.set('positionId', pos.get('id'));
			    			that.set('positionName', pos.get('name'));
			    		}
		    			return obj;
		    		}
		    	}
		    });
		    positionenArray = _.compact(positionenArray);
		    if (!itemSelected && auftragsId && positionenArray.length > 0) {
		    	positionenArray[0].isSelected = YES;
    			that.set('positionId', positionenArray[0].value);
    			that.set('positionName', positionenArray[0].label);
		    }
		    that.set("positionenList", positionenArray);
		}
	}
	
	, setStartUhrzeit: function() {
  		if (DigiWebApp.BautagebuchBautageberichtDetailsController.startUhrzeit) {
  			$('#'+DigiWebApp.BautagebuchBautageberichtDetailsPage.content.startUhrzeitContainer.startUhrzeitGrid.stundeFeld.id)[0].value = parseInt(DigiWebApp.BautagebuchBautageberichtDetailsController.startUhrzeit.split(":")[0]).padLeft(2,"0");
  			$('#'+DigiWebApp.BautagebuchBautageberichtDetailsPage.content.startUhrzeitContainer.startUhrzeitGrid.minuteFeld.id)[0].value = parseInt(DigiWebApp.BautagebuchBautageberichtDetailsController.startUhrzeit.split(":")[1]).padLeft(2,"0");
  		}
	}
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: BautagebuchBautageberichteListeController
// ==========================================================================
// manuell var-checked
DigiWebApp.BautagebuchBautageberichteListeController = M.Controller.extend({

	  items: null
	
	, init: function(isFirstLoad) {
		var that = this;
		DigiWebApp.BautagebuchMainController.init(isFirstLoad);
		if (isFirstLoad) {
		}
		that.set("items", DigiWebApp.BautagebuchBautagesbericht.findSorted());
		var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));
		if (ChefToolOnly) {
			DigiWebApp.BautagebuchBautageberichteListePage.header.backButton.setValue(M.I18N.l("mainMenu"));
		}
	}

	, neu: function(bautagesberichtTyp, skipRedirect) {
		//var that = this;
		
		if (bautagesberichtTyp) {
			DigiWebApp.BautagebuchBautageberichtDetailsController.set("bautagesberichtTyp", bautagesberichtTyp);
		} else {
			DigiWebApp.BautagebuchBautageberichtDetailsController.set("bautagesberichtTyp", "<standard>");
		}
		DigiWebApp.BautagebuchBautageberichtDetailsController.init(YES);
		if (DigiWebApp.SettingsController.getSetting('bautagebuchLimit_autoStartUhrzeit')) {
			DigiWebApp.BautagebuchBautageberichtDetailsController.set("startUhrzeit", D8.now().format("HH:MM"));
		} else {
			DigiWebApp.BautagebuchBautageberichtDetailsController.set("startUhrzeit", DigiWebApp.BautagebuchEinstellungenController.settings.startUhrzeit);
		}
		DigiWebApp.BautagebuchBautageberichtDetailsController.set("datum", D8.now().format("dd.mm.yyyy"));
		DigiWebApp.BautagebuchBautageberichtDetailsController.set("projektleiterId", null);
		DigiWebApp.BautagebuchBautageberichtDetailsController.set("auftragsId", null);
		DigiWebApp.BautagebuchBautageberichtDetailsController.set("auftragsName", null);
		DigiWebApp.BautagebuchBautageberichtDetailsController.set("handOrderId", null);
		DigiWebApp.BautagebuchBautageberichtDetailsController.set("handOrderName", null);
		DigiWebApp.BautagebuchBautageberichtDetailsController.set("positionId", null);
		DigiWebApp.BautagebuchBautageberichtDetailsController.set("positionName", null);
		DigiWebApp.BautagebuchBautageberichtDetailsController.set("mitarbeiterIds", _.map(DigiWebApp.BautagebuchMainController.mitarbeiter,function(obj){return obj.value;}));
		DigiWebApp.BautagebuchBautageberichtDetailsController.setWetter(DigiWebApp.BautagebuchMainController.wetterDefaults);
		DigiWebApp.BautagebuchBautageberichtDetailsController.set("item", DigiWebApp.BautagebuchBautagesbericht.createRecord({
			  id: Math.uuid()
			, datum: DigiWebApp.BautagebuchBautageberichtDetailsController.datum
			, startUhrzeit: DigiWebApp.BautagebuchBautageberichtDetailsController.startUhrzeit
		}));
		
		if (!skipRedirect) {
			DigiWebApp.NavigationController.toBautagebuchBautageberichtDetailsPageTransition();
		}
	}

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: BautagebuchDatenuebertragungController
// ==========================================================================
// manuell var-checked
DigiWebApp.BautagebuchDatenuebertragungController = M.Controller.extend({

	  successReturnCallback: function() {}
	, errorReturnCallback: function() {}

	, consoleLogOutput: NO
	
	, empfangen: function(successReturnCallback, errorReturnCallback) {
		var that = DigiWebApp.BautagebuchDatenuebertragungController;
		
		that.successReturnCallback = successReturnCallback;
		that.errorReturnCallback = errorReturnCallback;

		//var successCallback = function(data, msg, request) {};
		//var errorCallback = function(request, msg) {};
		
		// Verarbeitungskette definieren und starten
		DigiWebApp.RequestController.getDatabaseServer(function() {
			that.empfangeProjektleiter(function() {
				that.empfangeMitarbeiter(function() {
					that.empfangeMengeneinheiten(function() {
						that.empfangeMaterialien(
							that.successReturnCallback
						  , that.successReturnCallback);
					}, that.errorReturnCallback);
				}, that.errorReturnCallback);
			}, that.errorReturnCallback);
		});
	
		
	}
	
	, empfangeMengeneinheiten: function(successCallback, errorCallback) {
		// wird noch nicht via WebService befüllt
		
		// direkt weiter in der Verarbeitungskette
		successCallback();

		var internalSuccessCallback = function(data, msg, request) {
			// verarbeite empfangene Daten
						
		if (DigiWebApp.BautagebuchDatenuebertragungController.consoleLogOutput) console.log("empfangeMengeneinheiten Status: " + request.status);

			// wurde eine Mengeneinheitenliste erhalten?
			if (typeof(data.mengeneinheiten) === "undefined") {
				console.error("missing mengeneinheiten");
				return errorCallback();
			}
			
			// enthält die Mengeneinheitenliste Mengeneinheiten?
			if (data.mengeneinheiten === null) {
				// ohne Mengeneinheiten geht im Bautagebuch nichts
				return errorCallback();
			} else {
				// ist data.mengeneinheiten auch wirklich ein Array?
				var myLength = null;
				try {
					myLength = data.mengeneinheiten.length;
				} catch(e) {
					return errorCallback();
				}
			}
			
			// data.mengeneinheiten enthält also myLength Elemente
			// alle "alten" Mengeneinheiten löschen
			DigiWebApp.BautagebuchMengeneinheit.deleteAll();
			
			// die empfangenen Mengeneinheiten mit Model ablegen
			_.each(data.mengeneinheiten, function(el) {
				if (typeof(el.id) === "undefined") {
					console.error("missing mengeneinheit id");
					return errorCallback();
//				} else if (typeof(el.bezeichnung) === "undefined") {
//					console.error("missing mengeneinheit bezeichnung");
//					return errorCallback();
				} else if (typeof(el.kuerzel) === "undefined") {
					console.error("missing mengeneinheit kuerzel");
					return errorCallback();
				} else {
					
					// mengeneinheit (el) zur Liste hinzufügen
					DigiWebApp.BautagebuchMengeneinheit.createRecord({id: "" + el.id, kuerzel: "" + el.kuerzel}).saveSorted();

				}
			});
			
			// weiter in der Verarbeitungskette
			successCallback();
		};
		
		var recieveObj = {
				  webservice: "mengeneinheiten"
				, loaderText: M.I18N.l('BautagebuchLadeMengeneinheiten')
				, successCallback: internalSuccessCallback
				, errorCallback: errorCallback
				//, additionalQueryParameter: 
				//, timeout: 
				//, geraeteIdOverride: 
				//, modus: 
		};
		DigiWebApp.JSONDatenuebertragungController.recieveData(recieveObj);
		
	}
	
	, empfangeMaterialien: function(successCallback, errorCallback) {
		var that = DigiWebApp.BautagebuchDatenuebertragungController;
		var internalSuccessCallback = function(data, msg, request) {
			// verarbeite empfangene Daten
			
			if (that.consoleLogOutput) console.log("empfangeMaterialien Status: " + request.status);

			//var myMaterialliste = [];
			
			// wurde eine materialliste erhalten?
			if (typeof(data.materialliste) === "undefined") {
				console.error("missing materialliste");
				return errorCallback();
			}
			
			// enthält die Materialliste Materialien?
			if (data.materialliste === null) {
				// hier könnte man wenn gewünscht verhindern, dass es im Bautagebuch gar keine Materialien gibt
				//return errorCallback();
			} else {
				// ist data.materialliste auch wirklich ein Array?
				var myLength = null;
				try {
					myLength = data.materialliste.length;
				} catch(e2) {
					console.error(myLength);
					//return errorCallback();
				}
			}
			
			// data.materialliste enthält also myLength (oder gar keine) Elemente
			// alle "alten" Materialien löschen
			DigiWebApp.BautagebuchMaterial.deleteAll();
			DigiWebApp.BautagebuchLieferant.deleteAll();
			DigiWebApp.BautagebuchHersteller.deleteAll();
			DigiWebApp.BautagebuchMaterialtyp.deleteAll();
			DigiWebApp.BautagebuchMaterialgruppe.deleteAll();
			
			// die empfangenen Materialien mit Model ablegen
			_.each(data.materialliste, function(el) {
				//console.log(el);
				if (typeof(el.bezeichnung) === "undefined") {
					console.error("missing bezeichnung");
					return errorCallback();
				} else {
					
					// Lieferanten
					var lieferantenIds = [];
					_.each(el.lieferanten, function(lieferant) {
						lieferantenIds.push("" + lieferant.id);
						var lief = DigiWebApp.BautagebuchLieferant.find({query:{identifier: 'id', operator: '=', value: "" + lieferant.id}})[0];
						if (!lief) {
							// Lieferant anlegen
							DigiWebApp.BautagebuchLieferant.createRecord({
								  id: "" + lieferant.id
								, bezeichnung: "" + lieferant.bezeichnung
								, nummer: "" + lieferant.nummer
							}).saveSorted();
						}
					});
					
					// Hersteller
					var herst = DigiWebApp.BautagebuchHersteller.find({query:{identifier: 'id', operator: '=', value: "" + el.herstellerId}})[0];
					if (!herst) {
						// Hersteller anlegen
						DigiWebApp.BautagebuchHersteller.createRecord({
							  id: "" + el.herstellerId
							, bezeichnung: "" + el.hersteller
						}).saveSorted();
					}

					// Materialgruppen
					var materialgruppenIds = [];
					_.each(el.materialgruppen, function(materialgruppe) {
						materialgruppenIds.push("" + materialgruppe.id);
						var matgr = DigiWebApp.BautagebuchMaterialgruppe.find({query:{identifier: 'id', operator: '=', value: "" + materialgruppe.id}})[0];
						if (!matgr) {
							// Materialgruppe anlegen
							DigiWebApp.BautagebuchMaterialgruppe.createRecord({
								  id: "" + materialgruppe.id
								, bezeichnung: "" + materialgruppe.bezeichnung
								, vaterId: "" + materialgruppe.vaterId
							}).saveSorted();
						}
					});

					// Materialtypen
					var materialtypId = 0;
					if (el.materialtyp) {
						materialtypId = "" + el.materialtyp.id;
						var matTyp = DigiWebApp.BautagebuchMaterialtyp.find({query:{identifier: 'id', operator: '=', value: "" + el.materialtyp.id}})[0];
						if (!matTyp) {
							// Lieferant anlegen
							DigiWebApp.BautagebuchMaterialtyp.createRecord({
								  id: "" + el.materialtyp.id
								, bezeichnung: "" + el.materialtyp.bezeichnung
							}).saveSorted();
						}
					}
					var myEinheitenIds = [];
					_.each(el.einheitenIds, function(einheitId) {
						myEinheitenIds.push("" + einheitId);
					});
					
					var myNummer = null;
					if (el.nummer) {
						myNummer = "" + el.nummer;
					}
					
					// Material anlegen
					DigiWebApp.BautagebuchMaterial.createRecord({
						  id: "" + el.id
						, bezeichnung: "" + el.bezeichnung
						, nummer: myNummer
						, standardEinheitId: "" + el.standardEinheitId
						, herstellerId: "" + el.herstellerId
						, einheitenIds: JSON.stringify(myEinheitenIds)
						, lieferantenIds: JSON.stringify(lieferantenIds)
						, materialgruppenIds: JSON.stringify(materialgruppenIds)
						, materialtypId: "" + materialtypId
						, einzelpreis: el.einzelpreis
					}).saveSorted();
				}
			});
			
			// weiter in der Verarbeitungskette
			successCallback();
		};
		
		var recieveObj = {
			  webservice: "materialliste"
			, loaderText: M.I18N.l('BautagebuchLadeMaterialien')
			, successCallback: internalSuccessCallback
			, errorCallback: errorCallback
			//, additionalQueryParameter: 
			//, timeout: 
			//, geraeteIdOverride: 
			//, modus: 
		};
		DigiWebApp.JSONDatenuebertragungController.recieveData(recieveObj);
		
	}

	, empfangeProjektleiter: function(successCallback, errorCallback) {
		var that = DigiWebApp.BautagebuchDatenuebertragungController;
		var internalSuccessCallback = function(data, msg, request) {
			// verarbeite empfangene Daten
						
			if (that.consoleLogOutput) console.log("empfangeProjektleiter Status: " + request.status);

			// wurde eine Projektleiterliste erhalten?
			if (typeof(data.projektleiter) === "undefined") {
				console.error("missing mitarbeiterliste");
				return errorCallback();
			}
			
			// enthält die Projektleiterliste Projektleiter?
			if (data.projektleiter === null) {
				// ohne Projektleiter geht im Bautagebuch nichts
				return errorCallback();
			} else {
				// ist data.materialliste auch wirklich ein Array?
				var myLength = null;
				try {
					myLength = data.projektleiter.length;
				} catch(e1) {
					// ohne Projektleiter geht im Bautagebuch nichts
					console.error(myLength);
					return errorCallback();
				}
			}
			
			// data.projektleiter enthält also myLength Elemente
			// alle "alten" Projektleiter löschen
			DigiWebApp.BautagebuchProjektleiter.deleteAll();
			
			// die empfangenen Projektleiter mit Model ablegen
			_.each(data.projektleiter, function(el) {
				if (typeof(el.id) === "undefined") {
					console.error("missing id");
					return errorCallback();
//				} else if (typeof(el.projektleiterId) === "undefined") {
//					console.error("missing projektleiterId");
//					return errorCallback();
				} else if (typeof(el.vorname) === "undefined") {
					console.error("missing projektleiter vorname");
					return errorCallback();
				} else if (typeof(el.nachname) === "undefined") {
					console.error("missing projektleiter nachname");
					return errorCallback();
				} else {
					
					//if (el.id === el.projektleiterId) {
						// projektleiter (el) zur Liste hinzufügen
						// Mitarbeiter (el) zur Liste hinzufügen wenn dieser nicht schon hinzugefügt wurde
						if (DigiWebApp.BautagebuchProjektleiter.find({query:{identifier: 'id', operator: '=', value: el.id}}).length === 0) {
							DigiWebApp.BautagebuchProjektleiter.createRecord({id: el.id, vorname: el.vorname, nachname: el.nachname}).saveSorted();
						}
					//}

				}
			});
			
			// weiter in der Verarbeitungskette
			successCallback();
		};
		
		var recieveObj = {
			  webservice: "projektleiter"
			, loaderText: M.I18N.l('BautagebuchLadeProjektleiter')
			, successCallback: internalSuccessCallback
			, errorCallback: errorCallback
			//, additionalQueryParameter: 'getAll=true&nurKolonne=false'
			//, timeout: 
			//, geraeteIdOverride: 
			//, modus: 
		};
		DigiWebApp.JSONDatenuebertragungController.recieveData(recieveObj);
		
	}

	, empfangeMitarbeiter: function(successCallback, errorCallback) {
		var that = DigiWebApp.BautagebuchDatenuebertragungController;
		var internalSuccessCallback = function(data, msg, request) {
			// verarbeite empfangene Daten
						
			if (that.consoleLogOutput) console.log("empfangeMitarbeiter Status: " + request.status);
			
			// wurde eine Mitarbeiterliste erhalten?
			if (typeof(data.mitarbeiter) === "undefined") {
				console.error("missing projektleiterliste");
				return errorCallback();
			}
			
			// enthält die Mitarbeiterliste Mitarbeiter?
			if (data.mitarbeiter === null) {
				// ohne Mitarbeiter geht im Bautagebuch nichts
				return errorCallback();
			} else {
				// ist data.materialliste auch wirklich ein Array?
				var myLength = null;
				try {
					myLength = data.mitarbeiter.length;
				} catch(e2) {
					// ohne Mitarbeiter geht im Bautagebuch nichts
					console.error(myLength);
					return errorCallback();
				}
			}
			
			// data.projektleiter enthält also myLength Elemente
			// alle "alten" Mitarbeiter löschen
			DigiWebApp.BautagebuchMitarbeiter.deleteAll();
			
			// die empfangenen Projektleiter im Model ablegen
			_.each(data.mitarbeiter, function(el) {
				if (typeof(el.id) === "undefined") {
					console.error("missing mitarbeiter id");
					return errorCallback();
				} else if (typeof(el.vorname) === "undefined") {
					console.error("missing mitarbeiter vorname");
					return errorCallback();
				} else if (typeof(el.nachname) === "undefined") {
					console.error("missing mitarbeiter nachname");
					return errorCallback();
				} else if (typeof(el.projektleiterId) === "undefined") {
					console.error("missing mitarbeiter projektleiterId");
					return errorCallback();
				} else {
					
					// Mitarbeiter (el) zur Liste hinzufügen wenn dieser nicht schon hinzugefügt wurde
					if (DigiWebApp.BautagebuchMitarbeiter.find({query:{identifier: 'id', operator: '=', value: el.id}}).length === 0) {
						DigiWebApp.BautagebuchMitarbeiter.createRecord({id: el.id, vorname: el.vorname, nachname: el.nachname, projektleiterId: el.projektleiterId, webAppId: el.webAppId, webAppPin: el.webAppPin}).saveSorted();
					}

				}
			});
			
			// weiter in der Verarbeitungskette
			successCallback();
		};
		// getAll=true  Alle
		// getAll=false KolonnenMAs
		var recieveObj = {
			  webservice: "mitarbeiter"
			, loaderText: M.I18N.l('BautagebuchLadeProjektleiter')
			, successCallback: internalSuccessCallback
			, errorCallback: errorCallback
			, additionalQueryParameter: 'getAll=true&nurKolonne=true'
			//, timeout: 
			//, geraeteIdOverride: 
			//, modus: 
		};
		DigiWebApp.JSONDatenuebertragungController.recieveData(recieveObj);
		
	}
	
	, senden: function(item, successReturnCallback, errorReturnCallback) {
		// item ist ein Bautagesbericht

		var that = DigiWebApp.BautagebuchDatenuebertragungController;
		
		that.successReturnCallback = successReturnCallback;
		that.errorReturnCallback = errorReturnCallback;

		//var successCallback = function(data, msg, request) {};
		//var errorCallback = function(request, msg) {};
		
		// Verarbeitungskette definieren und starten
		DigiWebApp.RequestController.getDatabaseServer(function() {
			that.sendeBautagesbericht(item,function() {
				that.sendeZeitbuchungen(item,function() {
					that.sendeMaterialbuchungen(item,function() {
						that.sendeNotizen(item,function() {
							that.sendeMedien(item,function() {
								that.sendeBautagesberichtFertig(
										item
									  , that.successReturnCallback
									  , that.errorReturnCallback);
							}, that.errorReturnCallback);
						}, that.errorReturnCallback);
					}, that.errorReturnCallback);
				}, that.errorReturnCallback);
			}, that.errorReturnCallback);
		});
	}
	
	, sendeBautagesbericht: function(item, successCallback, errorCallback) {
		// item ist ein Bautagesbericht
		var that = DigiWebApp.BautagebuchDatenuebertragungController;
		if (item.get('id')) {
			item.set("bautagesberichtId", item.get('id'));
		}
		item.set("transferCompleted", NO);
		var internalSuccessCallback = function(data, msg, request) {
			// verarbeite empfangene Daten
			if (that.consoleLogOutput) console.log("sendeBautagesbericht Status: " + request.status);
			// weiter in der Verarbeitungskette
			successCallback();
			
		};
		var sendObj = {
				  data: item.record
				, webservice: "bautagesbericht"
				, loaderText: M.I18N.l('BautagebuchSendeBautagesbericht')
				, successCallback: internalSuccessCallback
				, errorCallback: errorCallback
				//, additionalQueryParameter:
				//, timeout: 
		};
		if (item.hasFileName()) {
			item.readFromFile(function(result){
				item.set("unterschrift", JSON.parse(result));
				sendObj.data = item.record;
				DigiWebApp.JSONDatenuebertragungController.sendData(sendObj);
			},function(err){
				item.set("unterschrift", [{"lx":1,"ly":1,"mx":1,"my":1}]);
				sendObj.data = item.record;
				DigiWebApp.JSONDatenuebertragungController.sendData(sendObj);
			});
		} else {
			item.set("unterschrift", [{"lx":1,"ly":1,"mx":1,"my":1}]);
			sendObj.data = item.record;
			DigiWebApp.JSONDatenuebertragungController.sendData(sendObj);
		}
		
	}

	, sendeZeitbuchungen: function(item, successCallback, errorCallback) {
		// item ist ein Bautagesbericht
		
		//var that = DigiWebApp.BautagebuchDatenuebertragungController;
		
		var items = [];
		var relevanteZeitbuchungen = DigiWebApp.BautagebuchZeitbuchung.find({query:{identifier: 'bautagesberichtId', operator: '=', value: item.get('id')}}); 
		var relevanteZeitbuchungenSorted = _.sortBy(relevanteZeitbuchungen , function(z) {
            return parseInt(z.get('_createdAt'));
        });
		_.each(relevanteZeitbuchungenSorted, function(el) {
			_.each(JSON.parse(el.get("mitarbeiterIds")), function(maId) {
				var zeitbuch = DigiWebApp.BautagebuchZeitbuchung.createRecord({
					  bautagesberichtId: item.get('id')
				});
				for (var prop in el.record) {
					try {
						if (typeof(JSON.parse(el.get(prop)).length) !== "undefined") {
							zeitbuch.set(prop, JSON.parse(el.get(prop)));
						} else {
							zeitbuch.set(prop, el.get(prop));
						}
					} catch(e2) {
						zeitbuch.set(prop, el.get(prop));
					}
				}
				zeitbuch.set("mitarbeiterId", maId);
				items.push(zeitbuch.record);
			});
		});
		if (items.length !== 0) {
			var data = {"zeitdaten": items};
			
			var internalSuccessCallback = function(data2, msg, request) {
				// verarbeite empfangene Daten
				console.log("sendeZeitbuchungen Status: " + request.status);
				// weiter in der Verarbeitungskette
				successCallback();
				
			};
			var sendObj = {
					  data: data
					, webservice: "zeitdaten"
					, loaderText: M.I18N.l('BautagebuchSendeZeitbuchungen')
					, successCallback: internalSuccessCallback
					, errorCallback: errorCallback
					//, additionalQueryParameter:
					//, timeout: 
			};
			DigiWebApp.JSONDatenuebertragungController.sendData(sendObj);
		} else {
			successCallback();
		}
	}

	, sendeMaterialbuchungen: function(item, successCallback, errorCallback) {
		// item ist ein Bautagesbericht
		
		//var that = DigiWebApp.BautagebuchDatenuebertragungController;
		var items = [];
		_.each(DigiWebApp.BautagebuchMaterialBuchung.find({query:{identifier: 'bautagesberichtId', operator: '=', value: item.get('id')}}), function(el) {
			var tmp = el.record;
			tmp.menge = parseInt(tmp.menge);
			items.push(tmp);
		});
		
		if (items.length !== 0) {
			var data = {"materialbuchungen": items};
			
			var internalSuccessCallback = function(data2, msg, request) {
				// verarbeite empfangene Daten
				if (DigiWebApp.BautagebuchDatenuebertragungController.consoleLogOutput) console.log("sendeMaterialbuchungen Status: " + request.status);
				// weiter in der Verarbeitungskette
				successCallback();
				
			};
			var sendObj = {
					  data: data
					, webservice: "bautagesbericht/materialbuchung"
					, loaderText: M.I18N.l('BautagebuchSendeMaterialbuchungen')
					, successCallback: internalSuccessCallback
					, errorCallback: errorCallback
					//, additionalQueryParameter:
					//, timeout: 
			};
			DigiWebApp.JSONDatenuebertragungController.sendData(sendObj);
		} else {
			successCallback();
		}
	}

	, sendeNotizen: function(item, successCallback, errorCallback) {
		// item ist ein Bautagesbericht
		
		//var that = DigiWebApp.BautagebuchDatenuebertragungController;
		var items = [];
		_.each(DigiWebApp.BautagebuchNotiz.find({query:{identifier: 'bautagesberichtId', operator: '=', value: item.get('id')}}), function(el) {
			items.push(el.record);
		});
		
		if (items.length !== 0) {
			var data = {"notizen": items};
			
			var internalSuccessCallback = function(data2, msg, request) {
				// verarbeite empfangene Daten
				if (DigiWebApp.BautagebuchDatenuebertragungController.consoleLogOutput) console.log("sendeNotizen Status: " + request.status);										
				// weiter in der Verarbeitungskette
				successCallback();
				
			};
			var sendObj = {
					  data: data
					, webservice: "bautagesbericht/notiz"
					, loaderText: M.I18N.l('BautagebuchSendeNotizen')
					, successCallback: internalSuccessCallback
					, errorCallback: errorCallback
					//, additionalQueryParameter:
					//, timeout: 
			};
			DigiWebApp.JSONDatenuebertragungController.sendData(sendObj);
		} else {
			successCallback();
		}
	}

	, sendeMedien: function(item, successCallback, errorCallback) {
		// item ist ein Bautagesbericht
		//var that = DigiWebApp.BautagebuchDatenuebertragungController;

		DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('loadMediaFiles'));

		var proceed = function(mediaFiles) {
			
			if (mediaFiles.length !== 0) {
				var items = [];
				
				_.each(mediaFiles, function(mf){
					items.push(mf.record);
				});
				
				var data = {"medien": items};
				
				var internalSuccessCallback = function(data2, msg, request) {
					// verarbeite empfangene Daten
					if (DigiWebApp.BautagebuchDatenuebertragungController.consoleLogOutput) console.log("sendeMedien Status: " + request.status);
					// weiter in der Verarbeitungskette
					successCallback();
								
				};
				var sendObj = {
						  data: data
						, webservice: "medien"
						, loaderText: M.I18N.l('BautagebuchSendeMedien')
						, successCallback: internalSuccessCallback
						, errorCallback: errorCallback
						//, additionalQueryParameter:
						//, timeout: 
				};
				DigiWebApp.JSONDatenuebertragungController.sendData(sendObj);
			} else {
				// no files to send

				// weiter in der Verarbeitungskette
				successCallback();
			}
    	};

		var mediaFiles = DigiWebApp.BautagebuchMediaFile.find({query:{identifier: 'bautagesberichtId', operator: '=', value: item.get('id')}});
		var mediaFilesLength = mediaFiles.length;
    	var mediaFilesIndex = 0;
    	var done = false;
    	
    	if (mediaFilesLength !== 0) { 
	    	_.each(mediaFiles, function(el) {
	    		
    			console.log('loading mediaFile for mediaFilesIndex ' + mediaFilesIndex);
    			if (el.hasFileName()) {
	    			console.log("fileName: " + el.get('fileName'));
					// load signature into el
					el.readFromFile(function(fileContent){
						//console.log("fileContent: " + fileContent);
						if (fileContent && (fileContent !== "")) {
					    	_.each(mediaFiles, function(mf) {
					            if (mf.m_id === el.m_id) {
					            	mf.set("data", fileContent);
					            	mediaFilesIndex = mediaFilesIndex + 1;
					            }
					        });
						}
						if ( mediaFilesIndex === mediaFilesLength && done === false) {
							// last mediaFile loaded
				    		console.log('last mediaFile done (with file)');
		    				DigiWebApp.ApplicationController.DigiLoaderView.hide();
		    				done = true;
		    				proceed(mediaFiles);
						}
					}, function() {
						if ( mediaFilesIndex === mediaFilesLength && done === false) {
							// last mediaFile loaded
				    		console.log('last mediaFile done (last file load failed)');
		    				DigiWebApp.ApplicationController.DigiLoaderView.hide();
		    				done = true;
		    				proceed(mediaFiles);
						}
					});
    			} else {
	    			// this mediaFile has no file
					if ( mediaFilesIndex === mediaFilesLength && done === false) {
						// last mediaFile loaded
			    		console.log('last mediaFile done (no file)');
	    				DigiWebApp.ApplicationController.DigiLoaderView.hide();
	    				done = true;
	    				proceed(mediaFiles);
					}
	    		}
	        });
    	} else {
    		//console.log('no mediafiles');
			DigiWebApp.ApplicationController.DigiLoaderView.hide();
			proceed(mediaFiles);
    	}

	}

	, sendeBautagesberichtFertig: function(item, successCallback, errorCallback) {
		// item ist ein Bautagesbericht
		//var that = this;
		item.set("bautagesberichtId", item.get('id'));
		item.set("transferCompleted", YES);
		var internalSuccessCallback = function(data, msg, request) {
			// verarbeite empfangene Daten
			
			if (request.status > 199 && request.status < 300) {
				// scheint alles gut gengen zu sein
				item.deleteSorted(function() {
					DigiWebApp.BautagebuchBautageberichteListeController.set("items", DigiWebApp.BautagebuchBautagesbericht.findSorted());
					if (DigiWebApp.BautagebuchDatenuebertragungController.consoleLogOutput) console.log("sendeBautagesberichtFertig Status: " + request.status);
					if (typeof(successCallback) === "function") successCallback(data, msg, request);
				});
			} else {
				console.error("Request ended with status: " + request.status);
			}
						
		};
		var sendObj = {
				  data: item.record
				, webservice: "bautagesbericht"
				, loaderText: M.I18N.l('BautagebuchSendeBautagesbericht')
				, successCallback: internalSuccessCallback
				, errorCallback: errorCallback
				//, additionalQueryParameter:
				//, timeout: 
		};
		DigiWebApp.JSONDatenuebertragungController.sendData(sendObj);
		
	}

	
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: BautagebuchEinstellungenController
// ==========================================================================
// manuell var-checked
DigiWebApp.BautagebuchEinstellungenController = M.Controller.extend({

	  settings: {
		// Vorgabewerte (werden zur Laufzeit überschrieben)
		  startUhrzeit: "08:00"
		, inStundenBuchen: YES
		, inStundenBuchenItem: [{
	        value: 'inStundenBuchen'
	      , label: M.I18N.l('BautagebuchInStundenBuchen')
	      , isSelected: YES
		}]
		, falscheZeitenIgnorieren: NO
		, falscheZeitenIgnorierenItem: [{
	        value: 'falscheZeitenIgnorieren'
	      , label: M.I18N.l('falscheZeitenIgnorieren')
	      , isSelected: NO
		}]
		, positionVorselektieren: NO
		, positionVorselektierenItem: [{
	        value: 'positionVorselektieren'
	      , label: M.I18N.l('positionVorselektieren')
	      , isSelected: NO
		}]
		, in15MinutenSchritten: YES
		, in15MinutenSchrittenItem: [{
	        value: 'in15MinutenSchritten'
	      , label: M.I18N.l('in15MinutenSchritten')
	      , isSelected: YES
		}]
	}

	, init: function(isFirstLoad) {
		var that = this;
		that.load();
	}

	, lastPage: null
	
	, load: function() {
		var that = this;

		// set defaults for content-binding
		that.set("settings.startUhrzeit", that.settings.startUhrzeit);
		that.set("settings.inStundenBuchen", that.settings.inStundenBuchen);
		that.set("settings.inStundenBuchenItem", that.settings.inStundenBuchenItem);
		that.set("settings.falscheZeitenIgnorieren", that.settings.falscheZeitenIgnorieren);
		that.set("settings.falscheZeitenIgnorierenItem", that.settings.falscheZeitenIgnorierenItem);
		that.set("settings.positionVorselektieren", that.settings.positionVorselektieren);
		that.set("settings.positionVorselektierenItem", that.settings.positionVorselektierenItem);
		that.set("settings.in15MinutenSchritten", that.settings.in15MinutenSchritten);
		that.set("settings.in15MinutenSchrittenItem", that.settings.in15MinutenSchrittenItem);

		if (DigiWebApp.BautagebuchEinstellungen.find().length === 0) {
			// erstelle Record mit Vorgabewerten
			var rec = DigiWebApp.BautagebuchEinstellungen.createRecord({
				  startUhrzeit: that.settings.startUhrzeit
				, inStundenBuchen: that.settings.inStundenBuchen
				, falscheZeitenIgnorieren: that.settings.falscheZeitenIgnorieren
				, positionVorselektieren: that.settings.positionVorselektieren
				, in15MinutenSchritten: that.settings.in15MinutenSchritten
			});
			rec.save();
		} else {
			var rec = DigiWebApp.BautagebuchEinstellungen.find()[0];
			that.set("settings.startUhrzeit", rec.get("startUhrzeit"));
			if (typeof(rec.get("inStundenBuchen")) !== "undefined") {
				that.set("settings.inStundenBuchen", rec.get("inStundenBuchen"));
				that.set("settings.inStundenBuchenItem", [{
			        value: 'inStundenBuchen'
			      , label: M.I18N.l('BautagebuchInStundenBuchen')
			      , isSelected: rec.get("inStundenBuchen")
				}]);
			}
			if (typeof(rec.get("falscheZeitenIgnorieren")) !== "undefined") {
				that.set("settings.falscheZeitenIgnorieren", rec.get("falscheZeitenIgnorieren"));
				that.set("settings.falscheZeitenIgnorierenItem", [{
			        value: 'falscheZeitenIgnorieren'
			      , label: M.I18N.l('falscheZeitenIgnorieren')
			      , isSelected: rec.get("falscheZeitenIgnorieren")
				}]);
			}
			if (typeof(rec.get("positionVorselektieren")) !== "undefined") {
				that.set("settings.positionVorselektieren", rec.get("positionVorselektieren"));
				that.set("settings.positionVorselektierenItem", [{
			        value: 'positionVorselektieren'
			      , label: M.I18N.l('positionVorselektieren')
			      , isSelected: rec.get("positionVorselektieren")
				}]);
			}
			if (typeof(rec.get("in15MinutenSchritten")) !== "undefined") {
				that.set("settings.in15MinutenSchritten", rec.get("in15MinutenSchritten"));
				that.set("settings.in15MinutenSchrittenItem", [{
			        value: 'in15MinutenSchritten'
			      , label: M.I18N.l('in15MinutenSchritten')
			      , isSelected: rec.get("in15MinutenSchritten")
				}]);
			}
		}
	}
	
	, save: function() {
		var that = this;
		
		var rec = DigiWebApp.BautagebuchEinstellungen.find()[0];
		rec.set("startUhrzeit", that.settings.startUhrzeit);
		rec.set("inStundenBuchen", that.settings.inStundenBuchen);
		rec.set("falscheZeitenIgnorieren", that.settings.falscheZeitenIgnorieren);
		rec.set("positionVorselektieren", that.settings.positionVorselektieren);
		rec.set("in15MinutenSchritten", that.settings.in15MinutenSchritten);
		rec.save();
		
		//M.ViewManager.setCurrentPage(that.lastPage)
	}

	, setStartUhrzeit: function() {
  		if (DigiWebApp.BautagebuchEinstellungenController.settings.startUhrzeit) {
  			$('#'+DigiWebApp.BautagebuchEinstellungenPage.content.startUhrzeitContainer.startUhrzeitGrid.stundeFeld.id)[0].value = parseInt(DigiWebApp.BautagebuchEinstellungenController.settings.startUhrzeit.split(":")[0]).padLeft(2,"0");
  			$('#'+DigiWebApp.BautagebuchEinstellungenPage.content.startUhrzeitContainer.startUhrzeitGrid.minuteFeld.id)[0].value = parseInt(DigiWebApp.BautagebuchEinstellungenController.settings.startUhrzeit.split(":")[1]).padLeft(2,"0");
  		}
	}

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: BautagebuchMainController
// ==========================================================================
// manuell var-checked
DigiWebApp.BautagebuchMainController = M.Controller.extend({

	  projektleiter: null
	  
	, mitarbeiter: null
	
	, auftraege: null
	
	, materialien: null
	
	, mengeneinheiten: null

	, buttonPressInterval_var: null
	
	, buttonPressInterval: 200
	
	, wetterDefaults: {
	      temperatur: 10        // -50 bis +50
		, luftfeuchtigkeit: 50  // 0% - 100%
		, bewoelkung: 0         // 0=klar , 1=mäßig , 2=bedeckt, 4=neblig
	    , niederschlag: 0       // 0=kein , 1=Niesel, 2=Regen  , 3=Graupel  , 4=Schnee, 5=Hagel
	    , wind: 0               // 0=still, 1=mäßig , 2=böig   , 3=stürmisch
	    , wechselhaft: NO       // Ja/Nein
		, wechselhaftItem: [{
	        value: 'wechselhaft'
	      , label: M.I18N.l('BautagebuchWechselhaft')
	      , isSelected: NO
		}]
	}

	, init: function(isFirstLoad) {
		var that = this;
		
		DigiWebApp.BautagebuchEinstellungenController.load();
		
//		if (DigiWebApp.BautagebuchMengeneinheit.findSorted().length === 0) {
//			var i = 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Stück", kuerzel: "Stk"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Packung", kuerzel: "Pkg"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Karton", kuerzel: "Ktn"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Palette", kuerzel: "Pal"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Gramm", kuerzel: "g"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Kilogramm", kuerzel: "kg"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Zentner", kuerzel: "Ztr"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Tonne", kuerzel: "t"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Millimeter", kuerzel: "mm"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Zentimeter", kuerzel: "cm"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Meter", kuerzel: "m"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Laufmeter", kuerzel: "lfm"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Kilometer", kuerzel: "km"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Quadratmeter", kuerzel: "qm"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Milliliter", kuerzel: "ml"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Deziliter", kuerzel: "dl"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Liter", kuerzel: "l"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Hektoliter", kuerzel: "hl"}).saveSorted(); i = i + 1;
//			DigiWebApp.BautagebuchMengeneinheit.createRecord({id: i, bezeichnung: "Kubikmeter", kuerzel: "kbm"}).saveSorted(); i = i + 1;
//		}
		
        var itemSelected = NO;
        
        // Projektleiter
		if (DigiWebApp.BautagebuchProjektleiter.findSorted().length !== 0) {
            itemSelected = NO;
    		var projektleiter = DigiWebApp.BautagebuchProjektleiter.findSorted();
            var projektleiterArray = _.map(projektleiter, function(o) {
            	if ( typeof(o) === "undefined" ) {
            		console.log("UNDEFINED PROJEKTLEADER");
            	} else {        	
            		var obj = { label: o.vollername(), value: o.get('id') };
//            		if(obj.value === that.selections.activity) {
//            			obj.isSelected = YES;
//            			itemSelected = YES;
//            		}
                    return obj;
            	}
            });
            projektleiterArray = _.compact(projektleiterArray);
            // push "Bitte wählen Option"
            projektleiterArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});
            that.set('projektleiter', projektleiterArray);
		}
		
		// Mitarbeiter
		if (DigiWebApp.BautagebuchMitarbeiter.findSorted().length !== 0) {
            itemSelected = NO;
    		var mitarbeiter = DigiWebApp.BautagebuchMitarbeiter.findSorted();
            var mitarbeiterArray = _.map(mitarbeiter, function(o) {
            	if ( typeof(o) === "undefined" ) {
            		console.log("UNDEFINED WORKER");
            	} else {        	
            		var obj = { label: o.vollername(), value: o.get('id') };
//            		if(obj.value === that.selections.activity) {
            			obj.isSelected = YES;
//            			itemSelected = YES;
//            		}
                    return obj;
            	}
            });
            mitarbeiterArray = _.compact(mitarbeiterArray);
            that.set('mitarbeiter', mitarbeiterArray);
		}
		        
		// Aufträge
        itemSelected = NO;
		var auftraege = DigiWebApp.HandOrder.findSorted().concat(DigiWebApp.Order.findSorted());
        var auftraegeArray = _.map(auftraege, function(o) {
        	if ( typeof(o) === "undefined" ) {
        		console.log("UNDEFINED ORDER");
        	} else {        	
        		var obj = { label: o.get('name'), value: o.get('id') };
//        		if(obj.value === that.selections.activity) {
//        			obj.isSelected = YES;
//        			itemSelected = YES;
//        		}
                return obj;
        	}
        });
        auftraegeArray = _.compact(auftraegeArray);
        // push "Bitte wählen Option"
        auftraegeArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});
        that.set('auftraege', auftraegeArray);
        
		// Positionen
        itemSelected = NO;
		var positionen = DigiWebApp.Position.findSorted();
        var positionenArray = _.map(positionen, function(o) {
        	if ( typeof(o) === "undefined" ) {
        		console.log("UNDEFINED ORDER");
        	} else {        	
        		var obj = { label: o.get('name'), value: o.get('id') };
//        		if(obj.value === that.selections.activity) {
//        			obj.isSelected = YES;
//        			itemSelected = YES;
//        		}
                return obj;
        	}
        });
        positionenArray = _.compact(positionenArray);
        // push "Bitte wählen Option"
        positionenArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});
        that.set('positionen', positionenArray);
        
		var materialienArray = [];
        // Materialien
		if (DigiWebApp.BautagebuchMaterial.findSorted().length !== 0) {
            itemSelected = NO;
    		var materialien = DigiWebApp.BautagebuchMaterial.findSorted();
            materialienArray = _.map(materialien, function(o) {
            	if ( typeof(o) === "undefined" ) {
            		console.log("UNDEFINED MATERIAL");
            	} else {        	
            		var obj = { label: o.get("bezeichnung"), value: o.get('id') };
//            		if(obj.value === that.selections.activity) {
//            			obj.isSelected = YES;
//            			itemSelected = YES;
//            		}
                    return obj;
            	}
            });
            materialienArray = _.compact(materialienArray);
		}
        // push "Manuelle Eingabe"
        materialienArray.push({label: M.I18N.l('BautagebuchManuelleEingabe'), value: '0', isSelected:!itemSelected});
        that.set('materialien', materialienArray);

		var mengeneinheitenArray = [];
		// TODO Materialerfassung: Jedes Material enthält die Mengeneinheiten
        // Mengeneinheiten
		if (DigiWebApp.BautagebuchMengeneinheit.findSorted().length !== 0) {
            itemSelected = NO;
    		var mengeneinheiten = DigiWebApp.BautagebuchMengeneinheit.findSorted();
    		mengeneinheitenArray = _.map(mengeneinheiten, function(o) {
            	if ( typeof(o) === "undefined" ) {
            		console.log("UNDEFINED MATERIAL");
            	} else {       
            		var obj = { label: o.get("kuerzel"), value: o.get('id') };
//            		if(obj.value === that.selections.activity) {
//            			obj.isSelected = YES;
//            			itemSelected = YES;
//            		}
                    return obj;
            	}
            });
    		mengeneinheitenArray = _.compact(mengeneinheitenArray);
		}
        // push "Manuelle Eingabe"
		//mengeneinheitenArray.push({label: M.I18N.l('BautagebuchManuelleEingabe'), value: '0', isSelected:!itemSelected});
        positionenArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});
        that.set('mengeneinheiten', mengeneinheitenArray);

	}

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: BautagebuchMaterialienDetailsController
// ==========================================================================
// manuell var-checked
DigiWebApp.BautagebuchMaterialienDetailsController = M.Controller.extend({

	  item: null
	 
	, auftragId: null // runtime
	, auftragName: null // runtime
	, auftraegeList: null // runtime

	, handOrderId: null // runtime
	, handOrderName: null // runtime

	, positionId: null // in model
	, positionName: null // in model
	, positionenList: null // runtime

	, activityId: null // in model
	, activityName: null // in model
	, activityList: null // runtime
	
	, materialId: null // in model
	, materialienList: null // runtime
	, artikel: null // in model
	
	, mengeneinheitId: null // in model
	, mengeneinheitenList: null // runtime
	, einheit: null // in model
	
	, materialgruppeId: null // in model
	, materialgruppeBezeichnung: null // runtime
	, materialgruppenList: null // runtime

	, materialtypId: null // in model
	, materialtypBezeichnung: null // runtime
	, materialtypenList: null // runtime

	, herstellerId: null // in model
	, herstellerBezeichnung: null // runtime
	, herstellerList: null // runtime

	, lieferantId: null // in model
	, lieferantBezeichnung: null // runtime
	, lieferantenList: null // runtime

	, menge: null // in model
	  	
	, getMaterialFilterObj: function() {
		var that = this;
		return {
			  lieferantId: that.lieferantId
			, herstellerId: that.herstellerId
			, materialgruppeId: that.materialgruppeId
			, materialtypId: that.materialtypId
		}
	}

	, init: function(isFirstLoad) {
		var that = this;
		if (DigiWebApp.BautagebuchBautageberichtDetailsController.auftragsId) {
			that.set('auftragsId',  DigiWebApp.BautagebuchBautageberichtDetailsController.auftragsId);
			that.set('auftragsName',  DigiWebApp.BautagebuchBautageberichtDetailsController.auftragsName);
		}
	}

	, load: function(myItem) {
		var that = this;
		that.set("item", myItem);
		//console.log(myItem);
		var myPosition = _.filter(DigiWebApp.Position.findSorted(), function(position) {
			return (position.get('id') == myItem.get("positionId"));
		})[0];
		var myAuftrag = _.filter(DigiWebApp.HandOrder.findSorted().concat(DigiWebApp.Order.findSorted()), function(auftrag) {
			if (myItem.get("handOrderId") && myItem.get("handOrderId").length > 0) {
				return (auftrag.get('id') == myItem.get('handOrderId'));
			} else {
				return (auftrag.get('id') == myPosition.get('orderId'));
			}
		})[0];
		var myAuftragId = myAuftrag.get('id');
		var myAuftragName = myAuftrag.get('name');
		that.set("auftragId", myAuftragId);
		that.set("auftragName", myAuftragName);
		that.set("handOrderId", myItem.get("handOrderId"));
		that.set("handOrderName", myItem.get("handOrderName"));
		that.set("positionId", myItem.get("positionId"));
		that.set("positionName", myItem.get("positionName"));
		that.set("activityId", myItem.get("activityId"));
		that.set("activityName", myItem.get("activityName"));

		that.set("menge", myItem.get("menge"));

		that.set("mengeneinheitId", myItem.get("mengeneinheitId"));
		that.set("einheit", myItem.get("einheit"));

		that.set("materialId", myItem.get("materialId"));
		that.set("artikel", myItem.get("artikel"));

		that.set("materialgruppeId", myItem.get("materialgruppeId"));
		that.set("materialtypId", myItem.get("materialtypId"));
		that.set("lieferantId", myItem.get("lieferantId"));
		that.set("herstellerId", myItem.get("herstellerId"));

		that.setTaetigkeiten(myItem.get("positionId"));
	}
	
	, save: function() {
		var that = this;

		var positionSelected = (M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'positionComboBox').getSelection() !== "0" );
		if (!positionSelected) {
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                title: M.I18N.l('noPosSelected')
              , message: M.I18N.l('noPosSelectedMsg')
            });
			return false;
		}
		
		//var activitySelected = (M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'activityComboBox').getSelection() !== "0" );
		//if (!activitySelected) {
        //    DigiWebApp.ApplicationController.nativeAlertDialogView({
        //        title: M.I18N.l('noActSelected')
        //      , message: M.I18N.l('noActSelectedMsg')
        //    });
		//	return false;
		//}
		
		if (!that.artikel) {
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                title: M.I18N.l('BautagebuchKeinMaterial')
              , message: M.I18N.l('BautagebuchKeinMaterialMsg')
            });
            return false;
		}
		
		if (!that.mengeneinheitId) {
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                title: M.I18N.l('BautagebuchKeineEinheit')
              , message: M.I18N.l('BautagebuchKeineEinheitMsg')
            });
            return false;
		}
		
		if (!that.menge) {
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                title: M.I18N.l('BautagebuchKeineMenge')
              , message: M.I18N.l('BautagebuchKeineMengeMsg')
            });
            return false;
		} else if (that.menge.indexOf(".") !== -1 && that.menge.indexOf(",") !== -1) {
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                title: M.I18N.l('ungueltigeZahl')
              , message: M.I18N.l('ungueltigeZahlMsg')
            });
			return false;
		} else if (isNaN(parseFloat(that.menge))) {
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                title: M.I18N.l('BautagebuchUngueltigeMenge')
              , message: M.I18N.l('BautagebuchUngueltigeMengeMsg')
            });
			return false;
		}
		

		if (M.I18N.getLanguage() === "de_de") {
			that.set("menge", that.menge.replace(",","."));
		} else if (M.I18N.getLanguage() === "en_us") {
			that.set("menge", that.menge.replace(",","."));
		} else {
			that.set("menge", that.menge.replace(",","."));
		}
		
		// jetzt noch die menge endgültig als number casten 
		that.set("menge", parseFloat(that.menge));

		if (that.handOrderId) {
			that.item.set("handOrderId", that.handOrderId);
			that.item.set("handOrderName", that.handOrderName);
			that.item.set("positionId", null);
			that.item.set("positionName", null);
		} else {
			that.item.set("handOrderId", null);
			that.item.set("handOrderName", null);
			that.item.set("positionId", that.positionId);
			that.item.set("positionName", that.positionName);
		}
		if (parseInt(that.activityId) !== 0) {
			that.item.set("activityId", that.activityId);
			that.item.set("activityName", that.activityName);
		} else {
			that.item.set("activityId", null);
			that.item.set("activityName", null);
		}

		that.item.set("menge", that.menge);

		that.item.set("mengeneinheitId", that.mengeneinheitId);
		that.item.set("einheit", that.einheit);

		that.item.set("materialId", that.materialId);
		that.item.set("artikel", that.artikel);

		that.item.set("materialgruppeId", that.materialgruppeId);
		that.item.set("materialtypId", that.materialtypId);
		that.item.set("lieferantId", that.lieferantId);
		that.item.set("herstellerId", that.herstellerId);
		
		if (that.item.saveSorted()) {		
			DigiWebApp.BautagebuchMaterialienListeController.set("items", DigiWebApp.BautagebuchMaterialBuchung.findSorted(DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')));
			DigiWebApp.NavigationController.backToBautagebuchMaterialienListePageTransition();
			return true;
		} else {
			return false;
		}
	}
	
	, deleteMaterialbuchung: function() {
		var that = this;
		DigiWebApp.ApplicationController.nativeConfirmDialogView({
      	  title: M.I18N.l('deleteLabel')
	        , message: M.I18N.l('wirklichLoeschenMsg')
          , confirmButtonValue: M.I18N.l('yes')
    		, cancelButtonValue: M.I18N.l('no')
    		, callbacks: {
        		  confirm: {
            		  target: this
            		, action: function() {
						if (that.item.deleteSorted()) {		
							DigiWebApp.BautagebuchMaterialienListeController.set("items", DigiWebApp.BautagebuchMaterialBuchung.findSorted(DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')));
							DigiWebApp.NavigationController.backToBautagebuchMaterialienListePageTransition();
							return true;
						} else {
							return false;
						}
					}
        		}
        		, cancel: {
            		  target: this
            		, action: function() {
	        			return true;
    				}
        		}
    		}
		});
	}

	, setPositionen: function(auftragsId) {
		var that = this;
		if (typeof(auftragsId) === "undefined") {
			return false;
		} else {
			// verfügbare Positionen kopieren und ausgewähltes selektieren
			var itemSelected = NO;
		    var positionenArray = _.map(DigiWebApp.Position.find(), function(pos) {
		    	if ( typeof(pos) === "undefined" ) {
		    		console.log("UNDEFINED Position");
		    	} else {
		    		if (parseInt(pos.get('orderId')) == parseInt(auftragsId)) {
		    			var obj = { label: pos.get('name'), value: pos.get('id'), isSelected: NO };
			    		if (parseInt(pos.get('id')) == parseInt(that.item.get("positionId"))) {
			    			obj.isSelected = YES;
			    			itemSelected = YES;
			    			that.set('positionId', pos.get('id'));
			    			that.set('positionName', pos.get('name'));
			    		}
		    			return obj;
		    		}
		    	}
		    });
		    positionenArray = _.compact(positionenArray);
		    if (!itemSelected && auftragsId && positionenArray.length > 0) {
		    	positionenArray[0].isSelected = YES;
    			that.set('positionId', positionenArray[0].value);
    			that.set('positionName', positionenArray[0].label);
		    }
		    that.set("positionenList", positionenArray);
		}
	}

	, setTaetigkeiten: function(positionId) {
		var that = this;
		if (typeof(positionId) !== "undefined") {

			var workPlans = _.select(DigiWebApp.WorkPlan.find(), function(wp) {
	            if (wp) return wp.get('id') == positionId;
	        });

	        var itemSelected = NO;

	        /* if a workplan exists, only use those activities that are in the workplan */
	        var activities;
	        if (workPlans.length > 0) {
	            activities = DigiWebApp.SelectionController.getActivitiesFromWorkplan(workPlans[0]);
	        } else {
	            activities = DigiWebApp.SelectionController.getActivities();
	        }

			// verfügbare Tätigkeiten kopieren und ausgewähltes selektieren
		    var taetigkeitenArray = _.map(activities, function(act) {
		    	if ( typeof(act) === "undefined" ) {
		    		console.log("UNDEFINED activity");
		    	} else {
	    			var obj = { label: act.get('name'), value: act.get('id'), isSelected: NO };
	    			if (that.activityId === obj.value) {
	    				obj.isSelected = YES;
	    				itemSelected = YES;
	    			}
	    			return obj;
		    	}
		    });
		    taetigkeitenArray = _.compact(taetigkeitenArray);
		    taetigkeitenArray.push({label: M.I18N.l('selectSomethingOptional'), value: '0', isSelected: !itemSelected});
			that.set("activityList", taetigkeitenArray);
		}
	}
	
	, setLieferanten: function(pageLoad) {
		var relevantDetailsController = DigiWebApp.BautagebuchMaterialienDetailsController;
		var paramObj = relevantDetailsController.getMaterialFilterObj();
		paramObj.selectedId = relevantDetailsController.lieferantId;
		relevantDetailsController.set("lieferantenList", DigiWebApp.BautagebuchLieferant.getList(paramObj));
		var selectedId = _.find(relevantDetailsController.lieferantenList, function(item) { return item.isSelected; }).value;
		if (selectedId && selectedId > 0) { relevantDetailsController.set('lieferantId', selectedId); }
		//relevantDetailsController.setMaterialgruppen(pageLoad);
	}

	, setHersteller: function(pageLoad) {
		var relevantDetailsController = DigiWebApp.BautagebuchMaterialienDetailsController;
		var paramObj = relevantDetailsController.getMaterialFilterObj();
		paramObj.selectedId = relevantDetailsController.herstellerId;
		relevantDetailsController.set("herstellerList", DigiWebApp.BautagebuchHersteller.getList(paramObj));
		var selectedId = _.find(relevantDetailsController.herstellerList, function(item) { return item.isSelected; }).value;
		if (selectedId && selectedId > 0) { relevantDetailsController.set('herstellerId', selectedId); }
		//relevantDetailsController.setMaterialgruppen(pageLoad);
	}

	, setMaterialtypen: function(pageLoad) {
		var relevantDetailsController = DigiWebApp.BautagebuchMaterialienDetailsController;
		var paramObj = relevantDetailsController.getMaterialFilterObj();
		paramObj.selectedId = relevantDetailsController.materialtypId;
		relevantDetailsController.set("materialtypenList", DigiWebApp.BautagebuchMaterialtyp.getList(paramObj));
		var selectedId = _.find(relevantDetailsController.materialtypenList, function(item) { return item.isSelected; }).value;
		if (selectedId && selectedId > 0) { relevantDetailsController.set('materialtypId', selectedId); }
		//relevantDetailsController.setMaterialgruppen(pageLoad);
	}

	, setMaterialgruppen: function(pageLoad) {
		var relevantDetailsController = DigiWebApp.BautagebuchMaterialienDetailsController;
		var paramObj = relevantDetailsController.getMaterialFilterObj();
		paramObj.selectedId = relevantDetailsController.materialgruppeId;
		relevantDetailsController.set("materialgruppenList", DigiWebApp.BautagebuchMaterialgruppe.getList(paramObj));
		var selectedId = _.find(relevantDetailsController.materialgruppenList, function(item) { return item.isSelected; }).value;
		if (selectedId && selectedId > 0) { relevantDetailsController.set('materialgruppeId', selectedId); }
		relevantDetailsController.setMaterialien(pageLoad);
	}

	, setMaterialien: function(pageLoad) {
		var relevantDetailsController = DigiWebApp.BautagebuchMaterialienDetailsController;
		var paramObj = relevantDetailsController.getMaterialFilterObj();
		paramObj.selectedId = relevantDetailsController.materialId;
		relevantDetailsController.set("materialienList", DigiWebApp.BautagebuchMaterial.getList(paramObj));
		var selectedId = _.find(relevantDetailsController.materialienList, function(item) { return item.isSelected; }).value;
		var selectedLabel = _.find(relevantDetailsController.materialienList, function(item) { return item.isSelected; }).label;
		if (selectedId && selectedId > 0) { 
			relevantDetailsController.set('artikel', selectedLabel);
			relevantDetailsController.set('materialId', selectedId);
		}
		if (DigiWebApp.BautagebuchMaterialienDetailsController.materialId && DigiWebApp.BautagebuchMaterialienDetailsController.materialId !== "0" && DigiWebApp.BautagebuchMaterialienDetailsController.materialId !== null && DigiWebApp.BautagebuchMaterialienDetailsController.materialId !== "") {
			$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.materialInput.id).parent().hide();
		} else {
			$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.materialInput.id).parent().show();
			M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'materialInput').setValue(DigiWebApp.BautagebuchMaterialienDetailsController.artikel);
		}
		if (!pageLoad) relevantDetailsController.set('mengeneinheitId', null);
		relevantDetailsController.setMengeneinheiten(pageLoad);
	}

	, setMengeneinheiten: function(pageLoad) {
		var relevantDetailsController = DigiWebApp.BautagebuchMaterialienDetailsController;
		var MEs = null
		if (relevantDetailsController.materialId && relevantDetailsController.materialId > 0) {
			MEs = DigiWebApp.BautagebuchMaterial.getById(relevantDetailsController.materialId).getMengeneinheiten();
		} else {
			MEs = DigiWebApp.BautagebuchMengeneinheit.findSorted();
		}
		var paramObj = {items: MEs};
		if (relevantDetailsController.mengeneinheitId) {
			paramObj.selectedId = relevantDetailsController.mengeneinheitId;	
		} else if (relevantDetailsController.materialId && relevantDetailsController.materialId > 0) {
			paramObj.selectedId = DigiWebApp.BautagebuchMaterial.getById(relevantDetailsController.materialId).get('standardEinheitId');
		}
		relevantDetailsController.set("mengeneinheitenList", DigiWebApp.BautagebuchMengeneinheit.getList(paramObj));
		var selectedId = _.find(relevantDetailsController.mengeneinheitenList, function(item) { return item.isSelected; }).value;
		var selectedLabel = _.find(relevantDetailsController.mengeneinheitenList, function(item) { return item.isSelected; }).label;
		if (selectedId && selectedId > 0) { 
			relevantDetailsController.set('einheit', selectedLabel); 
			relevantDetailsController.set('mengeneinheitId', selectedId); 
		}
	}
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: BautagebuchMaterialienListeController
// ==========================================================================
// manuell var-checked
DigiWebApp.BautagebuchMaterialienListeController = M.Controller.extend({

	  items: null
	
	, init: function(isFirstLoad) {
		var that = this;
		
		that.set("items", DigiWebApp.BautagebuchMaterialBuchung.findSorted(DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')));
		
	}

	, neu: function() {
		//var that = this;
		
		DigiWebApp.BautagebuchMaterialienDetailsController.set("item", DigiWebApp.BautagebuchMaterialBuchung.createRecord({
			  bautagesberichtId: DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')
		}));
		if (DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('orderId')) {
			DigiWebApp.BautagebuchMaterialienDetailsController.set("auftragId", DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('orderId'));
			DigiWebApp.BautagebuchMaterialienDetailsController.set("auftragName", DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('orderName'));
		} else {
			DigiWebApp.BautagebuchMaterialienDetailsController.set("auftragId", null);
			DigiWebApp.BautagebuchMaterialienDetailsController.set("auftragName", null);
		}
		if (DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('handOrderId')) {
			DigiWebApp.BautagebuchMaterialienDetailsController.set("handOrderId", DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('handOrderId'));
			DigiWebApp.BautagebuchMaterialienDetailsController.set("handOrderName", DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('handOrderName'));
		} else {
			DigiWebApp.BautagebuchMaterialienDetailsController.set("handOrderId", null);
			DigiWebApp.BautagebuchMaterialienDetailsController.set("handOrderName", null);
		}
		DigiWebApp.BautagebuchMaterialienDetailsController.set("positionId", null);
		DigiWebApp.BautagebuchMaterialienDetailsController.set("positionName", null);
		DigiWebApp.BautagebuchMaterialienDetailsController.set("activityId", null);
		DigiWebApp.BautagebuchMaterialienDetailsController.set("activityName", null);

		DigiWebApp.BautagebuchMaterialienDetailsController.set("menge", null);

		DigiWebApp.BautagebuchMaterialienDetailsController.set("mengeneinheitId", null);
		DigiWebApp.BautagebuchMaterialienDetailsController.set("einheit", null);
		
		DigiWebApp.BautagebuchMaterialienDetailsController.set("materialId", null);
		DigiWebApp.BautagebuchMaterialienDetailsController.set("artikel", null);

		DigiWebApp.BautagebuchMaterialienDetailsController.set("materialtypId", null);
		DigiWebApp.BautagebuchMaterialienDetailsController.set("materialgruppeId", null);
		DigiWebApp.BautagebuchMaterialienDetailsController.set("herstellerId", null);
		DigiWebApp.BautagebuchMaterialienDetailsController.set("lieferantId", null);

		DigiWebApp.NavigationController.toBautagebuchMaterialienDetailsPageTransition();
	
	}

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: BautagebuchMedienDetailsController
// ==========================================================================
// manuell var-checked
DigiWebApp.BautagebuchMedienDetailsController = M.Controller.extend({

	  item: null
	  
	, handOrderId: null // runtime
	, handOrderName: null // runtime

	, auftragId: null // runtime
	, auftragName: null // runtime
	, auftraegeList: null // runtime

	, positionId: null // in model
	, positionName: null // in model
	, positionenList: null // runtime

	, activityId: null // in model
	, activityName: null // in model
	, activityList: null // runtime

	, data: null // runtime (base64-string)
	, remark: null // in model
	, fileType: null // in model
	, loadedFileName: null // runtime

	, init: function(isFirstLoad) {
		//var that = this;
	}

	, load: function(myItem) {
		var that = this;
		that.set("item", myItem);
		var myPosition = _.filter(DigiWebApp.Position.findSorted(), function(position) {
			return (position.get('id') == myItem.get("positionId"));
		})[0];
		var myAuftrag = _.filter(DigiWebApp.HandOrder.findSorted().concat(DigiWebApp.Order.findSorted()), function(auftrag) {
			if (myItem.get("handOrderId") && myItem.get("handOrderId").length > 0) {
				return (auftrag.get('id') == myItem.get('handOrderId'));
			} else {
				return (auftrag.get('id') == myPosition.get('orderId'));
			}
		})[0];
		var myAuftragId = myAuftrag.get('id');
		var myAuftragName = myAuftrag.get('name');
		that.set("auftragId", myAuftragId);
		that.set("auftragName", myAuftragName);
		that.set("handOrderId", myItem.get("handOrderId"));
		that.set("handOrderName", myItem.get("handOrderName"));
		that.set("positionId", myItem.get("positionId"));
		that.set("positionName", myItem.get("positionName"));
		that.set("activityId", myItem.get("activityId"));
		that.set("activityName", myItem.get("activityName"));
		var image = document.getElementById(DigiWebApp.BautagebuchMedienDetailsPage.content.image.id);
	    image.src = '';
	    myItem.readFromFile(function(fileContent){
	        DigiWebApp.ApplicationController.DigiLoaderView.hide();
			if (fileContent && (fileContent !== "")) {
				  that.set("data", fileContent);
			      var image = document.getElementById(DigiWebApp.BautagebuchMedienDetailsPage.content.image.id);
			      //image.src = 'data:' + DigiWebApp.ApplicationController.CONSTImageFiletype + ',' + fileContent;
			      image.src = fileContent;
			}
		}, function() {
			  that.set("data", null);
		      var image = document.getElementById(DigiWebApp.BautagebuchMedienDetailsPage.content.image.id);
		      image.src = '';
		});
		that.set("remark", myItem.get("remark"));
	}

	, save: function() {
		var that = this;
		
		var positionSelected = (M.ViewManager.getView('bautagebuchMedienDetailsPage', 'positionComboBox').getSelection() !== "0" );
		if (!positionSelected) {
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                title: M.I18N.l('noPosSelected')
              , message: M.I18N.l('noPosSelectedMsg')
            });
			return false;
		}
		
		//var activitySelected = (M.ViewManager.getView('bautagebuchMedienDetailsPage', 'activityComboBox').getSelection() !== "0" );
		//if (!activitySelected) {
        //    DigiWebApp.ApplicationController.nativeAlertDialogView({
        //        title: M.I18N.l('noActSelected')
        //      , message: M.I18N.l('noActSelectedMsg')
        //    });
		//	return false;
		//}

		if (that.handOrderId) {
			that.item.set("handOrderId", that.handOrderId);
			that.item.set("handOrderName", that.handOrderName);
			that.item.set("positionId", null);
			that.item.set("positionName", null);
		} else {
			that.item.set("handOrderId", null);
			that.item.set("handOrderName", null);
			that.item.set("positionId", that.positionId);
			that.item.set("positionName", that.positionName);
		}

		if (parseInt(that.activityId) !== 0) {
			that.item.set("activityId", that.activityId);
			that.item.set("activityName", that.activityName);
		} else {
			that.item.set("activityId", null);
			that.item.set("activityName", null);
		}
		if (that.remark !== DigiWebApp.BautagebuchMedienDetailsPage.content.remarkInput.initialText) {
			that.item.set("remark", that.remark);
		} else {
			that.item.set("remark", null);
		}
	    //var image = document.getElementById(DigiWebApp.EditPicturePage.content.image.id);

	    //that.item.set('fileType', DigiWebApp.ApplicationController.CONSTImageFiletype);

		var itemWasNew = (that.item.state == M.STATE_NEW);

		if (that.item.saveSorted()) {
			var image = document.getElementById(DigiWebApp.BautagebuchMedienDetailsPage.content.image.id);
		    saveCallback = function() {
				var backToListFunc = function() {
	  		        DigiWebApp.ApplicationController.DigiLoaderView.hide();
					DigiWebApp.BautagebuchMedienListeController.set("items", DigiWebApp.BautagebuchMediaFile.findSorted(DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')));
					DigiWebApp.NavigationController.backToBautagebuchMedienListePageTransition();
				}
				if (itemWasNew) {
		    		DigiWebApp.ApplicationController.nativeConfirmDialogView({
		          	  title: M.I18N.l('bautagebuchWeiteresFoto')
				        , message: M.I18N.l('bautagebuchWeiteresFotoMsg')
			            , confirmButtonValue: M.I18N.l('yes')
			      		, cancelButtonValue: M.I18N.l('no')
			      		, callbacks: {
			          		  confirm: {
			              		  target: this
			              		, action: function() {
			    					var myOldItem = JSON.parse(JSON.stringify(that.item));
			    					DigiWebApp.BautagebuchMedienListeController.neu(YES);
			    					that.set("positionId", myOldItem.record.positionId);
			    					that.set("positionName", myOldItem.record.positionName);
			    					that.set("activityId", myOldItem.record.activityId);
			    					that.set("activityName", myOldItem.record.activityName);
			    					//that.setTaetigkeiten(myOldItem.record.positionId);
								}
			          		}
			          		, cancel: {
			              		  target: this
			              		, action: function() {
			          				backToListFunc();
				        			return true;
			      				}
			          		}
			      		}
		    		});
				} else {
					// item wurde editiert
					backToListFunc();
					return true;
				}
		    }
		    that.item.saveToFile(image.src, saveCallback);
			return true;
		} else {
			return false;
		}
	}
	
	, deleteMedienBuchung: function() {
		var that = this;
		DigiWebApp.ApplicationController.nativeConfirmDialogView({
      	  title: M.I18N.l('deleteLabel')
	        , message: M.I18N.l('wirklichLoeschenMsg')
          , confirmButtonValue: M.I18N.l('yes')
    		, cancelButtonValue: M.I18N.l('no')
    		, callbacks: {
        		  confirm: {
            		  target: this
            		, action: function() {
						if (that.item.deleteSorted() !== false) {		
							DigiWebApp.BautagebuchMedienListeController.set("items", DigiWebApp.BautagebuchMediaFile.findSorted(DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')));
							DigiWebApp.NavigationController.backToBautagebuchMedienListePageTransition();
							return true;
						} else {
							return false;
						}
					}
        		}
        		, cancel: {
            		  target: this
            		, action: function() {
	        			return true;
    				}
        		}
    		}
		});
	}
	
	, setTaetigkeiten: function(positionId) {
		var that = this;
		if (typeof(positionId) !== "undefined") {

			var workPlans = _.select(DigiWebApp.WorkPlan.find(), function(wp) {
	            if (wp) return wp.get('id') == positionId;
	        });

	        var itemSelected = NO;

	        /* if a workplan exists, only use those activities that are in the workplan */
	        var activities = null;
	        if (workPlans.length > 0) {
	            activities = DigiWebApp.SelectionController.getActivitiesFromWorkplan(workPlans[0]);
	        } else {
	            activities = DigiWebApp.SelectionController.getActivities();
	        }

			// verfügbare Tätigkeiten kopieren und ausgewähltes selektieren
		    var taetigkeitenArray = _.map(activities, function(act) {
		    	if ( typeof(act) === "undefined" ) {
		    		console.log("UNDEFINED activity");
		    	} else {
	    			var obj = { label: act.get('name'), value: act.get('id'), isSelected: NO };
	    			if (that.activityId === obj.value) {
	    				obj.isSelected = YES;
	    				itemSelected = YES;
	    			}
	    			return obj;
		    	}
		    });
		    taetigkeitenArray = _.compact(taetigkeitenArray);
		    taetigkeitenArray.push({label: M.I18N.l('selectSomethingOptional'), value: '0', isSelected: !itemSelected});
			that.set("activityList", taetigkeitenArray);
		}
	}
	
    , takePicture: function() {
    	var that = this;
		navigator.camera.getPicture(
			  that.cameraSuccessBase64
			, that.cameraError
			, { 
				  quality: 40
				//, allowEdit: true
				, destinationType : navigator.camera.DestinationType.DATA_URL
				//, sourceType: navigator.camera.PictureSourceType.CAMERA 
			  }
		);    	
    }
    
    , cameraSuccessBase64: function(imageData) {
    	var that = DigiWebApp.BautagebuchMedienDetailsController;
    	that.set("data", imageData);
    	that.set("fileType", DigiWebApp.ApplicationController.CONSTImageFiletype);
        var image = document.getElementById(DigiWebApp.BautagebuchMedienDetailsPage.content.image.id);
        image.src = 'data:' + DigiWebApp.ApplicationController.CONSTImageFiletype + ',' + imageData;
        DigiWebApp.NavigationController.toBautagebuchMedienDetailsPageTransition();
    }
    
    , cameraError: function(mymessage) {
        DigiWebApp.ApplicationController.nativeAlertDialogView({
              title: 'ERROR'
            , message: mymessage
            , callbacks: {
	            confirm: {
	                  target: this
	                , action: function () {
	    				DigiWebApp.NavigationController.backToBautagebuchMedienListePageTransition();
		              }
		       }
		    }
        });
    }

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: BautagebuchMedienListeController
// ==========================================================================
// manuell var-checked
DigiWebApp.BautagebuchMedienListeController = M.Controller.extend({

	  items: null
	 
	, letzteFotoQuelle: null
	
	, init: function(isFirstLoad) {
		var that = this;
		
		that.set("items", DigiWebApp.BautagebuchMediaFile.findSorted(DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')));
		
	}

	, neu: function(useLetzteFotoQuelle) {
		var that = DigiWebApp.BautagebuchMedienListeController;
//    	M.DialogView.actionSheet({
//	          title: M.I18N.l('newMedia')
//	        , cancelButtonValue: M.I18N.l('cancel')
//	        //, otherButtonValues: [M.I18N.l('audio'),M.I18N.l('photo'),M.I18N.l('video'),M.I18N.l('other')]
//	        //, otherButtonTags: ["audio", "photo", "video", "other"]
//	        , otherButtonValues: [M.I18N.l('photo')]
//	        , otherButtonTags: ["photo"]
//	        , callbacks: {
//  				  other: {action: function(buttonTag) {
//	  			    switch(buttonTag) {
//		    		        case 'audio':
//		    		            DigiWebApp.ApplicationController.nativeAlertDialogView({
//		    		                title: M.I18N.l('notImplemented')
//		    		              , message: M.I18N.l('notImplementedMsg')
//		    		            });
//		    		            break;
//		    		        case 'photo':
		    		    		DigiWebApp.BautagebuchMedienDetailsController.set("item", DigiWebApp.BautagebuchMediaFile.createRecord({
			    		  			    bautagesberichtId: DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')
			    		  			  , fileType: DigiWebApp.ApplicationController.CONSTImageFiletype
			    		  		}));
		    		    		if (DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('orderId')) {
		    		    			DigiWebApp.BautagebuchMedienDetailsController.set("auftragId", DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('orderId'));
		    		    			DigiWebApp.BautagebuchMedienDetailsController.set("auftragName", DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('orderName'));
		    		    		} else {
		    		    			DigiWebApp.BautagebuchMedienDetailsController.set("auftragId", null);
		    		    			DigiWebApp.BautagebuchMedienDetailsController.set("auftragName", null);
		    		    		}
		    		    		if (DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('handOrderId')) {
		    		    			DigiWebApp.BautagebuchMedienDetailsController.set("handOrderId", DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('handOrderId'));
		    		    			DigiWebApp.BautagebuchMedienDetailsController.set("handOrderName", DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('handOrderName'));
		    		    		} else {
		    		    			DigiWebApp.BautagebuchMedienDetailsController.set("handOrderId", null);
		    		    			DigiWebApp.BautagebuchMedienDetailsController.set("handOrderName", null);
		    		    		}
		    		    		DigiWebApp.BautagebuchMedienDetailsController.set("positionId", null);
		    		    		DigiWebApp.BautagebuchMedienDetailsController.set("positionName", null);
		    		    		DigiWebApp.BautagebuchMedienDetailsController.set("activityId", null);
		    		    		DigiWebApp.BautagebuchMedienDetailsController.set("activityName", null);
		    		    		DigiWebApp.BautagebuchMedienDetailsController.set("data", null);
		    		    		DigiWebApp.BautagebuchMedienDetailsController.set("remark", null);
		    		    		DigiWebApp.BautagebuchMedienDetailsController.set("fileType", DigiWebApp.ApplicationController.CONSTImageFiletype);
		    		    		
		    		    		libraryFunc = function() {
	  		    		        	// unterscheiden: auf Gerät oder im Browser?
	  		    		        	if ( typeof navigator.camera !== 'undefined' 
	  		    	        		  && typeof navigator.camera.getPicture !== 'undefined') {
	  		    		        		
	  		    		        		// auf Geraet:
	  		    		        		navigator.camera.getPicture(
	  	    		        				  function(imgData) {
	  	    		        				      var that = DigiWebApp.BautagebuchMedienDetailsController;
	  	    		        				      var image = document.getElementById(DigiWebApp.BautagebuchMedienDetailsPage.content.image.id);
	  	    		        					  if (imgData.indexOf("data:") === 0) {
		  	    		        				        image.src = imgData;
	  	    		        					  } else {
		  	    		        				        image.src = 'data:' + DigiWebApp.ApplicationController.CONSTImageFiletype + ',' + imgData;
	  	    		        					  }
	  	    		        					  that.set("data", image.src);
	  	    		        					  that.set("fileType", DigiWebApp.ApplicationController.CONSTImageFiletype);
	  	    		        					  DigiWebApp.NavigationController.toBautagebuchMedienDetailsPageTransition();
	  	    		        				}
	  	    		        				, function(err) {
	  				    		        		DigiWebApp.BautagebuchMedienDetailsController.set("data", null);
	  				    		        		DigiWebApp.BautagebuchMedienDetailsController.set("fileType", null);
	  				    		        		DigiWebApp.ApplicationController.nativeAlertDialogView({
	  					    		                title: M.I18N.l('error')
	  					    		              , message: M.I18N.l('noPicLoaded') + ": " + err
	  					    		            });	    		        					
	  	    		        				}
	  	    		        				, {
	  	    		        					  quality: 40
	  	    		     	    				, allowEdit: true
	  	    		     	    				, destinationType : navigator.camera.DestinationType.DATA_URL
	  	    		     	    				//, destinationType: navigator.camera.DestinationType.FILE_URI
	  	    		     	    				, encodingType: navigator.camera.EncodingType.JPEG
	  	    		     	    				, sourceType: navigator.camera.PictureSourceType.PHOTOLIBRARY 
	  	    		     	    				, mediaType: navigator.camera.MediaType.PICTURE
	  	    		     	    				, saveToPhotoAlbum: false
	  	    		        				}
	  		    		        		);
	  		    		        		
	  		    		        	} else {
	  		    		        	
	  			    		        	// im Browser:
	  			    		        	DigiWebApp.FileChooserPage.set("successCallback", function(imgData, fileName) {
	  			    		        		var that = DigiWebApp.BautagebuchMedienDetailsController;
	  				    		        	if (imgData !== null) {
  	    		        				          var image = document.getElementById(DigiWebApp.BautagebuchMedienDetailsPage.content.image.id);
  					    		        		  that.set("loadedFileName", fileName);
  					    		        		  var myFileType = ""; //DigiWebApp.ApplicationController.CONSTImageFiletype;
  					    		        		  var tmp = fileName;
  					    		        		  var i = 0;
  					    		        		  while (i !== -1) {
  					    		        			  tmp = tmp.substr(i + 1);
  					    		        			  i = tmp.indexOf(".");
  					    		        		  }
  					    		        		  tmp = tmp.toLowerCase();
  					    		        		  switch (tmp) {
  					    		        		  	case "jpg":
  							    		        		  // filetype zum MIME-Type vervollständigen
  							    		        		  myFileType = "image/jpeg";
  					    		        		  		break;
  					    		        		  	case "jpeg":
  							    		        		  // filetype zum MIME-Type vervollständigen
  							    		        		  myFileType = "image/" + tmp;
  					    		        		  		break;
  					    		        		  	case "png":
  							    		        		  // filetype zum MIME-Type vervollständigen
  							    		        		  myFileType = "image/" + tmp;
  					    		        		  		break;
  					    		        		  	case "bmp":
  							    		        		  // filetype zum MIME-Type vervollständigen
  							    		        		  myFileType = "image/" + tmp;
  					    		        		  		break;
  					    		        		  	default:
  					    		        		  		break;
  					    		        		  }
  					    		        		  switch (myFileType) {
  					    		        		  	case "":
  					    		        		  		that.set("loadedPicture", null);
  					    		        		  		that.set("fileType", null);
  								    		            DigiWebApp.ApplicationController.nativeAlertDialogView({
  								    		                title: M.I18N.l('error')
  								    		              , message: M.I18N.l('noPicLoaded')
  								    		            });
  					    		        		  		break;
  					    		        		  	default:
		  					    		        		  that.set("fileType", myFileType);
    		  	    		        					  if (imgData.indexOf("data:") === 0) {
	    		  	    		        				    	image.src = imgData;
    		  	    		        					  } else {
	    		  	    		        				        image.src = 'data:' + myFileType + ',' + imgData;
    		  	    		        					  }
    		  	    		        					  that.set("data", image.src);
    		  	    		        					  DigiWebApp.NavigationController.toBautagebuchMedienDetailsPageTransition();
  				    		        					break;
  					    		        		  }
	  				    		        	} else {
	  				    		        		that.set("data", null);
  					    		        		that.set("loadedFileName", null);
  					    		        		that.set("fileType", null);
	  					    		            DigiWebApp.ApplicationController.nativeAlertDialogView({
	  					    		                title: M.I18N.l('error')
	  					    		              , message: M.I18N.l('noPicLoaded')
	  					    		            });
	  				    		        	}
	  			    		        	});
	  			    		        	DigiWebApp.NavigationController.toFileChooserPageTransition();
	  		    		        	}
		    		    		}
		    		    		
		    		    		cameraFunc = function() {
	  		    		        	// unterscheiden: auf Gerät oder im Browser?
	  		    		        	if ( typeof navigator.camera !== 'undefined' 
	  		    	        		  && typeof navigator.camera.getPicture !== 'undefined') {
	  		    		        		DigiWebApp.BautagebuchMedienDetailsController.takePicture();
	  		    		        	} else {
	  		    		        		// Browser hat keine Kamera
				    		            DigiWebApp.ApplicationController.nativeAlertDialogView({
				    		                title: M.I18N.l('error')
				    		              , message: M.I18N.l('noCamera')
				    		            });
	  		    		        	}
		    		    		}
		    		    		
		    		    		if (useLetzteFotoQuelle) {
    		        				switch(DigiWebApp.BautagebuchMedienListeController.letzteFotoQuelle) {
			  		    		        case 'library':
			  		    		        	libraryFunc();
			  		    		            break;
			  		    		        case 'camera':
			  		    		        	cameraFunc();
			  		    		            break;
			  		    		        default:
			  		    		            console.log("unknown ButtonTag");
			  		    		            break;
				  	  			    }
		    		    		} else {
			    		        	M.DialogView.actionSheet({
				    		  	          title: M.I18N.l('takePicture')
				    		  	        , cancelButtonValue: M.I18N.l('cancel')
				    		  	        , otherButtonValues: [M.I18N.l('library'), M.I18N.l('camera'), M.I18N.l('uebersicht')]
				    		  	        , otherButtonTags: ["library", "camera", "uebersicht"]
				    		  	        , callbacks: {
				    		  				  other: {action: function(buttonTag2) {
			    		        				DigiWebApp.BautagebuchMedienListeController.letzteFotoQuelle = buttonTag2;
			    		        				switch(buttonTag2) {
				    		  		    		        case 'library':
				    		  		    		        	libraryFunc();
				    		  		    		            break;
				    		  		    		        case 'camera':
				    		  		    		        	cameraFunc();
				    		  		    		            break;
				    		  		    		        case 'uebersicht':
				    		  		    		        	DigiWebApp.BautagebuchBautageberichtDetailsController.save(DigiWebApp.NavigationController.toBautagebuchMedienListePageTransition);
				    		  		    		            break;
				    		  		    		        default:
				    		  		    		            console.log("unknown ButtonTag");
				    		  		    		            break;
				    		  	  			    }
				    		  	  			}}
				    		  			, cancel: {action: function() {
				    		  				//console.log(M.I18N.l('cancel'));
				    		  			}}
				    		  		}
				    		  	    });
		    		    		}
//		    		            break;
//		    		        case 'video':
//		    		            DigiWebApp.ApplicationController.nativeAlertDialogView({
//		    		                title: M.I18N.l('notImplemented')
//		    		              , message: M.I18N.l('notImplementedMsg')
//		    		            });
//		    		            break;
//		    		        case 'other':
//		    		            DigiWebApp.ApplicationController.nativeAlertDialogView({
//		    		                title: M.I18N.l('notImplemented')
//		    		              , message: M.I18N.l('notImplementedMsg')
//		    		            });
//		    		            break;
//		    		        default:
//		    		            console.log("unknonw ButtonTag");
//		    		            break;
//	  			    }
//	  			}}
//  			, cancel: {action: function() {
//  				//console.log(M.I18N.l('cancel'));
//  			}}
//  		}
//	    });
	
	}
	
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: BautagebuchNotizenDetailsController
// ==========================================================================
// manuell var-checked
DigiWebApp.BautagebuchNotizenDetailsController = M.Controller.extend({

	  item: null
	
	, handOrderId: null // runtime
	, handOrderName: null // runtime

	, auftragId: null // runtime
	, auftragName: null // runtime
	, auftraegeList: null // runtime

	, positionId: null // in model
	, positionName: null // in model
	, positionenList: null // runtime

	, activityId: null // in model
	, activityName: null // in model
	, activityList: null // runtime

	, data: null // in model

	, init: function(isFirstLoad) {
		//var that = this;
	}

	, load: function(myItem) {
		var that = this;
		that.set("item", myItem);
		var myPosition = _.filter(DigiWebApp.Position.findSorted(), function(position) {
			return (position.get('id') == myItem.get("positionId"));
		})[0];
		var myAuftrag = _.filter(DigiWebApp.HandOrder.findSorted().concat(DigiWebApp.Order.findSorted()), function(auftrag) {
			if (myItem.get("handOrderId") && myItem.get("handOrderId").length > 0) {
				return (auftrag.get('id') == myItem.get('handOrderId'));
			} else {
				return (auftrag.get('id') == myPosition.get('orderId'));
			}
		})[0];
		var myAuftragId = myAuftrag.get('id');
		var myAuftragName = myAuftrag.get('name');
		that.set("auftragId", myAuftragId);
		that.set("auftragName", myAuftragName);
		that.set("handOrderId", myItem.get("handOrderId"));
		that.set("handOrderName", myItem.get("handOrderName"));
		that.set("positionId", myItem.get("positionId"));
		that.set("positionName", myItem.get("positionName"));
		that.set("activityId", myItem.get("activityId"));
		that.set("activityName", myItem.get("activityName"));
		that.set("data", myItem.get("data"));
		that.setTaetigkeiten(myItem.get("positionId"));
	}
	
	, save: function() {
		var that = this;
		
		var positionSelected = (M.ViewManager.getView('bautagebuchNotizenDetailsPage', 'positionComboBox').getSelection() !== "0" );
		if (!positionSelected) {
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                title: M.I18N.l('noPosSelected')
              , message: M.I18N.l('noPosSelectedMsg')
            });
			return false;
		}
		
		//var activitySelected = (M.ViewManager.getView('bautagebuchNotizenDetailsPage', 'activityComboBox').getSelection() !== "0" );
		//if (!activitySelected) {
        //    DigiWebApp.ApplicationController.nativeAlertDialogView({
        //        title: M.I18N.l('noActSelected')
        //      , message: M.I18N.l('noActSelectedMsg')
        //    });
		//	return false;
		//}
		
		if (that.handOrderId) {
			that.item.set("handOrderId", that.handOrderId);
			that.item.set("handOrderName", that.handOrderName);
			that.item.set("positionId", null);
			that.item.set("positionName", null);
		} else {
			that.item.set("handOrderId", null);
			that.item.set("handOrderName", null);
			that.item.set("positionId", that.positionId);
			that.item.set("positionName", that.positionName);
		}

		that.item.set("activityId", that.activityId);
		that.item.set("activityName", that.activityName);
		if (that.data !== DigiWebApp.BautagebuchNotizenDetailsPage.content.dataInput.initialText) {
			that.item.set("data", that.data);
		} else {
			that.item.set("data", null);
		}
		if (that.item.saveSorted()) {		
			DigiWebApp.BautagebuchNotizenListeController.set("items", DigiWebApp.BautagebuchNotiz.findSorted(DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')));
			DigiWebApp.NavigationController.backToBautagebuchNotizenListePageTransition();
			return true;
		} else {
			return false;
		}
	}
	
	, deleteNotiz: function() {
		var that = this;
		DigiWebApp.ApplicationController.nativeConfirmDialogView({
      	  title: M.I18N.l('deleteLabel')
	        , message: M.I18N.l('wirklichLoeschenMsg')
          , confirmButtonValue: M.I18N.l('yes')
    		, cancelButtonValue: M.I18N.l('no')
    		, callbacks: {
        		  confirm: {
            		  target: this
            		, action: function() {
						if (that.item.deleteSorted()) {		
							DigiWebApp.BautagebuchNotizenListeController.set("items", DigiWebApp.BautagebuchNotiz.findSorted(DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')));
							DigiWebApp.NavigationController.backToBautagebuchNotizenListePageTransition();
							return true;
						} else {
							return false;
						}
					}
        		}
        		, cancel: {
            		  target: this
            		, action: function() {
	        			return true;
    				}
        		}
    		}
		});
	}
	
	, setTaetigkeiten: function(positionId) {
		var that = this;
		if (typeof(positionId) !== "undefined") {

			var workPlans = _.select(DigiWebApp.WorkPlan.find(), function(wp) {
	            if (wp) return wp.get('id') == positionId;
	        });

	        var itemSelected = NO;

	        /* if a workplan exists, only use those activities that are in the workplan */
	        var activities = null;
	        if (workPlans.length > 0) {
	            activities = DigiWebApp.SelectionController.getActivitiesFromWorkplan(workPlans[0]);
	        } else {
	            activities = DigiWebApp.SelectionController.getActivities();
	        }

			// verfügbare Tätigkeiten kopieren und ausgewähltes selektieren
		    var taetigkeitenArray = _.map(activities, function(act) {
		    	if ( typeof(act) === "undefined" ) {
		    		console.log("UNDEFINED activity");
		    	} else {
	    			var obj = { label: act.get('name'), value: act.get('id'), isSelected: NO };
	    			if (that.activityId === obj.value) {
	    				obj.isSelected = YES;
	    				itemSelected = YES;
	    			}
	    			return obj;
		    	}
		    });
		    taetigkeitenArray = _.compact(taetigkeitenArray);
		    taetigkeitenArray.push({label: M.I18N.l('selectSomethingOptional'), value: '0', isSelected: !itemSelected});
			that.set("activityList", taetigkeitenArray);
		}
	}

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: BautagebuchNotizenListeController
// ==========================================================================
// manuell var-checked
DigiWebApp.BautagebuchNotizenListeController = M.Controller.extend({

	  items: null
	
	, init: function(isFirstLoad) {
		var that = this;
		
		that.set("items", DigiWebApp.BautagebuchNotiz.findSorted(DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')));
		
	}

	, neu: function() {
		
		DigiWebApp.BautagebuchNotizenDetailsController.set("item", DigiWebApp.BautagebuchNotiz.createRecord({
			  bautagesberichtId: DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')
		}));
		if (DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('orderId')) {
			DigiWebApp.BautagebuchNotizenDetailsController.set("auftragId", DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('orderId'));
			DigiWebApp.BautagebuchNotizenDetailsController.set("auftragName", DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('orderName'));
		} else {
			DigiWebApp.BautagebuchNotizenDetailsController.set("auftragId", null);
			DigiWebApp.BautagebuchNotizenDetailsController.set("auftragName", null);
		}
		if (DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('handOrderId')) {
			DigiWebApp.BautagebuchNotizenDetailsController.set("handOrderId", DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('handOrderId'));
			DigiWebApp.BautagebuchNotizenDetailsController.set("handOrderName", DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('handOrderName'));
		} else {
			DigiWebApp.BautagebuchNotizenDetailsController.set("handOrderId", null);
			DigiWebApp.BautagebuchNotizenDetailsController.set("handOrderName", null);
		}
		DigiWebApp.BautagebuchNotizenDetailsController.set("positionId", null);
		DigiWebApp.BautagebuchNotizenDetailsController.set("positionName", null);
		DigiWebApp.BautagebuchNotizenDetailsController.set("activityId", null);
		DigiWebApp.BautagebuchNotizenDetailsController.set("activityName", null);
		DigiWebApp.BautagebuchNotizenDetailsController.set("data", null);

		DigiWebApp.NavigationController.toBautagebuchNotizenDetailsPageTransition();
	
	}
	
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: BautagebuchZeitenDetailsController
// ==========================================================================
// manuell var-checked
DigiWebApp.BautagebuchZeitenDetailsController = M.Controller.extend({

	  item: null

	, handOrderId: null // runtime
	, handOrderName: null // runtime

	, auftragId: null // runtime
	, auftragName: null // runtime
	, auftraegeList: null // runtime

	, positionId: null // in model
	, positionName: null // in model
	, positionenList: null // runtime

	, activityId: null // in model
	, activityName: null // in model
	, activityList: null // runtime
	
	, mitarbeiterIds: null // in model
	, mitarbeiterList: null // runtime
	
	, von: "00:00" // in model
	, timeStampStart: "" // in model

	, bis: "00:00" // in model
	, timeStampEnd: "" // in model
		
	, dauer: "00:00" // in model
	, remark: ""

	, verbuchen: YES // in model

	, latitude: "" // in model
	, longitude: "" // in model
	, latitude_bis: "" // in model
	, longitude_bis: "" // in model

	, init: function(isFirstLoad) {
		//var that = this;
	}

	, load: function(myItem) {
		var that = this;
		that.set("item", myItem);
		var myPosition = _.filter(DigiWebApp.Position.findSorted(), function(position) {
			return (position.get('id') == myItem.get("positionId"));
		})[0];
		var myAuftrag = _.filter(DigiWebApp.HandOrder.findSorted().concat(DigiWebApp.Order.findSorted()), function(auftrag) {
			if (myItem.get("handOrderId") && myItem.get("handOrderId").length > 0) {
				return (auftrag.get('id') == myItem.get('handOrderId'));
			} else {
				return (auftrag.get('id') == myPosition.get('orderId'));
			}
		})[0];
		var myAuftragId = myAuftrag.get('id');
		var myAuftragName = myAuftrag.get('name');
		that.set("auftragId", myAuftragId);
		that.set("auftragName", myAuftragName);
		that.set("handOrderId", myItem.get("handOrderId"));
		that.set("handOrderName", myItem.get("handOrderName"));
		that.set("positionId", myItem.get("positionId"));
		that.set("positionName", myItem.get("positionName"));
		that.set("activityId", myItem.get("activityId"));
		that.set("activityName", myItem.get("activityName"));
		that.set("mitarbeiterIds", JSON.parse(myItem.get("mitarbeiterIds")));
		that.set("verbuchen", myItem.get("verbuchen"));
		that.set("timeStampStart", myItem.get("timeStampStart"));
		that.set("timeStampEnd", myItem.get("timeStampEnd"));
		that.set("von", myItem.get("von"));
		that.set("bis", myItem.get("bis"));
		that.setVonBis();
		that.set("dauer", myItem.get("dauer"));
		that.setDauer();
		that.set("remark", myItem.get("remark"));
	}
	
	, save: function() {
		var that = this;
		
		var positionSelected = (M.ViewManager.getView('bautagebuchZeitenDetailsPage', 'positionComboBox').getSelection() !== "0" );
		var activitySelected = (M.ViewManager.getView('bautagebuchZeitenDetailsPage', 'activityComboBox').getSelection() !== "0" );
		var mitarbeiterSelected = (!(DigiWebApp.BautagebuchZeitenDetailsController.mitarbeiterIds === null || DigiWebApp.BautagebuchZeitenDetailsController.mitarbeiterIds.length === 0));
		
		if (!positionSelected) {
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                title: M.I18N.l('noPosSelected')
              , message: M.I18N.l('noPosSelectedMsg')
            });
			return false;
		}
		if (!activitySelected) {
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                title: M.I18N.l('noActSelected')
              , message: M.I18N.l('noActSelectedMsg')
            });
			return false;
		}
		if (!mitarbeiterSelected) {
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                title: M.I18N.l('noMitarbeiterSelected')
              , message: M.I18N.l('noMitarbeiterSelectedMsg')
            });
			return false;
		}
		if (!DigiWebApp.BautagebuchEinstellungen.find()[0].get("inStundenBuchen") && !DigiWebApp.BautagebuchEinstellungen.find()[0].get("falscheZeitenIgnorieren")) {
			var myVon = D8.create("01.01.1993 " + DigiWebApp.BautagebuchZeitenDetailsController.get("von"));
			var myBis = D8.create("01.01.1993 " + DigiWebApp.BautagebuchZeitenDetailsController.get("bis"));
			if (myVon.getTimestamp() > myBis.getTimestamp()) {
				DigiWebApp.ApplicationController.nativeAlertDialogView({
	                title: M.I18N.l('wrongTimes')
	              , message: M.I18N.l('wrongTimesMsg')
	            });
				return false;
			}
		}
		
		if (that.handOrderId) {
			that.item.set("handOrderId", that.handOrderId);
			that.item.set("handOrderName", that.handOrderName);
			that.item.set("positionId", null);
			that.item.set("positionName", null);
		} else {
			that.item.set("handOrderId", null);
			that.item.set("handOrderName", null);
			that.item.set("positionId", that.positionId);
			that.item.set("positionName", that.positionName);
		}

		that.item.set("activityId", that.activityId);
		that.item.set("activityName", that.activityName);
		that.item.set("mitarbeiterIds", JSON.stringify(that.mitarbeiterIds));
		that.item.set("verbuchen", that.verbuchen);
		that.item.set("von", that.von);
		that.item.set("timeStampStart", that.timeStampStart);
		that.item.set("bis", that.bis);
		that.item.set("timeStampEnd", that.timeStampEnd);
		that.item.set("dauer", that.dauer);
		that.item.set("remark", that.remark);
		var itemWasNew = (that.item.state == M.STATE_NEW);
		if (that.item.saveSorted()) {
			var backToListFunc = function() {
    			DigiWebApp.BautagebuchZeitenListeController.set("items", DigiWebApp.BautagebuchZeitbuchung.findSorted(DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')));
    			DigiWebApp.NavigationController.backToBautagebuchZeitenListePageTransition();
			}
			if (itemWasNew) {
	    		DigiWebApp.ApplicationController.nativeConfirmDialogView({
	          	  title: M.I18N.l('bautagebuchWeitereZeitbuchung')
			        , message: M.I18N.l('bautagebuchWeitereZeitbuchungMsg')
		            , confirmButtonValue: M.I18N.l('yes')
		      		, cancelButtonValue: M.I18N.l('no')
		      		, callbacks: {
		          		  confirm: {
		              		  target: this
		              		, action: function() {
		    					var myOldItem = JSON.parse(JSON.stringify(that.item));
		    					DigiWebApp.BautagebuchZeitenListeController.neu();
		    					that.set("positionId", myOldItem.record.positionId);
		    					that.set("positionName", myOldItem.record.positionName);
		    					that.set("handOrderId", myOldItem.record.handOrderId);
		    					that.set("handOrderName", myOldItem.record.handOrderName);
		    					//that.set("activityId", myOldItem.record.activityId);
		    					//that.set("activityName", myOldItem.record.activityName);
		    					that.setTaetigkeiten(myOldItem.record.positionId);
		    					that.set("mitarbeiterIds", JSON.parse(myOldItem.record.mitarbeiterIds));
		    					that.set("von", myOldItem.record.bis);
		    					that.set("bis", myOldItem.record.bis);
		    					that.setVonBis();
		    					that.set("dauer", "00:00");
		    					that.setDauer();
		    					that.set("remark", "");
		    					$('#' + DigiWebApp.BautagebuchZeitenDetailsPage.content.remarkInput.id)[0].value = "";
							}
		          		}
		          		, cancel: {
		              		  target: this
		              		, action: function() {
		          				backToListFunc();
			        			return true;
		      				}
		          		}
		      		}
	    		});
			} else {
				// item wurde editiert
				backToListFunc();
				return true;
			}
		} else {
			return false;
		}
	}
	
	, deleteZeitbuchung: function() {
		var that = this;
		DigiWebApp.ApplicationController.nativeConfirmDialogView({
        	  title: M.I18N.l('deleteLabel')
	        , message: M.I18N.l('wirklichLoeschenMsg')
            , confirmButtonValue: M.I18N.l('yes')
      		, cancelButtonValue: M.I18N.l('no')
      		, callbacks: {
          		  confirm: {
              		  target: this
              		, action: function() {
						if (that.item.deleteSorted()) {		
							DigiWebApp.BautagebuchZeitenListeController.set("items", DigiWebApp.BautagebuchZeitbuchung.findSorted(DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')));
							DigiWebApp.NavigationController.backToBautagebuchZeitenListePageTransition();
							return true;
						} else {
							return false;
						}
					}
          		}
          		, cancel: {
              		  target: this
              		, action: function() {
	        			return true;
      				}
          		}
      		}
  		});
	}

	, setTaetigkeiten: function(positionId) {
		var that = this;
		if (typeof(positionId) !== "undefined") {

			var workPlans = _.select(DigiWebApp.WorkPlan.find(), function(wp) {
	            if (wp) return wp.get('id') == positionId;
	        });

	        var itemSelected = NO;

	        /* if a workplan exists, only use those activities that are in the workplan */
	        var activities;
	        if (workPlans.length > 0) {
	            activities = DigiWebApp.SelectionController.getActivitiesFromWorkplan(workPlans[0]);
	        } else {
	            activities = DigiWebApp.SelectionController.getActivities();
	        }

			// verfügbare Tätigkeiten kopieren und ausgewähltes selektieren
		    var taetigkeitenArray = _.map(activities, function(act) {
		    	if ( typeof(act) === "undefined" ) {
		    		console.log("UNDEFINED activity");
		    	} else {
	    			var obj = { label: act.get('name'), value: act.get('id'), isSelected: NO };
	    			if (parseInt(that.activityId) === parseInt(obj.value)) {
	    				obj.isSelected = YES;
	    				itemSelected = YES;
	    			}
	    			return obj;
		    	}
		    });
		    taetigkeitenArray = _.compact(taetigkeitenArray);
		    taetigkeitenArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected: !itemSelected});
			that.set("activityList", taetigkeitenArray);
		}
	}

	, setDauer: function() {
		var that = this;
  		if (DigiWebApp.BautagebuchZeitenDetailsController.dauer) {
  			$('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.dauerContainer.dauerGrid.stundeFeld.id)[0].value = parseInt(DigiWebApp.BautagebuchZeitenDetailsController.dauer.split(":")[0]).padLeft(2,"0");
  			$('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.dauerContainer.dauerGrid.minuteFeld.id)[0].value = parseInt(DigiWebApp.BautagebuchZeitenDetailsController.dauer.split(":")[1]).padLeft(2,"0");
  		}
	}
	
	, setVonBis: function() {
		var that = this;
  		if (DigiWebApp.BautagebuchZeitenDetailsController.von) {
  			$('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.stundeVonFeld.id)[0].value = parseInt(DigiWebApp.BautagebuchZeitenDetailsController.von.split(":")[0]).padLeft(2,"0");
  			$('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.minuteVonFeld.id)[0].value = parseInt(DigiWebApp.BautagebuchZeitenDetailsController.von.split(":")[1]).padLeft(2,"0");
  		}
  		if (DigiWebApp.BautagebuchZeitenDetailsController.bis) {
  			$('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.stundeBisFeld.id)[0].value = parseInt(DigiWebApp.BautagebuchZeitenDetailsController.bis.split(":")[0]).padLeft(2,"0");
  			$('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.minuteBisFeld.id)[0].value = parseInt(DigiWebApp.BautagebuchZeitenDetailsController.bis.split(":")[1]).padLeft(2,"0");
  		}
  		if (DigiWebApp.BautagebuchZeitenDetailsController.von && DigiWebApp.BautagebuchZeitenDetailsController.bis && !DigiWebApp.BautagebuchEinstellungenController.settings.inStundenBuchen) {
  			// Dauer aktualisieren
				var myVon = D8.create("01.01.2000 " + DigiWebApp.BautagebuchZeitenDetailsController.von);
				var myBis = D8.create("01.01.2000 " + DigiWebApp.BautagebuchZeitenDetailsController.bis);
				var minutesInBetween = myVon.timeBetween(myBis, "minutes");
				var hoursInBetween = Math.floor(minutesInBetween / 60);
				var remainingMinutes = minutesInBetween % 60;
				DigiWebApp.BautagebuchZeitenDetailsController.set("dauer", hoursInBetween.padLeft(2) + ":" + remainingMinutes.padLeft(2));
				that.setDauer();
  		}
	}

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: BautagebuchZeitenListeController
// ==========================================================================
// manuell var-checked
DigiWebApp.BautagebuchZeitenListeController = M.Controller.extend({

	  items: null
	
	, init: function(isFirstLoad) {
		var that = this;
		
		that.set("items", DigiWebApp.BautagebuchZeitbuchung.findSorted(DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')));
		DigiWebApp.BautagebuchZusammenfassungController.load(DigiWebApp.BautagebuchBautageberichtDetailsController.item);
		DigiWebApp.BautagebuchZusammenfassungController.set("ZeitbuchungenPerMitarbeiterList", DigiWebApp.BautagebuchZusammenfassungController.getZeitbuchungenPerMitarbeiterList());
		M.ViewManager.setCurrentPage(DigiWebApp.BautagebuchZeitenListePage);

	}

	, neu: function(vorselektierterMitarbeiter) {
		//var that = this;
		
		DigiWebApp.BautagebuchZeitenDetailsController.set("item", DigiWebApp.BautagebuchZeitbuchung.createRecord({
			  bautagesberichtId: DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')
		}));
		if (DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('orderId')) {
			DigiWebApp.BautagebuchZeitenDetailsController.set("auftragId", DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('orderId'));
			DigiWebApp.BautagebuchZeitenDetailsController.set("auftragName", DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('orderName'));
		} else {
			DigiWebApp.BautagebuchZeitenDetailsController.set("auftragId", null);
			DigiWebApp.BautagebuchZeitenDetailsController.set("auftragName", null);
		}
		if (DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('handOrderId')) {
			DigiWebApp.BautagebuchZeitenDetailsController.set("handOrderId", DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('handOrderId'));
			DigiWebApp.BautagebuchZeitenDetailsController.set("handOrderName", DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('handOrderName'));
		} else {
			DigiWebApp.BautagebuchZeitenDetailsController.set("handOrderId", null);
			DigiWebApp.BautagebuchZeitenDetailsController.set("handOrderName", null);
		}
		DigiWebApp.BautagebuchZeitenDetailsController.set("positionId", null);
		DigiWebApp.BautagebuchZeitenDetailsController.set("positionName", null);
		DigiWebApp.BautagebuchZeitenDetailsController.set("activityId", null);
		DigiWebApp.BautagebuchZeitenDetailsController.set("activityName", null);
		if (vorselektierterMitarbeiter) {
			DigiWebApp.BautagebuchZeitenDetailsController.set("mitarbeiterIds", [vorselektierterMitarbeiter]);
		} else {
			DigiWebApp.BautagebuchZeitenDetailsController.set("mitarbeiterIds", null);
		}
		DigiWebApp.BautagebuchZeitenDetailsController.set("von", DigiWebApp.BautagebuchBautageberichtDetailsController.startUhrzeit);
		DigiWebApp.BautagebuchZeitenDetailsController.set("bis", DigiWebApp.BautagebuchBautageberichtDetailsController.startUhrzeit);
		DigiWebApp.BautagebuchZeitenDetailsController.set("dauer", "00:00");
		DigiWebApp.BautagebuchZeitenDetailsController.set("remark", "");
		
		DigiWebApp.NavigationController.toBautagebuchZeitenDetailsPageTransition();
		$('#' + DigiWebApp.BautagebuchZeitenDetailsPage.header.delButton.id).hide();

	}

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: BautagebuchZusammenfassungController
// ==========================================================================
// manuell var-checked
DigiWebApp.BautagebuchZusammenfassungController = M.Controller.extend({

	  item: null // model itself

	, lastTimestampDatatransfer: null
	  
	, bautagesberichtId: null
	
	, projektleiterId: null // in model
	, projektleiterList: null // runtime
	  
	, mitarbeiterIds: null // in model
	, mitarbeiterList: null // runtime
	, mitarbeiterListSelected: null // runtime
	
	, datum: null // in model
	
	, auftragsId: null // in model
	, auftragsName: null // in model
	, auftraegeList: null // runtime
	
	, positionenList: null // runtime (auftraegeComboBox-change)
	
	, latitude: null
	, longitude: null
	
	, wetter: null // in model
	, setWetter: function(wetterObject) {
		var that = this;
		if (typeof(wetterObject) === "undefined") {
			return NO;
		} else {
			that.set("wetter", JSON.parse(JSON.stringify(wetterObject)));
			return YES;
		}
	}
	
	, startUhrzeit: null
		
	, ZeitbuchungenPerMitarbeiterList: []
				
	, init: function(isFirstLoad) {
		//var that = this;
		if (isFirstLoad) {
		}
		
		// geladene dauer-zeitbuchungen in von/bis-zeitbuchungen umrechnen:
		
	}
	
	, load: function(myItem, readOnly) {
		var that = this;
		
		that.set("item", myItem); 
		
		that.set("bautagesberichtId", myItem.get('id'));
		
		that.set("datum", myItem.get("datum"));
		that.set("projektleiterId", myItem.get("projektleiterId"));
		that.set("auftragsId", myItem.get("orderId"));
		that.set("auftragsName", myItem.get("orderName"));
		that.set("mitarbeiterIds", myItem.get("selektierteMitarbeiter"));
		that.set("startUhrzeit", myItem.get("startUhrzeit"));

		that.setWetter(DigiWebApp.BautagebuchMainController.wetterDefaults);
		that.set("wetter.temperatur", myItem.get("temperatur"));
		that.set("wetter.luftfeuchtigkeit", myItem.get("luftfeuchtigkeit"));
		that.set("wetter.bewoelkung", myItem.get("bewoelkung"));
		that.set("wetter.niederschlag", myItem.get("niederschlag"));
		that.set("wetter.wind", myItem.get("wind"));
		that.set("wetter.wechselhaft", myItem.get("wechselhaft"));
		that.set("wetter.wechselhaftItem", [{
	        value: 'wechselhaft'
	      , label: M.I18N.l('BautagebuchWechselhaft')
	      , isSelected: myItem.get("wechselhaft")
		}]);		
		that.setPositionen(myItem.get("orderId"));
		
		that.set("ZeitbuchungenPerMitarbeiterList", that.getZeitbuchungenPerMitarbeiterList());
		
	}

	, save: function(successcallback, errorcallback) {
		var that = this;
			
		if (that.item.saveSorted()) {		
			DigiWebApp.BautagebuchBautageberichteListeController.set("items", DigiWebApp.BautagebuchBautagesbericht.findSorted());
			if (typeof(successcallback) === "function") successcallback();
			return true;
		} else {
			if (typeof(errorcallback) === "function") errorcallback();
			return false;
		}
	}
	
	, deleteBautagesbericht: function(successcallback, errorcallback) {
		var that = this;
		if (that.item.deleteSorted()) {
			DigiWebApp.BautagebuchBautageberichteListeController.set("items", DigiWebApp.BautagebuchBautagesbericht.findSorted());
			if (typeof(successcallback) === "function") successcallback();
			return true;
		} else {
			if (typeof(errorcallback) === "function") errorcallback();
			return false;
		}
	}

	, finish: function(successcallback, errorcallback) {
		var that = this;

		that.item.set("abgeschlossen", YES);
		that.berechneVonBis(YES);

		var unterschriftString = "";
    	// Feature 405 (Unterschrift)
		if ((DigiWebApp.SettingsController.featureAvailable('405')) && (typeof window.requestFileSystem !== "undefined") && DigiWebApp.BautagebuchZusammenfassungPage.signaturePadAPI) {
			//unterschriftImageString = DigiWebApp.BautagebuchZusammenfassungPage.signaturePadAPI.getSignatureImage();
    		unterschriftString = DigiWebApp.BautagebuchZusammenfassungPage.signaturePadAPI.getSignatureString();
			//var unterschriftRawValue = $('#' + DigiWebApp.BautagebuchZusammenfassungPage.content.signature.signatureform.signaturecanvas.id).val();
    	
			//console.log(DigiWebApp.BautagebuchZusammenfassungPage.signaturePadAPI);
			//console.log(unterschriftImageString);
    		that.item.set('fileType', DigiWebApp.ApplicationController.CONSTTextFiletype);
    		that.item.saveToFile(unterschriftString, function(){
    			
    		    that.item.set("unterschrift_breite", DigiWebApp.BautagebuchZusammenfassungPage.content.container.signature.signatureform.signaturecanvas.canvasWidth);
    		    that.item.set("unterschrift_hoehe", DigiWebApp.BautagebuchZusammenfassungPage.content.container.signature.signatureform.signaturecanvas.canvasHeight);

    			if (that.save()) {
    				DigiWebApp.BautagebuchBautageberichteListeController.set("items", DigiWebApp.BautagebuchBautagesbericht.findSorted());
    				if (typeof(successcallback) === "function") successcallback();
    				return true;
    			} else {
    				if (typeof(errorcallback) === "function") errorcallback();
    				return false;
    			}
    		});
		} else {
			if (that.save()) {
				DigiWebApp.BautagebuchBautageberichteListeController.set("items", DigiWebApp.BautagebuchBautagesbericht.findSorted());
				if (typeof(successcallback) === "function") successcallback();
				return true;
			} else {
				if (typeof(errorcallback) === "function") errorcallback();
				return false;
			}
		}
	}

	, setPositionen: function(auftragsId) {
		//var that = this;
		if (typeof(auftragsId) === "undefined") {
			return false;
		} else {
			// verfügbare Positionen kopieren und ausgewähltes selektieren
		    var positionenArray = _.map(DigiWebApp.Position.find(), function(pos) {
		    	if ( typeof(pos) === "undefined" ) {
		    		console.log("UNDEFINED Position");
		    	} else {
		    		if (parseInt(pos.get('orderId')) === parseInt(auftragsId)) {
		    			var obj = { label: pos.get('name'), value: pos.get('id'), isSelected: NO };
		    			return obj;
		    		}
		    	}
		    });
		    positionenArray = _.compact(positionenArray);
		    if (positionenArray.length == 1) {
		    	positionenArray[0].isSelected = YES;
		    }
			DigiWebApp.BautagebuchBautageberichtDetailsController.set("positionenList", positionenArray);
		}
	}
	
	, berechneVonBis: function(saveit) {
		var that = this;
		var result = [];
		var letztesBisArr = [];
		letztesBisArr["0"] = D8.create(DigiWebApp.BautagebuchBautageberichtDetailsController.item.get("datum") + " " + DigiWebApp.BautagebuchBautageberichtDetailsController.startUhrzeit);
		var relevanteZeitbuchungen = DigiWebApp.BautagebuchZeitbuchung.find({query:{identifier: 'bautagesberichtId', operator: '=', value: that.bautagesberichtId}}); 
		var relevanteZeitbuchungenSorted = _.sortBy(relevanteZeitbuchungen , function(z) {
            return parseInt(z.get('_createdAt'));
        });
		var letztesBis = letztesBisArr[0];
		_.each(relevanteZeitbuchungenSorted, function(m) {

			// höchstes letztesBis per Mitarbeiter suchen
			var letztesBis = letztesBisArr["0"];
			_.each(JSON.parse(m.get('mitarbeiterIds')), function(mId){
				if (typeof(letztesBisArr["" + mId]) != "undefined") {
					if (letztesBisArr["" + mId].getTimestamp() > letztesBis.getTimestamp()) {
						letztesBis = letztesBisArr["" + mId];
					}
				}
			});

			m.set("von", letztesBis.format("HH:MM"));
			m.set("timeStampStart", letztesBis.getTimestamp());
			var dauer = m.get("dauer");
			
			var naechstesBis = letztesBis.addHours(parseInt(dauer.split(":")[0])).addMinutes(parseInt(dauer.split(":")[1]));
			letztesBis = naechstesBis;
			
			// letztesBis für alle MAs dieser Zeitbuchung setzen
			_.each(JSON.parse(m.get('mitarbeiterIds')), function(mId){
				letztesBisArr["" + mId] = letztesBis;
			});
			
			//console.log("bis", letztesBis.format("HH:MM"));
			m.set("bis", letztesBis.format("HH:MM"));
			m.set("timeStampEnd", letztesBis.getTimestamp());
			if (typeof saveit !== "undefined" && parseBool(saveit)) {
				m.saveSorted();
			}
			result.push(m);
		});
		var resultSorted = _.sortBy(result , function(z) {
            return parseInt(z.get('von'));
        });
		return resultSorted;
	}
	
	, getZeitbuchungenPerMitarbeiterList: function() {
		var that = this;
		var MAList = [];
		var zeitbuchungenList = [];
		if (parseBool(that.item.get("abgeschlossen")) || !DigiWebApp.BautagebuchEinstellungen.find()[0].get("inStundenBuchen")) {
			// Zeitbuchungen wurden bereits berechnet oder es wird nicht in Stunden gebucht (sondern mit Von/Bis)
			var relevanteZeitbuchungen = DigiWebApp.BautagebuchZeitbuchung.find({query:{identifier: 'bautagesberichtId', operator: '=', value: that.bautagesberichtId}}); 
			zeitbuchungenList = _.sortBy(relevanteZeitbuchungen , function(z) {
	            return parseInt(z.get('von'));
	        });
		} else {
			zeitbuchungenList = that.berechneVonBis();
		}
		_.each(zeitbuchungenList, function(m) {
			  var zeitbuchungMAIds = JSON.parse(m.get("mitarbeiterIds"));
			  _.each(zeitbuchungMAIds, function(el) {
	        		var myMitarbeiter = DigiWebApp.BautagebuchMitarbeiter.find({query:{identifier: 'id', operator: '=', value: el}})[0];
	        		if (typeof myMitarbeiter !== "undefined") {
		        		var found = NO;
	        			_.each(MAList, function(MAListEntry) {
	        				if (MAListEntry.get("id") === myMitarbeiter.get("id")) {
	        					found = YES;
	        				}
	        			});
	        			if (found === NO) {
	        				MAList.push(myMitarbeiter);
	        			}
		        	}
			  });
		});
		var result = [];
		_.each(MAList, function(el) {
			var items = [];
			var mySumme = D8.create(DigiWebApp.BautagebuchBautageberichtDetailsController.item.get("datum") + " 00:00");
			_.each(zeitbuchungenList,function(zeitbuch) {
				   var maIds = JSON.parse(zeitbuch.get("mitarbeiterIds"));
				   _.each(maIds, function(maId) {
					   	if (maId === el.get("id")) {
				    	  // benutze diese Zeitbuchung
					   		mySumme = mySumme.addHours(zeitbuch.get("dauer").split(":")[0]).addMinutes(zeitbuch.get("dauer").split(":")[1]);
					   				var zeitbuchItem = {
					   					  vonbisdauer : zeitbuch.get("von") + " - " + zeitbuch.get("bis") + " (" + zeitbuch.get("dauer") + "h)"
					   					, handOrderName: zeitbuch.get("handOrderName")
					   					, positionName: zeitbuch.get("positionName")
					   					, activityName: zeitbuch.get("activityName")
					   					, mitarbeiterId: maId
					   					, modelId: zeitbuch.m_id
					   				};
					   				items.push(zeitbuchItem);
				      	}
				   });
			});
			var maItem = {"label": el.vollername() + ": " + mySumme.format("HH:MM") + "h", "items":items};
			result.push(maItem);
		});
		return result;
	}
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: BookingController
// ==========================================================================
// manuell var-checked

/*
* The controller that handles everything booking related.
* Is also the endpoint for action triggered on the BookingPage
* */
DigiWebApp.BookingController = M.Controller.extend({


    /**
     * The current open booking
     */
      currentBooking: null

    /**
     * The before opened booking closed and saved temporarily for 
     */
    , currentBookingClosed: null

    /**
     * The string representing the data of the current open booking.
     *
     * The currentBookingLabel of the BookingPage has a content binding on it, that means
     * setting a new value to this property will change the label's value
     */
    , currentBookingStr: ''
    	
    /**
     * Der Zeitstempel zum Zeitpunkt des Buchens durch den Benutzer
     */
    , currentBookingTimesStampBook: null

    /**
     * Flag indicating whether a switch to the bookingPage is back from employee selection page
     *
     * Important for determing whether to re-set selection lists or not
     */
    , isBackFromEmployeePage: NO

    , isBackFromRemarkPage: NO

    /**
     * Arrays of booking objects (model records).
     * Data for listview on time data page (open bookings)
     *
     * => list on timeDataPage has content binding on it
     */
    , timeData: null
    , timeDataSent: null
    , timeDataForEdit: null
    , timeDataSentDays: null
    , timeDataSentArchived: null
    
    , dayToDisplay: null

    /**
     *
     * On first load does:
     *
     * 1) searches for an open booking and sets it if available
     * 2) Builds the current booking string and sets it to property currentBookingStr
     * 3) Presets the selection lists to show the data of the current open booking
     *
     * On first and every other load:
     * If back from employee selection apge
     * 1) sets isBackFromEmployeePage to NO and nothing more
     *
     * Else
     * Sets the selection list according to different flags in SelectionController:
     * showHandOrders or useSelection (selection made before)
     * if they are false, set selection to current open booking
     * if no open booking reset selection
     *
     * @param {Boolean} isFirstLoad is passed if this function is used in a page event like pageshow => determines that the page is loaded for the very
     * first time during this application life cycle
     */
    , init: function(isFirstLoad) {
	
		if (isFirstLoad) {
			DigiWebApp.SelectionController.set("uebernachtungskennzeichenScholpp", JSON.parse('[{"label":"Keine Übernachtung","value":"1","isSelected":true},{"label":"Pauschal","value":"2"},{"label":"Beleg (Hotel)","value":"3"},{"label":"Heimreise","value":"4"},{"label":"Baustellenwechsel","value":"5"},{"label":"- -","value":"6"}]'));
			DigiWebApp.SelectionController.set("spesenkennzeichenScholpp", JSON.parse('[{"label":" ","value":"1","isSelected":true}]'));
		}
		
		var p = M.Environment.getPlatform();
        if (    (p.substr(0,10) !== "BlackBerry")
        	 && (p.substr(0,12) !== "Linux armv7l")
    		//&& (navigator.userAgent.toLowerCase().indexOf("android") === -1)
    	) {
        	// enable Transitions on iOS and Android
            DigiWebApp.ApplicationController.setTransitionsSetting();
		}
	
		if (this.isBackFromRemarkPage || this.isBackFromEmployeePage) {
			this.refreshCurrentBooking(false);
		} else {
			this.refreshCurrentBooking(true);
		}

        if (this.isBackFromEmployeePage) {
            DigiWebApp.BookingController.set('isBackFromEmployeePage', NO);
        } else if (this.isBackFromRemarkPage) {
            DigiWebApp.BookingController.set('isBackFromRemarkPage', NO);
            //console.log("isBackFromRemarkPage");
        } else {
			//this.refreshCurrentBooking(true);
            if (DigiWebApp.SelectionController.useSelections) {
            	//if (DigiWebApp.SettingsController.globalDebugMode) console.log('useSelections');
                DigiWebApp.SelectionController.setSelectionByPreviousSelection();
            } else if (DigiWebApp.SelectionController.showHandOrderFirst) {
                //if (DigiWebApp.SettingsController.globalDebugMode) console.log('showHandOrderFirst');
                DigiWebApp.SelectionController.showHandOrderFirst = NO;
                DigiWebApp.SelectionController.setSelectionWithCurrentHandOrderFirst();
            } else {
                if (this.currentBooking) {
                    //if (DigiWebApp.SettingsController.globalDebugMode) console.log('useCurrentBooking');
                    DigiWebApp.SelectionController.setSelectionByCurrentBooking();
                } else {
                    DigiWebApp.SelectionController.initSelection();
                }

            }
        }
    }

    /**
     * Called by init and book to handle changes in localStorage
     * 
     * @param {Boolean} reset Selection?
     */
    , refreshCurrentBooking: function (setSelection) {
    	
        var bookings = DigiWebApp.Booking.find();
        var openBookings = null;

        if (bookings.length > 0) {
            openBookings = _.select(bookings, function(b) {
                if (b) return b.get('isCurrent') === true;
            });
        }

        if (openBookings && openBookings.length > 0) {

            //if (DigiWebApp.SettingsController.globalDebugMode) console.log('currentBookingStr was ' + this.get('currentBookingStr'));

            this.set('currentBooking', openBookings[0]);
            this.set('currentBookingStr', this.buildBookingStr(this.currentBooking));

            //if (DigiWebApp.SettingsController.globalDebugMode) console.log('currentBookingStr is now ' + this.get('currentBookingStr'));

            if (setSelection) {
            	DigiWebApp.SelectionController.setSelectionByCurrentBooking();
            }
        }
    }

    , refreshCurrentBookingClosed: function () {
    	try {
	        var allBookingsSorted = _.sortBy(DigiWebApp.Booking.find().concat(DigiWebApp.SentBooking.find()), function(booking) {
	        		return booking.get("timeStampStart");
	        });
	        var allClosedBookingsSorted = _.select(allBookingsSorted, function(b) {
	            if (b) return b.get('isCurrent') === false;
	        });
	        DigiWebApp.BookingController.currentBookingClosed = allClosedBookingsSorted[allClosedBookingsSorted.length - 1];
    	} catch(e) {}
    }

    , book: function() {
    	var that = DigiWebApp.BookingController;
    	try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
    	if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("in book");
		if (this.checkBooking()) { // checkBooking checks for all booking-problems

			$('#' + DigiWebApp.BookingPage.content.grid.id).addClass('green');
			var t = window.setTimeout(function(){ window.clearTimeout(t); $('#' + DigiWebApp.BookingPage.content.grid.id).removeClass('green'); }, 500);

			var myTimeStampEnd = null;
			var timeEnd = new Date();
			myTimeStampEnd = timeEnd.getTime();

    		if (that.currentBooking && (M.Date.create(that.currentBooking.get("timeStampStart")).format('HH:MM') == M.Date.create(myTimeStampEnd).format('HH:MM'))) {

    	    	var orderId;
    		    var handOrderId = null;
    	    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
    	    		orderId = M.ViewManager.getView('bookingPageWithIconsScholpp', 'order').getSelection();
    	    	} else {
    	    		orderId = M.ViewManager.getView('bookingPage', 'order').getSelection();
    	    	}
    		
    	    	var posObj;
    	    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
    	    		posObj = M.ViewManager.getView('bookingPageWithIconsScholpp', 'position').getSelection(YES);
    	    	} else {
    	    		posObj = M.ViewManager.getView('bookingPage', 'position').getSelection(YES);
    	    	}
    			var posId = posObj ? posObj.value : null;
    		
    			var actObj;
    	    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
    	    		actObj = M.ViewManager.getView('bookingPageWithIconsScholpp', 'activity').getSelection(YES);
    	    	} else {
    	    		actObj = M.ViewManager.getView('bookingPage', 'activity').getSelection(YES);
    	    	}
    			var actId = actObj ? actObj.value : null;

				// Buchung gemäß geänderter Auswahl aktualisieren
		    	var myOrderName = M.I18N.l('unknown');
		    	var myHandOrderName = M.I18N.l('unknown');
		    	var myPositionName = M.I18N.l('unknown');
		    	var myActivityName = M.I18N.l('unknown');

			    if (that.isHandOrder(orderId)) {
					handOrderId = orderId;
					myHandOrderName = _.select(DigiWebApp.HandOrder.findSorted(), function(ord) {
						if (ord) return ord.get('id') == orderId || ord.get('name') == orderId;
					})[0].get('name');
					myOrderName = myHandOrderName;
					orderId = null;
			
					// a handorder has no position
					posId = null;
			    } else {
			    	try {
			    		if (orderId != null) {
			    			var myOrderLoad = _.find(DigiWebApp.Order.find(), function(a) { return (parseInt(a.get("id")) == parseInt(orderId));});
			    			if (myOrderLoad && orderId != 0) myOrderName = myOrderLoad.get('name');
			    		}
			    	} catch(e4) { console.error(e4); }
			    }

		    	try {
		    		if (posId != null) {
		    			var myPositionLoad = _.find(DigiWebApp.Position.find(), function(a) { return (parseInt(a.get("id")) == parseInt(posId));});
		    			if (myPositionLoad && posId != 0) myPositionName = myPositionLoad.get('name');
		    		}
		    	} catch(e4) { console.error(e4); }
		    	
		    	try {
		    		if (actId != null) {
		    			var myActivityLoad = _.find(DigiWebApp.Activity.find(), function(a) { return (parseInt(a.get("id")) == parseInt(actId));});
		    			if (myActivityLoad && actId != 0) myActivityName = myActivityLoad.get('name');
		    		}
		    	} catch(e5) { console.error(e5); }

		    	that.currentBooking.set("orderId", orderId);
		    	that.currentBooking.set("orderName", myOrderName);
				that.currentBooking.set("handOrderId", handOrderId);
				that.currentBooking.set("handOrderName", myHandOrderName);
				that.currentBooking.set("positionId", posId);
				that.currentBooking.set("positionName", myPositionName);
				that.currentBooking.set("activityId", actId);
				that.currentBooking.set("activityName", myActivityName);
				that.currentBooking.save();
			    if (that.autoSend()) {
			    	that.sendCurrentBookings();
			    }

    		} else {
				if (this.currentBooking) {
					// Start::Bemerkungsfeld (403)
					if (
							   (DigiWebApp.SettingsController.featureAvailable('403') && !DigiWebApp.SettingsController.getSetting('remarkIsOptional'))
							|| (DigiWebApp.SettingsController.featureAvailable('422') && DigiWebApp.Activity.findById(DigiWebApp.BookingController.currentBooking.get('activityId')).get('istFahrzeitRelevant'))
					){
							// if remark-feature active and not optional: go to remarkpage
							// or if gefahreneKilometer-Freischaltung is enabled: go to RemarkPage
							this.refreshCurrentBooking(false);
							DigiWebApp.NavigationController.toRemarkPage(function() {
			    		        DigiWebApp.BookingController.set('isBackFromRemarkPage', YES);
			    		        DigiWebApp.NavigationController.backToBookTimePagePOP();
			    				DigiWebApp.ApplicationController.DigiLoaderView.hide();
			    				DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('Save'));
			    				DigiWebApp.BookingController.bookWithRemark();            					
							});
					} else {
						// else: bookWithRemark
	    				DigiWebApp.ApplicationController.DigiLoaderView.hide();
	    				DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('Save'));
						DigiWebApp.BookingController.bookWithRemark();
					}
					// End::Bemerkungsfeld
				} else {
					DigiWebApp.ApplicationController.DigiLoaderView.hide();
					DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('Save'));
					DigiWebApp.BookingController.bookWithRemark();
				}
    		}
		} else { // if (checkBooking())
			$('#' + DigiWebApp.BookingPage.content.grid.id).addClass('red');
			var t = window.setTimeout(function(){ window.clearTimeout(t); $('#' + DigiWebApp.BookingPage.content.grid.id).removeClass('red'); }, 500);
		}
    }

    /**
     * Called by clicking the button on bookingPage.
     *
     * Does the "preprocessing of a booking"
     *
     * 1) If kolonne is available and no employee selected yet, show employees page
     * 2) If autoSaveGPSData is active, fetch position first and then proceed booking, otherwise proceed booking immediately
     */
    , bookWithRemark: function() {
    	if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("in bookWithRemark");

        // refresh bookings from localStorage
    	this.setNotBookedBookings(); // this also calls this.setBookedBookings() and this.setArchivedDays()
    	
    	// refresh currentBooking from localStorage
    	//if (DigiWebApp.SettingsController.globalDebugMode) console.log('refresh currentBooking');
		this.refreshCurrentBooking(false);
    	
    	// EmployeeSelection (Kolonne)
		if(DigiWebApp.EmployeeController.getEmployeeState() == 1) {
            DigiWebApp.ApplicationController.DigiLoaderView.hide();
            var employeeString = localStorage.getItem(DigiWebApp.EmployeeController.empSelectionKey);
            if(!employeeString && (DigiWebApp.Booking.find().length === 0)) {
                DigiWebApp.NavigationController.toEmployeePage();
            } else {
            	DigiWebApp.ApplicationController.nativeAlertDialogView({
                    title: M.I18N.l('transmitFirst')
                  , message: M.I18N.l('transmitFirstMsg')
                });
            }
            return;
        }
        
		this.currentBookingTimesStampBook = new Date();
		this.getBookingLocation(this.proceedBooking);
		
    }
    
    , getBookingLocation: function(mysuccessCallback) {
    	if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("in getBookingLocation");

    	var that = DigiWebApp.BookingController;
    	
		// Get GPS-Position if set in Settings
    	var getLocationNow = function(successCallback) {
	            DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('getGPSPositionMsg'), DigiWebApp.SettingsController.getSetting('GPSTimeOut') * 2);
	
	            /*var getLocationOptions =  { 
	            		enableHighAccuracy: YES, 
	            		maximumAge: 0, 
	            		timeout: 240000 
	            	};*/
	            var getLocationOptions =  { enableHighAccuracy: NO, timeout: DigiWebApp.SettingsController.getSetting('GPSTimeOut') };
	
	            M.LocationManager.getLocation(that, successCallback, function(error) {
	            	
		            var getLocationOptions =  { enableHighAccuracy: YES, timeout: DigiWebApp.SettingsController.getSetting('GPSTimeOut') };
		        	
		            M.LocationManager.getLocation(that, successCallback, function(error) {
		            	//if (DigiWebApp.SettingsController.globalDebugMode) console.error("error=" + error + ", error.code="+error.code + ", error.message=" + error.message);
		
		            	//M.LocationManager.getLocation(that, successCallback, function(error) {
		                	//if (DigiWebApp.SettingsController.globalDebugMode) console.error("error=" + error + ", error.code="+error.code + ", error.message=" + error.message);
		                	/*
		                	 * error = "PERMISSION_DENIED" || "POSITION_UNAVAILABLE" || "TIMEOUT"
		                    */
		                	if ( error === "POSITION_UNAVAILABLE" ) {
		                		DigiWebApp.ApplicationController.nativeAlertDialogView({
		                			  title: M.I18N.l('GPSError')
		                			, message: M.I18N.l('GPSunavailable')
		                		});
		                	} else if ( error === "TIMEOUT" ) {
		                		DigiWebApp.ApplicationController.nativeAlertDialogView({
		                			  title: M.I18N.l('GPSError')
		                			, message: M.I18N.l('GPStimeout')
		                		});
		                	} else if ( error === "PERMISSION_DENIED" ) {
		                		DigiWebApp.ApplicationController.nativeAlertDialogView({
		                			  title: M.I18N.l('GPSError')
		                			, message: M.I18N.l('GPSmissingPermission')
		                		});
		                	} else {
		                		DigiWebApp.ApplicationController.nativeAlertDialogView({
		                			  title: M.I18N.l('GPSError')
		                			, message: M.I18N.l('GPSunknownError') + error
		                		});
		                	}
		                    //M.LocationManager.getLocation(that, successCallback, successCallback);
		                	successCallback();
		            }, getLocationOptions);
	            }, getLocationOptions);
        	};
    	
			if (DigiWebApp.SettingsController.featureAvailable('417') && DigiWebApp.SettingsController.getSetting("ServiceApp_ermittleGeokoordinate") && DigiWebApp.SettingsController.getSetting('autoSaveGPSData')) {
				if (DigiWebApp.SettingsController.getSetting("ServiceApp_FallBack")) {
		            DigiWebApp.ServiceAppController.knockknock(function(data) {
		            	if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("ServiceApp is available");
		            	mysuccessCallback();
		            }, function() {
		            	if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("ServiceApp is NOT available");
		            	getLocationNow(mysuccessCallback);
		            });
				} else {
					mysuccessCallback();
				}
			} else if (DigiWebApp.SettingsController.getSetting('autoSaveGPSData')) {
				getLocationNow(mysuccessCallback);
			} else {
				mysuccessCallback();
			}

   	}
    
    , checkBooking: function(skipSelection) {
    	if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("in checkBooking");
		
        //var booking = null;

        // check if order chosen
    	var orderId;
    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
            orderId = M.ViewManager.getView('bookingPageWithIconsScholpp', 'order').getSelection();
    	} else {
            orderId = M.ViewManager.getView('bookingPage', 'order').getSelection();
    	}
        if (!orderId || (orderId && parseInt(orderId) === 0)) {
            //M.DialogView.alert({
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                  title: M.I18N.l('noOrderSelected')
                , message: M.I18N.l('noOrderSelectedMsg')
            });
            return false;
        } else {
            // check if hand order
            if (!this.isHandOrder(orderId)) {// if it is not a hand order position and activity must be selected
                // check if position is set
                if (!DigiWebApp.SelectionController.isPositionSelected()) {
                    //M.DialogView.alert({
                    DigiWebApp.ApplicationController.nativeAlertDialogView({
                          title: M.I18N.l('noPosSelected')
                        , message: M.I18N.l('noPosSelectedMsg')
                    });
                    return false;
                } else {
                    // check if activity is set
                    if(!DigiWebApp.SelectionController.isActivitySelected()) {
                        //M.DialogView.alert({
                        DigiWebApp.ApplicationController.nativeAlertDialogView({
                              title: M.I18N.l('noActSelected')
                            , message: M.I18N.l('noActSelectedMsg')
                        });
                        return false;
                    }
                }
            } else {
                // check if activity is set
                if(!DigiWebApp.SelectionController.isActivitySelected()) {
                    //M.DialogView.alert({
                    DigiWebApp.ApplicationController.nativeAlertDialogView({
                          title: M.I18N.l('noActSelected')
                        , message: M.I18N.l('noActSelectedMsg')
                    });
                    return false;
                }
            } // else of: if(!this.isHandOrder(orderId))
            
            var posObj;
            var actObj;
            if (typeof(skipSelection) === "undefined") {
	        	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
	                posObj = M.ViewManager.getView('bookingPageWithIconsScholpp', 'position').getSelection(YES);
	        	} else {
	                posObj = M.ViewManager.getView('bookingPage', 'position').getSelection(YES);
	        	}
	            var posId = posObj ? posObj.value : null;
	
	        	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
	                actObj = M.ViewManager.getView('bookingPageWithIconsScholpp', 'activity').getSelection(YES);
	        	} else {
	                actObj = M.ViewManager.getView('bookingPage', 'activity').getSelection(YES);
	        	}
	            var actId = actObj ? actObj.value : null;
	
	            // check if open booking
	            if (this.currentBooking) {
	                var curBookingOrderId = this.currentBooking.get('orderId');
	                var curBookingHandOrderId = this.currentBooking.get('handOrderId');
	                var curBookingPosId = this.currentBooking.get('positionId');
	                var curBookingActId = this.currentBooking.get('activityId');
	
	                if (curBookingOrderId === orderId || curBookingHandOrderId === orderId) {
	
	                    if ((!this.isHandOrder(orderId)) && (curBookingPosId === posId) && (curBookingActId === actId)) {
	                        //M.DialogView.alert({
	                        DigiWebApp.ApplicationController.nativeAlertDialogView({
	                              title: M.I18N.l('doubleBooking')
	                            , message: M.I18N.l('doubleBookingMsg')
	                        });
	                        return false;
	                    }
	
	                    if (this.isHandOrder(orderId) && (curBookingActId === actId)) {
	                        //M.DialogView.alert({
	                        DigiWebApp.ApplicationController.nativeAlertDialogView({
	                              title: M.I18N.l('doubleBooking')
	                            , message: M.I18N.l('doubleBookingMsg')
	                        });
	                        return false;
	                    }
	
	                } // if(curBookingOrderId === orderId || curBookingHandOrderId === orderId)
	
	
	            } // if(this.currentBooking)
	            
	            this.refreshCurrentBookingClosed();
	            this.refreshCurrentBooking();
	    		var that = this;
	    		var myTimeStampEnd = null;
    			var timeEnd = new Date();
    			myTimeStampEnd = timeEnd.getTime();

	            if (this.currentBookingClosed && this.currentBooking) {
	    			var startStr = M.Date.create(this.currentBooking.get("timeStampStart")).format('HH:MM');
	    			var endStr = M.Date.create(myTimeStampEnd).format('HH:MM');
	            	if (startStr == endStr) {
		                var curBookingOrderId = this.currentBookingClosed.get('orderId');
		                var curBookingHandOrderId = this.currentBookingClosed.get('handOrderId');
		                var curBookingPosId = this.currentBookingClosed.get('positionId');
		                var curBookingActId = this.currentBookingClosed.get('activityId');
		
		                if (curBookingOrderId === orderId || curBookingHandOrderId === orderId) {
		
		                    if ((!this.isHandOrder(orderId)) && (curBookingPosId === posId) && (curBookingActId === actId)) {
		                        //M.DialogView.alert({
		                        DigiWebApp.ApplicationController.nativeAlertDialogView({
		                              title: M.I18N.l('doubleBooking')
		                            , message: M.I18N.l('doubleBookingMsg')
		                        });
		                        return false;
		                    }
		
		                    if (this.isHandOrder(orderId) && (curBookingActId === actId)) {
		                        //M.DialogView.alert({
		                        DigiWebApp.ApplicationController.nativeAlertDialogView({
		                              title: M.I18N.l('doubleBooking')
		                            , message: M.I18N.l('doubleBookingMsg')
		                        });
		                        return false;
		                    }
		
		                } // if(curBookingOrderId === orderId || curBookingHandOrderId === orderId)
			
		            } else { // if(this.currentBookingClosed)
	
		            }
	            }
            }

	    return true;
		
        } // end of else of: if(!orderId || (orderId && parseInt(orderId) === 0))
    }

    
    /**
     * Callback of location retrival
     *
     * Checks if a selection is set.
     * Distinguishes between an open booking is available or not
     * and distinguishes also, whether a hand order or a regular order is selected
     *
     * Triggers a send operation if autoTransferAfterBookTime is activated in the settings, otherwise just saves the booking.
     *
     * @param {Object} location The location object with the coordinates (latitude, longitude) if a location could be retrieved
     */
    , proceedBooking: function(location) {
    	if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("in proceedBooking");

    	var that = DigiWebApp.BookingController;
    	
        //DigiWebApp.ApplicationController.DigiLoaderView.hide();
        //var booking = null;

    	var orderId;
	    var handOrderId = null;
    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
    		orderId = M.ViewManager.getView('bookingPageWithIconsScholpp', 'order').getSelection();
    	} else {
    		orderId = M.ViewManager.getView('bookingPage', 'order').getSelection();
    	}
	
    	var posObj;
    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
    		posObj = M.ViewManager.getView('bookingPageWithIconsScholpp', 'position').getSelection(YES);
    	} else {
    		posObj = M.ViewManager.getView('bookingPage', 'position').getSelection(YES);
    	}
		var posId = posObj ? posObj.value : null;
	
		var actObj;
    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
    		actObj = M.ViewManager.getView('bookingPageWithIconsScholpp', 'activity').getSelection(YES);
    	} else {
    		actObj = M.ViewManager.getView('bookingPage', 'activity').getSelection(YES);
    	}
		var actId = actObj ? actObj.value : null;

		var bookingWasClosed = true;
	    // close open booking 
	    if (that.currentBooking) {

	    	bookingWasClosed = that.currentBooking.closeBooking(location)

	    	if (bookingWasClosed) {
	    		
				that.currentBooking.removeAsCurrent();
				
			} else {
				
				// Buchung gemäß geänderter Auswahl aktualisieren
		    	var myOrderName = M.I18N.l('unknown');
		    	var myHandOrderName = M.I18N.l('unknown');
		    	var myPositionName = M.I18N.l('unknown');
		    	var myActivityName = M.I18N.l('unknown');

			    if (that.isHandOrder(orderId)) {
					handOrderId = orderId;
					myHandOrderName = _.select(DigiWebApp.HandOrder.findSorted(), function(ord) {
						if (ord) return ord.get('id') == orderId || ord.get('name') == orderId;
					})[0].get('name');
					myOrderName = myHandOrderName;
					orderId = null;
			
					// a handorder has no position
					posId = null;
			    } else {
			    	try {
			    		if (orderId != null) {
			    			var myOrderLoad = _.find(DigiWebApp.Order.find(), function(a) { return (parseInt(a.get("id")) == parseInt(orderId));});
			    			if (myOrderLoad && orderId != 0) myOrderName = myOrderLoad.get('name');
			    		}
			    	} catch(e4) { console.error(e4); }
			    }

		    	try {
		    		if (posId != null) {
		    			var myPositionLoad = _.find(DigiWebApp.Position.find(), function(a) { return (parseInt(a.get("id")) == parseInt(posId));});
		    			if (myPositionLoad && posId != 0) myPositionName = myPositionLoad.get('name');
		    		}
		    	} catch(e4) { console.error(e4); }
		    	
		    	try {
		    		if (actId != null) {
		    			var myActivityLoad = _.find(DigiWebApp.Activity.find(), function(a) { return (parseInt(a.get("id")) == parseInt(actId));});
		    			if (myActivityLoad && actId != 0) myActivityName = myActivityLoad.get('name');
		    		}
		    	} catch(e5) { console.error(e5); }

		    	that.currentBooking.set("orderId", orderId);
		    	that.currentBooking.set("orderName", myOrderName);
				that.currentBooking.set("handOrderId", handOrderId);
				that.currentBooking.set("handOrderName", myHandOrderName);
				that.currentBooking.set("positionId", posId);
				that.currentBooking.set("positionName", myPositionName);
				that.currentBooking.set("activityId", actId);
				that.currentBooking.set("activityName", myActivityName);
				
//				if (location) {
//					that.currentBooking.set("latitude_bis", location.latitude);
//					that.currentBooking.set("longitude_bis", location.longitude);
//				}
				
			}
	    	
			that.currentBooking.save();
			
			if (bookingWasClosed) {
				that.currentBookingClosed = that.currentBooking;
			} else {
			    if (that.autoSend()) {
			    	that.sendCurrentBookings();
			    }
			}
			
	    } else {
	    	// no currentBooking: remember TimezoneOffset
	    	DigiWebApp.SettingsController.setSetting("currentTimezoneOffset", new Date().getTimezoneOffset());
	    	DigiWebApp.SettingsController.setSetting("currentTimezone", jstz.determine().name());
	    }

	    if (bookingWasClosed) {
		    // setup new booking
		    var handOrderId = null;
		    var handOrderName = null;
		    if (that.isHandOrder(orderId)) {
				handOrderId = orderId;
				handOrderName = _.select(DigiWebApp.HandOrder.findSorted(), function(ord) {
					if (ord) return ord.get('id') == orderId || ord.get('name') == orderId;
				})[0].get('name');
				orderId = null;
		
				// a hand order has no position
				posId = null;
		    }
		    
		    var lat = null;
		    var lon = null;
		    if (location) {
				if (location.latitude) {
				    lat = location.latitude;
				}
				if (location.longitude) {
				    lon = location.longitude;
				}
		    }
		    
		    // reset remark
		    try {
		    	M.ViewManager.getView('remarkPage', 'remarkInput').value = '';
		    } catch(e2) { }
		    var remarkStr = '';
	
		    var newOpenBooking = that.openBooking({
				  oId: orderId
				, hoId: handOrderId
				, hoName: handOrderName
				, lat: lat
				, lon: lon
				, pId: posId
				, aId: actId
				, remark: remarkStr
		    });
		    
		    var employeeIds = localStorage.getItem(DigiWebApp.EmployeeController.empSelectionKey) || localStorage.getItem(DigiWebApp.EmployeeController.empSelectionKeyTmp);
			var employeeIdsArray = [];
			if ((employeeIds) && employeeIds !== "0") {
				// Kolonne aktiv
				newOpenBooking.set('istKolonnenbuchung', true);
				employeeIdsArray = employeeIds.split(",");
			} else {
				newOpenBooking.set('istKolonnenbuchung', false);
				employeeIdsArray = [DigiWebApp.SettingsController.getSetting("mitarbeiterId")];
			}
			
			newOpenBooking.set('employees', employeeIdsArray.join());
			
			if (DigiWebApp.SettingsController.featureAvailable('419')) { // Scholpp-Spesen: Übrnachtungskennzeichen setzen
				if ((newOpenBooking.get("activityName") === "Reisezeit" || newOpenBooking.get("activityName") === "Fahrzeit")) {
					var uebernachtungAuswahlObj = M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').getSelection(YES);
					var uebernachtungAuswahl = uebernachtungAuswahlObj ? uebernachtungAuswahlObj.value : 6;
					newOpenBooking.set("uebernachtungAuswahl", uebernachtungAuswahl);						
				} else {
					newOpenBooking.set("uebernachtungAuswahl", 0);
				}
			} else {
				newOpenBooking.set("uebernachtungAuswahl", 0);
			}
		    that.set('currentBooking', newOpenBooking);
	
		    that.currentBooking.setAsCurrent();
		    //if (DigiWebApp.SettingsController.globalDebugMode) console.log('saving new ' + that.currentBooking.get('orderId'));
		    that.currentBooking.save();
		    
		    that.set('currentBookingStr', that.buildBookingStr(that.currentBooking));
    	}
	    
	    // don't use selections anymore, use the current booking (till selection is changed again)
	    DigiWebApp.SelectionController.useSelections = NO;

	    var finishBooking = function() {
	    	DigiWebApp.ApplicationController.DigiLoaderView.hide();
	    	if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("Kommunikation mit ServiceApp beendet");
		    if (that.autoSend()) {
		    	that.sendCurrentBookings();
		    } else {
				//M.DialogView.alert({
//		    	if (!DigiWebApp.SettingsController.featureAvailable("416")) {
//					DigiWebApp.ApplicationController.nativeAlertDialogView({
//					      title: M.I18N.l('bookingSaved')
//					    , message: M.I18N.l('bookingSavedMsg')
//					    , callbacks: {
//			                confirm: {
//			                      target: DigiWebApp.NavigationController
//			                    , action: 'backToBookTimePagePOP'
//			                }
//			            }
//					});
//		    	}
				//try { $.mobile.fixedToolbars.show(); } catch(e) { console.error(e); }; // this line is for pre TMP 1.1
		    }
	    };
	    
	    if (DigiWebApp.SettingsController.featureAvailable('417') && DigiWebApp.SettingsController.getSetting("ServiceApp_ermittleGeokoordinate")) {
			if (DigiWebApp.SettingsController.getSetting("ServiceApp_engeKopplung") || DigiWebApp.SettingsController.getSetting('autoTransferAfterBookTime')) {
				// put, dann solange GET bis !=WAIT oder GPS-TIMEOUT erreicht
				var pollBooking = function() {
					if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("polling for bookinglocations");
					// getBookings mit timeout
					var checkForOK = function(datensaetze) {
						if (DigiWebApp.SettingsController.getSetting("debug"))  console.log(datensaetze.length + " Datensätze empfangen");
						_.each(datensaetze, function(datensatzObj) {
							try {
								if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("speichere gepollten Datensatz " + datensatzObj.m_id);
								var modelBooking = _.find(DigiWebApp.Booking.find(), function(b) { return b.m_id === datensatzObj.m_id; } );
								var datensatz = datensatzObj.record;
								if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("modelBooking: ", modelBooking);
								if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("datensatz: ", datensatz);
								modelBooking.set("latitude", datensatz.latitude);
								modelBooking.set("latitude_bis", datensatz.latitude_bis);
								modelBooking.set("longitude", datensatz.longitude);
								modelBooking.set("longitude_bis", datensatz.longitude_bis);
								modelBooking.set("ermittlungsverfahrenBis", datensatz.ermittlungsverfahren_bis);
								modelBooking.set("ermittlungsverfahrenVon", datensatz.ermittlungsverfahren);
								modelBooking.set("genauigkeitBis", datensatz.genauigkeit_bis);
								modelBooking.set("genauigkeitVon", datensatz.genauigkeit);
								modelBooking.set("gps_zeitstempelBis", datensatz.gps_zeitstempel_bis);
								modelBooking.set("gps_zeitstempelVon", datensatz.gps_zeitstempel);
								modelBooking.set("ServiceApp_Status", datensatz.status);
								modelBooking.save();
								if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("datensatz " + datensatzObj.m_id + " gespeichert");
							} catch(exNotFound) {
								if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("datensatz " + datensatzObj.m_id + " nicht gefunden");
							}
						});
						finishBooking();
					};
					var idsToPoll = [];
					if (DigiWebApp.BookingController.currentBooking !== null) { idsToPoll.push(DigiWebApp.BookingController.currentBooking.m_id); }
					if (DigiWebApp.BookingController.currentBookingClosed !== null) { idsToPoll.push(DigiWebApp.BookingController.currentBookingClosed.m_id); }
					DigiWebApp.ServiceAppController.pollBookings(idsToPoll, checkForOK, finishBooking, DigiWebApp.SettingsController.getSetting('GPSTimeOut'));
				};
				var continueFunc = function() {
					if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("put currentBooking");
					DigiWebApp.ServiceAppController.putBookings([that.currentBooking], pollBooking, finishBooking);
				};
				
				if (bookingWasClosed) {
					if (that.currentBookingClosed !== null) {
						if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("post currentBookingClosed");
						DigiWebApp.ServiceAppController.postBookings([that.currentBookingClosed], continueFunc, continueFunc);
					} else {
						if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("put currentBooking");
						DigiWebApp.ServiceAppController.putBookings([that.currentBooking], pollBooking, continueFunc);	
					}
				} else {
					if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("post currentBookingClosed");
					DigiWebApp.ServiceAppController.postBookings([that.currentBookingClosed], continueFunc, continueFunc);
				}
				
			} else {
				if (bookingWasClosed) {
					if (that.currentBookingClosed !== null) {
						var continueFunc = function() {
							var getWAITFunc = function() {
								if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("refreshWAIT");
								DigiWebApp.ServiceAppController.refreshWAITBookings(function(){
									if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("refreshWAIT done");
									finishBooking();
								},function(err){
									DigiWebApp.ApplicationController.DigiLoaderView.hide();
									console.error(err);
								});
							};
							if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("put currentBooking");
							DigiWebApp.ServiceAppController.putBookings([that.currentBooking], getWAITFunc, getWAITFunc);
						};
						if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("post currentBookingClosed");
						DigiWebApp.ServiceAppController.postBookings([that.currentBookingClosed], continueFunc, continueFunc);
					} else {
						if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("put currentBooking");
						DigiWebApp.ServiceAppController.putBookings([that.currentBooking], finishBooking, finishBooking);	
					}
				} else {
					if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("post currentBookingClosed");
					DigiWebApp.ServiceAppController.postBookings([that.currentBookingClosed], continueFunc, continueFunc);
				}
			}
		} else {
			finishBooking();
		}
    }

    /**
     * called when automatic send after booking is activated in settings
     */
    , sendCurrentBookings: function() {
    	// was: DigiWebApp.DashboardController.dataTransfer();
    	DigiWebApp.BookingController.sendBookings();
    }

    /**
     * Determines whether a passed ID represents a hand order or not.
     *
     * @param orderId The id of the order or hand order on which the check should be performed
     */
    , isHandOrder: function(orderId) {
        var handOrder = _.select(DigiWebApp.HandOrder.findSorted(), function(ho) {
        	if (ho) return ho.get('id') == orderId || ho.get('name') == orderId;
        });
        return handOrder.length > 0 ? YES : NO;
    }

    /**
     * Returns the state of the autoTransferAfterBookTime flag in settings
     */
    , autoSend: function() {
        return DigiWebApp.SettingsController.getSetting('autoTransferAfterBookTime');
    }

    /**
     * Returns a new open booking record with the data passed in a parameter object
     * @param obj The parameter object with the data for the booking
     */
    , openBooking: function(obj) {
    	// speichere die Namen von Auftrag, Position und Tätigkeit,
    	// falls beim nächsten Stammdatenabgleich eines davon vom Gerät entfernt werden
    	var myOrderName = M.I18N.l('notDefined');
    	var myPositionName = M.I18N.l('notDefined');
    	var myActivityName = M.I18N.l('notDefined');
    	try {
			var myO_id = obj.oId;
			var myHO_id = obj.hoId;
    		if (myO_id !== null || myHO_id != null) {
        		var order = _.select(DigiWebApp.Order.findSorted().concat(DigiWebApp.HandOrder.findSorted()), function(o) {
        			if (o) {
                		//var myOID = obj.oId;
                		//var myHOID = obj.hoId;
        				var myGetO_id = o.get('id');
        				return myO_id == myGetO_id || myHO_id == myGetO_id; // || get('name') is for checking handOrders also
        			}
                });
                if (order && order.length > 0) {
                    order = order[0];
                    myOrderName = order.get('name');
                }
    		}
    	} catch(e3) { console.error(e3); }
    	try {
    		if (obj.pId != null) {
    			var myPositionLoad = _.find(DigiWebApp.Position.find(), function(a) { return (parseInt(a.get("id")) === parseInt(obj.pId));});
    			//DigiWebApp.Position.find({query:{identifier: 'id', operator: '=', value: obj.pId.toString()}})[0];
    			if (myPositionLoad && obj.pId !== 0) myPositionName = myPositionLoad.get('name');
    		}
    	} catch(e4) { console.error(e4); }
    	try {
    		if (obj.aId != null) {
    			//var myActivityLoad = DigiWebApp.Activity.find({query:{identifier: 'id', operator: '=', value: obj.aId.toString()}})[0];
    			var myActivityLoad = _.find(DigiWebApp.Activity.find(), function(a) { return (parseInt(a.get("id")) === parseInt(obj.aId));});
    			//DigiWebApp.Activity.findById(obj.aId);
    			if (myActivityLoad && obj.aId !== 0) myActivityName = myActivityLoad.get('name');
    		}
    	} catch(e5) { console.error(e5); }
    	
    	var timeStart;
		try {
			if (DigiWebApp.BookingController.currentBookingTimesStampBook != null) {
				timeStart = DigiWebApp.BookingController.currentBookingTimesStampBook;
			} else {
				timeStart = new Date();
			}
		} catch (e6) {
	    	timeStart = new Date();
		}

		var timeStartTimestamp = timeStart.getTime();
				
		var dateDate = new Date(timeStart.getTime() + (1000 * 60 * (new Date().getTimezoneOffset() - Number(DigiWebApp.SettingsController.getSetting("currentTimezoneOffset")))));
        var dateMDate = M.Date.create(dateDate.getTime());
        var dateString = dateMDate.format('dd.mm.yyyy');
        var timeString = dateMDate.format('HH:MM');

        return DigiWebApp.Booking.createRecord({
              orderId: obj.oId ? obj.oId : null
            , orderName: myOrderName
            , handOrderId: obj.hoId ? obj.hoId : null
            , handOrderName: obj.hoName ? obj.hoName : null
            , latitude: obj.lat ? obj.lat : null
            , longitude: obj.lon ? obj.lon : null
            , latitude_bis: null
    		, longitude_bis: null
            , positionId: obj.pId ? obj.pId : null
            , positionName: myPositionName
            , activityId: obj.aId ? obj.aId : null
            , activityName: myActivityName
            , remark: obj.remark ? obj.remark : ''
            , istFeierabend: false
            , istKolonnenbuchung: false
            , mitarbeiterId: DigiWebApp.SettingsController.getSetting("mitarbeiterId")
            , genauigkeitVon: null
            , gps_zeitstempelVon: null
            , ermittlungsverfahrenVon: null
            , genauigkeitBis: null
            , gps_zeitstempelBis: null
            , ermittlungsverfahrenBis: null
            , ServiceApp_Status: "WAIT"
            , timezoneOffset: DigiWebApp.SettingsController.getSetting("currentTimezoneOffset")
            , timezone: DigiWebApp.SettingsController.getSetting("currentTimezone")
            , timeStampStart: timeStart.getTime()
            , timeStampEnd: '0'
            , startDateString: dateString
            , endeDateString: ""
            , startTimeString: timeString
            , endeTimeString: ""
            , modelVersion: "1"
            , gefahreneKilometer: 0
        });
    }

    /**
     * Returns a new open booking record with the data passed in a parameter object
     * @param obj The parameter object with the data for the booking
     */
    , sentBooking: function(obj) {

    	if (obj.get("startDateString") == obj.get("endeDateString") && obj.get("startTimeString") == obj.get("endeTimeString")) {
    		return null;
    	};

    	// speichere die Namen von Auftrag, Position und Tätigkeit,
    	// falls beim nächsten Stammdatenabgleich eines davon vom Gerät entfernt werden
    	var myOrderName = M.I18N.l('notDefined');
    	var myPositionName = M.I18N.l('notDefined');
    	var myActivityName = M.I18N.l('notDefined');

		if (typeof(obj.get('orderName')) !== "undefined") {
    		myOrderName = obj.get('orderName');
    	} else {
        	try {
    			var myO_id = obj.get('orderId');
    			var myHO_id = obj.get('handOrderId');
        		if (myO_id !== 0 || myHO_id !== 0) {
            		var order = _.select(DigiWebApp.Order.findSorted().concat(DigiWebApp.HandOrder.findSorted()), function(o) {
            			if (o) {
            				var myGetO_id = o.get('id');
            				return myO_id == myGetO_id || myHO_id == myGetO_id;
            			}
                    });
                    if (order && order.length > 0) {
                        order = order[0];
                        myOrderName = order.get('name');
                    }
        		}
        		//if (obj.get('orderId') !== 0) myOrderName = DigiWebApp.Order.find({query:{identifier: 'id', operator: '=', value: obj.get('orderId')}})[0].get('name');    		
        	} catch(e7) { console.error(e7); }
    	}
    	if (typeof(obj.get('positionName')) !== "undefined") {
    		myPositionName = obj.get('positionName');
    	} else {
        	try {
	    		if (obj.get('positionId') !== 0) myPositionName = _.find(DigiWebApp.Position.find(), function(a) { return (parseInt(a.get("id")) === parseInt(obj.get('positionId')));}).get('name');
	    		//DigiWebApp.Position.find({query:{identifier: 'id', operator: '=', value: obj.get('positionId')}})[0].get('name');
    		} catch(e8) { console.error(e8); }
    	}
    	if (typeof(obj.get('activityName')) !== "undefined") {
    		myActivityName = obj.get('activityName');
    	} else {
        	try {
	    		if (obj.get('activityId') !== 0) myActivityName = _.find(DigiWebApp.Activity.find(), function(a) { return (parseInt(a.get("id")) === parseInt(obj.get('activityId')));}).get('name');
	    		//DigiWebApp.Activity.find({query:{identifier: 'id', operator: '=', value: obj.get('activityId')}})[0].get('name');
    		} catch(e9) { console.error(e9); }
    	}
    	
        return DigiWebApp.SentBooking.createRecord({
              orderId: obj.get('orderId')
            , orderName: myOrderName
            , handOrderId: obj.get('handOrderId')
            , handOrderName: obj.get('handOrderName')
            , latitude: obj.get('latitude')
            , longitude: obj.get('longitude')
            , latitude_bis: obj.get('latitude_bis')
            , longitude_bis: obj.get('longitude_bis')
            , positionId: obj.get('positionId')
            , positionName: myPositionName
            , activityId: obj.get('activityId')
            , activityName: myActivityName
            , remark: obj.get('remark')
            , istFeierabend: obj.get('istFeierabend')
            , istKolonnenbuchung: obj.get('istKolonnenbuchung')
            , genauigkeitVon: obj.get('genauigkeitVon')
            , gps_zeitstempelVon: obj.get('gps_zeitstempelVon')
            , ermittlungsverfahrenVon: obj.get('ermittlungsverfahrenVon')
            , genauigkeitBis: obj.get('genauigkeitBis')
            , gps_zeitstempelBis: obj.get('gps_zeitstempelBis')
            , ermittlungsverfahrenBis: obj.get('ermittlungsverfahrenBis')
            , ServiceApp_Status: obj.get('ServiceApp_Status')
            , timezoneOffset: obj.get('timezoneOffset')
            , timeStampStart: obj.get('timeStampStart')
            , timeStampEnd: obj.get('timeStampEnd')
            , startDateString: obj.get('startDateString')
            , endeDateString: obj.get('endeDateString')
            , startTimeString: obj.get('startTimeString')
            , endeTimeString: obj.get('endeTimeString')
            , employees: obj.get('employees')
            , isCurrent: false
            , gefahreneKilometer: obj.get('gefahreneKilometer')
        });
    }

    /**
     * Returns a new open booking record with the data passed in a parameter object
     * @param obj The parameter object with the data for the booking
     */
    , sentBookingArchived: function(obj) {
    	
    	if (obj.get("startDateString") == obj.get("endeDateString") && obj.get("startTimeString") == obj.get("endeTimeString")) {
    		return null;
    	};

    	// speichere das Datum der Buchung für einfacheren Archivzugriff
    	var myTagLabel = D8.create(obj.get('timeStampStart')).format("dd.mm.yyyy");
    	
    	// speichere die Namen von Auftrag, Position und Tätigkeit,
    	// falls beim nächsten Stammdatenabgleich eines davon vom Gerät entfernt werden 
    	var myOrderName = M.I18N.l('notDefined');
    	var myPositionName = M.I18N.l('notDefined');
    	var myActivityName = M.I18N.l('notDefined');

		if (typeof(obj.get('orderName')) !== "undefined") {
    		myOrderName = obj.get('orderName');
    	} else {
        	try {
    			var myO_id = obj.get('orderId');
    			var myHO_id = obj.get('handOrderId');
        		if (myO_id !== 0 || myHO_id !== 0) {
            		var order = _.select(DigiWebApp.Order.findSorted().concat(DigiWebApp.HandOrder.findSorted()), function(o) {
            			if (o) {
            				var myGetO_id = o.get('id');
            				return myO_id == myGetO_id || myHO_id == myGetO_id;
            			}
            		});
                    if (order && order.length > 0) {
                        order = order[0];
                        myOrderName = order.get('name');
                    }
        		}
        		//if (obj.get('orderId') !== 0) myOrderName = DigiWebApp.Order.find({query:{identifier: 'id', operator: '=', value: obj.get('orderId')}})[0].get('name');    		
        	} catch(e10) { console.error(e10); }
    	}

		if (typeof(obj.get('positionName')) !== "undefined") {
			myPositionName = obj.get('positionName');
    	} else {
        	try {
	    		if (obj.get('positionId') !== 0) myPositionName = _.find(DigiWebApp.Position.find(), function(a) { return (parseInt(a.get("id")) === parseInt(obj.get('positionId')));}).get('name');
	    		//DigiWebApp.Position.find({query:{identifier: 'id', operator: '=', value: obj.get('positionId')}})[0].get('name');
    		} catch(e11) { console.error(e11); }
    	}

		if (typeof(obj.get('activityName')) !== "undefined") {
			myActivityName = obj.get('activityName');
    	} else {
        	try {
	    		if (obj.get('activityId') !== 0) myActivityName = _.find(DigiWebApp.Activity.find(), function(a) { return (parseInt(a.get("id")) === parseInt(obj.get('activityId')));}).get('name');
	    		//DigiWebApp.Activity.find({query:{identifier: 'id', operator: '=', value: obj.get('activityId')}})[0].get('name');
    		} catch(e12) { console.error(e12); }
    	}
    	
    	return DigiWebApp.SentBookingArchived.createRecord({
              orderId: obj.get('orderId')
            , orderName: myOrderName
            , handOrderId: obj.get('handOrderId')
            , handOrderName: obj.get('handOrderName')
            , latitude: obj.get('latitude')
            , longitude: obj.get('longitude')
            , latitude_bis: obj.get('latitude_bis')
            , longitude_bis: obj.get('longitude_bis')
            , positionId: obj.get('positionId')
            , positionName: myPositionName
            , activityId: obj.get('activityId')
            , activityName: myActivityName
            , remark: obj.get('remark')
            , istFeierabend: obj.get('istFeierabend')
            , istKolonnenbuchung: obj.get('istKolonnenbuchung')
            , genauigkeitVon: obj.get('genauigkeitVon')
            , gps_zeitstempelVon: obj.get('gps_zeitstempelVon')
            , ermittlungsverfahrenVon: obj.get('ermittlungsverfahrenVon')
            , genauigkeitBis: obj.get('genauigkeitBis')
            , gps_zeitstempelBis: obj.get('gps_zeitstempelBis')
            , ermittlungsverfahrenBis: obj.get('ermittlungsverfahrenBis')
            , ServiceApp_Status: obj.get('ServiceApp_Status')
            , timezoneOffset: obj.get('timezoneOffset')
            , timeStampStart: obj.get('timeStampStart')
            , timeStampEnd: obj.get('timeStampEnd')
            , startDateString: obj.get('startDateString')
            , endeDateString: obj.get('endeDateString')
            , startTimeString: obj.get('startTimeString')
            , endeTimeString: obj.get('endeTimeString')
            , employees: obj.get('employees')
            , tagLabel: myTagLabel
            , isCurrent: false
            , gefahreneKilometer: obj.get('gefahreneKilometer')
        });
    }

    /*
    * Prepares an array of not booked bookings for the list view (showing the not send bookings)
    * 
    * Sets the timeData property of this controller, where the list has a content binding on
    *
    */
    , setNotBookedBookings: function() {
    	try {
	        var bookings = DigiWebApp.Booking.find();
	        if (bookings.length > 0) {
	            _.each(bookings, function(booking) {
	            	
	            	var startDate = booking.get('startDateString');
	            	var startTime = booking.get('startTimeString');
	            	if (((typeof(startDate) === "undefined" || !startDate || startDate === "")
	            	|| (typeof(startTime) === "undefined" || !startTime || startTime === "")
	            	) && (booking.get('timeStampStart') !== "0")) {
	            		// Buchung aus alter WebAppVersion
	            		var d8start = D8.create(new Date(Number(booking.get('timeStampStart')) + (1000 * 60 * (new Date(Number(booking.get('timeStampStart'))).getTimezoneOffset() - booking.get('timezoneOffset')))));
	                    startDate = d8start.format('dd.mm.yyyy');
	                    startTime = d8start.format('HH:MM');
	            	}
	            	
	            	var endeDate = booking.get('endeDateString');
	            	var endeTime = booking.get('endeTimeString');
	            	if (((typeof(endeDate) === "undefined" || !endeDate || endeDate === "")
	            	|| (typeof(endeTime) === "undefined" || !endeTime || endeTime === "")
	            	) && (booking.get('timeStampEnd') !== "0")) {
	            		// Buchung aus alter WebAppVersion
	            		var d8ende = D8.create(new Date(Number(booking.get('timeStampEnd')) + (1000 * 60 * (new Date(Number(booking.get('timeStampEnd'))).getTimezoneOffset() - booking.get('timezoneOffset')))));
	                    endeDate = d8ende.format('dd.mm.yyyy');
	                    endeTime = d8ende.format('HH:MM');
	            	}
	            	
	            	if (typeof(booking.get('timezoneOffset')) === "undefined") {
	            		booking.set('date', booking.get('timeStampStart') + ',' + booking.get('timeStampEnd') + ',-120' + ',' + startDate + ',' + startTime + ',' + endeDate + ',' + endeTime);
	            	} else {
	            		booking.set('date', booking.get('timeStampStart') + ',' + booking.get('timeStampEnd') + ',' + booking.get('timezoneOffset') + ',' + startDate + ',' + startTime + ',' + endeDate + ',' + endeTime);
	            	}
	
	                // set the handOrderId as orderId for correct display in list item view
	                if (parseInt(booking.get('orderId')) === 0 && parseInt(booking.get('handOrderId')) !== 0) {
	                    booking.set('orderId', booking.get('handOrderId'));
	                }
	
	            });
	            
	            // newest booking at the top => first sort than reverse order
	            bookings = _.sortBy(bookings, function(booking) {
	                return parseInt(booking.get('timeStampStart'));
	            });
	            this.set('timeData', bookings.reverse());
	            
	        } else {
	            this.set('timeData', []);
	        }
    	} catch(e13) {
            this.set('timeData', []);
    	}

        DigiWebApp.BookingController.setBookedBookings();
        DigiWebApp.BookingController.setArchivedDays();

    }

    /*
    * Prepares an array of booked bookings for the list view (showing the sent bookings)
    * 
    * Sets the timeDataSent property of this controller, where the list has a content binding on
    *
    */
    , setBookedBookings: function() {
    	try {
	        var bookings = DigiWebApp.SentBooking.find();
	        if (bookings.length > 0) {
	        	var tagDerWinterzeit = D8.create("11/01/" + new Date().getFullYear() + " 02:00:00").addDays(-D8.create("11/01/" + new Date().getFullYear() + " 02:00:00").date.getDay());
	        	var tagDerSommerzeit = D8.create("04/01/" + new Date().getFullYear() + " 02:00:00").addDays(-D8.create("04/01/" + new Date().getFullYear() + " 02:00:00").date.getDay());
        		var d8Now = new D8();
        		var inSommerzeit = (tagDerSommerzeit.timeBetween(d8Now) >= 0 && tagDerWinterzeit.timeBetween(d8Now) <= 0);
        		//var inWinterzeit = ((tagDerWinterzeit.timeBetween(d8Now) >= 0 && tagDerSommerzeit.timeBetween(d8Now) >= 0) || (tagDerWinterzeit.timeBetween(d8Now) <= 0 && tagDerSommerzeit.timeBetween(d8Now) <= 0));
        		var inWinterzeit = !inSommerzeit;
	            _.each(bookings, function(booking) {
	            	var startDate = booking.get('startDateString');
	            	var startTime = booking.get('startTimeString');
	            	if ((typeof(startDate) === "undefined" || !startDate || startDate === "")
	            	|| (typeof(startTime) === "undefined" || !startTime || startTime === "")
	            	) {
	            		// Buchung aus alter WebAppVersion
	            		var d8start = D8.create(new Date(Number(booking.get('timeStampStart')) + (1000 * 60 * (new Date(Number(booking.get('timeStampStart'))).getTimezoneOffset() - booking.get('timezoneOffset')))));
	                    startDate = d8start.format('dd.mm.yyyy');
	                    startTime = d8start.format('HH:MM');
	            	}
	            	var endeDate = booking.get('endeDateString');
	            	var endeTime = booking.get('endeTimeString');
	            	if ((typeof(endeDate) === "undefined" || !endeDate || endeDate === "")
	            	|| (typeof(endeTime) === "undefined" || !endeTime || endeTime === "")
	            	) {
	            		// Buchung aus alter WebAppVersion
	            		var d8ende = D8.create(new Date(Number(booking.get('timeStampEnd')) + (1000 * 60 * (new Date(Number(booking.get('timeStampEnd'))).getTimezoneOffset() - booking.get('timezoneOffset')))));
	                    endeDate = d8ende.format('dd.mm.yyyy');
	                    endeTime = d8ende.format('HH:MM');
	            	}
	            	if (typeof(booking.get('timezoneOffset')) === "undefined") {
	            		booking.set('date', booking.get('timeStampStart') + ',' + booking.get('timeStampEnd') + ',-120' + ',' + startDate + ',' + startTime + ',' + endeDate + ',' + endeTime);
	            	} else {
	            		booking.set('date', booking.get('timeStampStart') + ',' + booking.get('timeStampEnd') + ',' + booking.get('timezoneOffset') + ',' + startDate + ',' + startTime + ',' + endeDate + ',' + endeTime);
	            	}
	
	                // set the handOrderId as orderId for correct display in list item view
	                if (parseInt(booking.get('orderId')) === 0 && parseInt(booking.get('handOrderId')) !== 0) {
	                    booking.set('orderId', booking.get('handOrderId'));
	                }
	
	            });
	            // newest booking at the top => first sort than reverse order
	            bookings = _.sortBy(bookings, function(booking) {
	                return parseInt(booking.get('timeStampStart'));
	            });
	            this.set('timeDataSent', bookings.reverse());
	        } else {
	            this.set('timeDataSent', []);
	        }
    	} catch(e14) {
            this.set('timeDataSent', []);
    	}
    }

    , setArchivedDays: function() {
    	try {
	        var days = DigiWebApp.SentTimeDataDays.find();
	        if (days.length > 0) {
	            // newest day at the top => first sort than reverse order
	        	days = _.sortBy(days, function(day) {
	                return parseInt(D8.create(day.get('tagLabel')).getTimestamp());
	            });
	            this.set('timeDataSentDays', days.reverse());
	        } else {
	            this.set('timeDataSentDays', []);
	        }
    	} catch(e15) {
            this.set('timeDataSentDays', []);    		
    	}
    }

    , setArchivedBookings: function() {
    	try {
	    	if (DigiWebApp.BookingController.dayToDisplay !== null) {
		        var bookings = DigiWebApp.SentBookingArchived.find({
		        	query:{
		        		  identifier: 'tagLabel'
		        		, operator: '='
		        		, value: DigiWebApp.BookingController.dayToDisplay.get("tagLabel")
		        	}
		        });
		        if (bookings.length > 0) {
		        	var tagDerWinterzeit = D8.create("11/01/" + new Date().getFullYear() + " 02:00:00").addDays(-D8.create("11/01/" + new Date().getFullYear() + " 02:00:00").date.getDay());
		        	var tagDerSommerzeit = D8.create("04/01/" + new Date().getFullYear() + " 02:00:00").addDays(-D8.create("04/01/" + new Date().getFullYear() + " 02:00:00").date.getDay());
	        		var d8Now = new D8();
	        		var inSommerzeit = (tagDerSommerzeit.timeBetween(d8Now) >= 0 && tagDerWinterzeit.timeBetween(d8Now) <= 0);
	        		//var inWinterzeit = ((tagDerWinterzeit.timeBetween(d8Now) >= 0 && tagDerSommerzeit.timeBetween(d8Now) >= 0) || (tagDerWinterzeit.timeBetween(d8Now) <= 0 && tagDerSommerzeit.timeBetween(d8Now) <= 0));
	        		var inWinterzeit = !inSommerzeit;
		            _.each(bookings, function(booking) {
		            	var startDate = booking.get('startDateString');
		            	var startTime = booking.get('startTimeString');
		            	if ((typeof(startDate) === "undefined" || !startDate || startDate === "")
		            	|| (typeof(startTime) === "undefined" || !startTime || startTime === "")
		            	) {
		            		// Buchung aus alter WebAppVersion
		            		var d8start = D8.create(new Date(Number(booking.get('timeStampStart')) + (1000 * 60 * (new Date(Number(booking.get('timeStampStart'))).getTimezoneOffset() - booking.get('timezoneOffset')))));
		                    startDate = d8start.format('dd.mm.yyyy');
		                    startTime = d8start.format('HH:MM');
		            	}
		            	var endeDate = booking.get('endeDateString');
		            	var endeTime = booking.get('endeTimeString');
		            	if ((typeof(endeDate) === "undefined" || !endeDate || endeDate === "")
		            	|| (typeof(endeTime) === "undefined" || !endeTime || endeTime === "")
		            	) {
		            		// Buchung aus alter WebAppVersion
		            		var d8ende = D8.create(new Date(Number(booking.get('timeStampEnd')) + (1000 * 60 * (new Date(Number(booking.get('timeStampEnd'))).getTimezoneOffset() - booking.get('timezoneOffset')))));
		                    endeDate = d8ende.format('dd.mm.yyyy');
		                    endeTime = d8ende.format('HH:MM');
		            	}
		            	if (typeof(booking.get('timezoneOffset')) === "undefined") {
		            		booking.set('date', booking.get('timeStampStart') + ',' + booking.get('timeStampEnd') + ',-120' + ',' + startDate + ',' + startTime + ',' + endeDate + ',' + endeTime);
		            	} else {
		            		booking.set('date', booking.get('timeStampStart') + ',' + booking.get('timeStampEnd') + ',' + booking.get('timezoneOffset') + ',' + startDate + ',' + startTime + ',' + endeDate + ',' + endeTime);
		            	}
		
		                // set the handOrderId as orderId for correct display in list item view
		                if (parseInt(booking.get('orderId')) === 0 && parseInt(booking.get('handOrderId')) !== 0) {
		                    booking.set('orderId', booking.get('handOrderId'));
		                }
		
		            });
		            // newest booking at the top => first sort than reverse order
		            bookings = _.sortBy(bookings, function(booking) {
		                return parseInt(booking.get('timeStampStart'));
		            });
		            this.set('timeDataSentArchived', bookings.reverse());
		        } else {
		            this.set('timeDataSentArchived', []);
		        }
	    	} else {
	            this.set('timeDataSentArchived', []);
	    	}
    	} catch(e16) {
            this.set('timeDataSentArchived', []);
    	}
    }

    , setTimeDataForRemark: function() {
    	try {
	    	if ( DigiWebApp.BookingController.currentBooking === null ) { return; }
	        var bookings = [DigiWebApp.BookingController.currentBooking];
	        if (bookings.length > 0) {
	        	var tagDerWinterzeit = D8.create("11/01/" + new Date().getFullYear() + " 02:00:00").addDays(-D8.create("11/01/" + new Date().getFullYear() + " 02:00:00").date.getDay());
	        	var tagDerSommerzeit = D8.create("04/01/" + new Date().getFullYear() + " 02:00:00").addDays(-D8.create("04/01/" + new Date().getFullYear() + " 02:00:00").date.getDay());
        		var d8Now = new D8();
        		var inSommerzeit = (tagDerSommerzeit.timeBetween(d8Now) >= 0 && tagDerWinterzeit.timeBetween(d8Now) <= 0);
        		//var inWinterzeit = ((tagDerWinterzeit.timeBetween(d8Now) >= 0 && tagDerSommerzeit.timeBetween(d8Now) >= 0) || (tagDerWinterzeit.timeBetween(d8Now) <= 0 && tagDerSommerzeit.timeBetween(d8Now) <= 0));
        		var inWinterzeit = !inSommerzeit;
	            _.each(bookings, function(booking) {
	            	var startDate = booking.get('startDateString');
	            	var startTime = booking.get('startTimeString');
	            	if ((typeof(startDate) === "undefined" || !startDate || startDate === "")
	            	|| (typeof(startTime) === "undefined" || !startTime || startTime === "")
	            	) {
	            		// Buchung aus alter WebAppVersion
	            		var d8start = D8.create(new Date(Number(booking.get('timeStampStart')) + (1000 * 60 * (new Date(Number(booking.get('timeStampStart'))).getTimezoneOffset() - booking.get('timezoneOffset')))));
	                    startDate = d8start.format('dd.mm.yyyy');
	                    startTime = d8start.format('HH:MM');
	            	}
	            	var endeDate = booking.get('endeDateString');
	            	var endeTime = booking.get('endeTimeString');
	            	if ((typeof(endeDate) === "undefined" || !endeDate || endeDate === "")
	            	|| (typeof(endeTime) === "undefined" || !endeTime || endeTime === "")
	            	) {
	            		// Buchung aus alter WebAppVersion
	            		var d8ende = D8.create(new Date(Number(booking.get('timeStampEnd')) + (1000 * 60 * (new Date(Number(booking.get('timeStampEnd'))).getTimezoneOffset() - booking.get('timezoneOffset')))));
	                    endeDate = d8ende.format('dd.mm.yyyy');
	                    endeTime = d8ende.format('HH:MM');
	            	}
	            	if (typeof(booking.get('timezoneOffset')) === "undefined") {
	            		booking.set('date', booking.get('timeStampStart') + ',' + booking.get('timeStampEnd') + ',-120' + ',' + startDate + ',' + startTime + ',' + endeDate + ',' + endeTime);
	            	} else {
	            		booking.set('date', booking.get('timeStampStart') + ',' + booking.get('timeStampEnd') + ',' + booking.get('timezoneOffset') + ',' + startDate + ',' + startTime + ',' + endeDate + ',' + endeTime);
	            	}
	                
	                // set the handOrderId as orderId for correct display in list item view
	                if (parseInt(booking.get('orderId')) === 0 && parseInt(booking.get('handOrderId')) !== 0) {
	                    booking.set('orderId', booking.get('handOrderId'));
	                }
	
	            });
	            // newest booking at the top => first sort than reverse order
	            bookings = _.sortBy(bookings, function(booking) {
	                return parseInt(booking.get('timeStampStart'));
	            });
	            this.set('timeDataForEdit', bookings.reverse());
	        } else {
	            this.set('timeDataForEdit', []);
	        }
    	} catch(e17) {
            this.set('timeDataForEdit', []);
    	}
    }

    , setTimeDataForEdit: function() {
    	try {
	    	if ( DigiWebApp.EditTimeDataPage.bookingToEdit === null ) { return; }
	        var bookings = [DigiWebApp.EditTimeDataPage.bookingToEdit];
	        if (bookings.length > 0) {
	        	var tagDerWinterzeit = D8.create("11/01/" + new Date().getFullYear() + " 02:00:00").addDays(-D8.create("11/01/" + new Date().getFullYear() + " 02:00:00").date.getDay());
	        	var tagDerSommerzeit = D8.create("04/01/" + new Date().getFullYear() + " 02:00:00").addDays(-D8.create("04/01/" + new Date().getFullYear() + " 02:00:00").date.getDay());
        		var d8Now = new D8();
        		var inSommerzeit = (tagDerSommerzeit.timeBetween(d8Now) >= 0 && tagDerWinterzeit.timeBetween(d8Now) <= 0);
        		//var inWinterzeit = ((tagDerWinterzeit.timeBetween(d8Now) >= 0 && tagDerSommerzeit.timeBetween(d8Now) >= 0) || (tagDerWinterzeit.timeBetween(d8Now) <= 0 && tagDerSommerzeit.timeBetween(d8Now) <= 0));
        		var inWinterzeit = !inSommerzeit;
	            _.each(bookings, function(booking) {
	            	var startDate = booking.get('startDateString');
	            	var startTime = booking.get('startTimeString');
	            	if ((typeof(startDate) === "undefined" || !startDate || startDate === "")
	            	|| (typeof(startTime) === "undefined" || !startTime || startTime === "")
	            	) {
	            		// Buchung aus alter WebAppVersion
	            		var d8start = D8.create(new Date(Number(booking.get('timeStampStart')) + (1000 * 60 * (new Date(Number(booking.get('timeStampStart'))).getTimezoneOffset() - booking.get('timezoneOffset')))));
	                    startDate = d8start.format('dd.mm.yyyy');
	                    startTime = d8start.format('HH:MM');
	            	}
	            	var endeDate = booking.get('endeDateString');
	            	var endeTime = booking.get('endeTimeString');
	            	if ((typeof(endeDate) === "undefined" || !endeDate || endeDate === "")
	            	|| (typeof(endeTime) === "undefined" || !endeTime || endeTime === "")
	            	) {
	            		// Buchung aus alter WebAppVersion
	            		var d8ende = D8.create(new Date(Number(booking.get('timeStampEnd')) + (1000 * 60 * (new Date(Number(booking.get('timeStampEnd'))).getTimezoneOffset() - booking.get('timezoneOffset')))));
	                    endeDate = d8ende.format('dd.mm.yyyy');
	                    endeTime = d8ende.format('HH:MM');
	            	}
	            	if (typeof(booking.get('timezoneOffset')) === "undefined") {
	            		booking.set('date', booking.get('timeStampStart') + ',' + booking.get('timeStampEnd') + ',-120' + ',' + startDate + ',' + startTime + ',' + endeDate + ',' + endeTime);
	            	} else {
	            		booking.set('date', booking.get('timeStampStart') + ',' + booking.get('timeStampEnd') + ',' + booking.get('timezoneOffset') + ',' + startDate + ',' + startTime + ',' + endeDate + ',' + endeTime);
	            	}
	                
	                // set the handOrderId as orderId for correct display in list item view
	                if (parseInt(booking.get('orderId')) === 0 && parseInt(booking.get('handOrderId')) !== 0) {
	                    booking.set('orderId', booking.get('handOrderId'));
	                }
	
	            });
	            // newest booking at the top => first sort than reverse order
	            bookings = _.sortBy(bookings, function(booking) {
	                return parseInt(booking.get('timeStampStart'));
	            });
	            this.set('timeDataForEdit', bookings.reverse());
	        } else {
	            this.set('timeDataForEdit', []);
	        }
    	} catch(e18) {
            this.set('timeDataForEdit', []);
    	}
    }

    /**
     *  Closes a day ("Feierabend")
     *
     *  1) If an open Booking exists it is closed and not set as current anymore.
     *  2) if no open booking exists, an alert is shown and nothing more is done.
     *
     *  3) The string showing the data of the currentBooking is cleared
     *  4) The selection lists are reset.
     *
     *  5) If autoTransferAfterClosingDay is selected, a data transfer is triggered
     *  6) If not, the employee selection is cleared
     */
    , closeDay: function() {
    	var that = DigiWebApp.BookingController;
    	try{DigiWebApp.ApplicationController.vibrate();}catch(e19){}
        if (that.currentBooking) {
        	
    		var myTimeStampEnd = null;
//    		try {
//    			myTimeStampEnd = DigiWebApp.BookingController.currentBookingTimesStampBook.getTime();
//    		} catch (e2) {
    			var timeEnd = new Date();
    			myTimeStampEnd = timeEnd.getTime();
//    		}

    		if (
    		      (M.Date.create(that.currentBooking.get("timeStampStart")).format('HH:MM') == M.Date.create(myTimeStampEnd).format('HH:MM')) 
    		   && ((that.currentBooking.get("timeStampEnd") == null) || (that.currentBooking.get("timeStampEnd") == "") || (parseInt(that.currentBooking.get("timeStampEnd")) == 0))
    		
    		) {
    			$('#' + DigiWebApp.BookingPage.content.grid.id).addClass('red');
    			var t = window.setTimeout(function(){ window.clearTimeout(t); $('#' + DigiWebApp.BookingPage.content.grid.id).removeClass('red'); }, 500);
    			$('#' + DigiWebApp.DashboardPage.content.list.selectedItem.id).removeClass('selected');
    			DigiWebApp.ApplicationController.nativeAlertDialogView({
		              title: M.I18N.l('bookingTooShort')
		            , message: M.I18N.l('bookingTooShortMsg')
		        });
		        return null;
	        } else {
    			$('#' + DigiWebApp.BookingPage.content.grid.id).addClass('green');
    			var t = window.setTimeout(function(){ window.clearTimeout(t); $('#' + DigiWebApp.BookingPage.content.grid.id).removeClass('green'); }, 500);
	        	var spesencallback = function() {
			        // Start::Bemerkungsfeld (403)
					if (
					   (DigiWebApp.SettingsController.featureAvailable('403') && !DigiWebApp.SettingsController.getSetting('remarkIsOptional'))
					|| (DigiWebApp.SettingsController.featureAvailable('422') && DigiWebApp.Activity.findById(DigiWebApp.BookingController.currentBooking.get('activityId')).get('istFahrzeitRelevant'))
					){
						// if remark-feature active: go to remarkpage
						that.refreshCurrentBooking(false);
			        	DigiWebApp.NavigationController.toRemarkPage(function() {
			    			if (DigiWebApp.SettingsController.featureAvailable('404')) {
				        		DigiWebApp.NavigationController.backToButtonDashboardPagePOP();
			    			} else {
				        		DigiWebApp.NavigationController.backToDashboardPagePOP();
			    			}
			    			that.closeDayWithRemark();           					
			            });
			        } else {
						// else: bookWithRemark
			        	that.closeDayWithRemark();           					
			        }
			        // End::Bemerkungsfeld
	        	};
	
	        	if (DigiWebApp.SettingsController.featureAvailable('418')) {
	        		DigiWebApp.NavigationController.toSpesenPage(function() {
		    			if (DigiWebApp.SettingsController.featureAvailable('404')) {
			        		DigiWebApp.NavigationController.backToButtonDashboardPagePOP();
		    			} else {
			        		DigiWebApp.NavigationController.backToDashboardPagePOP();
		    			}
	        			spesencallback();
	        		});
	        	} else {
	        		spesencallback();
	        	}
	        }	        
        } else {
        	that.closeDayWithRemark();           					
        }
    }
    
    , closeDayWithRemark: function() {
    	var that = this;
    	that.currentBookingTimesStampBook = new Date();
    	that.getBookingLocation(that.closeDayWithRemarkWithPosition);
    }
            
    , closeDayWithRemarkWithPosition: function(location) {
    	var that = DigiWebApp.BookingController;
		var bookingWasClosed = true;
        // close current booking
        if (that.currentBooking) {
        	that.currentBooking.set("istFeierabend", true);

        	bookingWasClosed = that.currentBooking.closeBooking(location)

	    	if (bookingWasClosed) {
	    		
				that.currentBooking.removeAsCurrent();
				
			} else {
				
		        DigiWebApp.ApplicationController.nativeAlertDialogView({
		              title: M.I18N.l('bookingTooShort')
		            , message: M.I18N.l('bookingTooShortMsg')
		        });
		        
			}
	    	
			that.currentBooking.save();
			
			if (bookingWasClosed) {
				that.currentBookingClosed = that.currentBooking;
	        	that.currentBooking = null;
			}
        	DigiWebApp.SettingsController.setSetting("currentTimezoneOffset", null);
	    	DigiWebApp.SettingsController.setSetting("currentTimezone", null);
        } else {
            //M.DialogView.alert({
    		DigiWebApp.ApplicationController.DigiLoaderView.hide();
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                  title: M.I18N.l('hint')
                , message: M.I18N.l('noOpenBookings')
            });
            return;
        }

		if (bookingWasClosed) {
			
	        that.set('currentBookingStr', '');
	
	        // reset selections to show "Bitte wählen: "
	        DigiWebApp.SelectionController.resetSelection();
	        DigiWebApp.SelectionController.initSelection();
	        DigiWebApp.SelectionController.useSelections = NO;
		
		}
		
        var finishBooking = function() {
        	DigiWebApp.ApplicationController.DigiLoaderView.hide();
        	if (DigiWebApp.SettingsController.getSetting('autoTransferAfterClosingDay')) {
	            DigiWebApp.DashboardController.dataTransfer(YES); // yes means: is closing day
	        } else {
	            // clear employee selection, but only if not auto data transfer and save it before to have it while sending the data
	            localStorage.setItem(DigiWebApp.EmployeeController.empSelectionKeyTmp, localStorage.getItem(DigiWebApp.EmployeeController.empSelectionKey));
	            localStorage.removeItem(DigiWebApp.EmployeeController.empSelectionKey);
	            // set employee state back
	            if(DigiWebApp.EmployeeController.getEmployeeState() == 2) {
	                DigiWebApp.EmployeeController.setEmployeeState(1);
	            }
	            //M.DialogView.alert({
	    		DigiWebApp.ApplicationController.DigiLoaderView.hide();
	            DigiWebApp.ApplicationController.nativeAlertDialogView({
	                  title: M.I18N.l('closingDaySuccess')
	                , message: M.I18N.l('closingDaySuccessWithoutMsg')
	            });
	        }
        };
        
	    if (DigiWebApp.SettingsController.featureAvailable('417') && DigiWebApp.SettingsController.getSetting("ServiceApp_ermittleGeokoordinate")) {
			if (DigiWebApp.SettingsController.getSetting("ServiceApp_engeKopplung") || DigiWebApp.SettingsController.getSetting('autoTransferAfterClosingDay')) {
				// put, dann solange GET bis !=WAIT oder GPS-TIMEOUT erreicht
				var pollBooking = function() {
					if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("polling for bookinglocations");
					// getBookings mit timeout
					var checkForOK = function(datensaetze) {
						if (DigiWebApp.SettingsController.getSetting("debug"))  console.log(datensaetze.length + " Datensätze empfangen");
						_.each(datensaetze, function(datensatzObj) {
							try {
								if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("speichere gepullten Datensatz " + datensatzObj.m_id);
								var modelBooking = _.find(DigiWebApp.Booking.find(), function(b) { return (b.m_id === datensatzObj.m_id);});
								var datensatz = datensatzObj.record;
								if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("modelBooking: ", modelBooking);
								if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("datensatz: ", datensatz);
								modelBooking.set("latitude", datensatz.latitude);
								modelBooking.set("latitude_bis", datensatz.latitude_bis);
								modelBooking.set("longitude", datensatz.longitude);
								modelBooking.set("longitude_bis", datensatz.longitude_bis);
								modelBooking.set("ermittlungsverfahrenBis", datensatz.ermittlungsverfahren_bis);
								modelBooking.set("ermittlungsverfahrenVon", datensatz.ermittlungsverfahren);
								modelBooking.set("genauigkeitBis", datensatz.genauigkeit_bis);
								modelBooking.set("genauigkeitVon", datensatz.genauigkeit);
								modelBooking.set("gps_zeitstempelBis", datensatz.gps_zeitstempel_bis);
								modelBooking.set("gps_zeitstempelVon", datensatz.gps_zeitstempel);
								modelBooking.set("ServiceApp_Status", datensatz.status);
								modelBooking.save();
								if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("datensatz " + datensatzObj.m_id + " gespeichert");
							} catch(exNotFound) {
								if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("datensatz " + datensatzObj.m_id + " nicht gefunden");
							}
						});
						that.currentBookingClosed = null;
						finishBooking();
					};
					var idsToPoll = [];
					if (that.currentBooking !== null) { idsToPoll.push(that.currentBooking.m_id); }
					if (that.currentBookingClosed !== null) { idsToPoll.push(that.currentBookingClosed.m_id); }
					DigiWebApp.ServiceAppController.pollBookings(idsToPoll, checkForOK, finishBooking, DigiWebApp.SettingsController.getSetting('GPSTimeOut'));
				};
				
				if (bookingWasClosed) {
					if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("post currentBookingClosed");
					DigiWebApp.ServiceAppController.postBookings([that.currentBookingClosed], pollBooking, finishBooking);
				} else {
					if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("post currentBooking");
					DigiWebApp.ServiceAppController.postBookings([that.currentBooking], function(){}, function(){});
				}
			} else {
				if (bookingWasClosed) {
					if (that.currentBookingClosed !== null) {
						var getWAITFunc = function() {
							if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("refreshWAIT");
							DigiWebApp.ServiceAppController.refreshWAITBookings(function(){
								if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("refreshWAIT done");
								finishBooking();
							},function(err){console.error(err);finishBooking();});
						};
						if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("post currentBookingClosed");
						DigiWebApp.ServiceAppController.postBookings([that.currentBookingClosed], getWAITFunc, getWAITFunc);
					} else {
						finishBooking();	
					}
				}
			}
		} else {
			if (bookingWasClosed) {
				finishBooking();
			}
		}

    }
    
    , loadSignatures: function(bookings, successCallback) {
    	
		// check for successCallback is a function
		if (typeof successCallback !== "function") {
			console.error("loadSignaturesError: successCallback is not a function");
	        return;
	    }
		
		DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('loadSignatures'));

		var bookingsLength = bookings.length;
    	var bookingsIndex = 0;
    	
    	if (bookingsLength !== 0) { 
	    	_.each(bookings, function(el) {
	    		bookingsIndex = bookingsIndex + 1;
    			//console.log('loading signature for booking No. ' + bookingsIndex);
    			if (el.hasFileName()) {
	    			//console.log(el.get('fileName'));
					// load signature into el
					el.readFromFile(function(fileContent){
						//console.log("fileContent: " + fileContent);
						if (fileContent && (fileContent !== "")) {
							DigiWebApp.BookingController.propagateBookingWithSignature(bookings, el.m_id, fileContent);
						}
						if ( bookingsIndex === bookingsLength ) {
							// last signature loaded
				    		//console.log('last booking done (with file)');
		    				//DigiWebApp.ApplicationController.DigiLoaderView.hide();
							successCallback();
						}
					}, function() {
						if ( bookingsIndex === bookingsLength ) {
							// last signature loaded
				    		//console.log('last booking done (with file)');
		    				//DigiWebApp.ApplicationController.DigiLoaderView.hide();
							successCallback();
						}
					});
    			} else {
	    			// this booking has no signature
					if ( bookingsIndex === bookingsLength ) {
						// last signature loaded
			    		//console.log('last booking done (no file)');
	    				//DigiWebApp.ApplicationController.DigiLoaderView.hide();
						successCallback();
					}
	    		}
	        });
    	} else {
    		//console.log('no bookings');
			//DigiWebApp.ApplicationController.DigiLoaderView.hide();
			successCallback();
    	}
    }
    
    , propagateBookingWithSignature: function(bookings, id, signature) {
    	_.each(bookings, function(el) {
            if (el.m_id === id) {
            	el.signature = signature;
            }
        });
    }

    /**
     * Calls sendData of DigiWebApp.RequestController.
     * Passes all local available bookings.
     *
     * Success Callback:
     * 1) deletes all bookings, except the current
     * 2) resets the selection lists and sets them to show the current booking data
     * 3) If the method is called in closingDay context, the currentBookingStr is cleared and the employeeSelection cleared
     *
     * Error Callback
     * 1) If it is called in closingDay context, the employeeSelection is cleared.
     * 2) Shows an error alert.
     *
     * @param {Boolean} isClosingDay Flag that determines whether this function is called directly after closing day
     */
    , sendBookings: function(isClosingDay, doSync) {
    	var bookings = DigiWebApp.Booking.find();
    	DigiWebApp.BookingController.loadSignatures(bookings, function() {
    		DigiWebApp.BookingController.sendSignatures(bookings, isClosingDay, doSync);
    	});
    }
    
    , sendSignatures: function(bookings, isClosingDay, doSync) {

    	// sende vorhandene unterschriften
    	var that = this;
		var items = [];
		_.each(bookings, function(el) {
			if (el.signature) {
				var mySig = el.record;
				mySig.unterschrift = JSON.parse(el.signature);
				items.push(mySig);
			}
		});
		
		if (items.length !== 0) {
			
			var data = {"unterschriften": items};
			
			var internalSuccessCallback = function(data2, msg, request) {
				// verarbeite empfangene Daten
				//console.log("sendSignatures Status: " + request.status);										
				// weiter in der Verarbeitungskette
				that.sendBookingsWithoutSignatures(DigiWebApp.Booking.find(), isClosingDay, doSync);
			};

			var sendObj = {
					  data: data
					, webservice: "medien/unterschrift"
					, loaderText: M.I18N.l('sendSignatures')
					, successCallback: internalSuccessCallback
					, errorCallback: internalSuccessCallback
					//, additionalQueryParameter:
					//, timeout: 
			};
			DigiWebApp.JSONDatenuebertragungController.sendData(sendObj);
			
		} else {
			that.sendBookingsWithoutSignatures(DigiWebApp.Booking.find(), isClosingDay, doSync);
		}
		
    }
    
    , sendBookingsWithoutSignatures: function(bookings, isClosingDay, myDoSync) {

    	var doSync = false;
        if (typeof(myDoSync) !== "undefined") doSync = myDoSync;

        if (bookings.length > 0) {
        	
        	DigiWebApp.JSONDatenuebertragungController.sendeZeitdaten(
        		  bookings
        		, function() {
        			  var that = DigiWebApp.BookingController;
        			  var CurrentAvailable = false;
        			  _.each(DigiWebApp.Booking.find(), function(el) {
        				  if (el.get('isCurrent')) {
        					  CurrentAvailable = true;
        				  }
    				  });
        			  if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("CurrentAvailable: ", CurrentAvailable);
        			  // no current booking: after closing-time
        			  if (!CurrentAvailable) {
        				  DigiWebApp.SentBooking.deleteAll();
        			  }
      			
						// Feature 411 : Zeitbuchungen für X Tage auf Gerät belassen
						if (DigiWebApp.SettingsController.featureAvailable('411')) {
							try {
								// move Bookings to SentBookingArchived
							      _.each(DigiWebApp.Booking.find(), function(el) {
							          if (!el.get('isCurrent')) {
							      		  var sentBookingArchivedEl = that.sentBookingArchived(el);
							      		  if (sentBookingArchivedEl != null) {
								      		  sentBookingArchivedEl.save();
								      		  // check if that day is already in archive
								      		  var dayFound = NO;
								      		  var dayToFind = D8.create(el.get('timeStampStart')).format("dd.mm.yyyy");
								      		  _.each(DigiWebApp.SentTimeDataDays.find(), function(day){
								      			  if (day.get('tagLabel') === dayToFind) {
								      				  dayFound = YES;
								      			  }
								      		  });
								      		  if (dayFound === NO) {
								      			  var dayRecord = DigiWebApp.SentTimeDataDays.createRecord({
								      				  tagLabel: dayToFind
								      			  });
								      			  dayRecord.save();
								      		  }
							      		  }
							          }
							      });
							  
							      // veraltete Buchungen aus Archiv entfernen
							      DigiWebApp.SentBookingArchived.deleteOld();
							      DigiWebApp.SentTimeDataDays.deleteOld();
							
							} catch(e20) {
							    DigiWebApp.ApplicationController.nativeAlertDialogView({
							          title: M.I18N.l('error')
							        , message: M.I18N.l('errorWhileArchivingBookings')
							        });
							}
							
						}
						// Feature 411 : End

						// Buchungen aufräumen
						var deleteBuchungsIds = [];
		  				_.each(DigiWebApp.Booking.find(), function(el) {
		                    if (!el.get('isCurrent')) {
		                  	  if (CurrentAvailable) {
			                  		  try {
			                      		  // save booking as sentBooking for later view in sentBookingsListView
			                      		  var sentBookingEl = that.sentBooking(el);
			                      		  if (sentBookingEl != null) { sentBookingEl.save(); }
			                  		  } catch(e21) {
			        			            DigiWebApp.ApplicationController.nativeAlertDialogView({
			        			                  title: M.I18N.l('error')
			        			                , message: M.I18N.l('errorWhileBackingUpBookings')
			        			            });
			                  		  }
			                  }
		                  	  deleteBuchungsIds.push(el.m_id);
		                      el.del();
		                    }
		                  });
		  				
		  				if (DigiWebApp.SettingsController.featureAvailable('417')) {
							DigiWebApp.ServiceAppController.deleteBookings(
								    deleteBuchungsIds
								  , function() {
								    	if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("Buchungen wurden in der ServiceApp gelöscht.");
								  }
								  , function() {
									  	if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("Buchungen konnten nicht in der ServiceApp gelöscht werden.");
									  }
							);
		  				}

		  				  // Buchungsselektion erneuern
		                  DigiWebApp.SelectionController.resetSelection();
		                  if (CurrentAvailable) {
		                      DigiWebApp.SelectionController.setSelectionByCurrentBooking();
		                  } else {
		                      DigiWebApp.SelectionController.initSelection();
		                  }

		                  // falls Feierabend gebucht wurde: aufräumen
		                  if (isClosingDay) {
		                	  that.set('currentBookingStr', '');
		
		                      if (DigiWebApp.EmployeeController.getEmployeeState() == 2) {
		                          DigiWebApp.EmployeeController.setEmployeeState(1);
		                      }
		                      // clear employee selection
		                      localStorage.removeItem(DigiWebApp.EmployeeController.empSelectionKey);
		                      localStorage.removeItem(DigiWebApp.EmployeeController.empSelectionKeyTmp);
		                  }
                          DigiWebApp.ApplicationController.DigiLoaderView.hide();


                          startSyncFunc = function() {
	                          // now call startsync again
	                          if (DigiWebApp.SettingsController.getSetting('autoSyncAfterBookTime') || doSync === true) {
	                          		DigiWebApp.ApplicationController.startsync(YES);
	                          }
                          }
                          
                          // Datenübertragung für Materialerfassung-only und Feierabend
                          if (DigiWebApp.SettingsController.featureAvailable("402") && !DigiWebApp.BookingController.currentBooking) {
	                      	  	
                        	  sendBautageberichtFunc = function() {
	                      	  			DigiWebApp.BautagebuchZusammenfassungController.load(DigiWebApp.BautagebuchZusammenfassungController.item);
					    				DigiWebApp.BautagebuchDatenuebertragungController.senden(
					    						DigiWebApp.BautagebuchZusammenfassungController.item
					    					    , function(msg) {
					    							DigiWebApp.BautagebuchBautageberichtDetailsController.deleteBautagesbericht(startSyncFunc, startSyncFunc, YES);
					    						}
					    						, function(xhr,err) {
					    							startSyncFunc();
					    						}
					    				);
	                      	  	}
	                      	  	
	                    		DigiWebApp.BautagebuchBautageberichteListeController.init();
	                    		var bautagesberichte = DigiWebApp.BautagebuchBautagesbericht.find();
	                    		var matBautagesbericht = null;
	                    		_.each(bautagesberichte, function(bautagesbericht){
	                    			if (bautagesbericht.get('bautagesberichtTyp') == "<materialerfassung_only>") {
	                    				matBautagesbericht = bautagesbericht;
	                    			}
	                    		});
	                    		
	                    		if (matBautagesbericht) {
	                    			DigiWebApp.BautagebuchBautageberichtDetailsController.load(matBautagesbericht);
	                        	  	DigiWebApp.BautagebuchZusammenfassungController.load(DigiWebApp.BautagebuchBautageberichtDetailsController.item);
	                        	  	DigiWebApp.BautagebuchZusammenfassungController.finish(sendBautageberichtFunc);
	                    		} else {
	                    			startSyncFunc();
	                    		}

                          } else {
                        	  startSyncFunc();
                          }
                  
        		  }
        		  , function() {
                      DigiWebApp.ApplicationController.DigiLoaderView.hide();
	              		// die Buchung(en) konnte(n) nicht gesendet werden
	                    DigiWebApp.ApplicationController.nativeAlertDialogView({
	                        title: M.I18N.l('sendDataFail'),
	                        message: M.I18N.l('sendDataFailMsg')
	                    });
	              }
        		  , isClosingDay
        		  , doSync
        	);

//		Alte XML-Übertragungsvariante:        	
//            DigiWebApp.RequestController.sendData({
//                  bookings: bookings
//                , success: {
//                    target: this,
//                    action: function() {
//            			var CurrentAvailable = false
//                        _.each(DigiWebApp.Booking.find(), function(el) {
//                            if(el.get('isCurrent')) {
//                            	CurrentAvailable = true;
//                            }
//                        });
//            			
//            			// no current booking: after closing-time
//            			if (!CurrentAvailable) {
//            				DigiWebApp.SentBooking.deleteAll();
//            			}
//            			
//        				// Feature 411 : Zeitbuchungen für X Tage auf Gerät belassen
//        				if (DigiWebApp.SettingsController.featureAvailable('411')) {
//        					try {
//	            				// move Bookings to SentBookingArchived
//	                            _.each(DigiWebApp.Booking.find(), function(el) {
//	                                if(!el.get('isCurrent')) {
//	                            		  var sentBookingArchivedEl = DigiWebApp.BookingController.sentBookingArchived(el);
//	                            		  sentBookingArchivedEl.save();
//	                            		  // check if that day is already in archive
//	                            		  var dayFound = NO;
//	                            		  var dayToFind = D8.create(el.get('timeStampStart')).format("dd.mm.yyyy");
//	                            		  _.each(DigiWebApp.SentTimeDataDays.find(), function(day){
//	                            			  if (day.get('tagLabel') === dayToFind) {
//	                            				  dayFound = YES;
//	                            			  }
//	                            		  });
//	                            		  if (dayFound === NO) {
//	                            			  var dayRecord = DigiWebApp.SentTimeDataDays.createRecord({
//	                            				  tagLabel: dayToFind
//	                            			  });
//	                            			  dayRecord.save();
//	                            		  }
//	                                }
//	                            });
//                            
//	                            // veraltete Buchungen aus Archiv entfernen
//	                            DigiWebApp.SentBookingArchived.deleteOld();
//	                            DigiWebApp.SentTimeDataDays.deleteOld();
//
//        					} catch(e) {
//        			            DigiWebApp.ApplicationController.nativeAlertDialogView({
//        			                  title: M.I18N.l('error')
//        			                , message: M.I18N.l('errorWhileArchivingBookings')
//        			            });
//        					}
//
//        				}
//        				// Feature 411 : End
//
//        				_.each(DigiWebApp.Booking.find(), function(el) {
//                          if(!el.get('isCurrent')) {
//                        	  if (CurrentAvailable) {
//                        		  try {
//	                        		  // save booking as sentBooking for later view in sentBookingsListView
//	                        		  var sentBookingEl = DigiWebApp.BookingController.sentBooking(el);
//	                            	  sentBookingEl.save();
//                        		  } catch(e) {
//              			            DigiWebApp.ApplicationController.nativeAlertDialogView({
//	          			                  title: M.I18N.l('error')
//	          			                , message: M.I18N.l('errorWhileBackingUpBookings')
//	          			            });
//                        		  }
//                        	  }
//                              el.del();
//                          }
//                        });
//                        
//                        DigiWebApp.SelectionController.resetSelection();
//                        if(this.currentBooking) {
//                            DigiWebApp.SelectionController.setSelectionByCurrentBooking();
//                        } else {
//                            DigiWebApp.SelectionController.initSelection();
//                        }
//
//                        if(isClosingDay) {
//                            this.set('currentBookingStr', '');
//
//                            if(DigiWebApp.EmployeeController.getEmployeeState() == 2) {
//                                DigiWebApp.EmployeeController.setEmployeeState(1);
//                            }
//                            // clear employee selection
//                            localStorage.removeItem(DigiWebApp.EmployeeController.empSelectionKey);
//                            localStorage.removeItem(DigiWebApp.EmployeeController.empSelectionKeyTmp);
//                        }
//                        
//                    }
//                }
//                , error: {
//                      target: this
//                    , action: function() {
//                		// die Buchung(en) konnte(n) nicht gesendet werden
//                        DigiWebApp.ApplicationController.nativeAlertDialogView({
//                            title: M.I18N.l('sendDataFail'),
//                            message: M.I18N.l('sendDataFailMsg')
//                        });
//                    }
//                }
//            }, isClosingDay, doSync); // is closingDay is passed to request controller.sendData to check whether local Storage remove of emp selection tmp shall be proceed

        }
    }

    /**
     * Constructs a string containing the data according to the passed booking object
     * @param {Object} booking The booking for which the string should be created
     */
    , buildBookingStr: function(booking) {
        var bookingStr = '';
        var myDisplayTimestamp;
        if (typeof(this.currentBooking.get("timezoneOffset")) === "undefined") {
        	myDisplayTimestamp = new Date(this.currentBooking.get('timeStampStart')).getTime();
        } else {
        	myDisplayTimestamp = new Date(this.currentBooking.get('timeStampStart') - (1000 * 60 * (this.currentBooking.get("timezoneOffset") - new Date().getTimezoneOffset()))).getTime();
        }
        //bookingStr = M.Date.create(this.currentBooking.get('timeStampStart')).format('dd.mm.yy HH:MM');
        bookingStr = M.Date.create(myDisplayTimestamp).format('dd.mm.yy HH:MM');
        return bookingStr;
    }
    
    , spesenOptionen: null
    
    , uebernachtungOptionen: null
    

});
// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: CameraController
// ==========================================================================
// manuell var-checked
DigiWebApp.CameraController = M.Controller.extend({

    // arrays for selection lists
      orders: null
    , positions: null
    , activities: null

    , selections: {
          order: null
        , position: null
        , activity: null
    }

	, loadedPicture: null
	, loadedFileName: null
	, fileType: null

    , init: function(isFirstLoad) {
		
        if (isFirstLoad) {
            /* do something here, when page is loaded the first time. */
        }
        /* do something, for any other load. */

        $('#' + DigiWebApp.CameraPage.content.remarkInput.id).val("");
        M.ViewManager.getView('cameraPage', 'remarkInput').value = "";
        
        if (DigiWebApp.CameraController.loadedPicture === null) {
        	var image = document.getElementById(DigiWebApp.CameraPage.content.image.id);
        	image.src = '';
        	DigiWebApp.CameraController.myImageObj = new Image();
        }

        if (     typeof navigator.camera !== 'undefined' 
      		  && typeof navigator.camera.getPicture !== 'undefined'
        	  && DigiWebApp.CameraController.loadedPicture === null
        ) {
        	DigiWebApp.CameraController.takePicture();
        } else {
        	// camera unavailable or loadedPicture is set
        	DigiWebApp.CameraController.useLoadedPicture();
        }

        if (DigiWebApp.BookingController.currentBooking) {
            DigiWebApp.CameraController.setSelectionByCurrentBooking();
        } else {
            DigiWebApp.CameraController.initSelection();
        }
        
        this.saveSelection();
    }

    , setSelectionByCurrentBooking: function() {
        var booking = DigiWebApp.BookingController.currentBooking;
        
        // get all items from local storage
        var orders = DigiWebApp.HandOrder.findSorted().concat(DigiWebApp.Order.findSorted()); // we need to check handOrders also
        var positions = DigiWebApp.Position.findSorted();
        var activities = DigiWebApp.CameraController.getActivities();

        // get the ids from the current booking
        var orderId = (booking.get('orderId') == "0" ? 0 : booking.get('orderId')) || booking.get('handOrderId'); // we need to check handOrders also
        var positionId = booking.get('positionId');
        var activityId = booking.get('activityId');

        
        /**
         * ORDERS
         */
        var orderArray = _.map(orders, function(order) {
            if (order.get('id') == orderId) {
                return { label: order.get('name'), value: order.get('id'), isSelected: YES };
            } else {
                return { label: order.get('name'), value: order.get('id') };
            }
        });
        orderArray = _.compact(orderArray);
        // push "Bitte wählen Option"
        orderArray.push({label: M.I18N.l('selectSomething'), value: '0'});

        
        /**
         * POSITIONS
         */
        var positionArray = _.map(positions, function(pos) {
            if (parseInt(pos.get('orderId')) === parseInt(orderId)) {
            	var obj = null;
                if (pos.get('id') == positionId) {
                    obj = { label: pos.get('name'), value: pos.get('id'), isSelected: YES };
                } else {
                    obj = { label: pos.get('name'), value: pos.get('id') };
                }
                return obj;
            }
            return null;
        });
        positionArray = _.compact(positionArray);
        // push "Bitte wählen Option"
        positionArray.push({label: M.I18N.l('selectSomething'), value: '0'});


        /**
         * ACTIVITIES
         */
        var workPlans = _.select(DigiWebApp.WorkPlan.find(), function(wp) {
            if (wp) return wp.get('id') == positionId;
        });

        var itemSelected = NO;

        /* if a workplan exists, only use those activities that are in the workplan */
        if (workPlans.length > 0) {
            activities = this.getActivitiesFromWorkplan(workPlans[0]);
        } else {
            activities = DigiWebApp.CameraController.getActivities();
        }

        var activityArray = _.map(activities, function(act) {
        	if ( typeof(act) === "undefined" ) {
        		console.log("UNDEFINED ACTIVITY");
        		return null;
        	} else {
        		var obj = null;
        		if (act.get('id') == activityId) {
        			obj = { label: act.get('name'), value: act.get('id'), isSelected: YES };
        			//console.log("ACTIVITY " + i + " = " + act.get('name') + " in setSelectionByCurrentBooking isSelected");
        			itemSelected = YES;
        		} else {
        			obj = { label: act.get('name'), value: act.get('id') };
        			//console.log("ACTIVITY " + i + " = " + act.get('name') + " in setSelectionByCurrentBooking");
        		}
        		return obj;
        	}
        });
        activityArray = _.compact(activityArray);
        activityArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});

        this.resetSelection();
        // set selection arrays to start content binding process
        this.set('orders', orderArray);
        this.set('positions', positionArray);
        this.set('activities', activityArray);
    }

    , setPositions: function() {
        var orderId = M.ViewManager.getView('cameraPage', 'order').getSelection(YES).value;
        if (!orderId) {
            return;
        }
//        M.ViewManager.getView('cameraPage', 'position').removeSelection(); /* to avoid bug of not setting selected... */
        var positions = DigiWebApp.Position.findSorted();

        var i = 0;
        positions = _.map(positions, function(pos) {
            if (pos.get('orderId') == orderId) {
                var obj = { label: pos.get('name'), value: pos.get('id') };
                if (i === 0) {
                    obj.isSelected = YES;
                }
                i += 1;
                return obj;
            }
            return null;
        });
        positions = _.compact(positions);/* remove falsy values from positions with _.compact() */

        if (positions.length < 1) {
            positions.push({label: M.I18N.l('noData'), value: '0'});
        }


        M.ViewManager.getView('cameraPage', 'position').resetSelection();
        this.set('positions', positions);
        this.setActivities(YES);

        this.saveSelection();
    }

    /* only set those activities that are related to the chosen position */
    , setActivities: function(checkForWorkPlan) {
        var posId = null;

        if (checkForWorkPlan) {
            var posObj = M.ViewManager.getView('cameraPage', 'position').getSelection(YES);
            if (posObj) {
                posId = posObj.value;
            }
        }

        var activities = [];
        //var workPlans = DigiWebApp.WorkPlan.find({query: 'id=' + posId}); // pre TMP-1.0
		//console.log("posId " + posId);
//        var workPlans = DigiWebApp.WorkPlan.find({ query: { 
//              identifier: 'id' 
//            , operator: '=' 
//            , value: posId 
//        }});
        var workPlans = []; 
        _.each(DigiWebApp.WorkPlan.find(),function(wp){
        	if (wp.get("id") == posId) workPlans.push(wp);
        });
        var i = 0;

        /* if a workplan exists, only use those activities that are in the workplan */
		//console.log("posId " + posId + ", workPlans.length " + workPlans.length);
        if (workPlans.length === 1) {
            activities = this.getActivitiesFromWorkplan(workPlans[0]);
        } else {
            activities = DigiWebApp.CameraController.getActivities();
        }

        var currentBookingActivityId = -1;
        if ( typeof(DigiWebApp.BookingController.currentBooking) !== "undefined" && DigiWebApp.BookingController.currentBooking !== null ) { 
        	currentBookingActivityId = DigiWebApp.BookingController.currentBooking.get('activityId');
        }
        
		var currentBookingActivitySelectable = false;
		_.each(activities, function(act) {
        	if ( typeof(act) === "undefined" ) {
        		console.log("UNDEFINED ACTIVITY");
        		return null;
        	} else {
				if ( act.get('id') == currentBookingActivityId ) { currentBookingActivitySelectable = true; }
			}
		});
		
        activities = _.map(activities, function(act) {
        	if ( typeof(act) === "undefined" ) {
        		console.log("UNDEFINED ACTIVITY");
        		return null;
        	} else {
        		var obj = null;
        		if (currentBookingActivitySelectable) {
        			obj = { label: act.get('name'), value: act.get('id'), isSelected: act.get('id') == currentBookingActivityId ? YES : NO };
        		} else {
        			obj = { label: act.get('name'), value: act.get('id'), isSelected: i === 0 ? YES : NO };
        		}
        		//console.log("ACTIVITY " + i + " = " + act.get('name') + " in setActivities");
                i += 1;
                return obj;
        	}
        });

        activities = _.compact(activities);

        // new to show this when closing day is pressed (corresponds to a reset)
        if (activities.length > 0) {
            activities.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:NO});
        } else {
            activities.push({label: M.I18N.l('noData'), value: '0'});
        }


        M.ViewManager.getView('cameraPage', 'activity').resetSelection();
        this.set('activities', activities);

        this.saveSelection();
    }

    , initSelection: function() {
       var orders = DigiWebApp.HandOrder.findSorted().concat(DigiWebApp.Order.findSorted()); // we need to check handOrders also
       var positions = DigiWebApp.Position.findSorted();
       var activities = DigiWebApp.CameraController.getActivities();

       /**
        * ORDERS
        */

       // create order selection
       var orderArray = [];
       if (orders) {
           orderArray = _.map(orders, function(order) {
               if (order) return { label: order.get('name'), value: order.get('id') };
           });
       }
       // push "Bitte wählen Option"
       orderArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:YES});

       /**
        * POSITIONS
        */

       // create position selection
       var positionArray = [];
       if (positions) {
           positionArray = _.map(positions, function(pos) {
        	   if (pos) return { label: pos.get('name'), value: pos.get('id') };
           });
       }
       // push "Bitte wählen Option"
       positionArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:YES});

       /**
        * ACTIVITIES
        */
       var activityArray = [];
       if (activities) {
            activityArray = _.map(activities, function(act) {
            	if ( typeof(act) === "undefined" ) {
            		console.log("UNDEFINED ACTIVITY");
            		return null;
            	} else {
            		return { label: act.get('name'), value: act.get('id') };
            	}
           });
       }
       // push "Bitte wählen Option"
       activityArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected: YES});

        this.resetSelection();
        // set selection arrays to start content binding process
        this.set('orders', orderArray);
        this.set('positions', positionArray);
        this.set('activities', activityArray);
        M.ViewManager.getView('cameraPage', 'order').setSelection('0');
        M.ViewManager.getView('cameraPage', 'position').setSelection('0');
        M.ViewManager.getView('cameraPage', 'activity').setSelection('0');
    }
    
    , resetSelection: function() {
        M.ViewManager.getView('cameraPage', 'order').resetSelection();
        M.ViewManager.getView('cameraPage', 'position').resetSelection();
        M.ViewManager.getView('cameraPage', 'activity').resetSelection();
    }

    , isPositionSelected: function() {
        // implemented adjustment to M.SeletionListView to return null if no item is available
        var posObj = M.ViewManager.getView('cameraPage', 'position').getSelection(YES);
        if (posObj && posObj.value != "0") { // 'Bitte wählen' is not allowed to be chosen
            return YES;
        } else {
            return NO;
        }
    }

    , isActivitySelected: function() {
        var actObj = M.ViewManager.getView('cameraPage', 'activity').getSelection(YES);
        if (actObj && actObj.value != "0") { // 'Bitte wählen' is not allowed to be chosen
            return YES;
        } else {
            return NO;
        }
    }

    , saveSelection: function() {
        var orderValue = M.ViewManager.getView('cameraPage', 'order').getSelection();
        var positionValue = M.ViewManager.getView('cameraPage', 'position').getSelection();
        var activityValue = M.ViewManager.getView('cameraPage', 'activity').getSelection();

        this.selections.order = orderValue;
        this.selections.position = positionValue;
        this.selections.activity = activityValue;

        this.useSelections = YES;
    }
    
    , getActivities: function(queryobj) {
    	var activities;
    	if (queryobj) {
    		activities = DigiWebApp.Activity.find(queryobj);
    	} else {
    		activities = DigiWebApp.Activity.findSorted();
    	}
    	activities = _.map(activities, function(acti) {
	    	if(parseInt(acti.get("positionId")) === 1) {
	            // normale Tätigkeit
	            return acti;
	         } else {
	            // Tätigkeit nur bei Arbeitsplan
	            return null;
	         }
    	});
    	activities = _.compact(activities);
    	return activities;
    }

    , getActivitiesFromWorkplan: function(workplan) {
        var actIds = workplan.get('activityIds').split(',');
        var activities = [];
        if (actIds && actIds.length > 0) {
            for (var i = 0; i < actIds.length; i++) {
            	activities.push(_.find(DigiWebApp.Activity.find(), function(act) {
            		return act.get('id') == actIds[i];
            	}));
//                activities.push(_.first(DigiWebApp.Activity.find({ query: {
//                      identifier: 'id' 
//                    , operator: '=' 
//                    , value: actIds[i] 
//                }})));
            }

        }
        if (parseInt(workplan.get("workplanType")) === 1) {
        	// only those activities which are bound to employee
            activities = _.map(activities, function(act) {
            	if ( typeof(act) === "undefined" ) {
            		console.log("UNDEFINED ACTIVITY");
            		return null;
            	} else {
        			var zugeordnet = NO;
            		var allActivities = DigiWebApp.Activity.findSorted();
            		_.each(allActivities, function(acti) {
            			// herausfinden, ob diese Tätigkeit dem Mitarbeiter zugeordnet ist.
            			if (parseInt(acti.get("positionId")) === 1) {
            				zugeordnet = YES;
            			}
            		});
        			if (zugeordnet) {
        				return act;
        			} else {
        				return null;	
        			}
            	}
            });
        }
        activities = _.compact(activities);
        return activities;
    }

    , takePicture: function() {
    			navigator.camera.getPicture(
	    			  DigiWebApp.CameraController.cameraSuccessBase64
	    			, DigiWebApp.CameraController.cameraError
	    			, { 
    					  quality: 40
 	    				, allowEdit: true
 	    				, destinationType : navigator.camera.DestinationType.DATA_URL
 	    				//, destinationType: navigator.camera.DestinationType.FILE_URI
 	    				, encodingType: navigator.camera.EncodingType.JPEG
 	    				, sourceType: navigator.camera.PictureSourceType.CAMERA 
 	    				, mediaType: navigator.camera.MediaType.PICTURE
 	    				, saveToPhotoAlbum: false
	    			  }
    			);    	
    }
    
    , useLoadedPicture: function() {
    	//console.log("useLoadedPicture");
    	//console.log(DigiWebApp.CameraController.loadedPicture);
    	var image = document.getElementById(DigiWebApp.CameraPage.content.image.id);
        image.src = DigiWebApp.CameraController.loadedPicture;
        DigiWebApp.CameraController.myImageObj = new Image();
        DigiWebApp.CameraController.myImageObj.src = DigiWebApp.CameraController.loadedPicture;
    }
    
    , savePicture: function() {
    	var that = this;
    	that.savePictureWithLocation(null);
    }
    
   
    , savePictureWithLocation: function(location) {
    	var that = this;
    	
    	that.saveSelection();
    	
		var orderId = M.ViewManager.getView('cameraPage', 'order').getSelection();
		
		var posObj = M.ViewManager.getView('cameraPage', 'position').getSelection(YES);
		var posId = posObj ? posObj.value : null;
	
		var actObj = M.ViewManager.getView('cameraPage', 'activity').getSelection(YES);
		var actId = actObj ? actObj.value : null;

	    var handOrderId = null;
	    var handOrderName = null;
	    if (DigiWebApp.BookingController.isHandOrder(orderId)) {
			handOrderId = orderId;
			handOrderName = _.select(DigiWebApp.HandOrder.findSorted(), function(ord) {
			    if (ord) return ord.get('id') == orderId || ord.get('name') == orderId;
			})[0].get('name');
			orderId = handOrderId;
	
			// a hand order has no position
			posId = null;
	    }

	    var lat = '0';
	    var lon = '0';
	    if (location) {
			if (location.latitude) {
			    lat = location.latitude;
			}
			if(location.longitude) {
			    lon = location.longitude;
			}
	    }

	    var myMediaFile = that.newMediaFile({
			  oId: orderId
			, hoId: handOrderId
			, hoName: handOrderName
			, lat: lat
			, lon: lon
			, pId: posId
			, aId: actId
			, mId: DigiWebApp.SettingsController.getSetting("mitarbeiterId")
    	});
	    
	    myMediaFile.setRemark(M.ViewManager.getView('cameraPage', 'remarkInput').value);
	    
	    var image = document.getElementById(DigiWebApp.CameraPage.content.image.id);

	    myMediaFile.set('fileType', DigiWebApp.CameraController.get("fileType"));
	    
    	var myOrderName = M.I18N.l('notDefined');
    	var myPositionName = M.I18N.l('notDefined');
    	var myActivityName = M.I18N.l('notDefined');
    	try {
			var myO_id = myMediaFile.get("orderId");
			var myHO_id = myMediaFile.get("handOrderId");
    		if (myO_id !== null || myHO_id != null) {
        		var order = _.select(DigiWebApp.Order.findSorted().concat(DigiWebApp.HandOrder.findSorted()), function(o) {
        			if (o) {
                		//var myOID = obj.oId;
                		//var myHOID = obj.hoId;
        				var myGetO_id = o.get('id');
        				return myO_id == myGetO_id || myHO_id == myGetO_id; // || get('name') is for checking handOrders also
        			}
                });
                if (order && order.length > 0) {
                    order = order[0];
                    myOrderName = order.get('name');
                }
    		}
    	} catch(e1) { console.error(e1); }
    	try {
    		if (parseInt(myMediaFile.get("positionId")) !== 0) {
    			myPositionName = _.find(DigiWebApp.Position.find(), function(p){ return parseInt(p.get("id")) === parseInt(myMediaFile.get("positionId"))}).get('name');
    		}
    	} catch(e2) { console.error(e2); }
    	try {
    		if (parseInt(myMediaFile.get("activityId")) !== 0) {
    			myActivityName = _.find(DigiWebApp.Activity.find(), function(p){ return parseInt(p.get("id")) === parseInt(myMediaFile.get("activityId"))}).get('name');
    		}
    	} catch(e3) { console.error(e3); }
	    myMediaFile.set('orderName', myOrderName);
	    myMediaFile.set('positionName', myPositionName);
	    myMediaFile.set('activityName', myActivityName);

	    myMediaFile.save();
	    myMediaFile.saveToFile(image.src, DigiWebApp.NavigationController.backToMediaListPageTransition);

    }

    , newMediaFile: function(obj) {
        return DigiWebApp.MediaFile.createRecord({
              orderId: obj.oId ? obj.oId : '0'
            , handOrderId: obj.hoId ? obj.hoId : '0'
            , handOrderName: obj.hoName ? obj.hoName : '0'
            , latitude: obj.lat ? obj.lat : '0'
            , longitude: obj.lon ? obj.lon : '0'
            , positionId: obj.pId ? obj.pId : '0'
            , activityId: obj.aId ? obj.aId : '0'
            , mitarbeiterId: obj.mId ? obj.mId : '0'
            , icon: 'icon_takePicture.png'
            , timeStamp: +new Date()
        });
    }
    
    , myImageData: null
    , myImageObj: null
    , cameraSuccessBase64: function(imageData) {
    	//alert("success");
    	DigiWebApp.CameraController.myImageData = imageData;
        var image = document.getElementById(DigiWebApp.CameraPage.content.image.id);
        image.src = 'data:' + DigiWebApp.ApplicationController.CONSTImageFiletype + ',' + imageData;

        DigiWebApp.CameraController.myImageObj = new Image();
        DigiWebApp.CameraController.myImageObj.src = 'data:' + DigiWebApp.ApplicationController.CONSTImageFiletype + ',' + imageData;
        DigiWebApp.CameraController.set("fileType", DigiWebApp.ApplicationController.CONSTImageFiletype);

    }

    , myImageURI: null
    , cameraSuccessURI: function(imageURI) {
    	DigiWebApp.CameraController.myImageURI = imageURI;
        var image = document.getElementById(DigiWebApp.CameraPage.content.image.id);
        image.src = imageURI;
    }
    
    , cameraError: function(mymessage) {
    	DigiWebApp.NavigationController.backToMediaListPageTransition();
//        DigiWebApp.ApplicationController.nativeAlertDialogView({
//              title: 'ERROR'
//            , message: mymessage
//            , callbacks: {
//	            confirm: {
//	                  target: this
//	                , action: function () {
//	    				DigiWebApp.NavigationController.backToMediaListPageTransition();
//		              }
//		       }
//		    }
//        });
    }

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: DashboardController
// ==========================================================================
// manuell var-checked
DigiWebApp.DashboardController = M.Controller.extend({

      items: null
    
    , itemsButtons: null

    , itemsWithoutUpdate: null

    , latestId: null
    
    , lastTimestampDatatransfer: null
    
    , appCacheUpdateReady: function() {
		if (window.applicationCache) {
			if (window.applicationCache.status == window.applicationCache.UPDATEREADY) {
				return true;
			} else if (DigiWebApp.ApplicationController.timeouthappened && window.applicationCache.status !== window.applicationCache.UNCACHED) {
				try { window.applicationCache.update(); } catch(e2) { console.error(e2); }
				return (window.applicationCache.status == window.applicationCache.UPDATEREADY);
			} else {
				return (window.applicationCache.status == window.applicationCache.UPDATEREADY);
			}
		} else {
			return false;
		}
	}

	, initButtons: function(isFirstLoad) {
		var that = this;
		that.init(isFirstLoad);
		
		// aus that.items that.itemsButtons bauen
		var myButtonItem = {};
		var myitemsButtons = [];
		for (var i=0; i < that.items.length; i++) {
//			myButtonItem["button" + i % 2] = JSON.parse(JSON.stringify(that.items[i]));
//			if (i % 2 === 0 && i === that.items.length - 1) {
//				myButtonItem["button1"] = {};
//			}
//			if (i % 2 === 1 || i === that.items.length - 1) {
//				myitemsButtons.push(JSON.parse(JSON.stringify(myButtonItem)));
//				myButtonItem = {};
//			}
			myButtonItem.label = that.items[i].label;
			myButtonItem.id = that.items[i].id;
			    switch(that.items[i].label) {
			        case M.I18N.l('closingTime'):
			        	myButtonItem.icon = '48x48_plain_home.png';
			            break;
			        case M.I18N.l('dataTransfer'):
			        	myButtonItem.icon = '48x48_plain_refresh.png';
			            break;
			        case M.I18N.l('handApplications'):
			        	myButtonItem.icon = '48x48_plain_handauftrag.png';
			            break;
			        case M.I18N.l('timeData'):
			        	myButtonItem.icon = '48x48_plain_note_view.png';
			            break;
			        case M.I18N.l('orderInfo'):
			        	myButtonItem.icon = '48x48_plain_folder_view.png';
			            break;
			        case M.I18N.l('media'):
			        	myButtonItem.icon = '48x48_plain_index.png';
			            break;
			        case M.I18N.l('materialPickUp'):
			        	myButtonItem.icon = '48x48_plain_shelf.png';
			            break;
			        case M.I18N.l('dailyChecklist'):
			        	myButtonItem.icon = '48x48_plain_pda_write.png';
			            break;
			        case M.I18N.l('Anwesenheitsliste'):
			        	myButtonItem.icon = '48x48_plain_text_code.png';
			            break;
			        case M.I18N.l('Bautagebuch'):
			        	myButtonItem.icon = '48x48_plain_graphics-tablet.png';
			            break;
			        case M.I18N.l('settings'):
			        	myButtonItem.icon = '48x48_plain_gears.png';
			            break;
			        case M.I18N.l('info'):
			        	myButtonItem.icon = '48x48_plain_about.png';
			            break;
			        default:
			        	myButtonItem.icon = 'icon_info.png';
			        	break;
			    }
			myitemsButtons.push(JSON.parse(JSON.stringify(myButtonItem)));
		}
		that.set('itemsButtons', myitemsButtons);		
	}

    , init: function(isFirstLoad) {
    	if(DigiWebApp.DashboardPage.needsUpdate || isFirstLoad || this.appCacheUpdateReady()) {
        	var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));
        	var items;
        	if (ChefToolOnly) {
	            items = [
	                          {
	     	                      label: M.I18N.l('dataTransfer')
	     	                    , icon: '48x48_plain_refresh.png'
	     	                    , id: 'dataTransfer'
	     	                }
	            ];
        	} else {
	        	// Standard-Einträge
	            items = [
	                  {
	                      label: M.I18N.l('closingTime')
	                    , icon: '48x48_plain_home.png'
	                    , id: 'closingTime'
	                }
	                , {
	                      label: M.I18N.l('dataTransfer')
	                    , icon: '48x48_plain_refresh.png'
	                    , id: 'dataTransfer'
	                }
	                , {
	                      label: M.I18N.l('handApplications')
	                    , icon: '48x48_plain_handauftrag.png'
	                    , id: 'handOrder'
	                }
	                , {
	                      label: M.I18N.l('timeData')
	                    , icon: '48x48_plain_note_view.png'
	                    , id: 'timeData'
	                }
	            ];
        	}
            
            // spezielle Features, wenn freigeschaltet:

        	// Delete Handauftrag-Menuentry
        	if (DigiWebApp.SettingsController.featureAvailable('410')) {
        		items = _.map(items,function(item){
        			if (item.id !== "handOrder") return item;
        		});
        		items = _.compact(items);
        	}
        	
        	// Delete Feierabend-Menuentry
        	if (DigiWebApp.SettingsController.featureAvailable('420')) {
        		items = _.map(items,function(item){
        			if (item.id !== "closingTime") return item;
        		});
        		items = _.compact(items);
        	}
        	
            // Start::AuftragsInfo
        	var AuftragsInfoAvailable = (DigiWebApp.SettingsController.featureAvailable('406'));

        	if ( ( AuftragsInfoAvailable ) && !ChefToolOnly ) {
            	//if (DigiWebApp.SettingsController.globalDebugMode) console.log("enabling Feature 406 (AuftragsInfo)");
                items.push({
                      label: M.I18N.l('orderInfo')
                    , icon: '48x48_plain_folder_view.png'
                    , id: 'orderInfo'
                });
            }
            // End::AuftragsInfo
            
            // Start::MediaMenu
        	var TakePictureAvailable = (DigiWebApp.SettingsController.featureAvailable('400'));
            var RecordAudioAvailable = (DigiWebApp.SettingsController.featureAvailable('401'));

            if ( ( RecordAudioAvailable ) && !ChefToolOnly ) {
            	//if (DigiWebApp.SettingsController.globalDebugMode) console.log("enabling Feature MediaMenu");
                items.push({
                      label: M.I18N.l('media') + " (DEMO)"
                    , icon: '48x48_plain_camera2.png'
                    , id: 'demomedia'
                });
            }
            if ( TakePictureAvailable ) {
            	//if (DigiWebApp.SettingsController.globalDebugMode) console.log("enabling Feature MediaMenu");
                items.push({
                      label: M.I18N.l('media')
                    , icon: '48x48_plain_camera2.png'
                    , id: 'media'
                });
            }
            // End::MediaMenu
            
            // Start::Materialerfassung (402)
			var MaterialerfassungAvailable = DigiWebApp.SettingsController.featureAvailable('402');
            
//	            // disable this Feature on small devices (except if override active)
//	            if ( ($(window).width()<=480) && (DigiWebApp.SettingsController.getSetting('treatAllAsTablet') === false) ) {
//	            	MaterialerfassungAvailable = false;
//	            }
            
            if ( (MaterialerfassungAvailable) && !ChefToolOnly ) {
            	//if (DigiWebApp.SettingsController.globalDebugMode) console.log("enabling Feature 402 (Materialerfassung)");
                items.push({
                      label: M.I18N.l('materialPickUp')
                    , icon: '48x48_plain_shelf.png'
                    , id: 'materialerfassung'
                });
            }
            // End::Materialerfassung
            
            // Start::Tagescheckliste (407)
			var TageschecklisteAvailable = DigiWebApp.SettingsController.featureAvailable('407');
            
            if ( (TageschecklisteAvailable) && !ChefToolOnly ) {
            	//if (DigiWebApp.SettingsController.globalDebugMode) console.log("enabling Feature 407 (Tagescheckliste)");
                items.push({
                      label: M.I18N.l('dailyChecklist')
                    , icon: '48x48_plain_pda_write.png'
                    , id: 'tagescheckliste'
                });
            }
            // End::Tagescheckliste
            
            // Start::Anwesenheitsliste (408)
            var AnwesenheitslisteAvailable = DigiWebApp.SettingsController.featureAvailable('408');
            
            if (AnwesenheitslisteAvailable) {
            	//if (DigiWebApp.SettingsController.globalDebugMode) console.log("enabling Feature 408 (Anwesenheitsliste)");
                items.push({
                      label: M.I18N.l('Anwesenheitsliste')
                    , icon: '48x48_plain_text_code.png'
                    , id: 'anwesenheitsliste'
                });	
            }
            // End::Anwesenheitsliste

            // Start::Bautagebuch (412)
            var BautagebuchAvailable = DigiWebApp.SettingsController.featureAvailable('412');
            
            if (BautagebuchAvailable) {
            	//if (DigiWebApp.SettingsController.globalDebugMode) console.log("enabling Feature 412 (Bautagebuch)");
                items.push({
                      label: M.I18N.l('Bautagebuch')
                    , icon: '48x48_plain_graphics-tablet.png'
                    , id: 'bautagebuch'
                });	
            }
            // End::Bautagebuch

            // Start::Terminliste (423)
            var TerminlisteAvailable = DigiWebApp.SettingsController.featureAvailable('423');
            if (TerminlisteAvailable) {
                items.push({
                      label: M.I18N.l('TerminlisteLong')
                    , icon: '48x48_plain_book_blue_find.png'
                    , id: 'Terminliste'
                });	
            }
            // End::Terminliste

            // Start::FestePauseStornieren (425)
            var FestePauseStornierenAvailable = DigiWebApp.SettingsController.featureAvailable('425');
            if (FestePauseStornierenAvailable) {
                items.push({
                      label: M.I18N.l('FestePauseStornieren')
                    , icon: '48x48_plain_note_delete.png'
                    , id: 'FestePauseStornieren'
                });	
            }
            // End::FestePauseStornieren
            
            // finish the Dashboard with the Settings-, Update- and the Info-Page
            items.push({
                  label: M.I18N.l('settings')
                , icon: '48x48_plain_gears.png'
                , id: 'settings'
            });
            
            items.push({
                label: M.I18N.l('info'),
                icon: '48x48_plain_about.png',
                id: 'info'
            });
            
            /*items.push({
                label: "ButtonMenu",
                icon: 'icon_info.png',
                id: 'buttonMenu'
            });*/

            this.set('items', items);
            this.set('itemsWithoutUpdate', items);
            DigiWebApp.DashboardPage.needsUpdate = false;
            //DigiWebApp.DashboardPage.content.list.renderUpdate();
        }
    	
    	if (window.newAppVersionAvailable) {
    		var itemsWithUpdate = this.itemsWithoutUpdate;
            // add update-button if timeouthappened (not on a mobile device) and applicationCache-available
    		itemsWithUpdate.push({
                  label: M.I18N.l('updateApplication')
                , icon: '48x48_plain_replace2.png'
                , id: 'updateApplication'
            });
            this.set('items', itemsWithUpdate);
    	} else {
            this.set('items', this.itemsWithoutUpdate);
    	}

        var list = M.ViewManager.getView('dashboard', 'list');
        if (list) {
            $('#' + list.id).find('li').each(function() {
                $(this).removeClass('selected');
            });
        }
    }

    , itemSelected: function(id, m_id) {
    	try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
    	var that = this;
        if (this.latestId) {
            $('#' + this.latestId).removeClass('selected');
        }
        $('#' + id).addClass('selected');
        
//        try {
//        	var myImgId = new Number(id.substring(2)) + 1;
//	        $('#m_' + myImgId).transition({
//	            perspective: '20px',
//	            rotateX: '+=360deg'
//	        }, 500);
//        } catch(e) { console.error(e); }

        this.latestId = id;

        if (m_id && typeof(this[m_id]) === 'function') {
            this[m_id]();
        } else {
        	try {
            	var myContentBindingList = DigiWebApp.ButtonDashboardPage.content.list.contentBinding.target[DigiWebApp.ButtonDashboardPage.content.list.contentBinding.property];
            	//var myMethod = "";
            	_.each(myContentBindingList, function(item) {
            		var button = $('#' + id);
            	    var buttonHtml = button.html();
            	    var thatFunction = that[item.id];
            		if (item.label === buttonHtml && typeof(thatFunction) === 'function') {
            			thatFunction();
            		}
            	});
        	} catch(e2) {}
        }
    }
    
    , bookTime: function() {
        DigiWebApp.NavigationController.toBookTimePageTransition(YES);
    }

    , closingTime: function() {
		$('#' + DigiWebApp.DashboardPage.content.list.selectedItem.id).removeClass('selected');
		DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('bucheFeierabend'));
		setTimeout(DigiWebApp.BookingController.closeDay,100);
    }

    , dataTransfer: function(isClosingDay) {
		$('#' + DigiWebApp.DashboardPage.content.list.selectedItem.id).removeClass('selected');
		
    	var startTransfer = NO;
    	if (DigiWebApp.DashboardController.lastTimestampDatatransfer !== null) {
    		var timestampNow = D8.now().getTimestamp();
    		if (timestampNow - DigiWebApp.DashboardController.lastTimestampDatatransfer > parseInt(DigiWebApp.SettingsController.getSetting('datatransfer_min_delay'))) {
    			startTransfer = YES;
    			$('#' + DigiWebApp.DashboardPage.content.list.selectedItem.id).addClass('green');
    			var t = window.setTimeout(function(){ window.clearTimeout(t); $('#' + DigiWebApp.DashboardPage.content.list.selectedItem.id).removeClass('green'); }, 500);
    		} else {
    			// evtl. Fehlermeldung, dass noch eine Datenübertragung läuft bzw. nur alle 30 Sekunden eine Datenübertragung gestartet werden darf
    			$('#' + DigiWebApp.DashboardPage.content.list.selectedItem.id).addClass('red');
    			var t = window.setTimeout(function(){ window.clearTimeout(t); $('#' + DigiWebApp.DashboardPage.content.list.selectedItem.id).removeClass('red'); }, 500);
    		}
    	}
    	if (startTransfer === YES || DigiWebApp.DashboardController.lastTimestampDatatransfer === null) {
    		DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('starteDatenuebertragung'));
    		DigiWebApp.DashboardController.set("lastTimestampDatatransfer", D8.now().getTimestamp());
	        var bookings = DigiWebApp.Booking.find();
	        if (bookings.length > 0) {
	    	    var finishBooking = function() {
	    	    	DigiWebApp.BookingController.sendBookings(isClosingDay, true);
	    	    };
	        	if (DigiWebApp.SettingsController.featureAvailable('417') && DigiWebApp.SettingsController.getSetting("ServiceApp_ermittleGeokoordinate")) {
					var pollBooking = function() {
						if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("polling for bookinglocations");
						// getBookings mit timeout
						var checkForOK = function(datensaetze) {
							if (DigiWebApp.SettingsController.getSetting("debug"))  console.log(datensaetze.length + " Datensätze empfangen");
							_.each(datensaetze, function(datensatzObj) {
								try {
									if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("speichere gepollten Datensatz " + datensatzObj.m_id);
									var modelBooking = _.find(DigiWebApp.Booking.find(), function(b) { return b.m_id === datensatzObj.m_id; } );
									var datensatz = datensatzObj.record;
									if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("modelBooking: ", modelBooking);
									if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("datensatz: ", datensatz);
									modelBooking.set("latitude", datensatz.latitude);
									modelBooking.set("latitude_bis", datensatz.latitude_bis);
									modelBooking.set("longitude", datensatz.longitude);
									modelBooking.set("longitude_bis", datensatz.longitude_bis);
									modelBooking.set("ermittlungsverfahrenBis", datensatz.ermittlungsverfahren_bis);
									modelBooking.set("ermittlungsverfahrenVon", datensatz.ermittlungsverfahren);
									modelBooking.set("genauigkeitBis", datensatz.genauigkeit_bis);
									modelBooking.set("genauigkeitVon", datensatz.genauigkeit);
									modelBooking.set("gps_zeitstempelBis", datensatz.gps_zeitstempel_bis);
									modelBooking.set("gps_zeitstempelVon", datensatz.gps_zeitstempel);
									modelBooking.set("ServiceApp_Status", datensatz.status);
									modelBooking.save();
									if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("datensatz " + datensatzObj.m_id + " gespeichert");
								} catch(exNotFound) {
									if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("datensatz " + datensatzObj.m_id + " nicht gefunden");
								}
							});
							finishBooking();
						};
						var idsToPoll = [];
						if (DigiWebApp.BookingController.currentBooking !== null
						&& (   typeof(DigiWebApp.BookingController.currentBooking.get("timeStampEnd")) !== "undefined"
						    && parseInt(DigiWebApp.BookingController.currentBooking.get("timeStampEnd")) > 0)
						) { idsToPoll.push(DigiWebApp.BookingController.currentBooking.m_id); }
						if (DigiWebApp.BookingController.currentBookingClosed !== null) { idsToPoll.push(DigiWebApp.BookingController.currentBookingClosed.m_id); }
						//alert(idsToPoll);
						DigiWebApp.ServiceAppController.pollBookings(idsToPoll, checkForOK, finishBooking, DigiWebApp.SettingsController.getSetting('GPSTimeOut'));
					};
					pollBooking();
	        	} else {
	        		finishBooking();
	        	}
	        } else if (DigiWebApp.SettingsController.featureAvailable("402") && !DigiWebApp.BookingController.currentBooking) {
            	// Datenübertragung für Materialerfassung-only und Feierabend
          	  sendBautageberichtFunc = function() {
            	  			DigiWebApp.BautagebuchZusammenfassungController.load(DigiWebApp.BautagebuchZusammenfassungController.item);
		    				DigiWebApp.BautagebuchDatenuebertragungController.senden(
		    						DigiWebApp.BautagebuchZusammenfassungController.item
		    					    , function(msg) {
		    							DigiWebApp.BautagebuchBautageberichtDetailsController.deleteBautagesbericht(function() {DigiWebApp.ApplicationController.startsync(YES);}, function() {DigiWebApp.ApplicationController.startsync(YES);}, YES);
		    						}
		    						, function(xhr,err) {
		    							DigiWebApp.ApplicationController.startsync(YES)
		    						}
		    				);
            	  	}
            	  	
          		DigiWebApp.BautagebuchBautageberichteListeController.init();
          		var bautagesberichte = DigiWebApp.BautagebuchBautagesbericht.find();
          		var matBautagesbericht = null;
          		_.each(bautagesberichte, function(bautagesbericht){
          			if (bautagesbericht.get('bautagesberichtTyp') == "<materialerfassung_only>") {
          				matBautagesbericht = bautagesbericht;
          			}
          		});
          		
          		if (matBautagesbericht) {
          			DigiWebApp.BautagebuchBautageberichtDetailsController.load(matBautagesbericht);
              	  	DigiWebApp.BautagebuchZusammenfassungController.load(DigiWebApp.BautagebuchBautageberichtDetailsController.item);
              	  	DigiWebApp.BautagebuchZusammenfassungController.finish(sendBautageberichtFunc);
          		} else {
          			DigiWebApp.ApplicationController.startsync(YES)
          		}

	        } else {
	            // calling startsync here
	            DigiWebApp.ApplicationController.startsync(YES);
	        }
    	}
    }

    , settings: function() {
        DigiWebApp.NavigationController.toSettingsPasswordPageTransition();
    }

    , timeData: function() {
        DigiWebApp.NavigationController.toTimeDataPageTransition();
    }

    , handOrder: function() {
        DigiWebApp.NavigationController.toHandOrderPageTransition();
    }

    , info: function() {
        DigiWebApp.NavigationController.toInfoPageTransition();
    }
        
    , demomedia: function() {
        DigiWebApp.NavigationController.toDemoMediaPageTransition();
    }
    
    , media: function() {
        DigiWebApp.NavigationController.toMediaListPageTransition();
    }
    
    , orderInfo: function() {
	    DigiWebApp.NavigationController.toOrderInfoPageTransition();
	}
	
	, updateApplication: function() {
		if (this.appCacheUpdateReady()) {
			window.applicationCache.swapCache();
			if (typeof(localStorage) !== "undefined") {
				localStorage.setItem("reloadAppOneMoreTime", "true");
			}
			if (typeof(navigator.app) !== "undefined") {
				if (typeof(location.origin) !== "undefined") {
					navigator.app.loadUrl(location.origin + location.pathname);					
				} else {
					navigator.app.loadUrl(location.protocol + '//' + location.pathname);
				}
			} else {
				window.location.reload();
			}
		} else {
			DigiWebApp.ApplicationController.nativeAlertDialogView({
    			  title: M.I18N.l('noApplicationUpdateAvailable')
    			, message: M.I18N.l('noApplicationUpdateAvailableMsg')
    		});
		}
	}
	
	, materialerfassung: function() {
		DigiWebApp.BautagebuchBautageberichteListeController.init();
		var bautagesberichte = DigiWebApp.BautagebuchBautagesbericht.find();
		var matBautagesbericht = null;
		_.each(bautagesberichte, function(bautagesbericht){
			if (bautagesbericht.get('bautagesberichtTyp') == "<materialerfassung_only>") {
				matBautagesbericht = bautagesbericht;
			}
		});
		if (matBautagesbericht) {
			DigiWebApp.BautagebuchBautageberichtDetailsController.load(matBautagesbericht);
		} else {
			// erzeuge dummy-bautagesbericht
			DigiWebApp.BautagebuchBautageberichteListeController.neu("<materialerfassung_only>", YES);
		}
		var myBautagesbericht = DigiWebApp.BautagebuchBautageberichtDetailsController.get("item");

		myBautagesbericht.set("orderName", M.I18N.l('materialPickUp'));
		DigiWebApp.BautagebuchBautageberichtDetailsController.set("auftragsName", myBautagesbericht.get("orderName"));

		myBautagesbericht.set("bautagesberichtTyp", "<materialerfassung_only>");
		DigiWebApp.BautagebuchBautageberichtDetailsController.set("bautagesberichtTyp", myBautagesbericht.get("bautagesberichtTyp"));

		myBautagesbericht.save();
		DigiWebApp.BautagebuchBautageberichtDetailsController.load(myBautagesbericht);
		DigiWebApp.BautagebuchBautageberichteListeController.init();
      	DigiWebApp.BautagebuchBautageberichtDetailsController.save(DigiWebApp.BautagebuchMaterialienListeController.neu, function(){}, YES);
	}
	
	, tagescheckliste: function() {
	    DigiWebApp.NavigationController.toStudieChecklistePage();
	}
        
	, anwesenheitsliste: function() {
	    DigiWebApp.NavigationController.toAnwesenheitslistePageTransition();
	}
        
	, bautagebuch: function() {
		DigiWebApp.NavigationController.startBautagebuch();
	}
	
	, buttonMenu: function() {
		DigiWebApp.NavigationController.toButtonsDashboardPageFlipTransition();
	}
	
	, Terminliste: function() {
		DigiWebApp.TerminlisteController.datum = D8.create().format("dd.mm.yyyy");
		DigiWebApp.NavigationController.toTerminlistePage();
	}
	
	, FestePauseStornieren: function() {
		DigiWebApp.NavigationController.toFestePauseStornierenPage();
	}
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: AudioController
// ==========================================================================
// manuell var-checked
DigiWebApp.DemoAudioController = M.Controller.extend({

	/*
	 * http://docs.phonegap.com/en/1.0.0/phonegap_media_media.md.html
	 */
	
      myAudioObject: {}
    , myTimeStamp: null
    , myFilename: null
    , myState: null

    /*
    * Sample function
    * To handle the first load of a page.
    */
    , init: function(isFirstLoad) {
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('init');
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('this.myState = ' + this.myState);
		if (isFirstLoad) {
            /* do something here, when page is loaded the first time. */
        }
        /* do something, for any other load. */

		// rewire audioIcon for record
    	DigiWebApp.DemoAudioPage.content.grid.button.events = { tap: { action: DigiWebApp.DemoAudioController.recordAudio } };
    	DigiWebApp.DemoAudioPage.content.grid.button.registerEvents();
    	DigiWebApp.DemoAudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.DemoAudioController.recordAudio } };
		//DigiWebApp.DemoAudioPage.content.audioIcon.events = { tap: { target: DigiWebApp.DemoAudioController, action: 'recordAudio' } };
    	DigiWebApp.DemoAudioPage.content.audioIcon.registerEvents();
    	//DigiWebApp.DemoAudioPage.content.audioIcon.value = 'file:///android_asset/www/theme/images/icon_record.png';
    	//DigiWebApp.DemoAudioPage.content.audioIcon.renderUpdate();
    	document.getElementById(DigiWebApp.DemoAudioPage.content.audioIcon.id).src = 'theme/images/icon_record.png';

    	
        this.myTimeStamp = M.Date.create(new Date()).format('yymmddHHMMss');
        this.myFilename = 'DIGI-WebApp-recording-' + this.myTimeStamp + '.wav';
        this.myState = null;
    	
        DigiWebApp.DemoAudioController.myAudioObject = new Media(this.myFilename, this.onSuccess, this.onError, this.mediaStatus, this.mediaPosition);
        if (DigiWebApp.SettingsController.globalDebugMode) console.log(this.myFilename);
        if (DigiWebApp.SettingsController.globalDebugMode) console.log(DigiWebApp.DemoAudioController.myAudioObject);
    	
    }

    , mediaStatus: function(status) {
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('mediaStatus: ' + status);
    }
    
    , mediaPosition: function(position) {
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('mediaPosition: ' + position);
    }
    
    , onSuccess: function() {
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('onSuccess');
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('this.myState = ' + this.myState);
		switch (this.myState) {
			case 'play':
				
				// rewire audioIcon for stopPlayback
				DigiWebApp.DemoAudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.DemoAudioController.stopPlayback } };
				DigiWebApp.DemoAudioPage.content.audioIcon.registerEvents();
				document.getElementById(DigiWebApp.DemoAudioPage.content.audioIcon.id).src = 'theme/images/icon_stop.png';
				
				break;
				
			case 'record':
				
				// rewire audioIcon for stopRecord
		    	DigiWebApp.DemoAudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.DemoAudioController.stopRecord } };
		    	DigiWebApp.DemoAudioPage.content.audioIcon.registerEvents();
		    	document.getElementById(DigiWebApp.DemoAudioPage.content.audioIcon.id).src = 'theme/images/icon_stop.png';

		    	// rewire digi-button to setup a new recording
		    	DigiWebApp.DemoAudioPage.content.grid.button.events = { tap: { action: DigiWebApp.DemoAudioController.init } };
		    	DigiWebApp.DemoAudioPage.content.grid.button.registerEvents();

		    	break;
		    	
			case 'stop':
				
				// rewire audioIcon for playbackAudio
				DigiWebApp.DemoAudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.DemoAudioController.playbackAudio } };
				DigiWebApp.DemoAudioPage.content.audioIcon.registerEvents();
				document.getElementById(DigiWebApp.DemoAudioPage.content.audioIcon.id).src = 'theme/images/icon_playbackAudio.png';
				
				break;
				
			default:

				// rewire audioIcon for playbackAudio
				DigiWebApp.DemoAudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.DemoAudioController.playbackAudio } };
				DigiWebApp.DemoAudioPage.content.audioIcon.registerEvents();
				document.getElementById(DigiWebApp.DemoAudioPage.content.audioIcon.id).src = 'theme/images/icon_playbackAudio.png';

				break;
		}
    }
    
    , onError: function(error) {
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('onError');
    	console.log('code: '    + error.code    + '\n' + 'message: ' + error.message + '\n');
    	console.log('Filename: ' + this.myFilename);
    	
    	// rewire audioIcon for playbackAudio
    	DigiWebApp.DemoAudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.DemoAudioController.playbackAudio } };
    	DigiWebApp.DemoAudioPage.content.audioIcon.registerEvents();
    	document.getElementById(DigiWebApp.DemoAudioPage.content.audioIcon.id).src = 'theme/images/icon_playbackAudio.png';

    	// rewire digi-button to setup a new recording
    	DigiWebApp.DemoAudioPage.content.grid.button.events = { tap: { action: DigiWebApp.DemoAudioController.init } };
    	DigiWebApp.DemoAudioPage.content.grid.button.registerEvents();
    }
    
    , recordAudio: function() {
    	this.myState = 'record';
    	DigiWebApp.DemoAudioController.myAudioObject.startRecord();

		// rewire audioIcon for stopRecord
    	DigiWebApp.DemoAudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.DemoAudioController.stopRecord } };
    	DigiWebApp.DemoAudioPage.content.audioIcon.registerEvents();
    	document.getElementById(DigiWebApp.DemoAudioPage.content.audioIcon.id).src = 'theme/images/icon_stop.png';

    	// rewire digi-button to setup a new recording
    	DigiWebApp.DemoAudioPage.content.grid.button.events = { tap: { action: DigiWebApp.DemoAudioController.init } };
    	DigiWebApp.DemoAudioPage.content.grid.button.registerEvents();

		if (DigiWebApp.SettingsController.globalDebugMode) console.log('recordAudio');
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('this.myState = ' + this.myState);
    }
   
    , stopRecord: function() {
    	this.myState = 'stop';
    	DigiWebApp.DemoAudioController.myAudioObject.stopRecord();

    	// rewire audioIcon for playbackAudio
    	DigiWebApp.DemoAudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.DemoAudioController.playbackAudio } };
    	DigiWebApp.DemoAudioPage.content.audioIcon.registerEvents();
    	document.getElementById(DigiWebApp.DemoAudioPage.content.audioIcon.id).src = 'theme/images/icon_playbackAudio.png';

    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('stopRecord');
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('this.myState = ' + this.myState);
    }
        
    , playbackAudio: function() {
    	this.myState = 'play';
    	DigiWebApp.DemoAudioController.myAudioObject.play();

		// rewire audioIcon for stopPlayback
		DigiWebApp.DemoAudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.DemoAudioController.stopPlayback } };
		DigiWebApp.DemoAudioPage.content.audioIcon.registerEvents();
		document.getElementById(DigiWebApp.DemoAudioPage.content.audioIcon.id).src = 'theme/images/icon_stop.png';

		if (DigiWebApp.SettingsController.globalDebugMode) console.log('playbackAudio');
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('this.myState = ' + this.myState);
    }
    
    , stopPlayback: function() {
    	this.myState = 'stop';
    	DigiWebApp.DemoAudioController.myAudioObject.stop();
    	
		// rewire audioIcon for playbackAudio
    	DigiWebApp.DemoAudioPage.content.audioIcon.events = { tap: { action: DigiWebApp.DemoAudioController.playbackAudio } };
    	DigiWebApp.DemoAudioPage.content.audioIcon.registerEvents();
    	document.getElementById(DigiWebApp.DemoAudioPage.content.audioIcon.id).src = 'theme/images/icon_playbackAudio.png';

    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('stopPlayback');
    	if (DigiWebApp.SettingsController.globalDebugMode) console.log('this.myState = ' + this.myState);
    }
    
});

//// ==========================================================================
//// The M-Project - Mobile HTML5 Application Framework
//// Generated with: Espresso 
////
//// Project: DigiWebApp
//// Controller: CameraController
//// ==========================================================================
//
//DigiWebApp.DemoCameraController = M.Controller.extend({
//
//    , init: function(isFirstLoad) {
//		
//        if(isFirstLoad) {
//            /* do something here, when page is loaded the first time. */
//        }
//        /* do something, for any other load. */
//        if (       typeof navigator.device !== 'undefined' 
//        		&& typeof navigator.device.capture !== 'undefined' 
//        		&& typeof navigator.device.capture.captureImage !== 'undefined'
//        	) {
//        	// camera probably available
//        	$('#' + DigiWebApp.DemoCameraPage.content.takePictureGrid.id).show();
//        } else {
//        	$('#' + DigiWebApp.DemoCameraPage.content.takePictureGrid.id).hide();
//        }
//    }
//      
//    , takePicture: function() {
//    		navigator.camera.getPicture(
//    			  DigiWebApp.DemoCameraController.cameraSuccessBase64
//    			, DigiWebApp.DemoCameraController.cameraError
//    			, { 
//    				  quality: 40
//    			//	, allowEdit: true
//    				, destinationType: navigator.camera.DestinationType.DATA_URL
//    			//	, destinationType: navigator.camera.DestinationType.FILE_URI
//    			//	, sourceType: navigator.camera.PictureSourceType.CAMERA 
//    			  }
//    		);    	
//    }
//        	
//    , myImageData: null
//    , myImageObj: null
//    , cameraSuccessBase64: function(imageData) {
//        //alert("success");
//    	//DigiWebApp.DemoCameraController.myImageData = imageData;
//        var image = document.getElementById(DigiWebApp.DemoCameraPage.content.image.id);
//        image.src = 'data:' + DigiWebApp.ApplicationController.CONSTImageFiletype + ',' + imageData;
//
//        //DigiWebApp.DemoCameraController.myImageObj = new Image();
//        //DigiWebApp.DemoCameraController.myImageObj.src = 'data:' + DigiWebApp.ApplicationController.CONSTImageFiletype + ',' + imageData;
//    }
//
//    , myImageURI: null
//    , cameraSuccessURI: function(imageURI) {
//        //alert("success");
//    	//DigiWebApp.DemoCameraController.myImageURI = imageURI;
//        var image = document.getElementById(DigiWebApp.DemoCameraPage.content.image.id);
//        image.src = imageURI;
//    }
//    
//    , cameraError: function(mymessage) {
//        DigiWebApp.ApplicationController.nativeAlertDialogView({
//            title: 'ERROR',
//            message: mymessage
//        });
//    }
//    
//});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: MediaPageController
// ==========================================================================
// manuell var-checked
DigiWebApp.DemoMediaPageController = M.Controller.extend({

      events: {
		pagebeforeshow: {
    		  target: this
    		, action: 'init'
		}
	}

    , items: null

    , latestId: null

    , init: function(isFirstLoad) {
        if (DigiWebApp.DemoMediaPage.needsUpdate) {
            var items = [];
                        
//            // Start::TakePicture (400)
//            if (DigiWebApp.SettingsController.featureAvailable('400')) {
//            	if (DigiWebApp.SettingsController.globalDebugMode) console.log("enabling Feature 400 (TakePicture)");
//                items.push({
//                    label: M.I18N.l('takePicture'),
//                    icon: 'icon_takePicture.png',
//                    id: 'camera'
//                });
//            }
//            // End::TakePicture

            // Start::RecordAudio (401)
            if (DigiWebApp.SettingsController.featureAvailable('401')) {
            	if (DigiWebApp.SettingsController.globalDebugMode) console.log("enabling Feature 401 (RecordAudio)");
                items.push({
                    label: M.I18N.l('recordAudio'),
                    icon: 'icon_recordAudio.png',
                    id: 'audio'
                });
            }
            // End::RecordAudio

            this.set('items', items);
            DigiWebApp.DemoMediaPage.needsUpdate = false;
        }

        var list = M.ViewManager.getView('mediaPage', 'list');
        if (list) {
            $('#' + list.id).find('li').each(function() {
                $(this).removeClass('selected');
            });
        }
    }

    , itemSelected: function(id, m_id) {
        if (this.latestId) {
            $('#' + this.latestId).removeClass('selected');
        }
        $('#' + id).addClass('selected');

        this.latestId = id;

        if (m_id && typeof(this[m_id]) === 'function') {
            this[m_id]();
        }
    }

    , camera: function() {
        DigiWebApp.NavigationController.toDemoCameraPageTransition();
    }

    , audio: function() {
        DigiWebApp.NavigationController.toDemoAudioPageTransition();
    }
    
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: EditPicturePageController
// ==========================================================================
// manuell var-checked
DigiWebApp.EditPicturePageController = M.Controller.extend({

  // MediaFile das bearbeitet werden soll
	myMediaFile: null 
	
  // arrays for selection lists
  , orders: null
  , positions: null
  , activities: null

  , selections: {
        order: null
      , position: null
      , activity: null
  }

  , deleteMediaFileFromLocalStorage: function() {
	  var that = DigiWebApp.EditPicturePageController;
	  var myMediaFile = that.myMediaFile;
	  //console.log(myMediaFile);
	  try {
		  myMediaFile.del();
	  } catch(e2) { console.error(e2); }
	  DigiWebApp.ApplicationController.DigiLoaderView.hide();
	  DigiWebApp.NavigationController.backToMediaListPageTransition();
  }

  , init: function(isFirstLoad) {
	  var that = this;
		
      if (isFirstLoad) {
          /* do something here, when page is loaded the first time. */
      }

	  $('#' + DigiWebApp.EditPicturePage.content.remarkInput.id).val("");
	  M.ViewManager.getView('editPicturePage', 'remarkInput').value = "";
	  $('#' + DigiWebApp.EditPicturePage.content.remarkInput.id).val(that.myMediaFile.get('remark'));
	  M.ViewManager.getView('editPicturePage', 'remarkInput').value = that.myMediaFile.get('remark');

      var image = document.getElementById(DigiWebApp.EditPicturePage.content.image.id);
      image.src = '';
      DigiWebApp.EditPicturePageController.myImageObj = new Image();
      that.myMediaFile.readFromFile(function(fileContent){
			if (fileContent && (fileContent !== "")) {
			      var image = document.getElementById(DigiWebApp.EditPicturePage.content.image.id);
			      image.src = fileContent;
			}
	  }, function() {
	      var image = document.getElementById(DigiWebApp.EditPicturePage.content.image.id);
	      image.src = '';
	  });

      /* do something, for any other load. */
      
      $('#' + DigiWebApp.EditPicturePage.content.savePictureGrid.id).show();
      DigiWebApp.EditPicturePageController.setSelectionByMediaFile();
	  DigiWebApp.ApplicationController.DigiLoaderView.hide();
}

  , setSelectionByMediaFile: function() {
	  var that = this;
      
      // get all items from local storage
      var orders = DigiWebApp.HandOrder.findSorted().concat(DigiWebApp.Order.findSorted()); // we need to check handOrders also
      var positions = DigiWebApp.Position.findSorted();
      var activities = DigiWebApp.EditPicturePageController.getActivities();

      // get the ids from the current MediaFile
      var orderId    = that.myMediaFile.get('orderId');
      var positionId = that.myMediaFile.get('positionId');
      var activityId = that.myMediaFile.get('activityId');
      
      /**
       * ORDERS
       */
      var orderFound = NO;
      var orderArray = null;
      var orderTempArray = _.map(orders, function(order) {
   		  var obj = null;
       	  if (order) {
	          if(order.get('id') == orderId) {
	              obj = { label: order.get('name'), value: order.get('id'), isSelected: YES };
	              orderFound = YES;
	          } else {
	        	  obj = { label: order.get('name'), value: order.get('id') };
	          }
       	  }
          return obj;
      });
      orderTempArray = _.compact(orderTempArray);
      // push "Bitte wählen Option"
      orderTempArray.push({label: M.I18N.l('selectSomething'), value: '0'});

      if (orderFound === NO) {
	      var orderTemp2Array = _.map(orderTempArray, function(order) {
	       	  var obj = null;
	       	  if (order) {
		          if(order.value == orderId) {
		              obj = { label: order.label, value: order.value, isSelected: YES };
		          } else {
		        	  obj = { label: order.label, value: order.value };
		          }
	       	  }
	          return obj;
	      });
	      orderArray = orderTemp2Array;
      } else {
    	  orderArray = orderTempArray;
      }
      orderArray = _.compact(orderArray);

      
      /**
       * POSITIONS
       */
      var positionArray = _.map(positions, function(pos) {
    	if (pos) {
          if (parseInt(pos.get('orderId')) === parseInt(orderId)) {
          	var obj = null;
              if (pos.get('id') == positionId) {
                  obj = { label: pos.get('name'), value: pos.get('id'), isSelected: YES };
              } else {
                  obj = { label: pos.get('name'), value: pos.get('id') };
              }
              return obj;
            }
          return null;
        }
      });
      positionArray = _.compact(positionArray);
      // push "Bitte wählen Option"
      positionArray.push({label: M.I18N.l('selectSomething'), value: '0'});


      /**
       * ACTIVITIES
       */
      var workPlans = _.select(DigiWebApp.WorkPlan.find(), function(wp) {
          if (wp) return wp.get('id') == positionId;
      });

      var itemSelected = NO;

      /* if a workplan exists, only use those activities that are in the workplan */
      if (workPlans.length > 0) {
          activities = this.getActivitiesFromWorkplan(workPlans[0]);
      } else {
          activities = DigiWebApp.EditPicturePageController.getActivities();
      }

      var activityArray = _.map(activities, function(act) {
      	if ( typeof(act) === "undefined" ) {
      		console.log("UNDEFINED ACTIVITY");
      		return null;
      	} else {
      		var obj = null;
      		if(act.get('id') == activityId) {
      			obj = { label: act.get('name'), value: act.get('id'), isSelected: YES };
      			//console.log("ACTIVITY " + i + " = " + act.get('name') + " in setSelectionByMediaFile isSelected");
      			itemSelected = YES;
      		} else {
      			obj = { label: act.get('name'), value: act.get('id') };
      			//console.log("ACTIVITY " + i + " = " + act.get('name') + " in setSelectionByMediaFile");
      		}
      		return obj;
      	}
      });
      activityArray = _.compact(activityArray);
      activityArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});

      this.resetSelection();
      // set selection arrays to start content binding process
      this.set('orders', orderArray);
      this.set('positions', positionArray);
      this.set('activities', activityArray);
  }

  , setPositions: function() {
      var orderId = M.ViewManager.getView('editPicturePage', 'order').getSelection(YES).value;
      if (!orderId) {
          return;
      }
//      M.ViewManager.getView('editPicturePage', 'position').removeSelection(); /* to avoid bug of not setting selected... */
      var positions = DigiWebApp.Position.findSorted();

      var i = 0;
      positions = _.map(positions, function(pos) {
    	  if (pos) {
	          if (parseInt(pos.get('orderId')) === parseInt(orderId)) {
	              var obj = { label: pos.get('name'), value: pos.get('id') };
	              if(i === 0) {
	                  obj.isSelected = YES;
	              }
	              i += 1;
	              return obj;
	          }
	          return null;
    	  }
      });
      positions = _.compact(positions);/* remove falsy values from positions with _.compact() */

      if (positions.length < 1) {
          positions.push({label: M.I18N.l('noData'), value: '0'});
      }

      M.ViewManager.getView('editPicturePage', 'position').resetSelection();
      this.set('positions', positions);
      this.setActivities(YES);

      this.saveSelection();
  }

  /* only set those activities that are related to the chosen position */
  , setActivities: function(checkForWorkPlan) {
      var posId = null;

      if (checkForWorkPlan) {
          var posObj = M.ViewManager.getView('editPicturePage', 'position').getSelection(YES);
          if(posObj) {
              posId = posObj.value;
          }
      }

      var activities = [];
      //var workPlans = DigiWebApp.WorkPlan.find({query: 'id=' + posId}); // pre TMP-1.0
		//console.log("posId " + posId);
//      var workPlans = DigiWebApp.WorkPlan.find({ query: { 
//            identifier: 'id' 
//          , operator: '=' 
//          , value: posId 
//      }});
      var workPlans = []; 
      _.each(DigiWebApp.WorkPlan.find(),function(wp){
      	if (parseInt(wp.get("id")) === parseInt(posId)) workPlans.push(wp);
      });
      var i = 0;

      /* if a workplan exists, only use those activities that are in the workplan */
		//console.log("posId " + posId + ", workPlans.length " + workPlans.length);
      if (workPlans.length === 1) {
          activities = this.getActivitiesFromWorkplan(workPlans[0]);
      } else {
          activities = DigiWebApp.EditPicturePageController.getActivities();
      }

      var currentBookingActivityId = -1;
//      if ( typeof(DigiWebApp.BookingController.currentBooking) !== "undefined" && DigiWebApp.BookingController.currentBooking !== null ) { 
//      	currentBookingActivityId = DigiWebApp.BookingController.currentBooking.get('activityId');
//      }
		var currentBookingActivitySelectable = false;
		_.each(activities, function(act) {
      	if ( typeof(act) === "undefined" ) {
      		console.log("UNDEFINED ACTIVITY");
      		return null;
      	} else {
				if ( act.get('id') == currentBookingActivityId ) { currentBookingActivitySelectable = true; }
			}
		});
		
      activities = _.map(activities, function(act) {
      	if ( typeof(act) === "undefined" ) {
      		console.log("UNDEFINED ACTIVITY");
      		return null;
      	} else {
      		var obj = null;
      		if (currentBookingActivitySelectable) {
      			obj = { label: act.get('name'), value: act.get('id'), isSelected: act.get('id') == currentBookingActivityId ? YES : NO };
      		} else {
      			obj = { label: act.get('name'), value: act.get('id'), isSelected: i === 0 ? YES : NO };
      		}
      		//console.log("ACTIVITY " + i + " = " + act.get('name') + " in setActivities");
              i += 1;
              return obj;
      	}
      });

      activities = _.compact(activities);

      // new to show this when closing day is pressed (corresponds to a reset)
      if (activities.length > 0) {
          activities.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:NO});
      } else {
          activities.push({label: M.I18N.l('noData'), value: '0'});
      }


      M.ViewManager.getView('editPicturePage', 'activity').resetSelection();
      this.set('activities', activities);

      this.saveSelection();
  }

  , initSelection: function() {
     var orders = DigiWebApp.HandOrder.findSorted().concat(DigiWebApp.Order.findSorted()); // we need to check handOrders also
     var positions = DigiWebApp.Position.findSorted();
     var activities = DigiWebApp.EditPicturePageController.getActivities();

     /**
      * ORDERS
      */

     // create order selection
     var orderArray = [];
     if (orders) {
         orderArray = _.map(orders, function(order) {
             if (order) return { label: order.get('name'), value: order.get('id') };
         });
     }
     // push "Bitte wählen Option"
     orderArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:YES});

     /**
      * POSITIONS
      */

     // create position selection
     var positionArray = [];
     if (positions) {
         positionArray = _.map(positions, function(pos) {
             if (pos) return { label: pos.get('name'), value: pos.get('id') };
         });
     }
     // push "Bitte wählen Option"
     positionArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:YES});

     /**
      * ACTIVITIES
      */
     var activityArray = [];
     if (activities) {
          activityArray = _.map(activities, function(act) {
          	if ( typeof(act) === "undefined" ) {
          		console.log("UNDEFINED ACTIVITY");
          		return null;
          	} else {
          		return { label: act.get('name'), value: act.get('id') };
          	}
         });
     }
     // push "Bitte wählen Option"
     activityArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected: YES});


      this.resetSelection();
      // set selection arrays to start content binding process
      this.set('orders', orderArray);
      this.set('positions', positionArray);
      this.set('activities', activityArray);
      M.ViewManager.getView('editPicturePage', 'order').setSelection('0');
      M.ViewManager.getView('editPicturePage', 'position').setSelection('0');
      M.ViewManager.getView('editPicturePage', 'activity').setSelection('0');
  }
  
  , resetSelection: function() {
      M.ViewManager.getView('editPicturePage', 'order').resetSelection();
      M.ViewManager.getView('editPicturePage', 'position').resetSelection();
      M.ViewManager.getView('editPicturePage', 'activity').resetSelection();
  }

  , isPositionSelected: function() {
      // implemented adjustment to M.SeletionListView to return null if no item is available
      var posObj = M.ViewManager.getView('editPicturePage', 'position').getSelection(YES);
      if (posObj && posObj.value != "0") { // 'Bitte wählen' is not allowed to be chosen
          return YES;
      } else {
          return NO;
      }
  }

  , isActivitySelected: function() {
      var actObj = M.ViewManager.getView('editPicturePage', 'activity').getSelection(YES);
      if (actObj && actObj.value != "0") { // 'Bitte wählen' is not allowed to be chosen
          return YES;
      } else {
          return NO;
      }
  }

  , saveSelection: function() {
      var orderValue = M.ViewManager.getView('editPicturePage', 'order').getSelection();
      var positionValue = M.ViewManager.getView('editPicturePage', 'position').getSelection();
      var activityValue = M.ViewManager.getView('editPicturePage', 'activity').getSelection();

      this.selections.order = orderValue;
      this.selections.position = positionValue;
      this.selections.activity = activityValue;

      this.useSelections = YES;
  }
  
  , getActivities: function(queryobj) {
  	var activities;
  	if (queryobj) {
  		activities = DigiWebApp.Activity.find(queryobj);
  	} else {
  		activities = DigiWebApp.Activity.findSorted();
  	}
  	activities = _.map(activities, function(acti) {
	    	if(parseInt(acti.get("positionId")) === 1) {
	            // normale Tätigkeit
	            return acti;
	         } else {
	            // Tätigkeit nur bei Arbeitsplan
	            return null;
	         }
  	});
  	activities = _.compact(activities);
  	return activities;
  }

  , getActivitiesFromWorkplan: function(workplan) {
      var actIds = workplan.get('activityIds').split(',');
      var activities = [];
      if (actIds && actIds.length > 0) {
          for (var i = 0; i < actIds.length; i++) {
              activities.push(_.first(DigiWebApp.Activity.find({ query: {
                    identifier: 'id' 
                  , operator: '=' 
                  , value: actIds[i] 
              }})));
          }

      }
      if (parseInt(workplan.get("workplanType")) === 1) {
      	// only those activities which are bound to employee
          activities = _.map(activities, function(act) {
          	if ( typeof(act) === "undefined" ) {
          		console.log("UNDEFINED ACTIVITY");
          		return null;
          	} else {
      			var zugeordnet = NO;
          		var allActivities = DigiWebApp.Activity.findSorted();
          		_.each(allActivities, function(acti) {
          			// herausfinden, ob diese Tätigkeit dem Mitarbeiter zugeordnet ist.
          			if (parseInt(acti.get("positionId")) === 1) {
          				zugeordnet = YES;
          			}
          		});
      			if (zugeordnet) {
      				return act;
      			} else {
      				return null;	
      			}
          	}
          });
      }
      activities = _.compact(activities);
      return activities;
  }

  , savePicture: function() {
  	var that = this;
  	
  	that.saveSelection();
  	
		var orderId = M.ViewManager.getView('editPicturePage', 'order').getSelection();
		
		var posObj = M.ViewManager.getView('editPicturePage', 'position').getSelection(YES);
		var posId = posObj ? posObj.value : null;
	
		var actObj = M.ViewManager.getView('editPicturePage', 'activity').getSelection(YES);
		var actId = actObj ? actObj.value : null;

	    var handOrderId = null;
	    var handOrderName = null;
	    if (DigiWebApp.BookingController.isHandOrder(orderId)) {
			handOrderId = orderId;
			handOrderName = _.select(DigiWebApp.HandOrder.findSorted(), function(ord) {
			    if (ord) return ord.get('id') == orderId || ord.get('name') == orderId;
			})[0].get('name');
			orderId = handOrderId;
	
			// a hand order has no position
			posId = null;
	    }

	    var myMediaFile = that.myMediaFile;
		myMediaFile.set('orderId', orderId);
		myMediaFile.set('handOrderId', handOrderId);
		myMediaFile.set('handOrderName', handOrderName);
		myMediaFile.set('positionId', posId);
		myMediaFile.set('activityId', actId);
		myMediaFile.set('remark', M.ViewManager.getView('editPicturePage', 'remarkInput').value);
	    
	    var image = document.getElementById(DigiWebApp.EditPicturePage.content.image.id);

	    myMediaFile.set('fileType', DigiWebApp.ApplicationController.CONSTImageFiletype);
	    myMediaFile.save();
	    myMediaFile.saveToFile(image.src, function() {
		      DigiWebApp.ApplicationController.DigiLoaderView.hide();
		      DigiWebApp.NavigationController.backToMediaListPageTransition();
	    });

  }

//  , paintMoveEvent: null
//  
//  , paintOnCanvasStopPaint: function(ev) {
//  	//console.log("paintOnCanvasStopPaint");    	
//  	ev.preventDefault();
//  	
//  	//context = document.getElementById(DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).getContext("2d");
//  	//context.stroke();
//
//		$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).unbind('touchmove', DigiWebApp.EditPicturePageController.paintOnCanvasPaint);    	
//		$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).unbind('mousemove', DigiWebApp.EditPicturePageController.paintOnCanvasPaint);    	
//		$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).unbind('touchstop', DigiWebApp.EditPicturePageController.paintOnCanvasStopPaint);
//		$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).unbind('mouseup',   DigiWebApp.EditPicturePageController.paintOnCanvasStopPaint);
//  }
//  
//  , paintOnCanvasStartMove: function(ev) {
//  	console.log("paintOnCanvasStartMove");
//  	ev.preventDefault();
//  	//ev.stopPropagation();
//  	
//  	var canvas = document.getElementById(DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id);
//
//  	if (canvas.getContext) {
//  		DigiWebApp.EditPicturePageController.myImageTouchPos = DigiWebApp.EditPicturePageController.getCoordinates(ev);
//	
//  		$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).unbind('touchmove', DigiWebApp.EditPicturePageController.paintOnCanvasMove);    	
//  		$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).unbind('mousemove', DigiWebApp.EditPicturePageController.paintOnCanvasMove);    	
//  		$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).unbind('touchstop', DigiWebApp.EditPicturePageController.paintOnCanvasStopMove);
//  		$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).unbind('mouseup',   DigiWebApp.EditPicturePageController.paintOnCanvasStopMove);
//	    	$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).bind('touchmove', DigiWebApp.EditPicturePageController.paintOnCanvasMove);
//			$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).bind('mousemove', DigiWebApp.EditPicturePageController.paintOnCanvasMove);
//			$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).bind('touchstop', DigiWebApp.EditPicturePageController.paintOnCanvasStopMove);
//			$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).bind('mouseup',   DigiWebApp.EditPicturePageController.paintOnCanvasStopMove);
//  	}
//  }
//  
//  , paintOnCanvasStopMove: function(ev) {
//  	console.log("paintOnCanvasStopMove");    	
//  	ev.preventDefault();
//  	//ev.stopPropagation();
//		DigiWebApp.EditPicturePageController.myImageTouchPos = [0, 0];
//		$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).unbind('touchmove', DigiWebApp.EditPicturePageController.paintOnCanvasMove);    	
//		$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).unbind('mousemove', DigiWebApp.EditPicturePageController.paintOnCanvasMove);    	
//		$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).unbind('touchstop', DigiWebApp.EditPicturePageController.paintOnCanvasStopMove);
//		$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).unbind('mouseup',   DigiWebApp.EditPicturePageController.paintOnCanvasStopMove);
//  }
//  
//  , myImageTouchPos: [0, 0]
//  , myImageTopLeft: [0, 0]
//  , myImageBottomRight: [0, 0]
//  , myImageScaleFactor: 2
//  , paintOnCanvasMove: function(ev) {
//  	console.log("paintOnCanvasMove");    	
//  	ev.preventDefault();
//  	//ev.stopPropagation();
//
//  	var image = document.getElementById(DigiWebApp.EditPicturePage.content.image.id);
//      var canvas = document.getElementById(DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id);
//
//  	if (canvas.getContext) {
//  		var coord = DigiWebApp.EditPicturePageController.getCoordinates(ev);
//			var x = coord[0];
//			var y = coord[1];
//			var dx = DigiWebApp.EditPicturePageController.myImageTouchPos[0] - coord[0];
//			var dy = DigiWebApp.EditPicturePageController.myImageTouchPos[1] - coord[1];
//			//console.log(dx + ", " + dy);
//			DigiWebApp.EditPicturePageController.myImageTouchPos[0] = coord[0];
//			DigiWebApp.EditPicturePageController.myImageTouchPos[1] = coord[1];
//			//console.log("DigiWebApp.EditPicturePageController.myImageTouchPos " + DigiWebApp.EditPicturePageController.myImageTouchPos[0] + ", " + DigiWebApp.EditPicturePageController.myImageTouchPos[1]);
//			var context = canvas.getContext("2d");
//			if ((DigiWebApp.EditPicturePageController.myImageTopLeft[0] + dx) > 0 && (DigiWebApp.EditPicturePageController.myImageTopLeft[0] + dx) < image.width) {
//	    		DigiWebApp.EditPicturePageController.myImageTopLeft[0] = DigiWebApp.EditPicturePageController.myImageTopLeft[0] + dx;
//	    		//DigiWebApp.EditPicturePageController.myImageBottomRight[0] = DigiWebApp.EditPicturePageController.myImageBottomRight[0] + dx;
//			}
//			if ((DigiWebApp.EditPicturePageController.myImageTopLeft[1] + dy) > 0 && (DigiWebApp.EditPicturePageController.myImageTopLeft[1] + dy) < image.height) {
//	    		DigiWebApp.EditPicturePageController.myImageTopLeft[1] = DigiWebApp.EditPicturePageController.myImageTopLeft[1] + dy;
//	    		//DigiWebApp.EditPicturePageController.myImageBottomRight[1] = DigiWebApp.EditPicturePageController.myImageBottomRight[1] + dy;
//			}
//  				
//  		context.drawImage(image,DigiWebApp.EditPicturePageController.myImageTopLeft[0],DigiWebApp.EditPicturePageController.myImageTopLeft[1],canvas.width * DigiWebApp.EditPicturePageController.myImageScaleFactor,canvas.height * DigiWebApp.EditPicturePageController.myImageScaleFactor,0,0,canvas.width,canvas.height);
//  	}
//  }
//  
//  , paintOnCanvasStartPaint: function(ev) {
//  	//console.log("paintOnCanvasStartPaint");    	
//  	ev.preventDefault();
//  	//ev.stopPropagation();
//  	
//  	var canvas = document.getElementById(DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id);
//
//  	if (canvas.getContext) {
//  		var coord = DigiWebApp.EditPicturePageController.getCoordinates(ev);
//			var x = coord[0];
//			var y = coord[1];
//	
//	    	var context = canvas.getContext("2d");
//			context.beginPath();
//			context.strokeStyle = "#f00";
//			context.lineWidth = 5;
//			context.lineCap = "round";
//			context.lineJoin = "round";
//			context.moveTo(x, y);
//	
//	    	$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).unbind('touchmove', DigiWebApp.EditPicturePageController.paintOnCanvasPaint);
//			$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).unbind('mousemove', DigiWebApp.EditPicturePageController.paintOnCanvasPaint);
//			$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).unbind('touchstop', DigiWebApp.EditPicturePageController.paintOnCanvasStopPaint);
//			$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).unbind('mouseup',   DigiWebApp.EditPicturePageController.paintOnCanvasStopPaint);
//	    	$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).bind('touchmove', DigiWebApp.EditPicturePageController.paintOnCanvasPaint);
//			$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).bind('mousemove', DigiWebApp.EditPicturePageController.paintOnCanvasPaint);
//			$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).bind('touchstop', DigiWebApp.EditPicturePageController.paintOnCanvasStopPaint);
//			$('#' + DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).bind('mouseup',   DigiWebApp.EditPicturePageController.paintOnCanvasStopPaint);
//  	}
//  }
//  
//  , getCoordinates: function(ev) {
//  	var x = 0;
//  	var y = 0;
//		// Get the mouse position relative to the canvas element.
//      if (typeof(ev.touches) !== "undefined") {
//      	//console.log("touchstart: using ev.touches[0]");
//      	x = ev.touches[0].pageX - ev.touches[0].target.offsetLeft;
//      	y = ev.touches[0].pageY - ev.touches[0].target.offsetTop;
//      } else if (typeof(ev.originalEvent) !== "undefined") {
//  		if (typeof(ev.originalEvent.touches) !== "undefined") {
//      		x = ev.originalEvent.touches[0].pageX - ev.originalEvent.touches[0].target.offsetLeft;
//      		y = ev.originalEvent.touches[0].pageY - ev.originalEvent.touches[0].target.offsetTop;
//      		//console.log(x + ", " + y);
//  		}
//  	} else {
//  		x = ev.offsetX;
//  		y = ev.offsetY;
//  	}
//      return [x, y];
//  }
//  
//  , paintOnCanvasPaint: function(ev) {
//  	//console.log("paintOnCanvasPaint");
//  	ev.preventDefault();
//  	//ev.stopPropagation();
//  	
//  	// save event for easier debugging
//  	DigiWebApp.EditPicturePageController.paintMoveEvent = ev;
//
//  	var coord = DigiWebApp.EditPicturePageController.getCoordinates(ev);
//		var x = coord[0];
//		var y = coord[1];
//
//  	var context = document.getElementById(DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id).getContext("2d");
//		
//		// The event handler works like a drawing pencil which tracks the mouse 
//		// movements. We start drawing a path made up of lines.
//		context.lineTo(x, y);
//		//context.stroke();
//  }
//  
//  , paintOnCanvasTouchMove: function(ev) {
//  	//console.log("paintOnCanvasTouchMove");
//  }
//  
//  , fillCanvasFromImage_var: null
//  , fillCanvasFromImage: function() {
//  	console.log("fillCanvasFromImage");
//		if (DigiWebApp.EditPicturePageController.fillCanvasFromImage_var !== null) clearTimeout(DigiWebApp.EditPicturePageController.fillCanvasFromImage_var);
//		$('#' + DigiWebApp.EditPicturePage.content.image.id).hide();
//      var canvas = document.getElementById(DigiWebApp.EditPicturePage.content.imageContainer.imageCanvas.id);
//      var image = document.getElementById(DigiWebApp.EditPicturePage.content.image.id);
//      DigiWebApp.EditPicturePageController.myImageScaleFactor = image.width / canvas.width;
//		var context = canvas.getContext("2d");
//		console.log("drawing image to canvas with file");
//		context.drawImage(image,0,0,canvas.width * DigiWebApp.EditPicturePageController.myImageScaleFactor,canvas.height * DigiWebApp.EditPicturePageController.myImageScaleFactor,0,0,canvas.width,canvas.height);
//		DigiWebApp.EditPicturePageController.myImageTopLeft = [0, 0];
//  }

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: EmployeeController
// ==========================================================================
// manuell var-checked
DigiWebApp.EmployeeController = M.Controller.extend({

    /**
     * Employee Selection Keys for storage.
     *
     * the tmp key is for still having the selection after closing day for sending the data even though another selection is possible then
     */
      empSelectionKey: M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX + 'employeeSelection'
    , empSelectionKeyTmp: M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX + 'employeeSelectionTmp'

    /**
     * Value determing the state of the employee selection
     *
     * 0: no kolonne
     * 1: kolonne, but employees not selected yet
     * 2: employees selected
     * 
     */
    , employeeState: 0

    /**
     * Array containing objects with the particular id and name as properties representing the employees.
     *
     * employeeSelection on EmployeePage has contentBinding on it to fill the list.
     */
    , employees: null


    /**
     * Passes to setEmployeesForList.
     *
     * Is called when the page show event for EmployeePage is triggered.
     */
    , init: function() {
        this.setEmployeesForList();
    }

    /**
     * Prepares the selection list on the EmployeePage with the id and values of the employees returned by the server.
     *
     * Triggers content binding for employeeSelection by using set on employees.
     */
    , setEmployeesForList: function() {
        if (this.getEmployeeState() == 1) {
            var employees = DigiWebApp.Employee.findSorted();
            if (employees.length > 0) {
                employees = _.map(employees, function(em) {
                    if (em) return { label: em.get('name'), value: em.get('id') };
                });
                this.set('employees', employees);
            }
        }
    }

    /**
     * Saves the employee selection ny setting the isSelected property of the selected employee records to YES.
     *
     * Triggered by the tap event on the button on EmployeePage.
     */
    , saveEmployeeSelection: function() {
        // first clear old selection in records in local storage
        var employees = DigiWebApp.Employee.find();
        _.each(employees, function(em) {
            em.set('isSelected', NO);
            em.save();
        });

        var selection = M.ViewManager.getView('employeePage', 'employeeSelection').getSelection();
        if (selection.length > 0) {
            _.each(selection, function(sel) { // sel is employee id
                var employee = _.select(DigiWebApp.Employee.find(), function(e) {
                    if (e) return e.get('id') == sel;
                });
                employee = _.isArray(employee) ? employee[0] : employee;
                if (employee) {
                    employee.set('isSelected', YES);
                    employee.save();
                }
            });
            //DialogView.alert with action
            //M.DialogView.alert({
            this.callbackEmployeesSave();
//            DigiWebApp.ApplicationController.nativeAlertDialogView({
//                  title: M.I18N.l('employeeSelectionSuccess')
//                , message: M.I18N.l('employeeSelectionSuccessMsg')
//                , callbacks: {
//                    confirm: {
//                          target: this
//                        , action: 'callbackEmployeesSave'
//                        //, action: this.callbackEmployeesSave
//                    }
//                }
//            });

        } else { // no employee selected
            //M.DialogView.alert({
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                  title: M.I18N.l('employeeSelection')
                , message: M.I18N.l('employeeSelectionMsg')
            });
        }
    }

    /**
     * Saves the selection of the employees in localStorage and moves back to the booking screen.
     *
     * Called via callback of the employee selection success alert (to avoid rendering bugs with the alert)
     */
    , callbackEmployeesSave: function() {
    
        var that = DigiWebApp.EmployeeController;
        
        DigiWebApp.BookingController.set('isBackFromEmployeePage', YES);
        DigiWebApp.NavigationController.backToBookTimePagePOP();

        // save Selection in local storage to have it accessible after application restart
        localStorage.setItem(DigiWebApp.EmployeeController.empSelectionKey, that.getSelectedEmployeesAsString());
        that.setEmployeeState(2);
        DigiWebApp.BookingController.book();
    }

    /**
     * Returns an array of all employee records that are selected.
     */
    , getSelectedEmployees: function() {
    	//alert("in getSelectedEmployees");
        var employees = DigiWebApp.Employee.find();
        if (employees.length > 0) {
            var selectedEmployees = _.select(employees, function(e) {
                if (e) return e.get('isSelected') === true;
            });
            return selectedEmployees;
        }
        return [];
    }

    /**
     * Returns the selected employee ids as a string:
     *
     * Format: "<id1>,<id2>,...,<idN>"
     */
    , getSelectedEmployeesAsString: function() {
        if (this.getEmployeeState === 0) {
            return '0';
        }

        if (this.getEmployeeState === 1) {
            return '';
        }

        var empIds = [];
        var employees = this.getSelectedEmployees();
        _.each(employees, function(emp) {
            empIds.push(emp.get('id'));
        });

        return empIds.join(',');
    }

    /**
     * Sets the employee state in controller and localStorage.
     * 
     * @param state
     */
    , setEmployeeState: function(state) {
        if (state == 0) {
            this.saveUniversalEmployeeToLocalStorage();
        }
        this.set('employeeState', state);
        localStorage.setItem(M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX + 'employeeState', this.employeeState);
    }

    /**
     * Saves the universal employee (ID=0) in localStorage
     */
    , saveUniversalEmployeeToLocalStorage: function() {
        localStorage.setItem(this.empSelectionKey, '0');
    }

    /**
     * Returns the employee state from localStorage. Also sets the controller property employeeState.
     */
    , getEmployeeState: function() {
        this.set('employeeState', localStorage.getItem(M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX + 'employeeState'));
        return this.employeeState;
    }

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: FestePauseStornierenController
// ==========================================================================

DigiWebApp.FestePauseStornierenController = M.Controller.extend({

	  items: null
	  
	, init: function(isFirstLoad) {
		var that = this;
		if (isFirstLoad) {

		}
		that.initBalken();
		that.initPausenLists();
	}

	, gesternBalken: null
    , heuteBalken: null
    , morgenBalken: null    	
    , initBalken: function() {
		var that = this;
		var wochentage = DigiWebApp.ApplicationController.dayNames;
		
		that.set('gesternBalken', [{
			  "label": wochentage[D8.create().yesterday().date.getDay()] + ", " + D8.create().yesterday().format("dd.mm.yyyy")
			, "items": []
		}]); 
		that.set('heuteBalken', [{
			  "label": wochentage[D8.create().date.getDay()] + ", " + D8.create().format("dd.mm.yyyy")
			, "items": []
		}]); 
		that.set('morgenBalken', [{
			  "label": wochentage[D8.create().tomorrow().date.getDay()] + ", " + D8.create().tomorrow().format("dd.mm.yyyy")
			, "items": []
		}]); 
	}
	
	, gesternPausenList: null
	, heutePausenList: null
	, morgenPausenList: null
	, initPausenLists: function() {
		var that = this;
		
		var allePausen = _.sortBy(DigiWebApp.Festepausendefinition.find(), function(n) { return n.get("von"); });
		
		var gestern = D8.create().yesterday();
		var heute = D8.create();
		var morgen = D8.create().tomorrow();
		
		var gesternWochentag = gestern.date.getDay();
		var heuteWochentag = heute.date.getDay();
		var morgenWochentag = morgen.date.getDay();
		
		var gesternPausenList = _.filter(allePausen, function(festepausendefinition) { return (festepausendefinition.get('wochentagId') == gesternWochentag); });
		var heutePausenList   = _.filter(allePausen, function(festepausendefinition) { return (festepausendefinition.get('wochentagId') == heuteWochentag); });
		var morgenPausenList  = _.filter(allePausen, function(festepausendefinition) { return (festepausendefinition.get('wochentagId') == morgenWochentag); });
		
		var alleSonderbuchungen = DigiWebApp.Sonderbuchung.find();
		
		var mapPausenList = function(fp, day) {
            if (fp) {
            	var item = { label: fp.get('von') + " - " + fp.get('bis'), value: fp.get('id') };
            	var sonderbuchung = _.find(alleSonderbuchungen, function(n) {
            		return (   n.get("festepausendefinitionId") == fp.get("id") 
            				&& n.get("ressourceId") == fp.get("ressourceId")
            				&& n.get("datum") == day.format("dd.mm.yyyy")
            			   )
            	});
            	if (sonderbuchung) item.isSelected = "true"
            	return item;
            }
        };
        
		gesternPausenList = _.map(gesternPausenList, function(fp) {
			return mapPausenList(fp, gestern);
        });
		that.set('gesternPausenList', gesternPausenList);
		
        heutePausenList = _.map(heutePausenList, function(fp) {
        	return mapPausenList(fp, heute);
        });
        that.set('heutePausenList', heutePausenList);
        
        morgenPausenList = _.map(morgenPausenList, function(fp) {
        	return mapPausenList(fp, morgen);
        });
        that.set('morgenPausenList', morgenPausenList);

        // bereits stornierte: disable
        var disableExisting = function(myContent, day) {
        	var fp = _.find(DigiWebApp.Festepausendefinition.find(), function(n) {
        		return (n.get("id") == myContent.value);
        	});
        	var sonderbuchung = _.find(alleSonderbuchungen, function(n) {
        		return (   n.get("festepausendefinitionId") == fp.get("id") 
        				&& n.get("ressourceId") == fp.get("ressourceId")
        				&& n.get("datum") == day.format("dd.mm.yyyy")
        			   )
        	});
        	if (sonderbuchung && parseBool(sonderbuchung.get("uebertragen"))) {
        		$('#' + myContent.id)[0].setAttribute("disabled", "disabled");
        	}
        };
        
        var myGesternList = $('#' + DigiWebApp.FestePauseStornierenPage.content.gesternPausenList.id);
        _.each(DigiWebApp.FestePauseStornierenPage.content.gesternPausenList.selection, function(myContent) {
        	disableExisting(myContent, gestern);
        });
        
        var myHeuteList = $('#' + DigiWebApp.FestePauseStornierenPage.content.heutePausenList.id);
        _.each(DigiWebApp.FestePauseStornierenPage.content.heutePausenList.selection, function(myContent) {
        	disableExisting(myContent, heute);
        });
        
        var myMorgenList = $('#' + DigiWebApp.FestePauseStornierenPage.content.morgenPausenList.id);
        _.each(DigiWebApp.FestePauseStornierenPage.content.morgenPausenList.selection, function(myContent) {
        	disableExisting(myContent, morgen);
        });
        
        that.gesternOldSelection = DigiWebApp.FestePauseStornierenPage.content.gesternPausenList.selection;
		that.heuteOldSelection   = DigiWebApp.FestePauseStornierenPage.content.heutePausenList.selection;
		that.morgenOldSelection  = DigiWebApp.FestePauseStornierenPage.content.morgenPausenList.selection;
		
		//festePauseStornieren_nurAktuellerTag
		if (DigiWebApp.SettingsController.getSetting("festePauseStornieren_nurAktuellerTag")) {
			$('#' + DigiWebApp.FestePauseStornierenPage.content.gesternBalken.id).hide();
			$('#' + DigiWebApp.FestePauseStornierenPage.content.gesternPausenList.id + "_container").hide();
			$('#' + DigiWebApp.FestePauseStornierenPage.content.morgenBalken.id).hide();
			$('#' + DigiWebApp.FestePauseStornierenPage.content.morgenPausenList.id + "_container").hide();
		} else {
			$('#' + DigiWebApp.FestePauseStornierenPage.content.gesternBalken.id).show();
			$('#' + DigiWebApp.FestePauseStornierenPage.content.gesternPausenList.id + "_container").show();
			$('#' + DigiWebApp.FestePauseStornierenPage.content.morgenBalken.id).show();
			$('#' + DigiWebApp.FestePauseStornierenPage.content.morgenPausenList.id + "_container").show();
		}
	}
	
	, gesternOldSelection: null
	, heuteOldSelection: null
	, morgenOldSelection: null

	, save: function() {
		var that = this;

		var alleSonderbuchungen = DigiWebApp.Sonderbuchung.find();

		var gestern = D8.create().yesterday();
		var heute = D8.create();
		var morgen = D8.create().tomorrow();

		var gesternPausenZuStornierenSelection = DigiWebApp.FestePauseStornierenPage.content.gesternPausenList.selection;
		var heutePausenZuStornierenSelection   = DigiWebApp.FestePauseStornierenPage.content.heutePausenList.selection;
		var morgenPausenZuStornierenSelection  = DigiWebApp.FestePauseStornierenPage.content.morgenPausenList.selection;
				
		var pausenZuStornierenGesternAlt = _.map(_.map(that.gesternOldSelection, function(el) { return el.value; }), function(fpId) {
			var fpDef = _.find(DigiWebApp.Festepausendefinition.find(),function(n) { return (n.get("id") == fpId); });
			return {
				  "date": gestern.format("dd.mm.yyyy")
				, "festepausendefinition": fpDef
			}
		});
		var pausenZuStornierenHeuteAlt   = _.map(_.map(that.heuteOldSelection, function(el) { return el.value; }), function(fpId) {
			var fpDef = _.find(DigiWebApp.Festepausendefinition.find(),function(n) { return (n.get("id") == fpId); });
			return {
				  "date": heute.format("dd.mm.yyyy")
				, "festepausendefinition": fpDef
			}
		});
		var pausenZuStornierenMorgenAlt  = _.map(_.map(that.morgenOldSelection, function(el) { return el.value; }), function(fpId) {
			var fpDef = _.find(DigiWebApp.Festepausendefinition.find(),function(n) { return (n.get("id") == fpId); });
			return {
				  "date": morgen.format("dd.mm.yyyy")
				, "festepausendefinition": fpDef
			}
		});
		var pausenZuStornierenAlt = pausenZuStornierenGesternAlt.concat(pausenZuStornierenHeuteAlt.concat(pausenZuStornierenMorgenAlt));
		_.each(pausenZuStornierenAlt, function(p) {
			var fp = p.festepausendefinition;
        	var sonderbuchung = _.find(alleSonderbuchungen, function(n) {
        		return (   n.get("festepausendefinitionId") == fp.get("id") 
        				&& n.get("ressourceId") == fp.get("ressourceId")
        				&& n.get("datum") == p.date
        			   )
        	});
        	if (sonderbuchung && !parseBool(sonderbuchung.get("uebertragen"))) {
        		sonderbuchung.del();
        	}
		});

		var pausenZuStornierenGestern = _.map(_.map(DigiWebApp.FestePauseStornierenPage.content.gesternPausenList.selection, function(el) { return el.value; }), function(fpId) {
			var fpDef = _.find(DigiWebApp.Festepausendefinition.find(),function(n) { return (n.get("id") == fpId); });
			return {
				  "date": gestern.format("dd.mm.yyyy")
				, "festepausendefinition": fpDef
			}
		});
		var pausenZuStornierenHeute   = _.map(_.map(DigiWebApp.FestePauseStornierenPage.content.heutePausenList.selection, function(el) { return el.value; }), function(fpId) {
			var fpDef = _.find(DigiWebApp.Festepausendefinition.find(),function(n) { return (n.get("id") == fpId); });
			return {
				  "date": heute.format("dd.mm.yyyy")
				, "festepausendefinition": fpDef
			}
		});
		var pausenZuStornierenMorgen  = _.map(_.map(DigiWebApp.FestePauseStornierenPage.content.morgenPausenList.selection, function(el) { return el.value; }), function(fpId) {
			var fpDef = _.find(DigiWebApp.Festepausendefinition.find(),function(n) { return (n.get("id") == fpId); });
			return {
				  "date": morgen.format("dd.mm.yyyy")
				, "festepausendefinition": fpDef
			}
		});
		
		var pausenZuStornieren = pausenZuStornierenGestern.concat(pausenZuStornierenHeute.concat(pausenZuStornierenMorgen));
		
		_.each(pausenZuStornieren, function(p) {
			//{"Key": "<FestepausendefinitionId>", "StringValue": "23"}
			var sonderbuchungseigenschaft_festepausendefinitionId = {"eigenschaftsKey": "<FestepausendefinitionId>", "eigenschaftsStringValue": "" + p.festepausendefinition.get("id")};
	    	//{"Key": "<Datum>", "StringValue": "01.02.2014"}
			var sonderbuchungseigenschaft_datum = {"eigenschaftsKey": "<Datum>", "eigenschaftsStringValue": p.date};
			var sonderbuchungseigenschaften = [sonderbuchungseigenschaft_festepausendefinitionId, sonderbuchungseigenschaft_datum];
        	var sonderbuchung = _.find(alleSonderbuchungen, function(n) {
        		return (   n.get("festepausendefinitionId") == p.festepausendefinition.get("id")
        				&& n.get("ressourceId") == p.festepausendefinition.get("ressourceId")
        				&& n.get("datum") == p.date
        				&& parseBool(n.get("uebertragen")) == YES
        			   )
        	});
        	if (!sonderbuchung) {
				DigiWebApp.Sonderbuchung.createRecord({
					  sonderbuchungstyp: "<pausenStorno>"
					, sonderbuchungseigenschaften: sonderbuchungseigenschaften //JSON.stringify(sonderbuchungseigenschaften)
					, ressourceId: p.festepausendefinition.get("ressourceId")
					, uebertragen: "false"
					, festepausendefinitionId: p.festepausendefinition.get("id")
					, datum: p.date
					, status: 0
				}).save();
        	}
		});

		try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
		if (DigiWebApp.SettingsController.featureAvailable('404')) {
    		DigiWebApp.NavigationController.backToButtonDashboardPagePOP();
		} else {
    		DigiWebApp.NavigationController.backToDashboardPagePOP();
		}
		
	}
	
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: HandOrderController
// ==========================================================================
// manuell var-checked
DigiWebApp.HandOrderController = M.Controller.extend({

      currentHandOrderName: ''

    , save: function() {
        var orderName = M.ViewManager.getView('handOrderPage', 'orderName').value;
        orderName = $.trim(orderName);

        if (orderName) {
            var sameHandOrders = _.select(DigiWebApp.HandOrder.findSorted(), function(ho) {
                if (ho) return ho.get('name') === orderName;
            });

            //if(/[^a-zA-Z0-9_-]+/.test(orderName)) {
            //if (/[[^a-zA-Z0-9_-äöüÄÖÜ,. !?;:/\\@€=]]+/.test(orderName)) {
            if (DigiWebApp.ApplicationController.sonderzeichenCheck(orderName)) {
                //M.DialogView.alert({
                DigiWebApp.ApplicationController.nativeAlertDialogView({
                      title: M.I18N.l('specialCharProblem')
                    , message: M.I18N.l('specialCharProblemMsg')
                });
                return;
            } else if (sameHandOrders.length > 0) {
                //M.DialogView.alert({
                DigiWebApp.ApplicationController.nativeAlertDialogView({
                      title: M.I18N.l('handOrderExists')
                    , message: M.I18N.l('handOrderExistsMsg')
                });
                return;
            } else if (orderName.length > 16) {
                //M.DialogView.alert({
                DigiWebApp.ApplicationController.nativeAlertDialogView({
                      title: M.I18N.l('handOrderTooLong')
                    , message: M.I18N.l('handOrderTooLongMsg')
                });
                return;
            } else {
                var op = DigiWebApp.HandOrder.createRecord({
                      name: orderName
                    , id: orderName
                    , isLocalOnly: YES
                });
                
                /* add hand order mid to the previously saved ids in localstorage */
                var k = DigiWebApp.ApplicationController.storagePrefix + '_handorderKeys';

                var myLocalStorageString = localStorage.getItem(k);
                
                var hIds = [];
                if (typeof(myLocalStorageString) === "string") {
                	try {
                		hIds = JSON.parse(myLocalStorageString);
                	} catch(e2) { console.error(e2); }
                } else {
                    // no handorderKeys in localstorage
                }
                
                try {
                    hIds.push(op.m_id);
                } catch(e3) {
                	console.error("ERROR in save: " + e3);
                }

                localStorage.setItem(k, JSON.stringify(hIds));
                
                /* now save it */
                op.save();
                
                if (op) {
                    M.ViewManager.getView('handOrderPage', 'orderName').setValue('');
                    DigiWebApp.SelectionController.useSelections = NO;
                    DigiWebApp.SelectionController.showHandOrderFirst = YES;
                    this.currentHandOrderName = orderName;

                    DigiWebApp.NavigationController.toBookTimePage(YES);
                } else {
                    //M.DialogView.alert({
                    DigiWebApp.ApplicationController.nativeAlertDialogView({
                          title: M.I18N.l('handOrderSaveError')
                        , message: M.I18N.l('handOrderSaveErrorMsg')
                    });
                }
            }

        } else {
            //M.DialogView.alert({
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                  title: M.I18N.l('noHandOrderNameEntered')
                , message: M.I18N.l('noHandOrderNameEnteredMsg')
            });
        }
        
    }
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: JSONDatenuebertragungController
// ==========================================================================
// manuell var-checked
DigiWebApp.JSONDatenuebertragungController = M.Controller.extend({

	  consoleLogOutput: YES

	, sendData: function(sendObj) {
		if (!sendObj) {
			writeToLog("Daten konnten nicht gesendet werden! Falsche Übergabe an sendData.");
			return;
		}
		if (!DigiWebApp.RequestController.DatabaseServer || (DigiWebApp.RequestController.DatabaseServerTimestamp && (DigiWebApp.RequestController.DatabaseServerTimestamp - new Date().getTime() > 60000))) {
		  	DigiWebApp.RequestController.getDatabaseServer(function(obj) {
		  		DigiWebApp.JSONDatenuebertragungController.sendDataWithServer(sendObj);
		  	}, null);
		} else {
			DigiWebApp.JSONDatenuebertragungController.sendDataWithServer(sendObj);
		}
	}

	, sendDataWithServer: function(sendObj) {
		//var that = this;

		var data = sendObj['data'];
		var webservice = sendObj['webservice'];
		var loaderText = sendObj['loaderText'];
		var successCallback = sendObj['successCallback'];
		var errorCallback = sendObj['errorCallback'];
		var additionalQueryParameter = sendObj['additionalQueryParameter'];
		var timeoutSetting = DigiWebApp.SettingsController.getSetting("WebserviceTimeOut") ? DigiWebApp.SettingsController.getSetting("WebserviceTimeOut") : DigiWebApp.SettingsController.defaultsettings.get('WebserviceTimeOut');
		var timeout = sendObj['timeout'] ? sendObj['timeout'] : timeoutSetting;
		var omitLoaderHide = sendObj['omitLoaderHide'] ? sendObj['omitLoaderHide'] : false;
		
		var myURL =  'http://' + DigiWebApp.RequestController.DatabaseServer + '/WebAppServices/' + webservice + '?modus=0&firmenId=' + DigiWebApp.SettingsController.getSetting('company') + '&kennwort=' + DigiWebApp.SettingsController.getSetting('password') + '&geraeteId=' + DigiWebApp.SettingsController.getSetting('workerId') + '&geraeteTyp=2&softwareVersion=' + DigiWebApp.RequestController.softwareVersion + '&requestTimestamp=' + M.Date.now().date.valueOf();
		if (additionalQueryParameter) {
			myURL = myURL + '&' + additionalQueryParameter;
		}
		M.Request.init({
			  url: myURL
			, method: 'POST'
            , data: JSON.stringify(data)
            , timeout: timeout
            , contentType: 'text/plain'
            , dataType: 'text' // oder 'json'
            , beforeSend: function(xhr) {
                DigiWebApp.ApplicationController.DigiLoaderView.show(loaderText);
                xhr.setRequestHeader(
                    "Content-Type",
                    "text/plain"
                );
            }
            , onSuccess: function(data2, msg, xhr) { // success callback of sendData
                if (!omitLoaderHide) { DigiWebApp.ApplicationController.DigiLoaderView.hide(); }
                successCallback(data, msg, xhr);
            }
            , onError: function(xhr, err) {// error callback of sendData
                DigiWebApp.ApplicationController.DigiLoaderView.hide();
                DigiWebApp.RequestController.DatabaseServer = null;
                writeToLog(err);
                errorCallback(xhr, err);
            }
        }).send();
	}

	, recieveData: function(recieveObj) {
		if (!recieveObj) {
			writeToLog("Daten konnten nicht empfangen werden! Falsche Übergabe an recieveData.");
			return;
		}
		if (!DigiWebApp.RequestController.DatabaseServer || (DigiWebApp.RequestController.DatabaseServerTimestamp && (DigiWebApp.RequestController.DatabaseServerTimestamp - new Date().getTime() > 60000))) {
		  	DigiWebApp.RequestController.getDatabaseServer(function(obj) {
		  		DigiWebApp.JSONDatenuebertragungController.recieveDataWithServer(recieveObj);
		  	}, null);
		} else {
			DigiWebApp.JSONDatenuebertragungController.recieveDataWithServer(recieveObj);
		}
	}

	, recieveDataWithServer: function(recieveObj) {
		
		var webservice = recieveObj['webservice']
		var loaderText = recieveObj['loaderText']
		var successCallback = recieveObj['successCallback']
		var errorCallback = recieveObj['errorCallback']
		var additionalQueryParameter = recieveObj['additionalQueryParameter']
		var timeoutSetting = DigiWebApp.SettingsController.getSetting("WebserviceTimeOut") ? DigiWebApp.SettingsController.getSetting("WebserviceTimeOut") : DigiWebApp.SettingsController.defaultsettings.get('WebserviceTimeOut');
		var timeout = recieveObj['timeout'] ? recieveObj['timeout'] : timeoutSetting;
		var geraeteIdOverride = recieveObj['geraeteIdOverride'] ? recieveObj['geraeteIdOverride'] : NO;
		var myModus = recieveObj['modus'] ? recieveObj['modus'] : 0;

		// hack um Mitarbeiternamen ziehen zu können
		var myGeraeteId = DigiWebApp.SettingsController.getSetting('workerId');
		var myGeraeteTyp = 2;
		if (geraeteIdOverride) {
			myGeraeteId = 0;
			myGeraeteTyp = 3;
		}
		
		var myURL = 'http://' + DigiWebApp.RequestController.DatabaseServer + '/WebAppServices/' + webservice + '?modus=' + myModus + '&firmenId=' + DigiWebApp.SettingsController.getSetting('company') + '&kennwort=' + DigiWebApp.SettingsController.getSetting('password') + '&geraeteId=' + myGeraeteId + '&geraeteTyp=' + myGeraeteTyp + '&softwareVersion=' + DigiWebApp.RequestController.softwareVersion + '&requestTimestamp=' + M.Date.now().date.valueOf();
		//console.log(myURL);
		if (additionalQueryParameter) {
			myURL = myURL + '&' + additionalQueryParameter;
		}
		M.Request.init({
			  url: myURL
			, beforeSend: function(xhr) {
                DigiWebApp.ApplicationController.DigiLoaderView.show(loaderText);
            }
			, method: 'GET'
			, sendNoCacheHeader: YES
			, sendTimestamp: YES
			, timeout: timeout
			, isJSON: YES
			, onSuccess: function(data, msg, request) {
				DigiWebApp.ApplicationController.DigiLoaderView.hide();
				successCallback(data, msg, request);
			}
			, onError: function(request, msg) {
				DigiWebApp.ApplicationController.DigiLoaderView.hide();
                DigiWebApp.RequestController.DatabaseServer = null;
				errorCallback(request, msg);
			}
		}).send();
	}
	
	, sendeZeitdaten: function(mybuchungen, mysuccessCallback, myerrorCallback, myisClosingDay, mydoSync) {
		//var that = this;
		var absenden = function(buchungen, successCallback, errorCallback, isClosingDay, doSync) {
			//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("absenden");
			var items = [];
			var relevanteZeitbuchungen = buchungen;
			var relevanteZeitbuchungenSorted = _.sortBy(relevanteZeitbuchungen , function(z) {
	            return parseInt(z.get('_createdAt'));
	        });
			
			var employeeIds = localStorage.getItem(DigiWebApp.EmployeeController.empSelectionKey) || localStorage.getItem(DigiWebApp.EmployeeController.empSelectionKeyTmp);
			var employeeIdsArray = [];
			if ((employeeIds) && employeeIds !== "0") {
				// Kolonne aktiv
				employeeIdsArray = employeeIds.split(",");
			} else {
				employeeIdsArray = [DigiWebApp.SettingsController.getSetting("mitarbeiterId")];
			}
					
			_.each(relevanteZeitbuchungenSorted, function(el) {
				
				_.each(employeeIdsArray, function(maId) {
					var zeitbuch = DigiWebApp.Booking.createRecord({
						m_id: el.m_id
					});
					for (var prop in el.record) {
						try {
							if (typeof(JSON.parse(el.get(prop)).length) !== "undefined") {
								zeitbuch.set(prop, JSON.parse(el.get(prop)));
							} else {
								zeitbuch.set(prop, el.get(prop));
							}
						} catch(e2) {
							zeitbuch.set(prop, el.get(prop));
						}
					}
					
					if (parseInt(zeitbuch.get("timeStampEnd")) === 0) {
						zeitbuch.set("timeStampEnd", null);
						
						// compability
						zeitbuch.set("longitude_bis", "0");
						zeitbuch.set("latitude_bis", "0");
						
						if (!zeitbuch.get("longitude")) {
							zeitbuch.set("longitude", "0");
						}
						if (!zeitbuch.get("latitude")) {
							zeitbuch.set("latitude", "0");
						}
						
					}
					
					zeitbuch.set("gpsLaengeVon",zeitbuch.get("longitude"));
					zeitbuch.set("gpsBreiteVon",zeitbuch.get("latitude"));
					zeitbuch.set("gpsLaengeBis",zeitbuch.get("longitude_bis"));
					zeitbuch.set("gpsBreiteBis",zeitbuch.get("latitude_bis"));
	
					zeitbuch.set("handauftragsId",zeitbuch.get("handOrderId"));
					zeitbuch.set("handauftragsBezeichnung",zeitbuch.get("handOrderName"));
	
					zeitbuch.set("mitarbeiterId", maId);
					items.push(zeitbuch.record);
				});
			});
			if (items.length !== 0) {
				var data = {"zeitdaten": items};
				
				var internalSuccessCallback = function(data2, msg, request) {
					// verarbeite empfangene Daten
					//console.log("sendeZeitbuchungen Status: " + request.status);
					// weiter in der Verarbeitungskette
					successCallback();
					
				};
				var internalErrorCallback = function() {
					if (isClosingDay) {
	                    if(DigiWebApp.EmployeeController.getEmployeeState() == 2) {
	                        DigiWebApp.EmployeeController.setEmployeeState(1);
	                    }
	                    // clear employee selection
	                    localStorage.removeItem(DigiWebApp.EmployeeController.empSelectionKey);
	                    localStorage.removeItem(DigiWebApp.EmployeeController.empSelectionKeyTmp);
	                }
//			        DigiWebApp.ApplicationController.nativeAlertDialogView({
//			              title: M.I18N.l('connectionError')
//			            , message: M.I18N.l('connectionErrorMsg')
//			        });
					errorCallback();
				};
				var sendObj = {
					  data: data
					, webservice: "zeitdaten"
					, loaderText: M.I18N.l('sendDataMsg')
					, successCallback: internalSuccessCallback
					, errorCallback: internalErrorCallback
					//, additionalQueryParameter:
					//, timeout: 60000
				};
				DigiWebApp.JSONDatenuebertragungController.sendData(sendObj);
			} else {
				successCallback();
			}
		};
		if (DigiWebApp.SettingsController.featureAvailable('417') && (DigiWebApp.SettingsController.getSetting("ServiceApp_ermittleGeokoordinate") || DigiWebApp.SettingsController.getSetting("ServiceApp_datenUebertragen"))) {
			DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('ServiceAppKommunikation'));
			//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("refreshWAIT");
			DigiWebApp.ServiceAppController.refreshWAITBookings(function(){
				//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("refreshWAIT done success");
				DigiWebApp.ApplicationController.DigiLoaderView.hide();
				absenden(mybuchungen, mysuccessCallback, myerrorCallback, myisClosingDay, mydoSync);
			},function(err){
				//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("refreshWAIT done error: " + err);
				DigiWebApp.ApplicationController.DigiLoaderView.hide();
				absenden(mybuchungen, mysuccessCallback, myerrorCallback, myisClosingDay, mydoSync);
			}
			, []
			, true);
		} else {
			absenden(mybuchungen, mysuccessCallback, myerrorCallback, myisClosingDay, mydoSync);
		}
	}
	
	, sendeSonderbuchungen: function(mybuchungen, mysuccessCallback, myerrorCallback, myisClosingDay) {
		
		if (!myisClosingDay || !mybuchungen || mybuchungen.length == 0) {
		
			mysuccessCallback();
			
		} else {

			var absenden = function(buchungen, successCallback, errorCallback) {

				var items = [];
				var relevanteBuchungen = buchungen;
				var relevanteBuchungenSorted = _.sortBy(relevanteBuchungen , function(z) {
		            return parseInt(z.get('_createdAt'));
		        });
									
				_.each(relevanteBuchungenSorted, function(el) {
					items.push(el.record);
				});
	
				if (items.length !== 0) {
					var data = {"sonderbuchungen": items};
					
					var internalSuccessCallback = function(data2, msg, request) {
						
						// verarbeite gesendete Daten
						_.each(relevanteBuchungen, function(n) {
							n.set("uebertragen", YES);
							n.save();
						});
						
						// alte übertragene Sonderbuchungen löschen (älter als gestern)
						_.each(_.filter(DigiWebApp.Sonderbuchung.find(), function(n) { return parseBool(n.get("uebertragen")) }), function(sb){
							var yesterday = D8.create(D8.create().format("dd.mm.yyyy")).yesterday();
							var sbdate = D8.create(sb.get('datum'));
							if (sbdate.date.getTime() < yesterday.date.getTime()) {
								sb.del();
							}
						});
						
						// weiter in der Verarbeitungskette
						successCallback();
						
					};
	
					var internalErrorCallback = function() {
						errorCallback();
					};
	
					var sendObj = {
						  data: data
						, webservice: "sonderbuchung"
						, loaderText: M.I18N.l('sendDataMsg')
						, successCallback: internalSuccessCallback
						, errorCallback: internalErrorCallback
						//, additionalQueryParameter:
						//, timeout: 60000
					};
					DigiWebApp.JSONDatenuebertragungController.sendData(sendObj);
				} else {
					successCallback();
				}
			};
	
			absenden(mybuchungen, mysuccessCallback, myerrorCallback);
			
		}
	}

	, empfangeTaetigkeiten: function(successCallback, errorCallback) {

		var internalSuccessCallback = function(data, msg, request) {
			// verarbeite empfangene Daten
			
			//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("empfangeTaetigkeiten Status: " + request.status);
			
			// wurden tätigkeiten empfangen?
			if (typeof(data.leistungen) === "undefined" && data.leistungen !== null && data.leistungen.length > 0) {
				console.error("missing leistungen");
				return errorCallback();
			}
			
			var myLength = null;
			try {
				myLength = data.leistungen.length;
			} catch(e2) {
				console.error(myLength);
				//return errorCallback();
			}

			if (data.leistungen === null) {
				// hier könnte man - wenn gewünscht - verhindern, dass es gar keine Tätigkeiten gibt
				return errorCallback();
			} else {
				// ist data.leistungen auch wirklich ein Array?
				var myLength = null;
				try {
					myLength = data.leistungen.length;
				} catch(e2) {
					console.error(myLength);
					return errorCallback();
				}
			}
			
			// data.leistungen enthält also myLength Elemente

			// alle "alten" Tätigkeiten löschen
			DigiWebApp.Activity.deleteAll();
			
			// die empfangenen Materialien mit Model ablegen
			_.each(data.leistungen, function(el) {
				//console.log(el);
				if (typeof(el.leistungsId) === "undefined") {
					console.error("missing leistungsId");
					return errorCallback();
				} else if (typeof(el.leistungsBezeichnung) === "undefined") {
					console.error("missing leistungsBezeichnung");
					return errorCallback();
				} else {
					var istMitarbeiterZugeordnet = 0; // 0: nicht MA-zugeordnet, 1: MA-zugeordnet
					if (el.istMitarbeiterZugeordnet) {
						istMitarbeiterZugeordnet = 1;
					}
					// el zur Liste hinzufügen
					DigiWebApp.Activity.createRecord({
						  id: el.leistungsId
						, name: el.leistungsBezeichnung
						, positionId: istMitarbeiterZugeordnet // 0: nicht MA-zugeordnet, 1: MA-zugeordnet
						, istStandardPause: el.istStandardPause
						, istUnterschriftsAbnahme: el.istUnterschriftsAbnahme
						, istFahrzeitRelevant: el.istFahrzeitRelevant
					}).saveSorted();
				}
			});
			
			// weiter in der Verarbeitungskette
			successCallback();
		};
		//webservice, loaderText, successCallback, errorCallback, additionalQueryParameter, geraeteIdOverride, modus
		var recieveObj = {
			  webservice: "leistungen"
			, loaderText: M.I18N.l('getActivitiesLoader')
			, successCallback: internalSuccessCallback
			, errorCallback: errorCallback
			, additionalQueryParameter: ''
			//, timeout: 
			, geraeteIdOverride: false
			, modus: '1'
		};
		DigiWebApp.JSONDatenuebertragungController.recieveData(recieveObj);
		
	}

	, empfangePositionen: function(successCallback, errorCallback) {

		var internalSuccessCallback = function(data, msg, request) {
			// verarbeite empfangene Daten
			
			//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("empfangePositionen Status: " + request.status);
			
			// wurden Positionen empfangen?
			if (typeof(data.positionen) === "undefined" && data.positionen !== null && data.positionen.length > 0) {
				console.error("missing positionen");
				return errorCallback();
			}

			var myLength = null;
			try {
				myLength = data.positionen.length;
			} catch(e2) {
				console.error(myLength);
				//return errorCallback();
			}

			if (data.positionen === null) {
				// hier könnte man - wenn gewünscht - verhindern, dass es gar keine Positionen gibt
				return errorCallback();
			} else {
				// ist data.positionen auch wirklich ein Array?
				var myLength = null;
				try {
					myLength = data.positionen.length;
				} catch(e2) {
					console.error(myLength);
					return errorCallback();
				}
			}
			
			// data.positionen enthält also myLength Elemente

			// alle "alten" Positionen und Aufträge löschen
			DigiWebApp.Position.deleteAll();
			DigiWebApp.Order.deleteAll();
			
			// die empfangenen Positionen mit Model ablegen
			var errorHappened = false;
			_.each(data.positionen, function(el) {
				//console.log(el);
				if (typeof(el.positionsId) === "undefined") {
					console.error("missing positionsId");
					errorHappened = true;
					return;
				} else if (typeof(el.positionsBezeichnung) === "undefined") {
					console.error("missing positionsBezeichnung");
					errorHappened = true;
					return;
				} else {
					// el zur Liste hinzufügen
	            	var posid = el.positionsId;
	                var posname = el.positionsBezeichnung;
	                var posstrasse = el.strasse;
	                var poshausnummer = el.hausnummer;
	                var posplz = el.plz;
	                var posort = el.ort;
	                var posland = el.land;
	                var poscountrycode = el.countrycode;
	                var posphone = el.telefon;
	                var posfax = el.fax;
	                var posemail = el.email;
	                var posansprechpartner = el.ansprechpartner;
	                var poskundenname = el.kundenname;
	                var poslongitude = el.longitude;
	                var poslatitude = el.latitude;
	                var posdescription = el.auftragsBeschreibung;
	                var posorderId = el.auftragsId;
	                
	                var arbeitsbeginn = el.arbeitsbeginn;
	                var arbeitsende = el.arbeitsende;

	                var positionBegin = "";
					if (el.beginn) { positionBegin = el.beginn; }
					var positionEnd = "";
					if (el.ende && el.ende !== "01.01.1900") { positionEnd = el.ende; }

	            	if (typeof(posid) === "object") { posid = ""; } 
	            	if (typeof(posname) === "object") { posname = ""; } 
	            	if (typeof(posstrasse) === "object") { posstrasse = ""; } 
	            	if (typeof(poshausnummer) === "object") { poshausnummer = ""; } 
	            	if (typeof(posplz) === "object") { posplz = ""; } 
	            	if (typeof(posort) === "object") { posort = ""; } 
	            	if (typeof(posland) === "object") { posland = ""; } 
	            	if (typeof(poscountrycode) === "object") { poscountrycode = ""; } 
	            	if (typeof(posphone) === "object") { posphone = ""; } 
	            	if (typeof(posfax) === "object") { posfax = ""; } 
	            	if (typeof(posemail) === "object") { posemail = ""; } 
	            	if (typeof(posansprechpartner) === "object") { posansprechpartner = ""; } 
	            	if (typeof(poskundenname) === "object") { poskundenname = ""; } 
	            	if (typeof(poslongitude) === "object") { poslongitude = ""; } 
	            	if (typeof(poslatitude) === "object") { poslatitude = ""; } 
	            	if (typeof(posdescription) === "object") { posdescription = ""; } 
	            	if (typeof(posorderId) === "object") { posorderId = ""; } 
	            	if (typeof(arbeitsbeginn) === "object") { arbeitsbeginn = ""; } 
	            	if (typeof(arbeitsende) === "object") { arbeitsende = ""; } 

	            	var positionItem = DigiWebApp.Position.createRecord({
	                      id: posid
	                    , name: posname
	                    , strasse: posstrasse
	                    , hausnummer: poshausnummer
	                    , plz: posplz
	                    , ort: posort
	                    , land: posland
	                    , countrycode: poscountrycode
	                    , telefon: posphone
	                    , fax: posfax
	                    , email: posemail
	                    , ansprechpartner: posansprechpartner
	                    , kundenname: poskundenname
	                    , longitude: poslongitude
	                    , latitude: poslatitude
	                    , description: posdescription
	                    , orderId: posorderId
						, positionBegin: positionBegin
						, arbeitsbeginn: arbeitsbeginn
						, arbeitsende: arbeitsende
	                });

	            	// gibt es den zugehörigen Auftrag schon?
	            	var loadedOrder = _.find(DigiWebApp.Order.find(), function(order) {
	            		return order.get("id") == posorderId;
	            	});
	            	if (!loadedOrder) {
	            		// zugehörigen Auftrag anlegen
                        var rec = DigiWebApp.Order.createRecord({
                              id: el.auftragsId
                            , name: el.auftragsBezeichnung
                        });
                        rec.saveSorted();
	            	}
	            	
					// sind Termine in der Position hinterlegt?
					var terminList = [];
					if (typeof(el.mitarbeiterTermine) !== "undefined" && el.mitarbeiterTermine !== null && el.mitarbeiterTermine.length > 0) {
						
						// Termine hinzufügen
						_.each(el.mitarbeiterTermine, function(termin) {
							if (termin.ganzerTag) {
								// künstliches von und bis setzen, um die Uhrzeit in der Terminliste ausblenden zu können
								var datum = termin.von.split(" ")[0];
								termin.von = datum + " 00:00:00"
								termin.bis = datum + " 23:59:59"
							}
							terminList.push(JSON.stringify(termin));
						});
						
					}
					positionItem.set("appointments", JSON.stringify(terminList));
					
					//Position speichern
					positionItem.saveSorted();
				}
			});
			
			if (errorHappened) {
				return errorCallback();
			} else {
				// weiter in der Verarbeitungskette
				return successCallback();
			}
			
		};

		//webservice, loaderText, successCallback, errorCallback, additionalQueryParameter, geraeteIdOverride, modus
		var recieveObj = {
			  webservice: "positionen"
			, loaderText: M.I18N.l('getPositionsLoader')
			, successCallback: internalSuccessCallback
			, errorCallback: errorCallback
			, additionalQueryParameter: ''
			//, timeout: 
			, geraeteIdOverride: false
			, modus: '1'
		};
		DigiWebApp.JSONDatenuebertragungController.recieveData(recieveObj);
		
	}

	, empfangeFestepausendefinitionen: function(successCallback, errorCallback) {

		var internalSuccessCallback = function(data, msg, request) {
			// verarbeite empfangene Daten
			
			//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("empfangeFestepausendefinitionen Status: " + request.status);
			
			// wurden Festepausendefinitionen empfangen?
			if (typeof(data.festepausendefinitionen) === "undefined" && data.festepausendefinitionen !== null && data.festepausendefinitionen.length > 0) {
				console.error("missing festepausendefinitionen");
				return errorCallback();
			}
			
			var myLength = null;
			try {
				myLength = data.festepausendefinitionen.length;
			} catch(e2) {
				console.error(myLength);
				//return errorCallback();
			}

			if (data.festepausendefinitionen === null) {
				// hier könnte man - wenn gewünscht - verhindern, dass es gar keine festepausendefinitionen gibt
				//return errorCallback();
			} else {
				// ist data.festepausendefinitionen auch wirklich ein Array?
				var myLength = null;
				try {
					myLength = data.festepausendefinitionen.length;
				} catch(e2) {
					console.error(myLength);
					return errorCallback();
				}
			}
			
			// data.festepausendefinitionen enthält also myLength Elemente

			// alle "alten" festepausendefinitionen löschen
			DigiWebApp.Festepausendefinition.deleteAll();
			
			// die empfangenen festepausendefinitionen mit Model ablegen
			_.each(data.festepausendefinitionen, function(el) {
				if (typeof(el) == "undefined" || el == null) {
					console.error("empty element");
					//return errorCallback();
				} else if (typeof(el.id) === "undefined") {
					console.error("missing id");
					return errorCallback();
				} else if (typeof(el.wochentagId) === "undefined") {
					console.error("missing wochentagId");
					return errorCallback();
				} else if (typeof(el.von) === "undefined") {
					console.error("missing von");
					return errorCallback();
				} else if (typeof(el.bis) === "undefined") {
					console.error("missing bis");
					return errorCallback();
				} else {
					// el zur Liste hinzufügen
					DigiWebApp.Festepausendefinition.createRecord({
						  id: el.id
						, ressourceId: el.ressourceId
						, wochentagId: el.wochentagId // 0 = Sonntag, 1 = Montag, ...
						, von: el.von
						, bis: el.bis
					}).saveSorted();
				}
			});
			
			// weiter in der Verarbeitungskette
			successCallback();
		};
		// webservice, loaderText, successCallback, errorCallback, additionalQueryParameter, geraeteIdOverride, modus
		var recieveObj = {
			  webservice: "festepausendefinitionen"
			, loaderText: M.I18N.l('getFestepausendefinitionenLoader')
			, successCallback: internalSuccessCallback
			, errorCallback: errorCallback
			, additionalQueryParameter: ''
			//, timeout: 
			, geraeteIdOverride: false
			, modus: '1'
		};
		DigiWebApp.JSONDatenuebertragungController.recieveData(recieveObj);
		
	}
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: MediaListController
// ==========================================================================
// manuell var-checked
DigiWebApp.MediaListController = M.Controller.extend({

    /* mediafiles */
      items: null

    /* Aktionen um neue MediaFiles zu erzeugen */
    , actions: null

    , latestId: null
    
    , lastTimestampDatatransfer: null

    /*
    * Which files do we have to display?
    */
    , init: function(isFirstLoad) {
		var that = DigiWebApp.MediaListController;
		var items = [];
        if (isFirstLoad) {
            /* do something here, when page is loaded the first time. */
        }
        /* do something, for any other load. */
        items = _.sortBy(DigiWebApp.MediaFile.find(), function(mediafile) {
            return parseInt(mediafile.get('timeStamp'));
        });
        that.set('items', items.reverse());

        if (DigiWebApp.MediaListPage.needsUpdate) {
            var actions = [];
                        
//            // Start::TakePicture (400)
//            if (DigiWebApp.SettingsController.featureAvailable('400')) {
//            	//if (DigiWebApp.SettingsController.globalDebugMode) console.log("enabling Feature 400 (TakePicture)");
//            	actions.push({
//                      label: M.I18N.l('takePicture')
//                    , icon: 'icon_takePicture.png'
//                    , id: 'foto'
//                });
//            }
//            // End::TakePicture
//
//            // Start::RecordAudio (401)
//            if (DigiWebApp.SettingsController.featureAvailable('401')) {
//            	//if (DigiWebApp.SettingsController.globalDebugMode) console.log("enabling Feature 401 (RecordAudio)");
//            	actions.push({
//                      label: M.I18N.l('recordAudio')
//                    , icon: 'icon_recordAudio.png'
//                    , id: 'audio'
//                });
//            }
//            // End::RecordAudio

        	actions.push({
                  label: M.I18N.l('uploadMediaFiles')
                , icon: 'icon_dataTransfer.png'
                , id: 'uploadMediaFiles'
            });

        	that.set('actions', actions);
            DigiWebApp.MediaListPage.needsUpdate = false;
        }

        var list;

        try {
	        list = M.ViewManager.getView('mediaListPage', 'mediafileslist');
	        if (list) {
	            $('#' + list.id).find('li').each(function() {
	                $(this).removeClass('selected');
	            });
	        }
		} catch(e2) { console.error(e2); }

        
        try {
	        list = M.ViewManager.getView('mediaListPage', 'actionslist');
	        if (list) {
	            $('#' + list.id).find('li').each(function() {
	                $(this).removeClass('selected');
	            });
	        }
        } catch(e2) { console.error(e2); }

		DigiWebApp.ApplicationController.DigiLoaderView.hide();

	}

	, itemSelected: function(id, m_id) {
		try{DigiWebApp.ApplicationController.vibrate();}catch(e2s){} 
        if (this.latestId) {
            $('#' + this.latestId).removeClass('selected');
        }
        $('#' + id).addClass('selected');

        this.latestId = id;

        if (m_id && typeof(this[m_id]) === 'function') {
            this[m_id]();
        }
    }

	, neu: function() {
		var that = DigiWebApp.MediaListController;
//    	M.DialogView.actionSheet({
//	          title: M.I18N.l('newMedia')
//	        , cancelButtonValue: M.I18N.l('cancel')
//	        //, otherButtonValues: [M.I18N.l('audio'),M.I18N.l('photo'),M.I18N.l('video'),M.I18N.l('other')]
//	        //, otherButtonTags: ["audio", "photo", "video", "other"]
//	        , otherButtonValues: [M.I18N.l('photo')]
//	        , otherButtonTags: ["photo"]
//	        , callbacks: {
//  				  other: {action: function(buttonTag) {
//	  			    switch(buttonTag) {
//		    		        case 'audio':
//		    		            DigiWebApp.ApplicationController.nativeAlertDialogView({
//		    		                title: M.I18N.l('notImplemented')
//		    		              , message: M.I18N.l('notImplementedMsg')
//		    		            });
//		    		        	/*if (DigiWebApp.SettingsController.featureAvailable('401')) {
//		    		        		that.audio();
//		    		        	} else {
//		    		        		DigiWebApp.ApplicationController.nativeAlertDialogView({
//			    		                title: M.I18N.l('notActivated')
//			    		              , message: M.I18N.l('notActivatedMsg')
//			    		            });
//		    		        	}*/
//		    		            break;
//		    		        case 'photo':
		    		        	if (DigiWebApp.SettingsController.featureAvailable('400')) {
		    		        		that.foto();
		    		        	} else {
		    		        		DigiWebApp.ApplicationController.nativeAlertDialogView({
			    		                title: M.I18N.l('notActivated')
			    		              , message: M.I18N.l('notActivatedMsg')
			    		            });
		    		        	}
//		    		            break;
//		    		        case 'video':
//		    		            DigiWebApp.ApplicationController.nativeAlertDialogView({
//		    		                title: M.I18N.l('notImplemented')
//		    		              , message: M.I18N.l('notImplementedMsg')
//		    		            });
//		    		            break;
//		    		        case 'other':
//		    		            DigiWebApp.ApplicationController.nativeAlertDialogView({
//		    		                title: M.I18N.l('notImplemented')
//		    		              , message: M.I18N.l('notImplementedMsg')
//		    		            });
//		    		            break;
//		    		        default:
//		    		            console.log("unknonw ButtonTag");
//		    		            break;
//	  			    }
//	  			}}
//  			, cancel: {action: function() {
//  				//console.log(M.I18N.l('cancel'));
//  			}}
//  		}
//	    });
	
	}

    , foto: function() {
		var that = this;
    	M.DialogView.actionSheet({
	          title: M.I18N.l('takePicture')
	        , cancelButtonValue: M.I18N.l('cancel')
	        , otherButtonValues: [M.I18N.l('library'),M.I18N.l('camera')]
	        , otherButtonTags: ["library", "camera"]
	        , callbacks: {
				  other: {action: function(buttonTag) {
	  			    switch(buttonTag) {
		    		        case 'library':
		    		        	
		    		        	// unterscheiden: auf Gerät oder im Browser?
		    		        	if ( typeof navigator.camera !== 'undefined' 
		    	        		  && typeof navigator.camera.getPicture !== 'undefined') {
		    		        		
		    		        		// auf Geraet:
		    		        		navigator.camera.getPicture(
	    		        				  function(imgData) {
	    		        				    	//alert("success");
	    		        					  if (imgData.indexOf("data:") === 0) {
					    		        		DigiWebApp.CameraController.set("loadedPicture", imgData);
	    		        					  } else {
					    		        		DigiWebApp.CameraController.set("loadedPicture", 'data:' + DigiWebApp.ApplicationController.CONSTImageFiletype + ',' + imgData);
	    		        					  }
	    		        					  DigiWebApp.CameraController.set("fileType", DigiWebApp.ApplicationController.CONSTImageFiletype);
	    		        					  DigiWebApp.NavigationController.toCameraPageTransition();
	    		        				}
	    		        				, function(err) {
				    		        		DigiWebApp.CameraController.set("loadedPicture", null);
				    		        		DigiWebApp.CameraController.set("fileType", null);
					    		            DigiWebApp.ApplicationController.nativeAlertDialogView({
					    		                title: M.I18N.l('error')
					    		              , message: M.I18N.l('noPicLoaded') + ": " + err
					    		            });	    		        					
	    		        				}
	    		        				, {
	    		        					  quality: 40
	    		     	    				, allowEdit: true
	    		     	    				, destinationType : navigator.camera.DestinationType.DATA_URL
	    		     	    				//, destinationType: navigator.camera.DestinationType.FILE_URI
	    		     	    				, encodingType: navigator.camera.EncodingType.JPEG
	    		     	    				, sourceType: navigator.camera.PictureSourceType.PHOTOLIBRARY 
	    		     	    				, mediaType: navigator.camera.MediaType.PICTURE
	    		     	    				, saveToPhotoAlbum: false
	    		        				}
		    		        		);
		    		        		
		    		        	} else {
		    		        	
			    		        	// im Browser:
			    		        	DigiWebApp.FileChooserPage.set("successCallback", function(imgData, fileName) {
				    		        	if (imgData !== null) {
				    		        		  DigiWebApp.CameraController.set("loadedFileName", fileName);
				    		        		  var myFileType = ""; //DigiWebApp.ApplicationController.CONSTImageFiletype;
				    		        		  var tmp = fileName;
				    		        		  var i = 0;
				    		        		  while (i !== -1) {
				    		        			  tmp = tmp.substr(i + 1);
				    		        			  i = tmp.indexOf(".");
				    		        		  }
				    		        		  tmp = tmp.toLowerCase();
				    		        		  switch (tmp) {
				    		        		  	case "jpg":
						    		        		  // filetype zum MIME-Type vervollständigen
						    		        		  myFileType = "image/jpeg";
				    		        		  		break;
				    		        		  	case "jpeg":
						    		        		  // filetype zum MIME-Type vervollständigen
						    		        		  myFileType = "image/" + tmp;
				    		        		  		break;
				    		        		  	case "png":
						    		        		  // filetype zum MIME-Type vervollständigen
						    		        		  myFileType = "image/" + tmp;
				    		        		  		break;
				    		        		  	case "bmp":
						    		        		  // filetype zum MIME-Type vervollständigen
						    		        		  myFileType = "image/" + tmp;
				    		        		  		break;
				    		        		  	default:
				    		        		  		break;
				    		        		  }
				    		        		  switch (myFileType) {
				    		        		  	case "":
						    		        		DigiWebApp.CameraController.set("loadedPicture", null);
						    		        		DigiWebApp.CameraController.set("fileType", null);
							    		            DigiWebApp.ApplicationController.nativeAlertDialogView({
							    		                title: M.I18N.l('error')
							    		              , message: M.I18N.l('noPicLoaded')
							    		            });
				    		        		  		break;
				    		        		  	default:
				    		        		  		DigiWebApp.CameraController.set("fileType", myFileType);
			    		        					if (imgData.indexOf("data:") === 0) {
			    		        						DigiWebApp.CameraController.set("loadedPicture", imgData);
			    		        					} else {
							    		        		DigiWebApp.CameraController.set("loadedPicture", 'data:' + myFileType + ',' + imgData);
			    		        					}
			    		        					DigiWebApp.NavigationController.toCameraPageTransition();
			    		        					break;
				    		        		  }
				    		        	} else {
				    		        		DigiWebApp.CameraController.set("loadedPicture", null);
				    		        		DigiWebApp.CameraController.set("fileType", null);
					    		            DigiWebApp.ApplicationController.nativeAlertDialogView({
					    		                title: M.I18N.l('error')
					    		              , message: M.I18N.l('noPicLoaded')
					    		            });
				    		        	}
			    		        	});
			    		        	DigiWebApp.NavigationController.toFileChooserPageTransition();
		    		        	}
		    		        	
		    		            break;
		    		        case 'camera':
		    		        	if (       typeof navigator.camera !== 'undefined' 
				    	        		&& typeof navigator.camera.getPicture !== 'undefined'
		    		            	) {
		    		        			DigiWebApp.CameraController.set("loadedPicture", null);
		    		        			DigiWebApp.NavigationController.toCameraPageTransition();
		    		        	} else {
			    		            DigiWebApp.ApplicationController.nativeAlertDialogView({
			    		                title: M.I18N.l('error')
			    		              , message: M.I18N.l('noCamera')
			    		            });
		    		        	}
		    		            break;
		    		        default:
		    		            console.log("unknonw ButtonTag");
		    		            break;
	  			    }
	  			}}
			, cancel: {action: function() {
				//console.log(M.I18N.l('cancel'));
			}}
		}
	    });

    }

    , audio: function() {
        DigiWebApp.NavigationController.toAudioPageTransition();
    }
    
    , uploadMediaFiles: function() {
    	var that = DigiWebApp.MediaListController;
    	var startTransfer = NO;
    	if (that.lastTimestampDatatransfer !== null) {
    		var timestampNow = D8.now().getTimestamp();
    		if (timestampNow - that.lastTimestampDatatransfer > parseInt(DigiWebApp.SettingsController.getSetting('datatransfer_min_delay'))) {
    			startTransfer = YES;
    		} else {
    			// evtl. Fehlermeldung, dass noch eine Datenübertragung läuft bzw. nur alle 30 Sekunden eine Datenübertragung gestartet werden darf
    		}
    	}
    	if (startTransfer === YES || that.lastTimestampDatatransfer === null) {
    		that.doUploadMediaFiles();
    	}
    }
    
    , doUploadMediaFiles: function() {

		var that = DigiWebApp.MediaListController;
		that.set("lastTimestampDatatransfer", D8.now().getTimestamp());
		
		DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('loadMediaFiles'));

		var successCallback = function() {
			DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('cleanMediaFiles'));
			DigiWebApp.MediaListController.init();
			//DigiWebApp.MediaFile.deleteAll(DigiWebApp.MediaListController.init);
		};
		
		var errorCallback = function(err) {
			console.error(err);
			DigiWebApp.MediaListController.init();
			DigiWebApp.ApplicationController.DigiLoaderView.hide();
		};
		
		var proceed = function(mediaFiles) {
			
			if (mediaFiles.length !== 0) {
				
				var mediaFilesLength = mediaFiles.length;
		    	var mediaFilesIndex = 0;
		    	var done = false;

		    	_.each(mediaFiles, function(el) {
		    		
		    		var items = [];
					var rec = JSON.parse(JSON.stringify(el)); // clone to new Object
					if (rec.record.handOrderId !== null && rec.record.handOrderId !== "0") {
						rec.record.orderId = null;
					}
					items.push(rec.record);
					
					var myMediaListToSend = {"medien": items};
					
	    			console.log('sending mediaFile ' + rec.record.fileName);
	    			
    				var mindestMedienTimeout = 60000;
    				var myTimeout = DigiWebApp.SettingsController.getSetting('WebserviceTimeOut');
    				if (parseInt(DigiWebApp.SettingsController.getSetting('WebserviceTimeOut')) < mindestMedienTimeout) {
    					myTimeout = mindestMedienTimeout;
    				}
    				
					var sendObj = {
						  data: myMediaListToSend
						, webservice: "medien"
						, loaderText: M.I18N.l('sendeMedien')
						, successCallback: function(data2, msg, request) {
					    	_.each(mediaFiles, function(mf) {
					            if (mf.m_id == el.m_id) {
					            	var delFunc = function() {
					            		mf.del();
						                var items = _.sortBy(DigiWebApp.MediaFile.find(), function(mediafile) {
						                    return parseInt(mediafile.get('timeStamp'));
						                });
						                that.set('items', items.reverse());
					            	}
					            	mf.deleteFile(delFunc, delFunc);
						    		mediaFilesIndex = mediaFilesIndex + 1;
					            }
					        });
							if ( mediaFilesIndex === mediaFilesLength && done === false) {
								// last mediaFile sent
					    		console.log('sending last mediaFile done (with file)');
			    				done = true;
			    				successCallback();
							}
						}
						, errorCallback: function(xhr, err) {
							if ( mediaFilesIndex === mediaFilesLength && done === false) {
								// last mediaFile sent (failed)
					    		console.log('last mediaFile done (sending last file failed)');
			    				done = true;
			    				successCallback();
							}
						}
						//, additionalQueryParameter:
						, timeout: myTimeout
						, omitLoaderHide: true
					};
					DigiWebApp.JSONDatenuebertragungController.sendData(sendObj);
							
		        });

// Alte Variante: alles auf einmal senden
//				var items = [];
//				
//				_.each(mediaFiles, function(mf){
//					var rec = JSON.parse(JSON.stringify(mf)); // clone to new Object
//					if (rec.record.handOrderId !== null && rec.record.handOrderId !== "0") {
//						rec.record.orderId = null;
//					}
//					items.push(rec.record);
//				});
//				
//				var data = {"medien": items};
//				
//				var internalSuccessCallback = function(data2, msg, request) {
//					// verarbeite empfangene Daten
//					console.log("sendeMedien Status: " + request.status);
//					// weiter in der Verarbeitungskette
//					successCallback();
//								
//				};
//				var sendObj = {
//						  data: data
//						, webservice: "medien"
//						, loaderText: M.I18N.l('sendeMedien')
//						, successCallback: internalSuccessCallback
//						, errorCallback: errorCallback
//						//, additionalQueryParameter:
//						, timeout: 60000
//				};
//				DigiWebApp.JSONDatenuebertragungController.sendData(sendObj);
		    	
			} else {
				// no files to send

				// weiter in der Verarbeitungskette
				successCallback();
			}
    	};

		var mediaFiles = DigiWebApp.MediaFile.find();
		var mediaFilesLength = mediaFiles.length;
    	var mediaFilesIndex = 0;
    	var done = false;
    	
    	if (mediaFilesLength !== 0) { 
	    	_.each(mediaFiles, function(el) {
	    			    		
    			if (el.hasFileName()) {
        			console.log('loading mediaFile ' + el.get('fileName'));

        			el.readFromFile(function(fileContent) {
						//console.log("fileContent: " + fileContent);
						if (fileContent && (fileContent !== "")) {
					    	_.each(mediaFiles, function(mf) {
					            if (mf.m_id == el.m_id) {
					            	mf.set("data", fileContent);
						    		mediaFilesIndex = mediaFilesIndex + 1;
				        			console.log('mediaFile ' + mf.get('fileName') + ' loaded (' + mediaFilesIndex + ')');
					            }
					        });
						}
						if ( mediaFilesIndex === mediaFilesLength && done === false) {
							// last mediaFile loaded
				    		console.log('last mediaFile done (with file)');
		    				//DigiWebApp.ApplicationController.DigiLoaderView.hide();
		    				done = true;
		    				proceed(mediaFiles);
						}
					}, function() {
						if ( mediaFilesIndex === mediaFilesLength && done === false) {
							// last mediaFile loaded
				    		console.log('last mediaFile done (last file load failed)');
		    				//DigiWebApp.ApplicationController.DigiLoaderView.hide();
		    				done = true;
		    				proceed(mediaFiles);
						}
					});
    			} else {
	    			// this mediaFile has no file
					if ( mediaFilesIndex === mediaFilesLength && done === false) {
						// last mediaFile loaded
			    		console.log('last mediaFile done (no file)');
	    				//DigiWebApp.ApplicationController.DigiLoaderView.hide();
	    				done = true;
	    				proceed(mediaFiles);
					}
	    		}
	        });
    	} else {
    		//console.log('no mediafiles');
			//DigiWebApp.ApplicationController.DigiLoaderView.hide();
			proceed(mediaFiles);
    	}
    }

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: NavigationController
// ==========================================================================
// manuell var-checked
DigiWebApp.NavigationController = M.Controller.extend({

	  toSplashViewPage: function() {
		DigiWebApp.NavigationController.switchToPage('splashView', M.TRANSITION.NONE, NO);
  	}

	, toSplashViewPageTransition: function() {
		DigiWebApp.NavigationController.switchToPage('splashView', M.TRANSITION.FADE, NO);
	}

    , toInfoPage: function() {
    	DigiWebApp.NavigationController.switchToPage('infoPage', M.TRANSITION.NONE, NO);
    }

    , toInfoPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('infoPage', M.TRANSITION.SLIDEUP, NO);
    }

    , backToBookTimePage: function() {
    	var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));
    	if (ChefToolOnly) {
        	var Bautagebuch = (DigiWebApp.SettingsController.featureAvailable('412'));
    		if (Bautagebuch) {
    			DigiWebApp.NavigationController.startBautagebuch();
    		} else {
        		//var o = DigiWebApp.ApplicationController.useSplashJustForFade;
        		DigiWebApp.ApplicationController.useSplashJustForFade = YES;
        		DigiWebApp.NavigationController.toSplashViewPage();
        		DigiWebApp.ApplicationController.useSplashJustForFade = 0;
        		DigiWebApp.NavigationController.backToDashboardPage();
    		}
    	} else {
    		try {
    			if (DigiWebApp.SettingsController.featureAvailable('416')) {
    				DigiWebApp.NavigationController.switchToPage('bookingPageWithIconsScholpp', M.TRANSITION.SLIDEUP, YES);
    			} else {
    				DigiWebApp.NavigationController.switchToPage('bookingPage', M.TRANSITION.SLIDEUP, YES);
    			}
    		} catch(e2) { console.error(e2); }
    	}
    }

    , backToBookTimePagePOP: function() {
    	var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));
    	if (ChefToolOnly) {
        	var Bautagebuch = (DigiWebApp.SettingsController.featureAvailable('412'));
    		if (Bautagebuch) {
        		DigiWebApp.NavigationController.startBautagebuch();    			
    		} else {
	    		//var o = DigiWebApp.ApplicationController.useSplashJustForFade;
	    		DigiWebApp.ApplicationController.useSplashJustForFade = YES;
	    		DigiWebApp.NavigationController.toSplashViewPage();
	    		DigiWebApp.ApplicationController.useSplashJustForFade = 0;
	    		//DigiWebApp.NavigationController.backToDashboardPagePOP();
    		}	
    	} else {
    		try {
    			if (DigiWebApp.SettingsController.featureAvailable('416')) {
    				DigiWebApp.NavigationController.switchToPage('bookingPageWithIconsScholpp', M.TRANSITION.POP, YES);
    			} else {
    				DigiWebApp.NavigationController.switchToPage('bookingPage', M.TRANSITION.POP, YES);
    			}
    		} catch(e2) { console.error(e2); }
    	}
    }

    , toBookTimePage: function() {
    	var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));
    	if (ChefToolOnly) {
        	var Bautagebuch = (DigiWebApp.SettingsController.featureAvailable('412'));
    		if (Bautagebuch) {
        		DigiWebApp.NavigationController.startBautagebuch();    			
    		} else {
	    		//var o = DigiWebApp.ApplicationController.useSplashJustForFade;
	    		DigiWebApp.ApplicationController.useSplashJustForFade = YES;
	    		DigiWebApp.NavigationController.toSplashViewPage();
	    		DigiWebApp.ApplicationController.useSplashJustForFade = 0;
	    		//DigiWebApp.NavigationController.toDashboardPage();
    		}
    	} else {
    		//try {
    			if (DigiWebApp.SettingsController.featureAvailable('416')) {
    				DigiWebApp.NavigationController.switchToPage('bookingPageWithIconsScholpp', M.TRANSITION.NONE, NO);
    			} else {
    				DigiWebApp.NavigationController.switchToPage('bookingPage', M.TRANSITION.NONE, NO);
    			}
    		//} catch(e) { console.error(e); }
    	}
    }

    , toBookTimePageTransition: function() {
    	var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));
    	if (ChefToolOnly) {
        	var Bautagebuch = (DigiWebApp.SettingsController.featureAvailable('412'));
    		if (Bautagebuch) {
        		DigiWebApp.NavigationController.startBautagebuch();    			
    		} else {
	    		//var o = DigiWebApp.ApplicationController.useSplashJustForFade;
	    		DigiWebApp.ApplicationController.useSplashJustForFade = YES;
	    		DigiWebApp.NavigationController.toSplashViewPage();
	    		DigiWebApp.ApplicationController.useSplashJustForFade = 0;
	    		//DigiWebApp.NavigationController.toDashboardPageTransition();
    		}
    	} else {
    		try {
    			if (DigiWebApp.SettingsController.featureAvailable('416')) {
    				DigiWebApp.NavigationController.switchToPage('bookingPageWithIconsScholpp', M.TRANSITION.SLIDEUP, NO);
    			} else {
    				DigiWebApp.NavigationController.switchToPage('bookingPage', M.TRANSITION.SLIDEUP, NO);
    			}
    		} catch(e3) { console.error(e3); }
    	}
    }

    , toBookTimePageFlipTransition: function() {
    	var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));
    	if (ChefToolOnly) {
        	var Bautagebuch = (DigiWebApp.SettingsController.featureAvailable('412'));
    		if (Bautagebuch) {
        		DigiWebApp.NavigationController.startBautagebuch();    			
    		} else {
	    		//var o = DigiWebApp.ApplicationController.useSplashJustForFade;
	    		DigiWebApp.ApplicationController.useSplashJustForFade = YES;
	    		DigiWebApp.NavigationController.toSplashViewPage();
	    		DigiWebApp.ApplicationController.useSplashJustForFade = 0;
	    		//DigiWebApp.NavigationController.toDashboardPageFlipTransition();
    		}
    	} else {
    		try {
    			if (DigiWebApp.SettingsController.featureAvailable('416')) {
    				DigiWebApp.NavigationController.switchToPage('bookingPageWithIconsScholpp', M.TRANSITION.FLIP, YES);
    			} else {
    				DigiWebApp.NavigationController.switchToPage('bookingPage', M.TRANSITION.FLIP, YES);
    			}
    		} catch(e4) { console.error(e4); }
    	}
    }

    , backToBookTimePageFlipTransition: function() {
    	var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));
    	if (ChefToolOnly) {
        	var Bautagebuch = (DigiWebApp.SettingsController.featureAvailable('412'));
    		if (Bautagebuch) {
        		DigiWebApp.NavigationController.startBautagebuch();    			
    		} else {
	    		//var o = DigiWebApp.ApplicationController.useSplashJustForFade;
	    		DigiWebApp.ApplicationController.useSplashJustForFade = YES;
	    		DigiWebApp.NavigationController.toSplashViewPage();
	    		DigiWebApp.ApplicationController.useSplashJustForFade = 0;
	    		//DigiWebApp.NavigationController.backToDashboardPageFlipTransition();
    		}
    	} else {
    		try {
    			if (DigiWebApp.SettingsController.featureAvailable('416')) {
    				DigiWebApp.NavigationController.switchToPage('bookingPageWithIconsScholpp', M.TRANSITION.FLIP, NO);
    			} else {
    				DigiWebApp.NavigationController.switchToPage('bookingPage', M.TRANSITION.FLIP, NO);
    			}
    		} catch(e5) { console.error(e5); }
    	}
    }

    , toHandOrderPage: function() {
    	var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));
    	if (ChefToolOnly) {
			if (DigiWebApp.SettingsController.featureAvailable('404')) {
	            DigiWebApp.NavigationController.toButtonDashboardPage();
			} else {
	            DigiWebApp.NavigationController.toDashboardPage();
			}
    	} else {
    		DigiWebApp.NavigationController.switchToPage('handOrderPage', M.TRANSITION.NONE, NO);
    	}
    }

    , toHandOrderPageTransition: function() {
    	var ChefToolOnly = (DigiWebApp.SettingsController.featureAvailable('409'));
    	if (ChefToolOnly) {
			if (DigiWebApp.SettingsController.featureAvailable('404')) {
	            DigiWebApp.NavigationController.toButtonDashboardPage();
			} else {
	            DigiWebApp.NavigationController.toDashboardPage();
			}
    	} else {
        	DigiWebApp.NavigationController.switchToPage('handOrderPage', M.TRANSITION.SLIDEUP, NO);
    	}
    }

    , toSettingsPage: function() {
    	DigiWebApp.NavigationController.switchToPage('settingsPage', M.TRANSITION.NONE, NO);
    }

    , backToSettingsPage: function() {
    	DigiWebApp.NavigationController.switchToPage('settingsPage', M.TRANSITION.POP, YES);
    }

//    , toNoSettingsiOSPage: function() {
//    	DigiWebApp.NavigationController.switchToPage('noSettingsiOSPage', M.TRANSITION.POP, NO);
//    }

    , toSettingsPasswordPage: function() {
    	DigiWebApp.NavigationController.switchToPage('settingsPasswordPage', M.TRANSITION.NONE, NO);
    }

    , toSettingsPasswordPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('settingsPasswordPage', M.TRANSITION.POP, NO);
    }

    , toTimeDataPage: function() {
    	DigiWebApp.NavigationController.switchToPage('timeDataPage', M.TRANSITION.NONE, NO);
    }

    , toTimeDataPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('timeDataPage', M.TRANSITION.SLIDEUP, NO);
    }

    , backToTimeDataPage: function() {
    	DigiWebApp.NavigationController.switchToPage('timeDataPage', M.TRANSITION.SLIDEUP, YES);
    }

    , toEmployeePage: function() {
    	DigiWebApp.NavigationController.switchToPage('employeePage', M.TRANSITION.POP, NO);
    }
    
 // START::normales Menü
    , toDashboardPage: function() {
    	DigiWebApp.NavigationController.switchToPage('dashboard', M.TRANSITION.NONE, NO);
    }

    , toDashboardPageTransition: function() { // 404 checked
    	DigiWebApp.NavigationController.switchToPage('dashboard', M.TRANSITION.SLIDEUP, NO);
    }

    , backToDashboardPage: function() { // 404 checked
    	DigiWebApp.NavigationController.switchToPage('dashboard', M.TRANSITION.SLIDEUP, YES);
    }

    , backToDashboardPagePOP: function() {   // 404 checked
    	DigiWebApp.NavigationController.switchToPage('dashboard', M.TRANSITION.POP, YES);
    }

    , backToDashboardPageFlipTransition: function() {  // 404 checked
    	DigiWebApp.NavigationController.switchToPage('dashboard', M.TRANSITION.FLIP, YES);
    }

    , toDashboardPageFlipTransition: function() { // 404 checked
    	DigiWebApp.NavigationController.switchToPage('dashboard', M.TRANSITION.FLIP, NO);
    }
// ENDE::normales Menü
    
// START:ButtonMenü
    , toButtonDashboardPage: function() {
    	DigiWebApp.NavigationController.switchToPage('buttonsDashboard', M.TRANSITION.NONE, NO);
    }

    , toButtonDashboardPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('buttonsDashboard', M.TRANSITION.SLIDEUP, NO);
    }

    , backToButtonDashboardPage: function() {
    	DigiWebApp.NavigationController.switchToPage('buttonsDashboard', M.TRANSITION.SLIDEUP, YES);
    }

    , backToButtonDashboardPagePOP: function() {
    	DigiWebApp.NavigationController.switchToPage('buttonsDashboard', M.TRANSITION.POP, YES);
    }

    , backToButtonDashboardPageFlipTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('buttonsDashboard', M.TRANSITION.FLIP, YES);
    }

    , toButtonDashboardPageFlipTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('buttonsDashboard', M.TRANSITION.FLIP, NO);
    }
// ENDE:ButtonMenü
    
    , toOrderInfoPage: function() {
    	DigiWebApp.NavigationController.switchToPage('orderInfoPage', M.TRANSITION.NONE, NO);
    }

    , toOrderInfoPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('orderInfoPage', M.TRANSITION.SLIDEUP, NO);
    }

    , toEditPicturePage: function() {
    	DigiWebApp.NavigationController.switchToPage('editPicturePage', M.TRANSITION.NONE, NO);
    }

    , toEditPicturePageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('editPicturePage', M.TRANSITION.SLIDEUP, NO);
    }

    , backToEditPicturePage: function() {
    	DigiWebApp.NavigationController.switchToPage('editPicturePage', M.TRANSITION.SLIDEUP, YES);
    }

    , toDemoMediaPage: function() { /* DEMO */
    	DigiWebApp.NavigationController.switchToPage('demomediaPage', M.TRANSITION.NONE, NO);
    }

    , toDemoMediaPageTransition: function() { /* DEMO */
    	DigiWebApp.NavigationController.switchToPage('demomediaPage', M.TRANSITION.SLIDEUP, NO);
    }

    , backToDemoMediaPage: function() { /* DEMO */
    	DigiWebApp.NavigationController.switchToPage('demomediaPage', M.TRANSITION.SLIDEUP, YES);
    }

    , toMediaListPage: function() {
    	DigiWebApp.NavigationController.switchToPage('mediaListPage', M.TRANSITION.NONE, NO);
    }

    , toMediaListPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('mediaListPage', M.TRANSITION.SLIDEUP, NO);
    }

    , backToMediaListPage: function() {
    	DigiWebApp.NavigationController.switchToPage('mediaListPage', M.TRANSITION.NONE, YES);
    }

    , backToMediaListPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('mediaListPage', M.TRANSITION.SLIDEUP, YES);
    }

    , toAudioPage: function() {
    	DigiWebApp.NavigationController.switchToPage('audioPage', M.TRANSITION.NONE, NO);
    }

    , toAudioPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('audioPage', M.TRANSITION.SLIDEUP, NO);
    }

    , toDemoAudioPage: function() { /* DEMO */
    	DigiWebApp.NavigationController.switchToPage('demoaudioPage', M.TRANSITION.NONE, NO);
    }

    , toDemoAudioPageTransition: function() { /* DEMO */
    	DigiWebApp.NavigationController.switchToPage('demoaudioPage', M.TRANSITION.SLIDEUP, NO);
    }

    , toCameraPage: function() {
    	DigiWebApp.NavigationController.switchToPage('cameraPage', M.TRANSITION.NONE, NO);
    }
    
    , toCameraPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('cameraPage', M.TRANSITION.SLIDEUP, NO);
    }
    
    , toDemoCameraPage: function() { /* DEMO */
    	DigiWebApp.NavigationController.switchToPage('democameraPage', M.TRANSITION.NONE, NO);
    }
    
    , toDemoCameraPageTransition: function() { /* DEMO */
    	DigiWebApp.NavigationController.switchToPage('democameraPage', M.TRANSITION.SLIDEUP, NO);
    }
    
    , toSpesenPage: function(mycallback) {
    	if (typeof(mycallback) === "function") {
    		DigiWebApp.SpesenPage.myCallback = mycallback;
        	DigiWebApp.NavigationController.switchToPage('spesenPage', M.TRANSITION.POP, NO);
    	}
    }
    
    , toRemarkPage: function(mycallback) {
    	if (typeof(mycallback) === "function") {
    		DigiWebApp.RemarkPage.myCallback = mycallback;
    	} else {
    		//console.log("mycallback is not a function!");
    		// reset to default behaviour
    		DigiWebApp.RemarkPage.myCallback = function() {
    			DigiWebApp.NavigationController.toBookTimePage();
        		DigiWebApp.BookingController.bookWithRemark();
        	};
    	}
    	DigiWebApp.NavigationController.switchToPage('remarkPage', M.TRANSITION.POP, NO);
    }
    
    , toEditTimeDataPage: function(mycallback) {
    	if (typeof(mycallback) === "function") {
    		DigiWebApp.EditTimeDataPage.myCallback = mycallback;
    	} else {
    		//console.log("mycallback is not a function!");
    		// reset to default behaviour
    		DigiWebApp.EditTimeDataPage.myCallback = function() {
    			DigiWebApp.NavigationController.backToTimeDataPage();
        	};
    	}
    	DigiWebApp.NavigationController.switchToPage('editTimeDataPage', M.TRANSITION.SLIDEUP, NO);
    }    

    , toAnwesenheitslistePage: function() { 
		DigiWebApp.AnwesenheitslisteController.set('items', {});
		DigiWebApp.AnwesenheitslisteController.items = null;
    	DigiWebApp.NavigationController.switchToPage('anwesenheitslistePage', M.TRANSITION.NONE, NO);
    }
    
    , toAnwesenheitslistePageTransition: function() { 
		DigiWebApp.AnwesenheitslisteController.set('items', {});
		DigiWebApp.AnwesenheitslisteController.items = null;
    	DigiWebApp.NavigationController.switchToPage('anwesenheitslistePage', M.TRANSITION.SLIDEUP, NO);
    }
    
    , backToAnwesenheitslistePage: function() { 
		DigiWebApp.ZeitbuchungenController.set('items', {});
		DigiWebApp.ZeitbuchungenController.items = null;
    	DigiWebApp.NavigationController.switchToPage('anwesenheitslistePage', M.TRANSITION.NONE, YES);
    }
    
    , backToAnwesenheitslistePageTransition: function() { 
		DigiWebApp.ZeitbuchungenController.set('items', {});
		DigiWebApp.ZeitbuchungenController.items = null;
    	DigiWebApp.NavigationController.switchToPage('anwesenheitslistePage', M.TRANSITION.SLIDEUP, YES);
    }
    
    , toZeitbuchungenPage: function() { 
		DigiWebApp.ZeitbuchungenController.set('items', {});
		DigiWebApp.ZeitbuchungenController.items = null;
    	DigiWebApp.NavigationController.switchToPage('zeitbuchungenPage', M.TRANSITION.NONE, NO);
    }
    
    , toZeitbuchungenPageTransition: function() { 
		DigiWebApp.ZeitbuchungenController.set('items', {});
		DigiWebApp.ZeitbuchungenController.items = null;
    	DigiWebApp.NavigationController.switchToPage('zeitbuchungenPage', M.TRANSITION.SLIDEUP, NO);
    }
    
    , backToZeitbuchungenPage: function() { 
		DigiWebApp.ZeitbuchungenController.set('itemForDetails', {});
		DigiWebApp.ZeitbuchungenController.itemForDetails = null;
    	DigiWebApp.NavigationController.switchToPage('zeitbuchungenPage', M.TRANSITION.NONE, YES);
    }
    
    , backToZeitbuchungenPageTransition: function() { 
		DigiWebApp.ZeitbuchungenController.set('itemForDetails', {});
		DigiWebApp.ZeitbuchungenController.itemForDetails = null;
    	DigiWebApp.NavigationController.switchToPage('zeitbuchungenPage', M.TRANSITION.SLIDEUP, YES);
    }
    
    , toZeitbuchungDetailsPage: function() { 
    	DigiWebApp.NavigationController.switchToPage('zeitbuchungDetailsPage', M.TRANSITION.NONE, NO);
    }
    
    , toZeitbuchungDetailsPageTransition: function() { 
    	DigiWebApp.NavigationController.switchToPage('zeitbuchungDetailsPage', M.TRANSITION.SLIDEUP, NO);
    }
    
    , backToZeitbuchungDetailsPage: function() { 
		DigiWebApp.OrderDetailsController.set('positionForDetails', {});
		DigiWebApp.OrderDetailsController.positionForDetails = null;
    	DigiWebApp.NavigationController.switchToPage('zeitbuchungDetailsPage', M.TRANSITION.NONE, YES);
    }
    
    , backToZeitbuchungDetailsPageTransition: function() { 
		DigiWebApp.OrderDetailsController.set('positionForDetails', {});
		DigiWebApp.OrderDetailsController.positionForDetails = null;
    	DigiWebApp.NavigationController.switchToPage('zeitbuchungDetailsPage', M.TRANSITION.SLIDEUP, YES);
    }
    
    , toOrderDetailsPage: function() { 
    	DigiWebApp.NavigationController.switchToPage('orderDetailsPage', M.TRANSITION.NONE, NO);
    }
    
    , toOrderDetailsPageTransition: function() { 
    	DigiWebApp.NavigationController.switchToPage('orderDetailsPage', M.TRANSITION.SLIDEUP, NO);
    }
    
    , toTimeDataArchivePage: function() { 
    	DigiWebApp.NavigationController.switchToPage('timeDataArchivePage', M.TRANSITION.NONE, NO);
    }
    
    , toTimeDataArchivePageTransition: function() { 
    	DigiWebApp.NavigationController.switchToPage('timeDataArchivePage', M.TRANSITION.SLIDEUP, NO);
    }
    
    // Start::Bautagebuch
    
    , toBautagebuchBautageberichteListePageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchBautageberichteListePage', M.TRANSITION.SLIDEUP, NO);
    }
    , backToBautagebuchBautageberichteListePageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchBautageberichteListePage', M.TRANSITION.SLIDEUP, YES);
    }

    , toBautagebuchBautageberichtDetailsPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchBautageberichtDetailsPage', M.TRANSITION.SLIDEUP, NO);
    }
    , backToBautagebuchBautageberichtDetailsPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchBautageberichtDetailsPage', M.TRANSITION.SLIDEUP, YES);
    }

    , toBautagebuchMaterialienListePageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchMaterialienListePage', M.TRANSITION.SLIDEUP, NO);
    }
    , backToBautagebuchMaterialienListePageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchMaterialienListePage', M.TRANSITION.SLIDEUP, YES);
    }

    , toBautagebuchMaterialienDetailsPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchMaterialienDetailsPage', M.TRANSITION.SLIDEUP, NO);
    }
    , backToBautagebuchMaterialienDetailsPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchMaterialienDetailsPage', M.TRANSITION.SLIDEUP, YES);
    }

    , toBautagebuchZeitenListePageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchZeitenListePage', M.TRANSITION.SLIDEUP, NO);
    }
    , backToBautagebuchZeitenListePageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchZeitenListePage', M.TRANSITION.SLIDEUP, YES);
    }

    , toBautagebuchZeitenDetailsPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchZeitenDetailsPage', M.TRANSITION.SLIDEUP, NO);
    }
    , backToBautagebuchZeitenDetailsPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchZeitenDetailsPage', M.TRANSITION.SLIDEUP, YES);
    }

    , toBautagebuchNotizenListePageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchNotizenListePage', M.TRANSITION.SLIDEUP, NO);
    }
    , backToBautagebuchNotizenListePageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchNotizenListePage', M.TRANSITION.SLIDEUP, YES);
    }

    , toBautagebuchNotizenDetailsPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchNotizenDetailsPage', M.TRANSITION.SLIDEUP, NO);
    }
    , backToBautagebuchNotizenDetailsPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchNotizenDetailsPage', M.TRANSITION.SLIDEUP, YES);
    }

    , toBautagebuchMedienListePageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchMedienListePage', M.TRANSITION.SLIDEUP, NO);
    }
    , backToBautagebuchMedienListePageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchMedienListePage', M.TRANSITION.SLIDEUP, YES);
    }
    , toBautagebuchMedienDetailsPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchMedienDetailsPage', M.TRANSITION.SLIDEUP, NO);
    }
    , backToBautagebuchMedienDetailsPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchMedienDetailsPage', M.TRANSITION.SLIDEUP, YES);
    }

    , toBautagebuchEinstellungenPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchEinstellungenPage', M.TRANSITION.SLIDEUP, NO);
    }
    , backToBautagebuchEinstellungenPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchEinstellungenPage', M.TRANSITION.SLIDEUP, YES);
    }

    , toBautagebuchWetterPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchWetterPage', M.TRANSITION.SLIDEUP, NO);
    }
    , backToBautagebuchWetterPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchWetterPage', M.TRANSITION.SLIDEUP, YES);
    }
    
    , toBautagebuchZusammenfassungPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchZusammenfassungPage', M.TRANSITION.SLIDEUP, NO);
    }
    , backToBautagebuchZusammenfassungPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchZusammenfassungPage', M.TRANSITION.SLIDEUP, YES);
    }

    , toBautagebuchMitarbeiterAuswahlPage: function() {
    	DigiWebApp.NavigationController.switchToPage('bautagebuchMitarbeiterAuswahlPage', M.TRANSITION.SLIDEUP, NO);
    }

    // Ende::Bautagebuch

    , toFileChooserPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('fileChooserPage', M.TRANSITION.POP, NO);
    }

    // Start::ButtonsDashboardPage   
    , toButtonsDashboardPage: function() {
    	DigiWebApp.NavigationController.switchToPage('buttonsDashboard', M.TRANSITION.NONE, NO);
    }

    , toButtonsDashboardPageTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('buttonsDashboard', M.TRANSITION.SLIDEUP, NO);
    }

    , backToButtonsDashboardPage: function() {
    	DigiWebApp.NavigationController.switchToPage('buttonsDashboard', M.TRANSITION.SLIDEUP, YES);
    }

    , backToButtonsDashboardPagePOP: function() {
    	DigiWebApp.NavigationController.switchToPage('buttonsDashboard', M.TRANSITION.POP, YES);
    }

    , backToButtonsDashboardPageFlipTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('buttonsDashboard', M.TRANSITION.FLIP, YES);
    }

    , toButtonsDashboardPageFlipTransition: function() {
    	DigiWebApp.NavigationController.switchToPage('buttonsDashboard', M.TRANSITION.FLIP, NO);
    }
    // Ende::ButtonsDashboardPage   

    , toStudieChecklistePage: function() {
    	DigiWebApp.NavigationController.switchToPage('studieChecklistePage', M.TRANSITION.NONE, NO);
    }

    , toTerminlistePage: function() {
    	DigiWebApp.NavigationController.switchToPage('terminlistePage', M.TRANSITION.SLIDEUP, NO);
    }

    , backToTerminlistePage: function() {
    	DigiWebApp.NavigationController.switchToPage('terminlistePage', M.TRANSITION.SLIDEUP, YES);
    }

    , toFestePauseStornierenPage: function() {
    	DigiWebApp.NavigationController.switchToPage('festePauseStornierenPage', M.TRANSITION.SLIDEUP, NO);
    }

    , backToFestePauseStornierenPage: function() {
    	DigiWebApp.NavigationController.switchToPage('festePauseStornierenPage', M.TRANSITION.SLIDEUP, YES);
    }

    , startBautagebuch: function() {
    	//DigiWebApp.NavigationController.toBautagebuchBautageberichteListePageTransition();    	
		//var bautagesberichte = DigiWebApp.BautagebuchBautagesbericht.find({query:{identifier: 'bautagesberichtTyp', operator: '!=', value: "" + "<materialerfassung_only>"}});
		var bautagesberichte = DigiWebApp.BautagebuchBautagesbericht.find();
		bautagesberichte = _.filter(bautagesberichte, function(n) {return (n.get('bautagesberichtTyp') == "<standard>")}); // <materialerfassung_only> rausfiltern
		if (bautagesberichte.length > 0) {
			var einOffenerBautagesbericht = NO;
			var offenerBautagesbericht = null;
			_.each(bautagesberichte, function(bautagesbericht){
				if (!bautagesbericht.get("abgeschlossen")) {
					if (!einOffenerBautagesbericht && !offenerBautagesbericht) {
						einOffenerBautagesbericht = YES;
						offenerBautagesbericht = bautagesbericht;
					} else {
						einOffenerBautagesbericht = NO;
					}
				}
			});
			if (einOffenerBautagesbericht) {
				// es gibt nur einen offenen Bautagesbericht
				DigiWebApp.BautagebuchBautageberichteListeController.init();
				DigiWebApp.BautagebuchBautageberichtDetailsController.load(offenerBautagesbericht);
				DigiWebApp.NavigationController.toBautagebuchBautageberichtDetailsPageTransition();
			} else if (offenerBautagesbericht) {
				// es gibt mehr als einen offenen Bautagesbericht
				DigiWebApp.NavigationController.toBautagebuchBautageberichteListePageTransition();
			} else {
				// es gibt keinen offenen Bautagesbericht
				DigiWebApp.BautagebuchBautageberichteListeController.init();
				DigiWebApp.BautagebuchBautageberichteListeController.neu();
			}
		} else {
			DigiWebApp.BautagebuchBautageberichteListeController.init();
			DigiWebApp.BautagebuchBautageberichteListeController.neu();
		}
    }
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: OrderDetailsController
// ==========================================================================
// manuell var-checked
DigiWebApp.OrderDetailsController = M.Controller.extend({

	  positionForDetails: null
	  
	, loadedPosition: null
	
	, init: function(isFirstLoad) {
		var that = DigiWebApp.OrderDetailsController;
		if (that.items === null) {
			DigiWebApp.RequestController.getDatabaseServer(that.initWithServer, isFirstLoad);
		} else {
			that.initWithServer(isFirstLoad);
		}
	}

    , initWithServer: function(isFirstLoad) {
    	var that = DigiWebApp.OrderDetailsController;
		if (that.positionForDetails === null) {
			//console.log("Anwesenheitsliste: showing Loader");		
			DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('positionLaden'));

			//console.log("Anwesenheitsliste: find --> request");		
			DigiWebApp.OnlinePosition.find({
	              urlParams: {}
	            , callbacks: {
	                  success: {
	                    action: function(records) {
	            			DigiWebApp.ApplicationController.DigiLoaderView.hide();
	                        if ((records && records.length === 0) || (parseInt(DigiWebApp.ZeitbuchungenController.itemForDetails.get("positionsId")) === 0)) {
	                    		//console.log("Anwesenheitsliste: error length==0");		
	            		        DigiWebApp.ApplicationController.nativeAlertDialogView({
	            		              title: M.I18N.l('error')
	            		            , message: M.I18N.l('positionKonnteNichtGeladenWerden')
	            		            , callbacks: {
	            		                confirm: {
	            		                      target: that
	            		                    , action: function () {
	            		        				DigiWebApp.NavigationController.backToZeitbuchungDetailsPageTransition();
	            		                    }
	            		                }
	            		            }
	            		        });
	                        } else {
	                    		//console.log("Anwesenheitsliste: success");		
	                        	that.set('loadedPosition', records);
	                        	that.setItem();
	                        }
	                    }
	                }
	                , error: {
	                    action: function(request, error) {
	        				DigiWebApp.ApplicationController.DigiLoaderView.hide();
	                		//console.log("Anwesenheitsliste: error request failed");		
	        		        DigiWebApp.ApplicationController.nativeAlertDialogView({
	        		              title: M.I18N.l('error')
	        		            , message: M.I18N.l('positionKonnteNichtGeladenWerden')
	        		            , callbacks: {
	        		                confirm: {
	        		                      target: that
	        		                    , action: function () {
		        							DigiWebApp.NavigationController.backToZeitbuchungDetailsPageTransition();
	        		                    }
	        		                }
	        		            }
	        		        });
	                    }
	                }
	            }
	        });    	
        }
		
    }
    
    , setItem: function() {
    	var that = DigiWebApp.OrderDetailsController;
        var item_empty = { 
        		  orderName: ''
        		, positionName: ''
            	, positionStrasse: ''
            	, positionHausnummer: ''
            	, positionPLZ: ''
            	, positionOrt: ''
                , positionLand: ''
            	, positionStrasseUndHausnummer: '' 
            	, positionPLZundOrt: ''
        		, positionCountryCode: ''
        		, positionTelefon: ''
        		, positionFax: ''
        		, positionEmail: ''
        		, positionAnsprechpartner: ''
        		, positionKundenname: ''
        		, positionLongitude: ''
        		, positionLatitude: ''
        		, positionBeschreibung: ''
        	};
        var item = item_empty;
        	item.orderName = that.loadedPosition[0].get('auftragsBezeichnung');
			item.positionName = that.loadedPosition[0].get('positionsBezeichnung');
			item.positionStrasse = that.loadedPosition[0].get('strasse');
			item.positionHausnummer = that.loadedPosition[0].get('hausnummer');
			item.positionPLZ = that.loadedPosition[0].get('plz');
			item.positionOrt = that.loadedPosition[0].get('ort');
			item.positionLand = that.loadedPosition[0].get('land');
			item.positionTelefon = that.loadedPosition[0].get('telefon');
			item.positionFax = that.loadedPosition[0].get('fax');
			item.positionEmail = that.loadedPosition[0].get('email');
			item.positionAnsprechpartner = that.loadedPosition[0].get('ansprechpartner');
			item.positionKundenname = that.loadedPosition[0].get('kundenname');
			item.positionLongitude = that.loadedPosition[0].get('longitude');
			item.positionLatitude = that.loadedPosition[0].get('latitude');
			item.positionBeschreibung = that.loadedPosition[0].get('positionsBeschreibung');
			item.positionCountryCode = that.loadedPosition[0].get('countrycode');
			item.positionPLZundOrt = item.positionPLZ + " " + item.positionOrt;
			item.positionStrasseUndHausnummer = item.positionStrasse + " " + item.positionHausnummer;

		if (item.orderName === '' && item.positionName === '') {
			that.set('positionForDetails', []);
		} else {
			that.set('positionForDetails', [item]);
		}
//		if (   DigiWebApp.OrderDetailsController.positionForDetails[0].positionLongitude === "0.0"
//			&& DigiWebApp.OrderDetailsController.positionForDetails[0].positionLatitude  === "0.0"
//		) {
//			
//		}
    }

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: OrderInfoController
// ==========================================================================
// manuell var-checked
DigiWebApp.OrderInfoController = M.Controller.extend({

	// arrays for selection lists
      orders: null
    , positions: null
    
    , activeOrder: null
    , activePosition: null
    , items: []
    //, debugitems: []

    /*
    * Sample function
    * To handle the first load of a page.
    */
    , init: function(isFirstLoad) {
        if (isFirstLoad) {
            /* do something here, when page is loaded the first time. */
        }

		DigiWebApp.OrderInfoController.set('activeOrder', null);
		DigiWebApp.OrderInfoController.set('activePosition', null);
		DigiWebApp.OrderInfoController.set('items', []);

		var orders = DigiWebApp.HandOrder.findSorted().concat(DigiWebApp.Order.findSorted()); // we need to check handOrders also
        var positions = DigiWebApp.Position.findSorted();
        
        var itemSelected = NO;
        var orderArray;
        var positionArray;
        if (!DigiWebApp.SettingsController.getSetting("auftragsDetailsKoppeln")) {
	        orderArray = _.map(orders, function(order) {
	        	if (!(order)) return;
	            var obj =  { label: order.get('name'), value: order.get('id') };
	            if ( DigiWebApp.BookingController.currentBooking !== null ) {
	            	if (    (obj.value === DigiWebApp.BookingController.currentBooking.get('orderId'))
	            		 || (obj.value === DigiWebApp.BookingController.currentBooking.get('handOrderId'))
	            	   )
	            	{
	            		obj.isSelected = YES;
	            		itemSelected = YES;
	            		DigiWebApp.OrderInfoController.set('activeOrder', [order]);
	            	}
	            }
	            return obj;
	        });
	        orderArray = _.compact(orderArray);
	        // push "Bitte wählen Option"
	        if (itemSelected === NO) orderArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});
	        
	        itemSelected = NO;
	        positionArray = _.map(positions, function(pos) {
	        	if (!(pos)) return;
	        	if (DigiWebApp.OrderInfoController.activeOrder !== null) {
	        		if (pos.get('orderId') !== DigiWebApp.OrderInfoController.activeOrder[0].get('id')) {
	        			return null;
	        		}
	        	} else {
	        		return null;
	        	}
	            var obj = { label: pos.get('name'), value: pos.get('id') };
	           	if ( DigiWebApp.BookingController.currentBooking !== null ) {
	            	if (obj.value === DigiWebApp.BookingController.currentBooking.get('positionId')) {
	            		obj.isSelected = YES;
	            		itemSelected = YES;
	            		DigiWebApp.OrderInfoController.set('activePosition', [pos]);
	            	}
	            }
	        	return obj;
	        });
	        positionArray = _.compact(positionArray);
	        // push "Bitte wählen Option"
	        if (itemSelected === NO) positionArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});
        } else {
	        orderArray = _.map(orders, function(order) {
	        	if (!(order)) return;
	            var obj =  { label: order.get('name'), value: order.get('id') };
            	if (obj.value === M.ViewManager.getView('bookingPage', 'order').getSelection()) {
            		obj.isSelected = YES;
            		itemSelected = YES;
            		DigiWebApp.OrderInfoController.set('activeOrder', [order]);
            	}
	            return obj;
	        });
	        orderArray = _.compact(orderArray);
	        // push "Bitte wählen Option"
	        if (itemSelected === NO) orderArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});
	        
	        itemSelected = NO;
	        positionArray = _.map(positions, function(pos) {
	        	if (!(pos)) return;
	        	if (DigiWebApp.OrderInfoController.activeOrder !== null) {
	        		if (pos.get('orderId') !== DigiWebApp.OrderInfoController.activeOrder[0].get('id')) {
	        			return null;
	        		}
	        	} else {
	        		return null;
	        	}
	            var obj = { label: pos.get('name'), value: pos.get('id') };
            	if (obj.value === M.ViewManager.getView('bookingPage', 'position').getSelection()) {
            		obj.isSelected = YES;
            		itemSelected = YES;
            		DigiWebApp.OrderInfoController.set('activePosition', [pos]);
            	}
	        	return obj;
	        });
	        positionArray = _.compact(positionArray);
	        // push "Bitte wählen Option"
	        if (itemSelected === NO) positionArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});
        }

        // set selection arrays to start content binding process
        this.set('orders', orderArray);
        this.set('positions', positionArray);
        
        this.setItem();
    }

    , setItem: function() {
        var item_empty = { 
        		  orderName: ''
        		, positionName: ''
            	, positionStrasse: ''
            	, positionHausnummer: ''
            	, positionPLZ: ''
            	, positionOrt: ''
                , positionLand: ''
            	, positionStrasseUndHausnummer: '' 
            	, positionPLZundOrt: ''
        		, positionCountryCode: ''
        		, positionTelefon: ''
        		, positionFax: ''
        		, positionEmail: ''
        		, positionAnsprechpartner: ''
        		, positionKundenname: ''
        		, positionLongitude: ''
        		, positionLatitude: ''
        		, positionBeschreibung: ''
        		, arbeitsbeginn: ''
        		, arbeitsende: ''
        	};
        var item = item_empty;
		if (DigiWebApp.OrderInfoController.activeOrder !== null) item.orderName = DigiWebApp.OrderInfoController.activeOrder[0].get('name');
		if (DigiWebApp.OrderInfoController.activePosition !== null) {
			item.positionName = DigiWebApp.OrderInfoController.activePosition[0].get('name');
			item.positionStrasse = DigiWebApp.OrderInfoController.activePosition[0].get('strasse');
			item.positionHausnummer = DigiWebApp.OrderInfoController.activePosition[0].get('hausnummer');
			item.positionPLZ = DigiWebApp.OrderInfoController.activePosition[0].get('plz');
			item.positionOrt = DigiWebApp.OrderInfoController.activePosition[0].get('ort');
			item.positionLand = DigiWebApp.OrderInfoController.activePosition[0].get('land');
			item.positionTelefon = DigiWebApp.OrderInfoController.activePosition[0].get('telefon');
			item.positionFax = DigiWebApp.OrderInfoController.activePosition[0].get('fax');
			item.positionEmail = DigiWebApp.OrderInfoController.activePosition[0].get('email');
			item.positionAnsprechpartner = DigiWebApp.OrderInfoController.activePosition[0].get('ansprechpartner');
			item.positionKundenname = DigiWebApp.OrderInfoController.activePosition[0].get('kundenname');
			item.positionLongitude = DigiWebApp.OrderInfoController.activePosition[0].get('longitude');
			item.positionLatitude = DigiWebApp.OrderInfoController.activePosition[0].get('latitude');
			item.positionBeschreibung = DigiWebApp.OrderInfoController.activePosition[0].get('description');
			item.positionCountryCode = DigiWebApp.OrderInfoController.activePosition[0].get('countrycode');
			item.positionPLZundOrt = item.positionPLZ + " " + item.positionOrt;
			item.positionStrasseUndHausnummer = item.positionStrasse + " " + item.positionHausnummer;
			item.arbeitsbeginn = DigiWebApp.OrderInfoController.activePosition[0].get('arbeitsbeginn');
			item.arbeitsende = DigiWebApp.OrderInfoController.activePosition[0].get('arbeitsende');
		}

		if (item.orderName === '' && item.positionName === '') {
			DigiWebApp.OrderInfoController.set('items', []);
		} else {
			DigiWebApp.OrderInfoController.set('items', [item]);
		}
    }
    
    , setPositions: function() {
        var orderId = M.ViewManager.getView('orderInfoPage', 'order').getSelection(YES).value;
        if(!orderId) {
            return;
        }
        var positions = DigiWebApp.Position.findSorted();

        var i = 0;
        positions = _.map(positions, function(pos) {
        	if (!(pos)) return;
            if (parseInt(pos.get('orderId')) === parseInt(orderId)) {
                var obj = { label: pos.get('name'), value: pos.get('id') };
                if(i === 0) {
                    obj.isSelected = YES;
            		DigiWebApp.OrderInfoController.set('activePosition', [pos]);
                }
                i += 1;
                return obj;
            }
            return null;
        });
        positions = _.compact(positions);/* remove falsy values from positions with _.compact() */

        if (positions.length < 1) {
            positions.push({label: M.I18N.l('noData'), value: '0'});
            DigiWebApp.OrderInfoController.set('activePosition', null);
        }

        M.ViewManager.getView('orderInfoPage', 'position').resetSelection();
        this.set('positions', positions);
        this.setItem();
    }

    , saveAsContact: function() {
    	// are we on a mobile device with navigator.contacts?
    	if (typeof(navigator.contacts) === "undefined") {
    		DigiWebApp.ApplicationController.nativeAlertDialogView({
    			  title: M.I18N.l('saveAsContact')
    			, message: M.I18N.l('noContactsAvailable')
    		});
    		return;
    	}
    	var item = DigiWebApp.OrderInfoController.items[0];
    	//if (DigiWebApp.SettingsController.globalDebugMode) console.log("searching contact for orderName=" + item.orderName + ", positionName=" + item.positionName);
    	// try to load the contact to prevent duplicates
    	var options = new ContactFindOptions();
    	options.filter = item.orderName + ", " + item.positionName; 
    	var fields = ["displayName", "name", "givenName", "familyName"];
		DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('saveAsContact'));
    	navigator.contacts.find(fields, DigiWebApp.OrderInfoController.saveAsContactFound, DigiWebApp.OrderInfoController.saveAsContactFoundError, options);
    	return;
    }

    , saveAsContactFound: function(contacts) {
    	var item = DigiWebApp.OrderInfoController.items[0];
    	DigiWebApp.ApplicationController.DigiLoaderView.hide();
    	if (typeof(contacts) === "undefined") {
    		
        	// create new contact
        	//if (DigiWebApp.SettingsController.globalDebugMode) console.log("creating new contact for orderName=" + item.orderName + ", positionName=" + item.positionName);
        	var myContact = navigator.contacts.create({
        		//displayName: The name of this Contact, suitable for display to end-users. (DOMString)
        		"displayName": M.I18N.l('orderInfo') + " " + item.orderName
        	});
    		return DigiWebApp.OrderInfoController.saveAsContactSave(myContact);
    		
    	} else {

    		if (contacts.length === 0) {
            	// create new contact
            	//if (DigiWebApp.SettingsController.globalDebugMode) console.log("creating new contact for orderName=" + item.orderName + ", positionName=" + item.positionName);
            	var myContact = navigator.contacts.create({
            		//displayName: The name of this Contact, suitable for display to end-users. (DOMString)
            		"displayName": M.I18N.l('orderInfo') + " " + item.orderName + ", " + item.positionName
            	});
        		return DigiWebApp.OrderInfoController.saveAsContactSave(myContact);
    		} else if (contacts.length > 1) {
				DigiWebApp.ApplicationController.nativeAlertDialogView({
					title: M.I18N.l('saveAsContact'),
					message: M.I18N.l('contactExistsMultiple')
				});
				return;
	    	} else {
	    		var changeMsg = M.I18N.l('saveAsContactChangeQuestionMsg');
	    		DigiWebApp.ApplicationController.nativeConfirmDialogView({
	            	  title: M.I18N.l('saveAsContactChangeQuestionTitle')
    		        , message: changeMsg
		            , confirmButtonValue: M.I18N.l('yes')
            		, cancelButtonValue: M.I18N.l('no')
            		, callbacks: {
                		  confirm: {
                    		  target: this
                    		, action: function() {
					    	    		//console.log(contacts[0]);
					    	    		//if (DigiWebApp.SettingsController.globalDebugMode) console.log("using contact[0] for orderName=" + item.orderName + ", positionName=" + item.positionName);
					    	    		//return DigiWebApp.OrderInfoController.saveAsContactSave(contacts[0]);
	    								var myContactFound = contacts[0];
	    								myContactFound.remove(DigiWebApp.OrderInfoController.contactRemoveSuccess, DigiWebApp.OrderInfoController.contactRemoveError);
	    							}
                		}
                		, cancel: {
                    		  target: this
                    		, action: function() {
                        				return;
                    				}
                		}
            		}
        		});
	    	}
    	}
    }
    
    , contactRemoveSuccess: function() {
    	var item = DigiWebApp.OrderInfoController.items[0];
		// create new contact
    	//if (DigiWebApp.SettingsController.globalDebugMode) console.log("creating new contact for orderName=" + item.orderName + ", positionName=" + item.positionName);
    	var myContact = navigator.contacts.create({
    		//displayName: The name of this Contact, suitable for display to end-users. (DOMString)
    		"displayName": M.I18N.l('orderInfo') + " " + item.orderName
    	});
		return DigiWebApp.OrderInfoController.saveAsContactSave(myContact);
    }
    
    , contactRemoveError: function() {
		DigiWebApp.ApplicationController.nativeAlertDialogView({
			  title: M.I18N.l('saveAsContact')
			, message: M.I18N.l('saveAsContactChangeErrorMsg')
		});
    }
    
    , saveAsContactFoundError: function() {
		DigiWebApp.ApplicationController.nativeAlertDialogView({
			  title: M.I18N.l('saveAsContact')
			, message: M.I18N.l('error')
		});
		return;
    }
    
    , saveAsContactSave: function(myContact) {
    	//console.log("saving contact");
    	//console.log(myContact);
    	var item = DigiWebApp.OrderInfoController.items[0];
        
		//id: A globally unique identifier. (DOMString)
        //myContact.id = "DIGI-WebApp_" + order.get('id');
        
		//name: An object containing all components of a persons name. (ContactName)
    	var myContactName = new ContactName();
	    	//formatted: The complete name of the contact. (DOMString)
	    	//familyName: The contacts family name. (DOMString)
	    	//givenName: The contacts given name. (DOMString)
	    	//middleName: The contacts middle name. (DOMString)
	    	//honorificPrefix: The contacts prefix (example Mr. or Dr.) (DOMString)
	    	//honorificSuffix: The contacts suffix (example Esq.). (DOMString)
		myContactName.givenName = M.I18N.l('orderInfo');
		myContactName.familyName = item.orderName + ", " + item.positionName;
		myContactName.honorificPrefix = 'DIGI-WebApp';
	   	myContact.name = myContactName;
    	
    	//nickname: A casual name to address the contact by. (DOMString)
		//phoneNumbers: An array of all the contact's phone numbers. (ContactField[])
	   	var phoneNumbers = [];
	   	var myTel = '';
	   	var myFax = '';
	   	try { myTel = item.positionTelefon; } catch(e1) { console.error(e1); }
	   	try { myFax = item.positionFax; } catch(e2) { console.error(e2); }
	   	phoneNumbers[0] = new ContactField('work', myTel, true);
	   	phoneNumbers[1] = new ContactField('fax', myFax, false);
	   	myContact.phoneNumbers = phoneNumbers;
	   	
		//emails: An array of all the contact's email addresses. (ContactField[])
	   	var eMail = [];
	   	var myemail = '';
	   	try { myemail = item.positionEmail; } catch(e3) { console.error(e3); }
	   	eMail[0] = new ContactField('work', myemail, true);
	   	myContact.emails = eMail;

        //addresses: An array of all the contact's addresses. (ContactAddresses[])
        var myContactAdress = new ContactAddress();
			//pref: Set to true if this ContactAddress contains the user's preferred value. (boolean)
    		//myContactAdress.pref = true; //mostly unsupported
			//type: A string that tells you what type of field this is (example: 'home'). _(DOMString)
        	myContactAdress.type = "Work";
			//formatted: The full address formatted for display. (DOMString)
			//streetAddress: The full street address. (DOMString)
        	myContactAdress.streetAddress = item.positionStrasseUndHausnummer;
			//locality: The city or locality. (DOMString)
        	myContactAdress.locality = item.positionOrt;
			//region: The state or region. (DOMString)
			//postalCode: The zip code or postal code. (DOMString)
        	myContactAdress.postalCode = item.positionPLZ;
			//country: The country name. (DOMString)
        	myContactAdress.country = item.positionLand;

           	if (myContact.addresses === null)	{
           		var addresses = [myContactAdress];
            	myContact.addresses = addresses;
           	} else {
           		myContact.addresses[0] = myContactAdress;
           	}
        	
        //ims: An array of all the contact's IM addresses. (ContactField[])
		//organizations: An array of all the contact's organizations. (ContactOrganization[])
		//birthday: The birthday of the contact. (Date)
		//note: A note about the contact. (DOMString)
        var dateNow = new Date();
        myContact.note = item.positionBeschreibung + " (" + M.I18N.l('contactLastChange') + ": " + dateNow.toString() + ")";
        //photos: An array of the contact's photos. (ContactField[])
		//categories: An array of all the contacts user defined categories. (ContactField[])
		//urls: An array of web pages associated to the contact. (ContactField[])

        // save contact
   		//if (DigiWebApp.SettingsController.globalDebugMode) console.log("saving contact for orderName=" + item.orderName + ", positionName=" + item.positionName);
		DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('saveAsContact'));
        myContact.save(DigiWebApp.OrderInfoController.saveAsContactSuccess, DigiWebApp.OrderInfoController.saveAsContactError);
    }
        
    , saveAsContactSuccess: function() {
    	DigiWebApp.ApplicationController.DigiLoaderView.hide();
		//DigiWebApp.ApplicationController.nativeAlertDialogView({
		//	  title: M.I18N.l('saveAsContact')
		//	, message: M.I18N.l('saveAsContactSuccess')
		//});
    }

    , saveAsContactError: function(error) {
    	//console.log('savingContactError');
    	//console.log(error);
    	DigiWebApp.ApplicationController.DigiLoaderView.hide();
		//DigiWebApp.ApplicationController.nativeAlertDialogView({
		//	  title: M.I18N.l('saveAsContact')
		//	, message: M.I18N.l('saveAsContactError')
		//});
    }
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: RequestController
// ==========================================================================
// manuell var-checked
DigiWebApp.RequestController = M.Controller.extend({

	  //GatewayServer: 'www.digi-gps.de'
	  GatewayServer: 'primary.digi-gateway.de'
	, GatewayPool: 'pool.digi-gateway.de'
	, DatabaseServer: null
	, DatabaseServerTimestamp: null
	, handy2WebServicesUrl: '/Handy2WebServices/services/DatenTransfer'
	
    /**
     * Object containing the success callback for the several calls
     */
    , successCallback: {}

    /**
     * Object containing the success callback for the several calls
     */
    , errorCallback: {}
    
    , softwareVersion: 5461


    /**
     * Method that performs the GET requests to the server.
     *
     * Shows a loader if flag is set in parameter object.
     *
     * Success callback:
     * 1) Hiding the loader
     * 2) Passing to handleSuccessCallback() with the return data of the request and flag for isWorkplan, isKolonne and the source (function that triggered the request) as string
     *
     * Error callback
     * 1) Hiding the loader
     * 2) Passing to handleErrorCallback with return data of the request and the source (function that triggered the request) as string
     *
     * @param {Object} obj The parameter object
     */
    , makeRequest: function(obj) {
    
        var that = this;
        
        var timeoutSetting = DigiWebApp.SettingsController.getSetting("WebserviceTimeOut") ? DigiWebApp.SettingsController.getSetting("WebserviceTimeOut") : DigiWebApp.SettingsController.defaultsettings.get('WebserviceTimeOut');
		var timeout = obj['timeout'] ? obj['timeout'] : timeoutSetting;

		var req = M.Request.init({

              url: 'http://' + DigiWebApp.RequestController.DatabaseServer + DigiWebApp.RequestController.handy2WebServicesUrl + '/' + obj.url + (obj.urlParams ? '?' + obj.urlParams : '')

            /* alternative way by asking if in native container or not => in getUrl() */
            //  url: this.getUrl() + obj.url + (obj.urlParams ? '?' + obj.urlParams : '')

            , timeout: timeout
            , method: 'GET'
            , beforeSend: function(xhr) {
                if(obj.loaderText) {
                    DigiWebApp.ApplicationController.DigiLoaderView.show(obj.loaderText);
                } else {
                    DigiWebApp.ApplicationController.DigiLoaderView.show('Lade Daten');
                }

                xhr.setRequestHeader('Cache-Control', 'no-cache');
            }
            , onSuccess: function(data, msg, xhr) {
            	var leaveLoaderOpen = NO;
            	if (typeof(obj.leaveLoaderOpen) !== "undefined") leaveLoaderOpen = obj.leaveLoaderOpen;
                if (!leaveLoaderOpen) DigiWebApp.ApplicationController.DigiLoaderView.hide();
                var source = obj.source;
                var workPlan = obj.isWorkPlanRequest;
                var kolonne = obj.isKolonnenRequest;
                this.bindToCaller(that, that.handleSuccessCallback, [data, msg, xhr, workPlan, kolonne, source])();
            }
            , onError: function(xhr, err) {
            	console.error("Error in makeRequest: " + err);
                DigiWebApp.ApplicationController.DigiLoaderView.hide();
                DigiWebApp.RequestController.DatabaseServer = null;
                this.bindToCaller(that, that.handleErrorCallback, [xhr, err, obj.source])();
            }
        });

        req.send();
    }

    , getUrl: function() {
        try {
            if(device && device.uuid) {
            	////if (DigiWebApp.SettingsController.globalDebugMode) console.log(device.uuid);
                return 'http://' + DigiWebApp.RequestController.DatabaseServer + DigiWebApp.RequestController.handy2WebServicesUrl + '/' ;
            }
        } catch(e1) {
            return '/Handy2WebServices/services/DatenTransfer/';
        }

    }

    , getDatabaseServer: function(myFunc, obj) {
    	
    	// debug-ausnahme
    	if (location.host === "localhost:8080" || DigiWebApp.SettingsController.getSetting("debugDatabaseServer")) {
    		if (location.host === "localhost:8080") {
    			DigiWebApp.RequestController.DatabaseServer = "localhost:8080";
    		} else {
    			DigiWebApp.RequestController.DatabaseServer = DigiWebApp.SettingsController.getSetting("debugDatabaseServer");
    		}
    		return myFunc(obj);
    	}
    	
		if (!DigiWebApp.RequestController.DatabaseServer || (DigiWebApp.RequestController.DatabaseServerTimestamp && (DigiWebApp.RequestController.DatabaseServerTimestamp - new Date().getTime() > 60000))) {
		  	// get it ...
	    	console.log("getDatabaseServer");
		} else {
			// use previously fetched DatabaseServer
			return myFunc(obj);
		}
    
    	DigiWebApp.RequestController.DatabaseServer = "";
    	
        var firmenId = DigiWebApp.SettingsController.getSetting('company');

    	var myGatewayServer = DigiWebApp.RequestController.GatewayServer;
    	    	
    	if (typeof(device) === "undefined") {
    		myGatewayServer = location.host;
    	}

        //if (DigiWebApp.ApplicationController.profilingIntervalVar === null) {
		//	console.log('using: http://' + myGatewayServer + DigiWebApp.RequestController.handy2WebServicesUrl + '/empfangeUrl?firmenId=' + firmenId + '&modus=0&requestTimestamp=' + M.Date.now().date.valueOf());
		//}

		//alert('http://' + myGatewayServer + DigiWebApp.RequestController.handy2WebServicesUrl + '/empfangeUrl?firmenId=' + firmenId + '&modus=0&requestTimestamp=' + M.Date.now().date.valueOf());
		
    	var successFunc = function(xmldata, msg, xhr) {
        	//alert("xmldata: " + xmldata);
        	//alert("msg: " + msg);
        	//alert("xhr.status: " + xhr.status);
			DigiWebApp.ApplicationController.DigiLoaderView.hide();
        	var data = DigiWebApp.RequestController.transformResultToJson(xmldata);
	    	if ( typeof(data['return']) === "undefined" && typeof(data['ns:return']) !== "undefined" ) data['return'] = data['ns:return'];
	    	if (data['return'] !== "") {
	    		DigiWebApp.RequestController.DatabaseServer = data['return'];
	    	} else {
	    		console.log("FALLBACK: empty DatabaseServer --> falling back to GatewayServer"); 
	    		DigiWebApp.RequestController.DatabaseServer = DigiWebApp.RequestController.GatewayServer;
	    	}
	    	DigiWebApp.RequestController.DatabaseServerTimestamp = new Date().getTime();
	    	if (typeof(device) === "undefined") {
	    		if ((location.host !== DigiWebApp.RequestController.DatabaseServer)) {
        		        /*DigiWebApp.ApplicationController.nativeAlertDialogView({
        		            title: M.I18N.l('wrongServer'),
        		            message: M.I18N.l('wrongServerMessage'),
        		            callbacks: {
        		                confirm: {
        		                      target: this
        		                    , action: function () {
        		                    	//alert(location.host);
        		                    	//alert('http://' + DigiWebApp.RequestController.DatabaseServer + location.pathname);
						    			location.href = 'http://' + DigiWebApp.RequestController.DatabaseServer + location.pathname;
        		                    }
        		                }
        		            }
        		        });*/
		        		DigiWebApp.ApplicationController.nativeConfirmDialogView({
			            	  title: M.I18N.l('wrongServer')
		    		        , message: M.I18N.l('wrongServerMessage')
				            , confirmButtonValue: M.I18N.l('yes')
		            		, cancelButtonValue: M.I18N.l('appZuruecksetzen')
		            		, callbacks: {
		                		  confirm: {
		                    		  target: this
		                    		, action: function() {
								    			location.href = 'http://' + DigiWebApp.RequestController.DatabaseServer + location.pathname;
		                    				}
		                			}
		                		, cancel: {
		                    		  target: this
		                    		, action: function() {
	                        					DigiWebApp.ApplicationController.deleteAllData(); 
				    							if (typeof(navigator.app) !== "undefined") {
													if (typeof(location.origin) !== "undefined") {
														navigator.app.loadUrl(location.origin + location.pathname);					
													} else {
														navigator.app.loadUrl(location.protocol + '//' + location.pathname);
													}
				    							} else {
				    								window.location.reload();
				    							}
		                    				}
		                		}
		            		}
		        		});
        		        
	    		} else {
	    			//console.log(myFunc);
					myFunc(obj);
	    		}
	    	} else {
    			//console.log(myFunc);
				myFunc(obj);
			}
        }
    	
        var req = M.Request.init({
              url: 'http://' + myGatewayServer + DigiWebApp.RequestController.handy2WebServicesUrl + '/empfangeUrl?firmenId=' + firmenId + '&modus=0&requestTimestamp=' + M.Date.now().date.valueOf()
            , method: 'GET'
            , beforeSend: function(xhr) {
                DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('empfangeUrlLoader'));
                xhr.setRequestHeader('Cache-Control', 'no-cache');
            }
            , onSuccess: successFunc
            , onError: function(xhr, err) {
                var req = M.Request.init({
	                    url: 'http://' + DigiWebApp.RequestController.GatewayPool + DigiWebApp.RequestController.handy2WebServicesUrl + '/empfangeUrl?firmenId=' + firmenId + '&modus=0&requestTimestamp=' + M.Date.now().date.valueOf()
	                  , method: 'GET'
	                  , beforeSend: function(xhr) {
	                      	DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('empfangeUrlLoader'));
	                      	xhr.setRequestHeader('Cache-Control', 'no-cache');
	                  }
	                  , onSuccess: successFunc
	                  , onError: function(xhr, err) {
	                      	DigiWebApp.ApplicationController.DigiLoaderView.hide();
	      					DigiWebApp.ApplicationController.proceedWithLocalData("getDatabaseServer");
	      			  }
                });
                req.send(); // with gateway-pool
			}
        });
        req.send(); // with primary-gateway (or localhost)
		
    }
    , myRequest: null
    
    /**
     * Prepares the authenticate call and calls makeRequest with the corresponding params.
     *
     * Saves callbacks first.
     *
     * @param obj
     */
    , authenticate: function(obj) {
    	
//        // empfange den konfigurierten Mitarbeiternamen
//    	var myFunc = function(obj) {
//    		writeToLog("aktualisiere Mitarbeiter des Benutzers in authenticate");
//    		var recieveObj = {
//				  webservice: "mitarbeiter"
//				, loaderText: M.I18N.l('BautagebuchLadeMitarbeiter')
//				, successCallback: function(data){
//					if (data && data.mitarbeiter && data.mitarbeiter.length > 0) {
//						DigiWebApp.SettingsController.setSetting("mitarbeiterVorname", data.mitarbeiter[0].vorname);
//						DigiWebApp.SettingsController.setSetting("mitarbeiterNachname", data.mitarbeiter[0].nachname);
//						DigiWebApp.SettingsController.setSetting("mitarbeiterId", data.mitarbeiter[0].mitarbeiterId);
//					}
//					DigiWebApp.RequestController.getDatabaseServer(DigiWebApp.RequestController.authenticateWithDatabaseServer, obj);
//				}
//				, errorCallback: function(error) {
//					DigiWebApp.ApplicationController.DigiLoaderView.hide();
//					// Fehlermeldung
//					DigiWebApp.ApplicationController.nativeAlertDialogView({
//				        title: M.I18N.l('offlineWorkNotPossible')
//				      , message: M.I18N.l('offlineWorkNotPossibleMsg')
//					});
//				}
//				, additionalQueryParameter: "getAll=true&webAppId=" + DigiWebApp.SettingsController.getSetting("workerId")
//				//, timeout: 
//				, geraeteIdOverride: true
//				//, modus: 
//			};
//    		DigiWebApp.JSONDatenuebertragungController.recieveData(recieveObj);
//    	};
//
//    	//DigiWebApp.RequestController.getDatabaseServer(myFunc, obj);
//    	//myFunc(obj);
    	DigiWebApp.RequestController.getDatabaseServer(DigiWebApp.RequestController.authenticateWithDatabaseServer, obj);

    }

    , authenticateWithDatabaseServer: function(obj) {
		//writeToLog("in authenticateWithDatabaseServer");

        DigiWebApp.RequestController.saveCallbacks(obj.success, obj.error, 'authenticate');

        var firmenId = DigiWebApp.SettingsController.getSetting('company');
        var kennwort = DigiWebApp.SettingsController.getSetting('password');
        var geraeteId = DigiWebApp.SettingsController.getSetting('workerId'); //1; // 1: ein einzelner mitarbeiter, 2: kolonne
        var geraeteTyp = 2; // fixed => 2 stands for app
        //var softwareVersion = M.Application.getConfig('version');
        
		//alert('firmenId=' + firmenId + '&kennwort=' + kennwort + '&geraeteId=' + geraeteId + '' + '&geraeteTyp=' + geraeteTyp + '&softwareVersion=' + DigiWebApp.RequestController.softwareVersion + '&requestTimestamp=' + M.Date.now().date.valueOf());
		
        var params = {
              url: 'authentifizieren'
            , urlParams: 'firmenId=' + firmenId + '&kennwort=' + kennwort + '&geraeteId=' + geraeteId + '' +
                '&geraeteTyp=' + geraeteTyp + '&softwareVersion=' + DigiWebApp.RequestController.softwareVersion + '&requestTimestamp=' + M.Date.now().date.valueOf()
            , loaderText: M.I18N.l('authenticateLoader')
            , source: 'authenticate'
        };

        DigiWebApp.RequestController.makeRequest(_.extend(obj, params));
    }

    /**
     * Prepares the endSession call and calls makeRequest with the corresponding params.
     *
     * Saves callbacks first.
     *
     * @param {Object} obj The parameter object
     */
    , endSession: function(obj) {
        this.saveCallbacks(obj.success, obj.error, 'endSession');

        var modus = '0';

        this.makeRequest(_.extend(obj, {
              url: 'beendeSession'
            , urlParams: 'modus=' + modus + '&requestTimestamp=' + M.Date.now().date.valueOf()
            , loaderText: M.I18N.l('logout')
            , source: 'endSession'
        }));
    }

    /**
     * Prepares the getActivities call and calls makeRequest with the corresponding params.
     *
     * Saves callbacks first.
     *
     * @param {Object} obj The parameter object
     */
    , getActivities: function(obj) {
        this.saveCallbacks(obj.success, obj.error, 'getActivities');

        var modus = '1';

        this.makeRequest(_.extend(obj, {
              url: 'empfangeTaetigkeiten'
            , urlParams: 'modus=' + modus + '&requestTimestamp=' + M.Date.now().date.valueOf()
            , loaderText: M.I18N.l('getActivitiesLoader')
            , source: 'getActivities'
            , leaveLoaderOpen: YES
        }));
    }

    /**
     * Prepares the getOrders call and calls makeRequest with the corresponding params.
     *
     * Saves callbacks first.
     *
     * @param {Object} obj The parameter object
     */
    , getOrders: function(obj) {

        this.saveCallbacks(obj.success, obj.error, 'getOrders');

        var modus = '0';

        this.makeRequest(_.extend(obj, {
              url: 'empfangeAuftraege'
            , urlParams: 'modus=' + modus + '&requestTimestamp=' + M.Date.now().date.valueOf()
            , loaderText: M.I18N.l('getOrdersLoader')
            , source: 'getOrders'
            , leaveLoaderOpen: YES
        }));
    }

    /**
     * Prepares the getFeatures call and calls makeRequest with the corresponding params.
     *
     * Saves callbacks first.
     *
     * @param {Object} obj The parameter object
     */
    , getFeatures: function(obj) {

        this.saveCallbacks(obj.success, obj.error, 'getFeatures');

        var modus = '0';

        this.makeRequest(_.extend(obj, {
              url: 'empfangeKonfiguration'
            , urlParams: 'modus=' + modus + '&requestTimestamp=' + M.Date.now().date.valueOf()
            , loaderText: M.I18N.l('getFeaturesLoader')
            , source: 'getFeatures'
            , leaveLoaderOpen: YES
        }));
    }

    /**
     * Prepares the getPositions call and calls makeRequest with the corresponding params.
     *
     * Saves callbacks first.
     *
     * @param {Object} obj The parameter object
     */
    , getPositions: function(obj) {

        this.saveCallbacks(obj.success, obj.error, 'getPositions');

        var modus = '0';

        this.makeRequest(_.extend(obj, {
              url: 'empfangePositionenInfo'
            , urlParams: 'modus=' + modus + '&requestTimestamp=' + M.Date.now().date.valueOf()
            , loaderText: M.I18N.l('getPositionsLoader')
            , source: 'getPositions'
            , leaveLoaderOpen: YES
        }));
    }


    /**
     * Prepares the getWorkPlans call and calls makeRequest with the corresponding params.
     *
     * Saves callbacks first.
     *
     * @param {Object} obj The parameter object
     */
    , getWorkPlans: function(obj) {
        this.saveCallbacks(obj.success, obj.error, 'getWorkPlans');

        var modus = '0';

        this.makeRequest(_.extend(obj, {
              isWorkPlanRequest: YES
            , url: 'empfangeArbeitsplanNeu'
            , urlParams: 'modus=' + modus + '&requestTimestamp=' + M.Date.now().date.valueOf()
            , loaderText: M.I18N.l('getWorkPlansLoader')
            , source: 'getWorkPlans'
            , leaveLoaderOpen: YES
        }));
    }

    /**
     * Prepares the getHandOrders call and calls makeRequest with the corresponding params.
     *
     * Saves callbacks first.
     *
     * @param {Object} obj The parameter object
     */
    , getHandOrders: function(obj) {
        this.saveCallbacks(obj.success, obj.error, 'getHandOrders');

        var modus = '0';

        this.makeRequest(_.extend(obj, {
              url: 'empfangeHandauftraege'
            , urlParams: 'modus=' + modus + '&requestTimestamp=' + M.Date.now().date.valueOf()
            , loaderText: M.I18N.l('getHandOrdersLoader')
            , source: 'getHandOrders'
            , leaveLoaderOpen: YES
        }));
    }

    /**
     * Prepares the getKolonne call and calls makeRequest with the corresponding params.
     *
     * Saves callbacks first.
     *
     * @param {Object} obj The parameter object
     */
    , getKolonne: function(obj) {
        this.saveCallbacks(obj.success, obj.error, 'getKolonne');

        var modus = '0';

        this.makeRequest(_.extend(obj, {
              isKolonnenRequest: YES
            , url: 'empfangeKolonne'
            , urlParams: 'modus=' + modus + '&requestTimestamp=' + M.Date.now().date.valueOf()
            , loaderText: M.I18N.l('getKolonne')
            , source: 'getKolonne'
            , leaveLoaderOpen: YES
        }));
    }

    /**
     * Constructs the SOAP data body for the settings.
     * 
     * as of 12.03.2012 --> working
     *
     * Replaces the placeholder with their values of the actual settings
     *
     * @param {Array|Object} settings: The settings to be sent
     */
    , buildDataBodyConfiguration: function(mysettings) {
        var dataStr = '';
        var soapData = '   <tran:konfigurationHandy>\n' +
            '       <xsd:keyId><keyId></xsd:keyId>\n' +
            '       <xsd:value><value></xsd:value>\n' +
            '       <xsd:valueType><valueType></xsd:valueType>\n' +
            '       <xsd:mitarbeiter><mitarbeiter></xsd:mitarbeiter>\n' +
            '       <xsd:timestamp><timestamp></xsd:timestamp>\n' +
            '   </tran:konfigurationHandy>\n';
    
        var settings;
        if (typeof(mysettings) === 'object' && !_.isArray(mysettings)) {
            settings = [mysettings];  // if an object was passed, push it into an array, to have one behaviour
        } else {
        	settings = mysettings;
        }

        var now_as_timestamp = +new Date();
        if (_.isArray(settings)) {
            for (var i in settings) {
                var setting = settings[i];
                for (var prop in setting.record) {
	                var s = soapData;
                    if(prop === '_createdAt' || prop === '_updatedAt') { continue; }
                    s = s.replace(new RegExp('<keyId>'), prop);
                    s = s.replace(new RegExp('<value>'), setting.get(prop));
                    s = s.replace(new RegExp('<valueType>'), 'SettingRemote_WebApp');
                    s = s.replace(new RegExp('<mitarbeiter>'), DigiWebApp.SettingsController.getSetting('workerId'));
                    s = s.replace(new RegExp('<timestamp>'), now_as_timestamp);
	                dataStr += s;
                }
            }
        }

        // handle left-over properties (just in case)
        while (dataStr.match(new RegExp('><.*</xsd:')) !== null ) {
                dataStr = dataStr.replace(new RegExp('><.*</xsd:'), '></xsd:');
        }
        
        //dataStr += '\n';
        ////if (DigiWebApp.SettingsController.globalDebugMode) console.log('soapDataBooking: ' + dataStr);
        return dataStr;
    }

    , sendConfiguration: function(obj) {
    	// all callbacks lead to DigiWebApp.ApplicationController.authenticate()
    	//alert("in RequestController.sendConfiguration");
        // call authenticate
        this.authenticate({
              success: {  // send configuration in success callback
                  target: this
                , action: function() {
                    var that = this;
                    this.saveCallbacks(obj.success, obj.error, 'sendConfiguration');

                    var soapHeader= '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" ' +
                        'xmlns:tran="http://transfer.webservice.handy2.digi.de" xmlns:xsd="http://transferClasses.data.handy2.digi.de/xsd">' +
                        '<soapenv:Header/>' +
                        '<soapenv:Body>' +
                        '<tran:sendeKonfiguration>';
                    var soapFooter = '   <tran:modus>0</tran:modus>' +
                        '</tran:sendeKonfiguration>' +
                        '</soapenv:Body>' +
                        '</soapenv:Envelope>';

                    var data = soapHeader;
                    data += this.buildDataBodyConfiguration(obj.settings);
                    data += soapFooter;

                    // send configuration has its own request functionality, not by calling makeRequest()
                    M.Request.init({
                          url: 'http://' + DigiWebApp.RequestController.DatabaseServer + DigiWebApp.RequestController.handy2WebServicesUrl + '.DatenTransferHttpSoap11Endpoint/'
                        , method: 'POST'
                        , data: data
                        , timeout: 15000
                        , contentType: 'text/xml; charset=UTF-8'
                        , dataType: 'xml'
                        , beforeSend: function(xhr) {
                            if (obj.loaderText) {
                                DigiWebApp.ApplicationController.DigiLoaderView.show(obj.loaderText);
                            } else {
                                DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('sendConfigurationMsg'));
                            }
                            xhr.setRequestHeader(
                                "SOAPAction",
                                "urn:sendeKonfiguration"
                            );
                            xhr.setRequestHeader(
                                "Content-Type",
                                "text/xml;charset=UTF-8"
                            );
                        }
                        , onSuccess: function(data2, msg, xhr) { // success callback of sendConfiguration
                        	////if (DigiWebApp.SettingsController.globalDebugMode) console.log("@@@ onSuccess of sendConfiguration");
                            that.endSession({
                                  success: {// success callback of endSession
                                      target: that
                                    , action: function() {
			                        	////if (DigiWebApp.SettingsController.globalDebugMode) console.log("@@@ onSuccess of endSession");
                                        DigiWebApp.ApplicationController.DigiLoaderView.hide();
                                        this.bindToCaller(this, this.handleSuccessCallback, [data2, msg, xhr, null, null, 'sendConfiguration'])();
                                        DigiWebApp.ApplicationController.authenticate();
                                    }
                                }
                                , error: { // error callback of endSession
                                      target: that
                                    , action: function() {
			                        	////if (DigiWebApp.SettingsController.globalDebugMode) console.log("@@@ onError of endSession " + err);
                                        DigiWebApp.ApplicationController.DigiLoaderView.hide();
                                        this.bindToCaller(this, this.handleSuccessCallback, [data2, msg, xhr, null, null, 'sendConfiguration'])();
                                        DigiWebApp.ApplicationController.authenticate();
                                    }
                                }
                            });
                        }
                        , onError: function(xhr, err) {// error callback of sendConfiguration
                        	////if (DigiWebApp.SettingsController.globalDebugMode) console.log("@@@ onError of sendConfiguration " + err);
                            that.endSession({
                                  success: {// success callback of endSession
                                      target: that
                                    , action: function() { // call errorcallback of sendConfiguration
			                        	////if (DigiWebApp.SettingsController.globalDebugMode) console.log("@@@ onSuccess of endSession");
                                        DigiWebApp.ApplicationController.DigiLoaderView.hide();
                                        that.bindToCaller(that, that.handleErrorCallback, [xhr, err, 'sendConfiguration'])();
                                        DigiWebApp.ApplicationController.authenticate();
                                    }
                                }
                                , error: { // error callback of endSession
                                      target: that
                                    , action: function() {
			                        	////if (DigiWebApp.SettingsController.globalDebugMode) console.log("@@@ onError of endSession " + err);
                                        DigiWebApp.ApplicationController.DigiLoaderView.hide();
                                        that.bindToCaller(that, that.handleErrorCallback, [xhr, err, 'sendConfiguration'])();
                                        DigiWebApp.ApplicationController.authenticate();
                                    }
                                }
                            });

                        }
                    }).send();
                }
            }
            , error: {
                  target: this
                , action: function() {
                    //this.connectionError();
                    DigiWebApp.ApplicationController.authenticate();
                    console.error("ConnectionError while sendConfiguration");
                }
            }
        });
    }

//    /**
//     * Sends the data.
//     *
//     * Process:
//     * -----------------------------------------------------
//     * (1) Authenticate => (2) Send Data => (3) End Session 
//     * -----------------------------------------------------
//     * (1) Calls authenticate
//     *
//     * Success Callback of (1):
//     * 1) saves callbacks for sendData
//     * 2) prepares SOAP XML (Envelope, Header, Data, Footer)
//     * 3) Makes SOAP POST Request to SOAP 1.1 Endpoint with data (SOAP XML) in POST body => (2) Send Data
//     * Error Callback of (2):
//     * 1) If it is called in closingDay context, reset employee selection
//     *
//     * Success Callback of (2):
//     * 1) Calls endSession() of this controller
//     * Error Callback of (2):
//     * 1) calls endSession => (3) End Session
//     *
//     * Success Callback of (3)
//     * 1.1) if endSession after sendData success: the success callback passed at the very beginning to sendData (in BookingController.sendData) is called because the call chain completes
//     * 1.2) call DigiWebApp.ApplicationController.init() with parameter true to load all data again
//     *
//     * 2.1) if endSession after sendData error: the error callback passed at the very beginning to sendData (in BookingController.sendData)
//     * is called because the sendData call didn't succeed, even though endSession did
//     *
//     * Error Callback of (3)
//     * 1.1) if endSession after sendData success: the success callback passed at the very beginning to sendData (in BookingController.sendData) is called because the call chain completes
//     * 1.2) call DigiWebApp.ApplicationController.init() with parameter true to load all data again
//     *
//     * 2.1) if endSession after sendData error: the error callback passed at the very beginning to sendData (in BookingController.sendData)
//     * is called because the sendData call didn't succeed, as well as the endSession did not
//     *
//     *
//     * @param obj
//     * @param isClosingDay
//     */
//    , sendData: function(obj, isClosingDay, doSync) {
//        // call authenticate
//        this.authenticate({
//              success: {  // send data in success callback
//                  target: this
//                , action: function() {
//                    var that = this;
//                    this.saveCallbacks(obj.success, obj.error, 'sendData');
//
//                    var soapHeader= '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" ' +
//                        'xmlns:tran="http://transfer.webservice.handy2.digi.de" xmlns:xsd="http://transferClasses.data.handy2.digi.de/xsd">' +
//                        '<soapenv:Header/>' +
//                        '<soapenv:Body>' +
//                        '<tran:sendeDaten>';
//                    var soapFooter = '   <tran:modus>0</tran:modus>' +
//                        '</tran:sendeDaten>' +
//                        '</soapenv:Body>' +
//                        '</soapenv:Envelope>';
//
//                    var data = soapHeader;
//                    data += this.buildDataBodyBookings(obj.bookings);
//                    var eb = this.buildEmployeeBody();
//                    data += eb;
//                    data += soapFooter;
//
//                    // send data has its own request functionality, not by calling makeRequest()
//                    M.Request.init({
//                          url: 'http://' + DigiWebApp.RequestController.DatabaseServer + DigiWebApp.RequestController.handy2WebServicesUrl + '.DatenTransferHttpSoap11Endpoint/'
//                        , method: 'POST'
//                        , data: data
//                        , timeout: 15000
//                        , contentType: 'text/xml; charset=UTF-8'
//                        , dataType: 'xml'
//                        , beforeSend: function(xhr) {
//                            if(obj.loaderText) {
//                                DigiWebApp.ApplicationController.DigiLoaderView.show(obj.loaderText);
//                            } else {
//                                DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('sendDataMsg'));
//                            }
//                            xhr.setRequestHeader(
//                                "SOAPAction",
//                                "urn:sendeDaten"
//                            );
//                            xhr.setRequestHeader(
//                                "Content-Type",
//                                "text/xml;charset=UTF-8"
//                            );
//                        }
//                        , onSuccess: function(data, msg, xhr) { // success callback of sendData
//                            that.endSession({
//                                  success: {// success callback of endSession
//                                      target: that
//                                    , action: function() {
//                                        DigiWebApp.ApplicationController.DigiLoaderView.hide();
//                                        this.bindToCaller(this, this.handleSuccessCallback, [data, msg, xhr, null, null, 'sendData'])();
//
//                                        // now call startsync again
//                                        if (DigiWebApp.SettingsController.getSetting('autoSyncAfterBookTime') || doSync === true) {
//                                        	DigiWebApp.ApplicationController.startsync(YES);
//                                        }
//                                    }
//                                }
//                                , error: { // error callback of endSession
//                                      target: that
//                                    , action: function() {
//                                        DigiWebApp.ApplicationController.DigiLoaderView.hide();
//                                        this.bindToCaller(this, this.handleSuccessCallback, [data, msg, xhr, null, null, 'sendData'])();
//
//                                        // now call init again
//                                        DigiWebApp.ApplicationController.init(YES);
//                                    }
//                                }
//                            });
//                        }
//                        , onError: function(xhr, err) {// error callback of sendData
//                            that.endSession({
//                                success: {// success callback of endSession
//                                      target: that
//                                    , action: function() { // call errorcallback of sendData
//                                        DigiWebApp.ApplicationController.DigiLoaderView.hide();
//                                        that.bindToCaller(that, that.handleErrorCallback, [xhr, err, 'sendData'])();
//                                    }
//                                }
//                                , error: { // error callback of endSession
//                                      target: that
//                                    , action: function() {
//                                        DigiWebApp.ApplicationController.DigiLoaderView.hide();
//                                        that.bindToCaller(that, that.handleErrorCallback, [xhr, err, 'sendData'])();
//                                    }
//                                }
//                            });
//
//                        }
//                    }).send();
//                }
//            }
//            , error: {
//                  target: this
//                , action: function() {
//                    if(isClosingDay) {
//                        if(DigiWebApp.EmployeeController.getEmployeeState() == 2) {
//                            DigiWebApp.EmployeeController.setEmployeeState(1);
//                        }
//                        // clear employee selection
//                        localStorage.removeItem(DigiWebApp.EmployeeController.empSelectionKey);
//                        localStorage.removeItem(DigiWebApp.EmployeeController.empSelectionKeyTmp);
//                    }
//                    this.connectionError();
//                }
//            }
//        });
//
//
//    }
//
//
//    /**
//     * Constructs the SOAP data body for the bookings.
//     *
//     * Replaces the placeholder with their values of the actual booking
//     *
//     * @param {Array|Object} bookings The booking object(s) to be sent
//     */
//    , buildDataBodyBookings: function(bookings) {
//        var dataStr = '';
//        var soapDataBooking = '';
//        soapDataBooking = soapDataBooking + '   <tran:zeitdatenHandy>\n';
//		soapDataBooking = soapDataBooking + '       <xsd:auftragsId><orderId></xsd:auftragsId>\n';
//        soapDataBooking = soapDataBooking + '       <xsd:von><timeStampStart></xsd:von>\n';
//        soapDataBooking = soapDataBooking + '       <xsd:bis><timeStampEnd></xsd:bis>\n';
//        soapDataBooking = soapDataBooking + '       <xsd:gpsBreite><latitude></xsd:gpsBreite>\n';
//        soapDataBooking = soapDataBooking + '       <xsd:gpsLaenge><longitude></xsd:gpsLaenge>\n';
//        //soapDataBooking = soapDataBooking + '       <xsd:gpsBreite_bis><latitude_bis></xsd:gpsBreite_bis>\n';
//        //soapDataBooking = soapDataBooking + '       <xsd:gpsLaenge_bis><longitude_bis></xsd:gpsLaenge_bis>\n';
//        //soapDataBooking = soapDataBooking + '       <xsd:signature><signature></xsd:signature>\n';
//        soapDataBooking = soapDataBooking + '       <xsd:handauftrag><handOrderName></xsd:handauftrag>\n';
//        soapDataBooking = soapDataBooking + '       <xsd:handauftragsId><handOrderId></xsd:handauftragsId>\n';
//        soapDataBooking = soapDataBooking + '       <xsd:positonsId><positionId></xsd:positonsId>\n';
//        soapDataBooking = soapDataBooking + '       <xsd:taetigkeitsId><activityId></xsd:taetigkeitsId>\n';
//        soapDataBooking = soapDataBooking + '       <xsd:bemerkungsfeld><remark></xsd:bemerkungsfeld>\n';
//        soapDataBooking = soapDataBooking + '   </tran:zeitdatenHandy>\n';
//
//        if(typeof(bookings) === 'object' && !_.isArray(bookings)) {
//            bookings = [bookings];  // if an object was passed, push it into an array, to have one behaviour
//        }
//
//        if(_.isArray(bookings)) {
//        
//            for(var i in bookings) {
//                var booking = bookings[i];
//                var s = soapDataBooking;
//                for(var prop in booking.record) {
//                    if(prop === '_createdAt' || prop === '_updatedAt') { continue; }
//                    if(prop === 'handOrderName') {
//                        s = s.replace(new RegExp('<' + prop + '>'), booking.get(prop) === '0' ? '' : booking.get(prop));
//                    } else if(prop === 'orderId') {
//                        s = s.replace(new RegExp('<' + prop + '>'), (booking.get(prop) === booking.get('handOrderName') || booking.get('handOrderName') !== '') ? '0' : booking.get(prop));
//                    } else if(prop === 'handOrderId') {
//                        s = s.replace(new RegExp('<' + prop + '>'), (booking.get(prop) === booking.get('handOrderName')) ? '' : booking.get(prop));
//                    } else if(prop === 'fileName') {
//                        s = s.replace(new RegExp('<signature>'), typeof(booking.signature) === 'undefined' ? '' : booking.signature);
//                    } else {
//                        s = s.replace(new RegExp('<' + prop + '>'), booking.get(prop));
//                    }
//                }
//                
//                dataStr += s;
//                
//            }
//        }
//
//        // handle left-over properties (maybe the webapp has been updated while there were old bookings in localstorage?)
//        while (dataStr.match(new RegExp('><.*</xsd:')) !== null ) {
//                dataStr = dataStr.replace(new RegExp('><.*</xsd:'), '></xsd:');
//        }
//        
//        //dataStr += '\n';
//        ////if (DigiWebApp.SettingsController.globalDebugMode) console.log('soapDataBooking: ' + dataStr);
//        return dataStr;
//    }
//
//    /**
//     * Constructs the SOAP data body for the employees.
//     *
//     * Replaces the placeholder with the values of the employee selection.
//     */
//    , buildEmployeeBody: function() {
//        var empStr = '';
//        var soapDataEmployees = '   <tran:mitarbeiterIds><mitarbeiterIds></tran:mitarbeiterIds>\n';
//        var employeeIds = localStorage.getItem(DigiWebApp.EmployeeController.empSelectionKey) || localStorage.getItem(DigiWebApp.EmployeeController.empSelectionKeyTmp);
//        if(employeeIds) {
//            employeeIds = employeeIds.split(',');
//        }
//        if(employeeIds && employeeIds != 'null' && _.isArray(employeeIds) && employeeIds.length > 0) {
//            _.each(employeeIds, function(em) {
//                empStr += soapDataEmployees.replace(/<mitarbeiterIds>/, em);
//            });
//            return empStr;
//        } else {
//            return '<tran:mitarbeiterIds>0</tran:mitarbeiterIds>\n';
//        }
//    }


    /**
     *
     * Is a proxy for the success callback and prepares the data returned from the server.
     *
     * Transforms it from XML to JSON, either through transformResultToJson() or special functions
     * for work plans and kolonne, because they cannot be transformed automatically.
     *
     * Calls the success callback of the source call afterwards.
     *
     * @param {Document|Object} data The returned data of the server as a jQuery Document
     * @param {Object} msg
     * @param {Object} xhr The XMLHTTPRequest object.
     * @param {Boolean} workPlanTransform F
     * @param {Boolean} kolonneTransform
     * @param {String} source The name of the method to identify the source of the call
     */
    , handleSuccessCallback: function(data, msg, xhr, workPlanTransform, kolonneTransform, source) {
        var d = null;
        if (!workPlanTransform && !kolonneTransform) {
            d = this.transformResultToJson(data);
        } else {
            if(workPlanTransform) {
                d = this.transformWorkPlanXmlToJson(data);
            } else if(kolonneTransform) {
                d = this.transformKolonneXmlToJson(data);
            }
        }
        M.EventDispatcher.checkHandler(this.successCallback[source]);
        this.successCallback[source].target = this.successCallback[source].target || this;
        this.bindToCaller(this.successCallback[source].target, this.successCallback[source].action, [d, msg, xhr])();
    }


    /**
     *
     * Calls the error callback of the source call
     *
     * @param {Object} xhr The XMLHTTPRequest object.
     * @param {String} err The text status, e.g. "parseerror" or "timeout"
     * @param {String} source The name of the method to identify the source of the call
     */
    , handleErrorCallback: function(xhr, err, source) {
        M.EventDispatcher.checkHandler(this.errorCallback[source]);
        this.errorCallback[source].target = this.errorCallback[source].target || this;
        this.bindToCaller(this.errorCallback[source].target, this.errorCallback[source].action, [xhr, err])();
    }

    /**
     * Saves the callback objects in the corresponding controller properties:
     * - successCallback
     * - errorCallback
     * with their source as key.
     *
     * @param {Object} success The success callback object.
     * @param {Object} error The error callback object.
     * @param source
     */
    , saveCallbacks: function(success, error, source) {
        if (success) {
            this.successCallback[source] = success;
        }
        if (error) {
            this.errorCallback[source] = error;
        }
    }

    /**
     * Automatically transforms the returned XML to JSON.
     * Uses Xml2Json lib/plugin for jQuery.
     *
     * @param {Document|Object} data The returned data of the server, prepared by jQuery
     * @return {Object} The data in JSON format (=> JavaScript object).
     */
    , transformResultToJson: function(data) {
    	////if (DigiWebApp.SettingsController.globalDebugMode) console.log("transformResultToJson: " + data);
        return $.xml2json(data);
    }


    /**
     *
     * Transforms the work plan xml manually to a JavaScript object.
     *
     * Traverses the documented with jQuery function find.
     *
     * @param {Document|Object} data The returned data of the server, prepared by jQuery
     * @return {Object} The data as a JavaScript object underneath a "return" property as an array.
     */
    , transformWorkPlanXmlToJson: function(data) {
    	////if (DigiWebApp.SettingsController.globalDebugMode) console.log("transformWorkPlanXmlToJson: " + data);

        var response = {}; 
        response['return'] = [];        
        var xmlDoc = $.parseXML(data);
        ////if (DigiWebApp.SettingsController.globalDebugMode) console.log(xmlDoc);
        
        if ((YES) || ( $(xmlDoc).find('return').length !== xmlDoc.documentElement.childNodes.length )) {

        	_.forEach(xmlDoc.documentElement.childNodes,function(el, i){
        	
				var obj = {};
        		obj.positionen = [];
        		obj.taetigkeitsIds = [];

        		var anzahlPositionen = (el.childNodes.length - 2) / 2;
        		var arbeitsplanId = el.childNodes[0].childNodes[0].nodeValue;
        		var arbeitsplanTyp = el.childNodes[1].childNodes[0].nodeValue;

        		for (var j=2; j<anzahlPositionen + 2; j++) {
        			//console.log(el.childNodes[j].childNodes[0].nodeValue + " = " + el.childNodes[j+anzahlPositionen].childNodes[0].nodeValue);	
        			var positionTaetigkeit = el.childNodes[j].childNodes[0].nodeValue;
        			var tateigkeitId = el.childNodes[j+anzahlPositionen].childNodes[0].nodeValue;
        			obj.arbeitsplanId = arbeitsplanId;
                    obj.arbeitsplanTyp = arbeitsplanTyp;
        			obj.positionen.push(positionTaetigkeit);
        			obj.taetigkeitsIds.push(tateigkeitId);
        		}

        		response['return'].push(obj);

        	});

		} else {
		// old variant (pre TMP-1.1)
	        $(xmlDoc).find('return').each( // for every result
	            function(i, el) {
	                var obj = {};
	                $(el).find('[localName$="arbeitsplanId"]').each(
	                    function(r, el2) {
	                        obj.arbeitsplanId = $(el2).text();
	                    }
	                );
	                $(el).find('[localName$="arbeitsplanTyp"]').each(
	                    function(r, el2) {
	                        obj.arbeitsplanTyp = $(el2).text();
	                    }
	                );
	                obj.positionen = [];
	                $(el).find('[localName$="positionTaetigkeit"]').each(
	                    function(r, el2) {
	                        obj.positionen.push($(el2).text());
	                    }
	                );
	                obj.taetigkeitsIds = [];
	                $(el).find('[localName$="tateigkeitId"]').each(
	                    function(r, el2) {
	                        obj.taetigkeitsIds.push($(el2).text());
	                    }
	                );
	                response['return'].push(obj);
	            }
	        );
	    }

        return response;
    }

    /**
     * Transforms the work plan xml manually to a JavaScript object.
     *
     * Traverses the documented with jQuery function find.
     *
     * @param {Document|Object} data The returned data of the server, prepared by jQuery.
     * @return {Object|Null} The data (employees) as a JavaScript object underneath a "return" property as an array or null if no employees where sent.
     */
    , transformKolonneXmlToJson: function(data) {
    	////if (DigiWebApp.SettingsController.globalDebugMode) console.log("transformKolonneXmlToJson: " + data);
        
        var response = {};
        response['return'] = [];        
        var xmlDoc = $.parseXML(data);
        ////if (DigiWebApp.SettingsController.globalDebugMode) console.log(xmlDoc);
        
        if ((YES) || ( $(xmlDoc).find('return').length !== xmlDoc.documentElement.childNodes.length )) {

        	_.forEach(xmlDoc.documentElement.childNodes,function(el, i){
        	
				var obj = {};
        		obj.mitarbeiterIds = [];
        		obj.mitarbeiterName = [];

        		var anzahlMitarbeiter = (el.childNodes.length -1) / 2;
        		var kolonnenId = el.childNodes[0].childNodes[0].nodeValue;

        		for (var j=1;j<=anzahlMitarbeiter;j++) {
        			//console.log(el.childNodes[j].childNodes[0].nodeValue + " = " + el.childNodes[j+anzahlMitarbeiter].childNodes[0].nodeValue);	
        			var mitarbeiterId = el.childNodes[j].childNodes[0].nodeValue;
        			var mitarbeiterName = el.childNodes[j+anzahlMitarbeiter].childNodes[0].nodeValue;
        			obj.kolonnenId = kolonnenId;
        			obj.mitarbeiterIds.push(mitarbeiterId);
        			obj.mitarbeiterName.push(mitarbeiterName);
        		}

        		response['return'] = obj;

        	});

		} else {
		// old variant (pre TMP-1.1)
	        $(xmlDoc).find('return').each( // for every result
	            function(i, el) {
	                var obj = {};
	                $(el).find('[nodeName$="kolonnenId"]').each(
	                    function(r, el2) {
	                        obj.kolonnenId = $(el2).text();
	                    }
	                );
	                obj.mitarbeiterIds = [];
	                $(el).find('[nodeName$="mitarbeiterId"]').each(
	                    function(r, el2) {
	                        obj.mitarbeiterIds.push($(el2).text());
	                    }
	                );
	                obj.mitarbeiterName = [];
	                $(el).find('[nodeName$="mitarbeiterName"]').each(
	                    function(r, el2) {
	                        obj.mitarbeiterName.push($(el2).text());
	                    }
	                );
	                response['return'] = obj;
	            }
	        );
	    }  

        if(response['return'] && response['return'].mitarbeiterIds) {
            var employees = [];

            for(var i in response['return'].mitarbeiterIds) {
                var id = response['return'].mitarbeiterIds[i];
                employees.push({
                      kolonnenId: response['return'].kolonnenId
                    , id: id
                    , name: response['return'].mitarbeiterName[i]
                });
            }

            response['return'] = employees;
            return response;
        } else {
            return null;
        }
    }

    /**
     * Displays a connection error alert.
     */
    , connectionError: function() {
        //M.DialogView.alert({
        DigiWebApp.ApplicationController.nativeAlertDialogView({
              title: M.I18N.l('connectionError')
            , message: M.I18N.l('connectionErrorMsg')
        });
    }
});
// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: ScholppBookingController
// ==========================================================================
// manuell var-checked
DigiWebApp.ScholppBookingController = M.Controller.extend({

	  resetButtons: function() {
		var fahrzeitButton = $('#' + DigiWebApp.BookingPageWithIconsScholpp.content.fahrzeit_arbeitszeit_spezial_ButtonGrid.fahrzeitButtonGrid.button.id)[0];
		var arbeitszeitButton = $('#' + DigiWebApp.BookingPageWithIconsScholpp.content.fahrzeit_arbeitszeit_spezial_ButtonGrid.arbeitszeitButtonGrid.button.id)[0];
		var spezialButton = $('#' + DigiWebApp.BookingPageWithIconsScholpp.content.fahrzeit_arbeitszeit_spezial_ButtonGrid.spezialButtonGrid.button.id)[0];
		var unterbrechungButton = $('#' + DigiWebApp.BookingPageWithIconsScholpp.content.unterbrechung_pause_arbeitsende_ButtonGrid.unterbrechungButtonGrid.button.id)[0];
		var pauseButton = $('#' + DigiWebApp.BookingPageWithIconsScholpp.content.unterbrechung_pause_arbeitsende_ButtonGrid.pauseButtonGrid.button.id)[0];
		var arbeitsendeButton = $('#' + DigiWebApp.BookingPageWithIconsScholpp.content.unterbrechung_pause_arbeitsende_ButtonGrid.arbeitsendeButtonGrid.button.id)[0];
		fahrzeitButton.classList.remove("buttonSelected");
		arbeitszeitButton.classList.remove("buttonSelected");
		spezialButton.classList.remove("buttonSelected");
		unterbrechungButton.classList.remove("buttonSelected");
		pauseButton.classList.remove("buttonSelected");
		arbeitsendeButton.classList.remove("buttonSelected");
	}

	, sleepFor: 500

	, bucheFahrzeitTimeoutvar: null
	, bucheFahrzeit: function() {
		var activities = DigiWebApp.SelectionController.getActivities();
		var activityArray = _.map(activities, function(act) {
		        	if ( typeof(act) === "undefined" ) {
		        		console.log("UNDEFINED ACTIVITY");
		        		return null;
		        	} else {
		        		var obj = null;
		        		if(act.get('name').indexOf("Reisezeit") >= 0 || act.get('name').indexOf("Fahrzeit") >= 0) {
		        			obj = { label: act.get('name'), value: act.get('id'), isSelected: YES };
		        			//itemSelected = YES;
		        		} else {
		        			obj = { label: act.get('name'), value: act.get('id') };
		        		}
		        		return obj;
		        	}
		        });
		DigiWebApp.SelectionController.set('activities', activityArray);
		if (DigiWebApp.BookingController.checkBooking()) { // was (YES)
			DigiWebApp.ScholppBookingController.selectFahrzeit();
			DigiWebApp.ScholppBookingController.bucheFahrzeitTimeoutvar = setTimeout("DigiWebApp.ScholppBookingController.doBucheFahrzeit()",this.sleepFor);
		}
	}
	, doBucheFahrzeit: function() {
		if (DigiWebApp.ScholppBookingController.bucheFahrzeitTimeoutvar !== null) clearTimeout(DigiWebApp.ScholppBookingController.bucheFahrzeitTimeoutvar);
		DigiWebApp.BookingController.book();
		DigiWebApp.SelectionController.saveSelection();
	}
	
	, bucheArbeitszeitTimeoutvar: null
	, bucheArbeitszeit: function() {
		var activities = DigiWebApp.SelectionController.getActivities();
		var activityArray = _.map(activities, function(act) {
		        	if ( typeof(act) === "undefined" ) {
		        		console.log("UNDEFINED ACTIVITY");
		        		return null;
		        	} else {
		        		var obj = null;
		        		if(act.get('name').indexOf("Arbeitszeit") >= 0) {
		        			obj = { label: act.get('name'), value: act.get('id'), isSelected: YES };
		        			//itemSelected = YES;
		        		} else {
		        			obj = { label: act.get('name'), value: act.get('id') };
		        		}
		        		return obj;
		        	}
		        });
		DigiWebApp.SelectionController.set('activities', activityArray);
		if (DigiWebApp.BookingController.checkBooking()) { // was (YES)
			DigiWebApp.ScholppBookingController.selectArbeitszeit();
			DigiWebApp.ScholppBookingController.bucheArbeitszeitTimeoutvar = setTimeout("DigiWebApp.ScholppBookingController.doBucheArbeitszeit()",this.sleepFor);
		}
	}
	, doBucheArbeitszeit: function() {
		if (DigiWebApp.ScholppBookingController.bucheArbeitszeitTimeoutvar !== null) clearTimeout(DigiWebApp.ScholppBookingController.bucheArbeitszeitTimeoutvar);
		DigiWebApp.BookingController.book();
		DigiWebApp.SelectionController.saveSelection();
	}

	, bucheUnterbrechungTimeoutvar: null
	, bucheUnterbrechung: function() {
		var activities = DigiWebApp.SelectionController.getActivities();
		var activityArray = _.map(activities, function(act) {
		        	if ( typeof(act) === "undefined" ) {
		        		console.log("UNDEFINED ACTIVITY");
		        		return null;
		        	} else {
		        		var obj = null;
		        		if(act.get('name').indexOf("Unterbrechung") >= 0) {
		        			obj = { label: act.get('name'), value: act.get('id'), isSelected: YES };
		        			//itemSelected = YES;
		        		} else {
		        			obj = { label: act.get('name'), value: act.get('id') };
		        		}
		        		return obj;
		        	}
		        });
		DigiWebApp.SelectionController.set('activities', activityArray);
		if (DigiWebApp.BookingController.checkBooking()) { // was (YES)
			DigiWebApp.ScholppBookingController.selectUnterbrechung();
			DigiWebApp.ScholppBookingController.bucheUnterbrechungTimeoutvar = setTimeout("DigiWebApp.ScholppBookingController.doBucheUnterbrechung()",this.sleepFor);
		}
	}
	, doBucheUnterbrechung: function() {
		if (DigiWebApp.ScholppBookingController.bucheUnterbrechungTimeoutvar !== null) clearTimeout(DigiWebApp.ScholppBookingController.bucheUnterbrechungTimeoutvar);
		DigiWebApp.BookingController.book();
		DigiWebApp.SelectionController.saveSelection();
	}
	
	, buchePauseTimeoutvar: null
	, buchePause: function() {
		var activities = DigiWebApp.SelectionController.getActivities();
		var activityArray = _.map(activities, function(act) {
		        	if ( typeof(act) === "undefined" ) {
		        		console.log("UNDEFINED ACTIVITY");
		        		return null;
		        	} else {
		        		var obj = null;
		        		if(act.get('name').indexOf("Pause") >= 0) {
		        			obj = { label: act.get('name'), value: act.get('id'), isSelected: YES };
		        			//itemSelected = YES;
		        		} else {
		        			obj = { label: act.get('name'), value: act.get('id') };
		        		}
		        		return obj;
		        	}
		        });
		DigiWebApp.SelectionController.set('activities', activityArray);
		if (DigiWebApp.BookingController.checkBooking()) { // was (YES)
			DigiWebApp.ScholppBookingController.selectPause();
			DigiWebApp.ScholppBookingController.buchePauseTimeoutvar = setTimeout("DigiWebApp.ScholppBookingController.doBuchePause()",this.sleepFor);
		}
	}
	, doBuchePause: function() {
		if (DigiWebApp.ScholppBookingController.buchePauseTimeoutvar !== null) clearTimeout(DigiWebApp.ScholppBookingController.buchePauseTimeoutvar);
		DigiWebApp.BookingController.book();
		DigiWebApp.SelectionController.saveSelection();
	}

	, bucheArbeitsendeTimeoutvar: null
	, bucheArbeitsende: function() {
		DigiWebApp.ScholppBookingController.selectArbeitsende();
		DigiWebApp.ScholppBookingController.bucheArbeitsendeTimeoutvar = setTimeout("DigiWebApp.ScholppBookingController.doBucheArbeitsende()",this.sleepFor);
	}
	, doBucheArbeitsende: function() {
		if (DigiWebApp.ScholppBookingController.bucheArbeitsendeTimeoutvar !== null) clearTimeout(DigiWebApp.ScholppBookingController.bucheArbeitsendeTimeoutvar);
		DigiWebApp.BookingController.closeDay();
		DigiWebApp.SelectionController.resetSelection();
	}
	
	, selectFahrzeit: function() {
		DigiWebApp.ScholppBookingController.resetButtons();
		var fahrzeitButton = $('#' + DigiWebApp.BookingPageWithIconsScholpp.content.fahrzeit_arbeitszeit_spezial_ButtonGrid.fahrzeitButtonGrid.button.id)[0];
		fahrzeitButton.classList.add("buttonSelected");
	}
	
	, selectArbeitszeit: function() {
		DigiWebApp.ScholppBookingController.resetButtons();
		var arbeitszeitButton = $('#' + DigiWebApp.BookingPageWithIconsScholpp.content.fahrzeit_arbeitszeit_spezial_ButtonGrid.arbeitszeitButtonGrid.button.id)[0];
		arbeitszeitButton.classList.add("buttonSelected");
	}

	, selectUnterbrechung: function() {
		DigiWebApp.ScholppBookingController.resetButtons();
		var unterbrechungButton = $('#' + DigiWebApp.BookingPageWithIconsScholpp.content.unterbrechung_pause_arbeitsende_ButtonGrid.unterbrechungButtonGrid.button.id)[0];
		unterbrechungButton.classList.add("buttonSelected");
	}
	
	, selectPause: function() {
		DigiWebApp.ScholppBookingController.resetButtons();
		var pauseButton = $('#' + DigiWebApp.BookingPageWithIconsScholpp.content.unterbrechung_pause_arbeitsende_ButtonGrid.pauseButtonGrid.button.id)[0];
		pauseButton.classList.add("buttonSelected");
	}

	, selectArbeitsende: function() {
		DigiWebApp.ScholppBookingController.resetButtons();
		var arbeitsendeButton = $('#' + DigiWebApp.BookingPageWithIconsScholpp.content.unterbrechung_pause_arbeitsende_ButtonGrid.arbeitsendeButtonGrid.button.id)[0];
		arbeitsendeButton.classList.add("buttonSelected");
	}
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: SelectionController
// ==========================================================================
// manuell var-checked
DigiWebApp.SelectionController = M.Controller.extend({

    // arrays for selection lists
      orders: null
    , positions: null
    , activities: null

    , selections: {
          order: null
        , position: null
        , activity: null
        , uebernachtungskennzeichenScholpp: null
        , spesenkennzeichenScholpp: null
    }

    // use selection that has been made by hand
    , useSelections: NO

    , showHandOrderFirst: NO

    , uebernachtungskennzeichenScholpp: null
    , spesenkennzeichenScholpp: null
    
    /*
    , setSelection: function() {
        var orders = DigiWebApp.HandOrder.findSorted().concat(DigiWebApp.Order.findSorted()); // we need to check handOrders also
        var positions = DigiWebApp.Position.findSorted();
        var activities = DigiWebApp.SelectionController.getActivities();
    }
    */

    , setSelectionByPreviousSelection: function() {
        var that = this;
        var mySelection = JSON.parse(JSON.stringify(that.selections));
        
        this.resetSelection();

        var orders = DigiWebApp.HandOrder.findSorted().concat(DigiWebApp.Order.findSorted()); // we need to check handOrders also
        //var positions = DigiWebApp.Position.findSorted();
        //var activities = DigiWebApp.SelectionController.getActivities();

        /**
         * ORDERS
         */
        var itemSelected = NO;
        var orderArray = _.map(orders, function(order) {
        	if (order) {
	            var obj =  { label: order.get('name'), value: order.get('id') };
	            if (obj.value === mySelection.order) {
	                obj.isSelected = YES;
	                itemSelected = YES;
	            }
	            return obj;
        	}
        });
        orderArray = _.compact(orderArray);
        // push "Bitte wählen Option"
        if (DigiWebApp.SettingsController.featureAvailable('416')) {
        	orderArray.push({label: M.I18N.l('order'), value: '0', isSelected:!itemSelected});
        } else {
        	orderArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});
        }

        // set selection arrays to start content binding process
        this.set('orders', orderArray);
        this.setPositions();

        /**
         * POSITIONS
         */
        itemSelected = NO;
        var positionArray = _.map(this.get('positions'), function(pos) {
        	if (pos) {
	            var obj = { label: pos.label, value: pos.value };
	            if (obj.value === mySelection.position) {
	                obj.isSelected = YES;
	                itemSelected = YES;
	            }
	            return obj;
        	}
        });
        positionArray = _.compact(positionArray);
//        // push "Bitte wählen Option"
//        if (DigiWebApp.SettingsController.featureAvailable('419')) {
//            positionArray.push({label: M.I18N.l('position'), value: '0', isSelected:!itemSelected});
//        } else {
//            positionArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});
//        }

        // set selection arrays to start content binding process
        this.set('positions', positionArray);
        this.setActivities(YES);
        
        /**
         * ACTIVITIES
         */
        itemSelected = NO;
        var activityArray = _.map(this.get('activities'), function(act) {
        	if ( typeof(act) === "undefined" ) {
        		console.log("UNDEFINED ACTIVITY");
        	} else {        	
        		var obj = { label: act.label, value: act.value };
        		if (obj.value === mySelection.activity) {
        			obj.isSelected = YES;
        			itemSelected = YES;
        		}
                return obj;
        	}
        });
        activityArray = _.compact(activityArray);
//        // push "Bitte wählen Option"
//        if (DigiWebApp.SettingsController.featureAvailable('419')) {
//        	activityArray.push({label: M.I18N.l('activity'), value: '0', isSelected:!itemSelected});
//        } else {
//        	activityArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});
//        }

        // set selection arrays to start content binding process
        this.set('activities', activityArray);

        if (DigiWebApp.SettingsController.featureAvailable('419')) {
	        /**
	         * Scholpp-Spesen: Übernachtungskennzeichen 
	         */
	        itemSelected = NO;
	        var uebernachtungskennzeichenScholppArray = _.map(that.uebernachtungskennzeichenScholpp, function(ueK) {
	        	if ( typeof(ueK) === "undefined" ) {
	        		console.log("UNDEFINED uebernachtungskennzeichenScholpp");
	        	} else {        	
	        		var obj = { label: ueK.label, value: ueK.value };
	        		if (obj.value === mySelection.uebernachtungskennzeichenScholpp) {
	        			obj.isSelected = YES;
	        			itemSelected = YES;
	        		}
	                return obj;
	        	}
	        });
	        uebernachtungskennzeichenScholppArray = _.compact(uebernachtungskennzeichenScholppArray);
	        this.set('uebernachtungskennzeichenScholpp', uebernachtungskennzeichenScholppArray);
			this.saveSelection();
		}
        
    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") { DigiWebApp.ScholppBookingController.resetButtons(); }
    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
    		var activitySelection = M.ViewManager.getView('bookingPageWithIconsScholpp', 'activity').getSelection(YES);
    		if (!DigiWebApp.BookingController.currentBooking) activitySelection = null;
    		if (typeof(activitySelection) !== "undefined" && activitySelection != null) {
	    		var activitySelected = _.find(DigiWebApp.Activity.find(), function(a) { return (parseInt(a.get("id")) === activitySelection.value);});
	    		//var activitySelected = DigiWebApp.Activity.find({query:{identifier: 'id', operator: '=', value: activitySelection.value}})[0];
	    		if (!activitySelected) {
	    			DigiWebApp.ScholppBookingController.selectArbeitsende();
	    		} else {
		    		var activityName = activitySelected.get("name");
		    		if (activityName.indexOf("Reisezeit") >= 0 || activityName.indexOf("Fahrzeit") >= 0) {
		    			DigiWebApp.ScholppBookingController.selectFahrzeit();
		    		} else if (activityName.indexOf("Arbeitszeit") >= 0) {
		    			DigiWebApp.ScholppBookingController.selectArbeitszeit();
		    		} else if (activityName.indexOf("Unterbrechung") >= 0) {
		    			DigiWebApp.ScholppBookingController.selectUnterbrechung();
		    		} else if (activityName.indexOf("Pause") >= 0) {
		    			DigiWebApp.ScholppBookingController.selectPause();
		    		} else {
		    			DigiWebApp.ScholppBookingController.selectArbeitsende();
		    		}
	    		}
    		} else {
    			DigiWebApp.ScholppBookingController.selectArbeitsende();
    		}
    	}

    }

    , setSelectionWithCurrentHandOrderFirst: function() {
        var that = this;

        var orders = DigiWebApp.HandOrder.findSorted().concat(DigiWebApp.Order.findSorted()); // we need to check handOrders also
        //var positions = DigiWebApp.Position.findSorted();
        var activities = DigiWebApp.SelectionController.getActivities();

        
        /**
         * ORDERS
         */
        var itemSelected = NO;
        var orderArray = _.map(orders, function(order) {
        	if (order) {
	            var obj =  { label: order.get('name'), value: order.get('id') };
	            if(obj.label === DigiWebApp.HandOrderController.currentHandOrderName) {
	                obj.isSelected = YES;
	                itemSelected = YES;
	            } else {
	                obj.isSelected = NO;
	            }
	            return obj;
        	}
        });
        
        orderArray = _.compact(orderArray);
        // push "Bitte wählen Option"
        if (DigiWebApp.SettingsController.featureAvailable('419')) {
        	orderArray.push({label: M.I18N.l('order'), value: '0', isSelected:!itemSelected});
        } else {
        	orderArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});
        }

        /**
         * POSITIONS (none for HandOrder)
         */
        var positionArray = [];
        // push "Bitte wählen Option"
        positionArray.push({label: M.I18N.l('noData'), value: '0', isSelected:YES});

        /**
         * ACTIVITIES
         */
        var i = 0;
        var activityArray = _.map(activities, function(act) {
        	if ( typeof(act) === "undefined" ) {
        		console.log("UNDEFINED ACTIVITY");
        		return null;
        	} else {
        		var obj = null;
        		if (i === 0) {
        			itemSelected = YES;
        			obj = { label: act.get('name'), value: act.get('id'), isSelected:YES };
        		} else {
        			obj = { label: act.get('name'), value: act.get('id') };
        		}
                i++;
                return obj;
            }
        });
        activityArray = _.compact(activityArray);
        if (DigiWebApp.SettingsController.featureAvailable('419')) {
        	activityArray.push({label: M.I18N.l('activity'), value: '0', isSelected:!itemSelected});
        } else {
        	activityArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});
        }
        
        this.resetSelection();

        if (DigiWebApp.SettingsController.featureAvailable('419')) {
	        /**
	         * Scholpp-Spesen: Übrnachtungskennzeichen 
	         */
	        itemSelected = NO;
	        var uebernachtungskennzeichenScholppArray = _.map(that.uebernachtungskennzeichenScholpp, function(ueK) {
	        	if ( typeof(ueK) === "undefined" ) {
	        		console.log("UNDEFINED uebernachtungskennzeichenScholpp");
	        	} else {        	
	        		var obj = { label: ueK.label, value: ueK.value };
	        		if(parseInt(obj.value) === 6) { // select "- -"
	        			obj.isSelected = YES;
	        			itemSelected = YES;
	        		}
	                return obj;
	        	}
	        });
	        uebernachtungskennzeichenScholppArray = _.compact(uebernachtungskennzeichenScholppArray);
	        that.set('uebernachtungskennzeichenScholpp', uebernachtungskennzeichenScholppArray);
			that.saveSelection();
		}

        // set selection arrays to start content binding process
        this.set('orders', orderArray);
        this.set('positions', positionArray);
        this.set('activities', activityArray);
    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
            M.ViewManager.getView('bookingPageWithIconsScholpp', 'position').setSelection('0');
        	DigiWebApp.ScholppBookingController.resetButtons();
    	} else {
            M.ViewManager.getView('bookingPage', 'position').setSelection('0');
    	}
    	
    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
    		var activitySelection = M.ViewManager.getView('bookingPageWithIconsScholpp', 'activity').getSelection(YES);
    		if (!DigiWebApp.BookingController.currentBooking) activitySelection = null;
    		if (typeof(activitySelection) !== "undefined" && activitySelection != null) {
	    		var activitySelected = _.find(DigiWebApp.Activity.find(), function(a) { return (parseInt(a.get("id")) === activitySelection.value);});
	    		//DigiWebApp.Activity.find({query:{identifier: 'id', operator: '=', value: activitySelection.value}})[0];
	    		if (typeof(activitySelected) === "undefined") {
	    			DigiWebApp.ScholppBookingController.selectArbeitsende();
	    		} else {
		    		var activityName = activitySelected.get("name");
		    		if (activityName.indexOf("Reisezeit") >= 0 || activityName.indexOf("Fahrzeit") >= 0) {
		    			DigiWebApp.ScholppBookingController.selectFahrzeit();
		    		} else if (activityName.indexOf("Arbeitszeit") >= 0) {
		    			DigiWebApp.ScholppBookingController.selectArbeitszeit();
		    		} else if (activityName.indexOf("Unterbrechung") >= 0) {
		    			DigiWebApp.ScholppBookingController.selectUnterbrechung();
		    		} else if (activityName.indexOf("Pause") >= 0) {
		    			DigiWebApp.ScholppBookingController.selectPause();
		    		} else {
		    			//DigiWebApp.ScholppBookingController.selectArbeitsende();
		    		}
	    		}
    		} else {
    			//DigiWebApp.ScholppBookingController.selectArbeitsende();
    		}
    	}

    }

    , setSelectionByCurrentBooking: function() {

        this.resetSelection();

        var booking = DigiWebApp.BookingController.currentBooking;
        
        // get all items from local storage
        var orders = DigiWebApp.HandOrder.findSorted().concat(DigiWebApp.Order.findSorted()); // we need to check handOrders also
        //var positions = DigiWebApp.Position.findSorted();
        //var activities = DigiWebApp.SelectionController.getActivities();

        // get the ids from the current booking
        var orderId = (booking.get('orderId') == "0" ? 0 : booking.get('orderId')) || booking.get('handOrderId'); // we need to check handOrders also
        var positionId = booking.get('positionId');
        var activityId = booking.get('activityId');
        var uebernachtungAuswahl = booking.get('uebernachtungAuswahl');

        
        /**
         * ORDERS
         */
        var orderArray = _.map(orders, function(order) {
        	if (order) {
	            if(order.get('id') == orderId) {
	                return { label: order.get('name'), value: order.get('id'), isSelected: YES };
	            } else {
	                return { label: order.get('name'), value: order.get('id') };
	            }
        	}
        });
        orderArray = _.compact(orderArray);
        // push "Bitte wählen Option"
        if (DigiWebApp.SettingsController.featureAvailable('419')) {
        	orderArray.push({label: M.I18N.l('order'), value: '0', isSelected:!itemSelected});
        } else {
        	orderArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});
        }

        // set selection arrays to start content binding process
        this.set('orders', orderArray);
        this.setPositions();
        
        /**
         * POSITIONS
         */
        var positionArray = _.map(this.get('positions'), function(pos) {
        	if (pos) {
                if (parseInt(pos.value) === parseInt(positionId)) {
                    return { label: pos.label, value: pos.value, isSelected: YES };
                } else {
                	return { label: pos.label, value: pos.value };
                }
        	}
        });
        positionArray = _.compact(positionArray);
        // push "Bitte wählen Option"
        if (DigiWebApp.SettingsController.featureAvailable('416')) {
        	positionArray.push({label: M.I18N.l('position'), value: '0', isSelected:!itemSelected});
        } else {
        	positionArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});
        }

        // set selection arrays to start content binding process
        this.set('positions', positionArray);
        this.setActivities(YES);

        /**
         * ACTIVITIES
         */
        
//        var workPlans = _.select(DigiWebApp.WorkPlan.find(), function(wp) {
//            if (wp) return wp.get('id') == positionId;
//        });
//
//        /* if a workplan exists, only use those activities that are in the workplan */
//        if(workPlans.length > 0) {
//            activities = DigiWebApp.SelectionController.getActivitiesFromWorkplan(workPlans[0]);
//        } else {
//            activities = DigiWebApp.SelectionController.getActivities();
//        }

        var itemSelected = NO;
        var activityArray = _.map(this.get('activities'), function(act) {
        	if ( typeof(act) === "undefined" ) {
        		console.log("UNDEFINED ACTIVITY");
        		return null;
        	} else {
        		var obj = null;
        		if (parseInt(act.value) == parseInt(activityId)) {
        			obj = { label: act.label, value: act.value, isSelected: YES };
        			//console.log("ACTIVITY " + i + " = " + act.get('name') + " in setSelectionByCurrentBooking isSelected");
        			itemSelected = YES;
        		} else {
        			obj = { label: act.label, value: act.value };
        			//console.log("ACTIVITY " + i + " = " + act.get('name') + " in setSelectionByCurrentBooking");
        		}
        		return obj;
        	}
        });
        activityArray = _.compact(activityArray);
        if (DigiWebApp.SettingsController.featureAvailable('419')) {
        	activityArray.push({label: M.I18N.l('activity'), value: '0', isSelected:!itemSelected});
        } else {
        	activityArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:!itemSelected});
        }

        // set selection arrays to start content binding process
        this.set('activities', activityArray);

    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
    		var activitySelection = M.ViewManager.getView('bookingPageWithIconsScholpp', 'activity').getSelection(YES);
    		if (!DigiWebApp.BookingController.currentBooking) activitySelection = null;
    		if (typeof(activitySelection) !== "undefined" && activitySelection != null) {
	    		var activitySelected = _.find(DigiWebApp.Activity.find(), function(a) { return (parseInt(a.get("id")) === activitySelection.value);});
	    		//DigiWebApp.Activity.find({query:{identifier: 'id', operator: '=', value: activitySelection.value}})[0];
	    		if (typeof(activitySelected) === "undefined") {
	    			uebernachtungAuswahl = "6";
	    			DigiWebApp.ScholppBookingController.selectArbeitsende();
	    		} else {
		    		var activityName = activitySelected.get("name");
		    		if (activityName.indexOf("Reisezeit") >= 0 || activityName.indexOf("Fahrzeit") >= 0) {
		    			DigiWebApp.ScholppBookingController.selectFahrzeit();
		    		} else if (activityName.indexOf("Arbeitszeit") >= 0) {
		    			uebernachtungAuswahl = "6";
		    			DigiWebApp.ScholppBookingController.selectArbeitszeit();
		    		} else if (activityName.indexOf("Unterbrechung") >= 0) {
		    			uebernachtungAuswahl = "6";
		    			DigiWebApp.ScholppBookingController.selectUnterbrechung();
		    		} else if (activityName.indexOf("Pause") >= 0) {
		    			uebernachtungAuswahl = "6";
		    			DigiWebApp.ScholppBookingController.selectPause();
		    		} else {
		    			uebernachtungAuswahl = "6";
		    			DigiWebApp.ScholppBookingController.selectArbeitsende();
		    		}
	    		}
    		} else {
    			uebernachtungAuswahl = "6";
    			DigiWebApp.ScholppBookingController.selectArbeitsende();
    		}
    	}

        if (DigiWebApp.SettingsController.featureAvailable('419')) {
	        /**
	         * Scholpp-Spesen: Übrnachtungskennzeichen 
	         */
	        itemSelected = NO;
	        var uebernachtungskennzeichenScholppArray = _.map(this.uebernachtungskennzeichenScholpp, function(ueK) {
	        	if ( typeof(ueK) === "undefined" ) {
	        		console.log("UNDEFINED uebernachtungskennzeichenScholpp");
	        	} else {        	
	        		var obj = { label: ueK.label, value: ueK.value };
	        		if (obj.value === uebernachtungAuswahl) {
	        			obj.isSelected = YES;
	        			itemSelected = YES;
	        		}
	                return obj;
	        	}
	        });
	        uebernachtungskennzeichenScholppArray = _.compact(uebernachtungskennzeichenScholppArray);
	        this.set('uebernachtungskennzeichenScholpp', uebernachtungskennzeichenScholppArray);
			this.saveSelection();
		}
        
    	//if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") { DigiWebApp.ScholppBookingController.resetButtons(); }
    }

    , setPositions: function() {
    	//alert("in setPositions");
    	var orderId;
    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
        	//alert("bookingPageWithIconsScholpp");
    		orderId = M.ViewManager.getView('bookingPageWithIconsScholpp', 'order').getSelection(YES).value;
    		M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').resetSelection();
    		M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').setSelection('6');
    		//alert(M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').getSelection(YES).value);
    	} else {
    		orderId = M.ViewManager.getView('bookingPage', 'order').getSelection(YES).value;
    	}
        if (!orderId) {
            return;
        }
        
		if (DigiWebApp.SettingsController.featureAvailable('406') && DigiWebApp.SettingsController.getSetting("auftragsDetailsKoppeln")) {
			if (typeof(M.ViewManager.getView('orderInfoPage', 'order').getSelection()) === "undefined") {
				DigiWebApp.OrderInfoController.init();
			}
			M.ViewManager.getView('orderInfoPage', 'order').setSelection(orderId);
			DigiWebApp.OrderInfoController.setPositions();
			DigiWebApp.OrderInfoController.setItem();
		}

//        M.ViewManager.getView('bookingPage', 'position').removeSelection(); /* to avoid bug of not setting selected... */
        var positions = DigiWebApp.Position.findSorted();

        var i = 0;
        positions = _.map(positions, function(pos) {
        	if (pos) {
	            if(parseInt(pos.get('orderId')) === parseInt(orderId)) {
	                var obj = { label: pos.get('name'), value: pos.get('id') };
	                if(i === 0) {
	                    obj.isSelected = YES;
	                }
	                i += 1;
	                return obj;
	            }
	            return null;
        	}
        });
        positions = _.compact(positions);/* remove falsy values from positions with _.compact() */

        if (positions.length < 1) {
            positions.push({label: M.I18N.l('noData'), value: '0'});
        }

    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
    		M.ViewManager.getView('bookingPageWithIconsScholpp', 'position').resetSelection();
    	} else {
    		M.ViewManager.getView('bookingPage', 'position').resetSelection();
    	}
        this.set('positions', positions);
        this.setActivities(YES);

        this.saveSelection();
    }

    /* only set those activities that are related to the chosen position */
    , setActivities: function(checkForWorkPlan) {
        var posId = null;

        var activities = [];
        var i = 0;

        var posObj;
		if (checkForWorkPlan) {
        	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
                posObj = M.ViewManager.getView('bookingPageWithIconsScholpp', 'position').getSelection(YES);
        	} else {
                posObj = M.ViewManager.getView('bookingPage', 'position').getSelection(YES);
        	}
            if (posObj) {
                posId = posObj.value;
            }
        }
		if (posId) {
			if (DigiWebApp.SettingsController.featureAvailable('406') && DigiWebApp.SettingsController.getSetting("auftragsDetailsKoppeln")) {
				if (typeof(M.ViewManager.getView('orderInfoPage', 'position').getSelection()) === "undefined") {
					DigiWebApp.OrderInfoController.init();
				}
				M.ViewManager.getView('orderInfoPage', 'position').setSelection(posId);
				DigiWebApp.OrderInfoController.setItem();
			}
	
	        //var workPlans = DigiWebApp.WorkPlan.find({query: 'id=' + posId}); // pre TMP-1.0
			//console.log("posId " + posId);
//	        var workPlans = DigiWebApp.WorkPlan.find({ query: { 
//	              identifier: 'id' 
//	            , operator: '=' 
//	            , value: posId 
//	        }});
	        var workPlans = []; 
	        _.each(DigiWebApp.WorkPlan.find(),function(wp){
	        	if (parseInt(wp.get("id")) === parseInt(posId)) workPlans.push(wp);
	        });
	        i = 0;
	
	        /* if a workplan exists, only use those activities that are in the workplan */
			//console.log("posId " + posId + ", workPlans.length " + workPlans.length);
	        if (workPlans.length === 1) {
	            activities = DigiWebApp.SelectionController.getActivitiesFromWorkplan(workPlans[0]);
	        } else {
	            activities = DigiWebApp.SelectionController.getActivities();
	        }
        } else {
            activities = DigiWebApp.SelectionController.getActivities();
        }

        var currentBookingActivityId = -1;
        if ( typeof(DigiWebApp.BookingController.currentBooking) !== "undefined" && DigiWebApp.BookingController.currentBooking !== null ) { 
        	currentBookingActivityId = DigiWebApp.BookingController.currentBooking.get('activityId');
        }
		var currentBookingActivitySelectable = false;
		_.each(activities, function(act) {
        	if ( typeof(act) === "undefined" ) {
        		console.log("UNDEFINED ACTIVITY");
        		return null;
        	} else {
				if ( parseInt(act.get('id')) === parseInt(currentBookingActivityId) ) { currentBookingActivitySelectable = true; }
			}
		});
		
        activities = _.map(activities, function(act) {
        	if ( typeof(act) === "undefined" ) {
        		console.log("UNDEFINED ACTIVITY");
        		return null;
        	} else {
        		var obj = null;
        		if (currentBookingActivitySelectable) {
        			obj = { label: act.get('name'), value: act.get('id'), isSelected: act.get('id') == currentBookingActivityId ? YES : NO };
        		} else {
        			obj = { label: act.get('name'), value: act.get('id'), isSelected: i === 0 ? YES : NO };
        		}
        		//console.log("ACTIVITY " + i + " = " + act.get('name') + " in setActivities");
                i += 1;
                return obj;
        	}
        });

        activities = _.compact(activities);

        // new to show this when closing day is pressed (corresponds to a reset)
        if (activities.length > 0) {
            if (DigiWebApp.SettingsController.featureAvailable('419')) {
            	activities.push({label: M.I18N.l('activity'), value: '0', isSelected:NO});
            } else {
            	activities.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:NO});
            }
        } else {
            activities.push({label: M.I18N.l('noData'), value: '0'});
        }


    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
            M.ViewManager.getView('bookingPageWithIconsScholpp', 'activity').resetSelection();
            this.set('activities', activities);
            DigiWebApp.ScholppBookingController.resetButtons();
    	} else {
            M.ViewManager.getView('bookingPage', 'activity').resetSelection();
            this.set('activities', activities);
    	}

        this.saveSelection();
    }

    , initSelection: function() {
       var orders = DigiWebApp.HandOrder.findSorted().concat(DigiWebApp.Order.findSorted()); // we need to check handOrders also
       var positions = DigiWebApp.Position.findSorted();
       var activities = DigiWebApp.SelectionController.getActivities();

       /**
        * ORDERS
        */

       // create order selection
       var orderArray = [];
       if (orders) {
           orderArray = _.map(orders, function(order) {
        	   if (order) return { label: order.get('name'), value: order.get('id') };
           });
       }
       // push "Bitte wählen Option"
       if (DigiWebApp.SettingsController.featureAvailable('416')) {
    	   orderArray.push({label: M.I18N.l('order'), value: '0', isSelected:YES});
       } else {
    	   orderArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:YES});
       }
       orderArray = _.compact(orderArray);

       /**
        * POSITIONS
        */

       // create position selection
       var positionArray = [];
       if (positions) {
           positionArray = _.map(positions, function(pos) {
        	   if (pos) return { label: pos.get('name'), value: pos.get('id') };
           });
       }
       // push "Bitte wählen Option"
       if (DigiWebApp.SettingsController.featureAvailable('416')) {
    	   positionArray.push({label: M.I18N.l('position'), value: '0', isSelected:YES});
       } else {
    	   positionArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:YES});
       }
       positionArray = _.compact(positionArray);

       /**
        * ACTIVITIES
        */
       var activityArray = [];
       if (activities) {
            activityArray = _.map(activities, function(act) {
            	if ( typeof(act) === "undefined" ) {
            		console.log("UNDEFINED ACTIVITY");
            		return null;
            	} else {
            		return { label: act.get('name'), value: act.get('id') };
            	}
           });
       }
       // push "Bitte wählen Option"
       if (DigiWebApp.SettingsController.featureAvailable('419')) {
    	   activityArray.push({label: M.I18N.l('activity'), value: '0', isSelected:YES});
       } else {
    	   activityArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected:YES});
       }
       activityArray = _.compact(activityArray);

        this.resetSelection();
        // set selection arrays to start content binding process
        this.set('orders', orderArray);
        this.set('positions', positionArray);
        this.set('activities', activityArray);
        try {
        	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
            	M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').setSelection('6');
            	M.ViewManager.getView('bookingPageWithIconsScholpp', 'order').setSelection('0');
            	M.ViewManager.getView('bookingPageWithIconsScholpp', 'position').setSelection('0');
            	M.ViewManager.getView('bookingPageWithIconsScholpp', 'activity').setSelection('0');
            	DigiWebApp.ScholppBookingController.resetButtons();
        	} else {
            	M.ViewManager.getView('bookingPage', 'order').setSelection('0');
            	M.ViewManager.getView('bookingPage', 'position').setSelection('0');
            	M.ViewManager.getView('bookingPage', 'activity').setSelection('0');
        	}
    	} catch(e3) { 
    		//console.error(e3);
    	}
    }

    , resetSelection: function() {
    	try {
        	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
        		M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').resetSelection();
        		M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').setSelection('6');
        		M.ViewManager.getView('bookingPageWithIconsScholpp', 'order').resetSelection();
        		M.ViewManager.getView('bookingPageWithIconsScholpp', 'position').resetSelection();
        		M.ViewManager.getView('bookingPageWithIconsScholpp', 'activity').resetSelection();
        	} else {
        		M.ViewManager.getView('bookingPage', 'order').resetSelection();
        		M.ViewManager.getView('bookingPage', 'position').resetSelection();
        		M.ViewManager.getView('bookingPage', 'activity').resetSelection();
        	}
    	} catch(e4) { 
    		//console.error(e4);
    	}
    }

    , isPositionSelected: function() {
        // implemented adjustment to M.SeletionListView to return null if no item is available
    	var posObj;
    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
            posObj = M.ViewManager.getView('bookingPageWithIconsScholpp', 'position').getSelection(YES);
    	} else {
            posObj = M.ViewManager.getView('bookingPage', 'position').getSelection(YES);
    	}
        if (posObj && posObj.value != "0") { // 'Bitte wählen' is not allowed to be chosen
            return YES;
        } else {
            return NO;
        }
    }

    , isActivitySelected: function() {
    	var actObj;
    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
            actObj = M.ViewManager.getView('bookingPageWithIconsScholpp', 'activity').getSelection(YES);
    	} else {
            actObj = M.ViewManager.getView('bookingPage', 'activity').getSelection(YES);
    	}
        if (actObj && actObj.value != "0") { // 'Bitte wählen' is not allowed to be chosen
            return YES;
        } else {
            return NO;
        }
    }

    , saveSelection: function() {
    	var orderValue = null;
    	var positionValue = null;
    	var activityValue = null;
    	var uebernachtungskennzeichenScholppValue = null;
    	var spesenkennzeichenScholppValue = null;
    	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
            orderValue = M.ViewManager.getView('bookingPageWithIconsScholpp', 'order').getSelection();
            positionValue = M.ViewManager.getView('bookingPageWithIconsScholpp', 'position').getSelection();
            activityValue = M.ViewManager.getView('bookingPageWithIconsScholpp', 'activity').getSelection();
            uebernachtungskennzeichenScholppValue = M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').getSelection();
            spesenkennzeichenScholppValue = M.ViewManager.getView('bookingPageWithIconsScholpp', 'spesenkennzeichen').getSelection();
    	} else {
            orderValue = M.ViewManager.getView('bookingPage', 'order').getSelection();
            positionValue = M.ViewManager.getView('bookingPage', 'position').getSelection();
            activityValue = M.ViewManager.getView('bookingPage', 'activity').getSelection();
    	}

        this.selections.order = orderValue;
        this.selections.position = positionValue;
        this.selections.activity = activityValue;
        this.selections.uebernachtungskennzeichenScholpp = uebernachtungskennzeichenScholppValue;
        this.selections.spesenkennzeichenScholpp = spesenkennzeichenScholppValue;

        if (!DigiWebApp.SelectionController.showHandOrderFirst) this.useSelections = YES;
    }
    
    , getActivities: function(queryobj) {
    	var activities;
    	if (queryobj) {
    		activities = DigiWebApp.Activity.find(queryobj);
    	} else {
    		activities = DigiWebApp.Activity.findSorted();
    	}
    	activities = _.map(activities, function(acti) {
    		if (acti) { 
		    	if(parseInt(acti.get("positionId")) === 1) {
		            // normale Tätigkeit
		            return acti;
		         } else {
		            // Tätigkeit nur bei Arbeitsplan
		            return null;
		         }
    		}
    	});
    	activities = _.compact(activities);
    	return activities;
    }

    , getActivitiesFromWorkplan: function(workplan) {
        var actIds = workplan.get('activityIds').split(',');
        var activities = [];
        if (actIds && actIds.length > 0) {
        	var alleTaetigkeiten = DigiWebApp.Activity.find(); 
            for (var i = 0; i < actIds.length; i++) {
//                activities.push(_.first(DigiWebApp.Activity.find({ query: {
//                    identifier: 'id', 
//                    operator: '=', 
//                    value: actIds[i] 
//                }})));
            	var taet = _.find(alleTaetigkeiten, function(t){ return parseInt(t.get("id")) === parseInt(actIds[i])});
            	if (taet) activities.push(taet);
            }

        }
        if (parseInt(workplan.get("workplanType")) === 1) {
        	// only those activities which are bound to employee
            activities = _.map(activities, function(act) {
            	if ( typeof(act) === "undefined" ) {
            		console.log("UNDEFINED ACTIVITY");
            		return null;
            	} else {
        			var zugeordnet = NO;
            		var allActivities = DigiWebApp.Activity.findSorted();
            		_.each(allActivities, function(acti) {
            			// herausfinden, ob diese Tätigkeit dem Mitarbeiter zugeordnet ist.
            			if (act.get("id") === acti.get("id") && parseInt(acti.get("positionId")) === 1) {
            				zugeordnet = YES;
            			}
            		});
        			if (zugeordnet) {
        				return act;
        			} else {
        				return null;	
        			}
            	}
            });
        }
        activities = _.compact(activities);
        return activities;
    }

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: ServiceAppController
// ==========================================================================
// manuell var-checked
DigiWebApp.ServiceAppController = M.Controller.extend({

	ServiceAppCommunication: function(data, callback, timeout) {
	
		if (typeof(timeout) !== "undefined") {
			this.timeout = timeout;
		} else {
			this.timeout = 5000;
		}
		//this._requestInterval = this.timeout / 10; // immer zehnmal innerhalb des gewünschten Timeouts nach Antwort der ServiceApp suchen 
		this._requestInterval = 300; // immer alle 300ms nach Antwort der ServiceApp suchen 
		this.sendData = data;
		this.callback = callback;
		this._requestFileName = "DigiWebAppServiceApp." + new Date().getTime() + ".response.json";
		this.returnData = null;
		this.internalCallback = function(data2) {
			var that = this;
			//DigiWebApp.ApplicationController.DigiLoaderView.hide();
			that.callback(data2);
		};
		
		this.available = null;
		
		this.ermittleGeokoordinate = DigiWebApp.SettingsController.getSetting("ServiceApp_ermittleGeokoordinate");
		this.uebertragen = DigiWebApp.SettingsController.getSetting("ServiceApp_datenUebertragen");
		this.engeKopplung = DigiWebApp.SettingsController.getSetting("ServiceApp_engeKopplung");
		this.debug = DigiWebApp.SettingsController.getSetting("debug");
		this.password = DigiWebApp.SettingsController.getSetting("password");
		this.workerId = DigiWebApp.SettingsController.getSetting("workerId");
		if (this.workerId === "") {
			this.workerId = 0;
		}
		this.company = DigiWebApp.SettingsController.getSetting("company");
		if (this.company === "") {
			this.company = 0;
		}
		this.WebAppVersion = DigiWebApp.app.config.version;
		this.WebAppGPSTimeout = DigiWebApp.SettingsController.getSetting("GPSTimeOut");
	
		this.sendData.parameter = {};
	
		this.send = function() {
			var that = this;
			that.sendData.parameter = {
			        "ermittleGeokoordinate": this.ermittleGeokoordinate
			      , "uebertragen": this.uebertragen
			      , "engeKopplung": this.engeKopplung
			      , "debug": this.debug
			      , "fileName": this._requestFileName
			      , "kennwort": this.password
			      , "GeraeteId": this.workerId
			      , "firmenId": this.company
			      , "WebAppVersion": this.WebAppVersion
			      , "WebAppGPSTimeout": this.WebAppGPSTimeout
				};
		    $.ajax({
		        dataType: "json"
		      , type: "POST"
		             , crossDomain: true
		             , processData: false
		             , async: true
		             , contentType: 'application/json'
		      , url: 'http://127.0.0.1:' + DigiWebApp.SettingsController.getSetting("ServiceApp_PORT") + '/'
		      , data: JSON.stringify(data)
		      , success: function(jqXHR, textStatus, errorThrown) { that.returnHandler(jqXHR, textStatus, errorThrown); }
		      , error: function(jqXHR, textStatus, errorThrown) { that.returnHandler(jqXHR, textStatus, errorThrown); }
		      , timeout: 1000
			});
		};
		
		this.returnHandler = function(jqXHR, textStatus, errorThrown) {
			var that = this;
			this._readFile_Interval_Counter = 0;
			this._readFile_IntervalVar = window.setInterval(function() { that.readFileHandler(); }, this._requestInterval);
		};
		
		this.readFileHandler = function() {
			 var that = this;
	    	 this._readFile_Interval_Counter++;
	    	 //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("this._readFile_Interval_Counter: " + this._readFile_Interval_Counter);
	    	 //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("this.timeout: " + this.timeout);
	    	 //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("this._requestInterval: " + this._requestInterval);
	         if (this._readFile_Interval_Counter > (this.timeout / this._requestInterval)) { // if ServiceApp-File has not been found --> ServiceApp seems to be unavailable 
	        	 window.clearInterval(this._readFile_IntervalVar);
	        	 this._readFile_Interval_Counter = null;
	        	 this.available = false;
	        	 //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("@@@ ServiceApp is UNavailable !!!");
	        	 var e = new Error('@@@ ServiceApp is UNavailable !!!');
//	        	 var stack = e.stack.replace(/^[^\(]+?[\n$]/gm, '')
//	        	      .replace(/^\s+at\s+/gm, '')
//	        	      .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@')
//	        	      .split('\n');
	        	 console.log(e.stack);
	        	  
	        	 DigiWebApp.ApplicationController.DigiLoaderView.hide();
	        	 this.callback(null);
	         }
	         this.readFromFile(this._requestFileName, function(data3) {
	             window.clearInterval(that._readFile_IntervalVar);
	             that.returnData = data3;
	             that.available = true;
	        	 //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("@@@ ServiceApp is available");
	             if (false) { // nicht direkt löschen (kann zu Java-Exceptions führen)
		             that.deleteFile(that._requestFileName, function(){
		                 //console.log("erfolgreich gelöscht");
		            	 that.internalCallback(that.returnData);
		             }, function(){
		                 //console.log("nicht gelöscht");
		            	 that.internalCallback(that.returnData);
		             });
	             } else {
	            	 that.internalCallback(that.returnData);
	             }
	         }, function(err) {
	        	 that.available = false;
	         });          
		};
	
		this.readFromFile = function(fileName, successCallback, myErrorCallback) {
		               
		      // check for errorCallback is a function (optional)
			  var errorCallback;
		      if (!myErrorCallback || (typeof myErrorCallback !== "function")) {
		         errorCallback = function(evt) {
		               console.error("readFromFileError", evt);
		         };
		      } else {
		    	  errorCallback = myErrorCallback;
		      }
		      
		        // check for successCallback is a function
		        if (typeof successCallback !== "function") {
		               console.error("readFromFileError: successCallback is not a function");
		          return false;
		      }
		        
		        // check if fileName is set
		        if (!fileName || (fileName) && (fileName.length === 0)) {
		               console.error("readFromFileError: no fileName given");
		               errorCallback();
		          return false;
		      }
		
		        // check if LocalFileSystem is defined
		        if (typeof window.requestFileSystem === "undefined") {
		               console.error("readFromFileError: no LocalFileSystem available");
		               successCallback("");
		          return true;
		      }
		        
		        try {
		               var myQuota = DigiWebApp.ApplicationController.CONSTApplicationQuota;
		            // open filesystem
		               if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
		                      navigator.webkitPersistentStorage.requestQuota(myQuota, function(grantedBytes) {
		                          window.requestFileSystem(PERSISTENT, grantedBytes, function(fileSystem) {
		                      
		                             // get dataDirectory from filesystem (create if not exists)
		                             fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
		                                                 
		                                    // get fileEntry from filesystem
		                                    dataDirectory.getFile(fileName, null, function(fileEntry) {
		                                          
		                                          // get file from fileEntry
		                                          fileEntry.file(function(file) {
		                                                 
			                                          try {
				                                          // read from file
				                                          var reader = new FileReader();
				                                          reader.onloadend = function(evt) {
				                                        	  // return content via successCallback
				                                              successCallback(evt.target.result);
				                                          };
				                                          reader.readAsText(file);
			                                          } catch(e3) {}
		                                            
		                                          }, errorCallback); // fileEntry.file
		                                    }, errorCallback);     // dataDirectory.getFile
		                                 }, errorCallback);         // fileSystem.root.getDirectory
		                          }, errorCallback);             // window.requestFileSystem
		                      }, function(e) {
		                               console.error('Error while requesting Quota', e);
		                           DigiWebApp.ApplicationController.nativeAlertDialogView({
		                               title: M.I18N.l('error')
		                             , message: M.I18N.l('errorWhileRequestingQuota') + ": " + err
		                           });                                                          
		                      });
		                      
		               } else {
		
		                   window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
		                             
		                      // get dataDirectory from filesystem (create if not exists)
		                      fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
		                                          
		                             // get fileEntry from filesystem
		                             dataDirectory.getFile(fileName, null, function(fileEntry) {
		                                   
		                                   // get file from fileEntry
		                                   fileEntry.file(function(file) {
		                                	   
		                                          try {
			                                          // read from file
			                                          var reader = new FileReader();
			                                          reader.onloadend = function(evt) {
			                                        	  // return content via successCallback
			                                              successCallback(evt.target.result);
			                                          };
			                                          reader.readAsText(file);
		                                          } catch(e4) {}
		                                     
		                                   }, errorCallback); // fileEntry.file
		                             }, errorCallback);     // dataDirectory.getFile
		                          }, errorCallback);         // fileSystem.root.getDirectory
		                   }, errorCallback);             // window.requestFileSystem
		               }
		        } catch(e5) {
		               errorCallback(e5);
		        }
		};
	
		this.deleteFile = function(fileName, successCallback, myErrorCallback) {
		      
		    // check if fileName is set
		    if (!fileName || (fileName) && (fileName.length === 0)) {
		    	  console.error("deleteFileError: no fileName given");
		    	  return false;
		    }
			
		    // check for successCallback is a function
		    if (typeof successCallback !== "function") {
		             console.error("deleteFileError: successCallback is not a function");
		        return false;
		    }
		      
		      // check for errorCallback is a function (optional)
			  var errorCallback;
		      if (!myErrorCallback || (typeof myErrorCallback !== "function")) {
		         errorCallback = function(evt) {
		               console.error("deleteFileError", evt);
		         };
		      } else {
		    	  errorCallback = myErrorCallback;
		      }
		    
		    // check if LocalFileSystem is defined
		    if (typeof window.requestFileSystem === "undefined") {
		             console.error("deleteFileError: no LocalFileSystem available");
		             successCallback("");
		        return true;
		    }
		
		      try {
		             var myQuota = DigiWebApp.ApplicationController.CONSTApplicationQuota;
		          // open filesystem
		             if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
		                    navigator.webkitPersistentStorage.requestQuota(myQuota, function(grantedBytes) {
		                           window.requestFileSystem(PERSISTENT, grantedBytes, function(fileSystem) {
		                                 
		                           // get dataDirectory from filesystem (create if not exists)
		                           fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
		                                               
		                                  // get fileEntry from filesystem
		                                  dataDirectory.getFile(fileName, null, function(fileEntry) {
		                                        
		                                        // remove fileEntry
		                                	  	try {
		                                	  		fileEntry.remove(successCallback, errorCallback);
		                                	  	} catch(e6) {}
		                                        
		                                  }, errorCallback);     // dataDirectory.getFile
		                               }, errorCallback);         // fileSystem.root.getDirectory
		                        }, errorCallback);             // window.requestFileSystem
		                    }, function(e) {
		                             console.error('Error while requesting Quota', e);
		                         DigiWebApp.ApplicationController.nativeAlertDialogView({
		                             title: M.I18N.l('error')
		                           , message: M.I18N.l('errorWhileRequestingQuota') + ": " + err
		                         });                                                          
		                    });
		             } else {
		                    window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
		             
		                    // get dataDirectory from filesystem (create if not exists)
		                    fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
		                                        
		                           // get fileEntry from filesystem
		                           dataDirectory.getFile(fileName, null, function(fileEntry) {
		                                 
		                                 // remove fileEntry
	                               	  	try {
	                            	  		fileEntry.remove(successCallback, errorCallback);
	                            	  	} catch(e7) {}
		                                 
		                           }, errorCallback);     // dataDirectory.getFile
		                        }, errorCallback);         // fileSystem.root.getDirectory
		                 }, errorCallback);             // window.requestFileSystem
		             }
		      } catch(e8) {
		             errorCallback(e8);
		      }
		};
		
		this.listDataDirectory = function(successCallback, myErrorCallback) {
			
			// check for errorCallback is a function (optional)
			  var errorCallback;
		      if (!myErrorCallback || (typeof myErrorCallback !== "function")) {
		         errorCallback = function(evt) {
		               console.error("deleteFileError", evt);
		         };
		      } else {
		    	  errorCallback = myErrorCallback;
		      }
			  
			// check for successCallback is a function
			if (typeof successCallback !== "function") {
				console.error("listDataDirectoryError: successCallback is not a function");
				return false;
			}
	
	        // check if LocalFileSystem is defined
	        if (typeof window.requestFileSystem === "undefined") {
	               console.error("listDataDirectoryError: no LocalFileSystem available");
	               successCallback("");
	          return true;
	      }
	        
	        try {
	            var myQuota = DigiWebApp.ApplicationController.CONSTApplicationQuota;
	            // open filesystem
	               if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
	                      navigator.webkitPersistentStorage.requestQuota(myQuota, function(grantedBytes) {
	                          window.requestFileSystem(PERSISTENT, grantedBytes, function(fileSystem) {
	                      
	                             // get dataDirectory from filesystem (create if not exists)
	                             fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
	                            	 
//	                            	 var toArray = function(list) {
//	                            		 return Array.prototype.slice.call(list || [], 0);
//	                            	 };

	                            	 var myDirReader = dataDirectory.createReader();
	                            	 //var entries = [];
	                            	 var readEntries = function() {
	                            		 myDirReader.readEntries (function(results) {
//	                            			 if (!results.length) {
	                            				 // alle Verzeichniseinträge geladen
	                            				 var result = [];
//	                            				 _.each(entries.sort(), function(fileEntry) {
	                                		     _.each(results, function(fileEntry) {
	                                		    	 //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log(fileEntry.fullPath);
	                                		    	 var myArr = fileEntry.fullPath.split("/");
	                            					 result.push(myArr[myArr.length - 1]);
	                            				 });
	                                		     //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("listDirectory result", result);
	                            				 successCallback(result);
//	                            			 } else {
//	                            				 //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("results", results);
//	                            				 //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("entries", entries);
//	                            				 entries = entries.concat(toArray(results));
//	                            				 readEntries();
//	                            			 }
	                            		 }, function(err){console.error("error in readEntries:", err);});
	                            	  };

	                            	  readEntries(); // Start reading dirs.
	                                                 
	                             }, errorCallback);         // fileSystem.root.getDirectory
	                          }, errorCallback);             // window.requestFileSystem
	                      }, function(e) {
	                           console.error('Error while requesting Quota', e);
	                           DigiWebApp.ApplicationController.nativeAlertDialogView({
	                               title: M.I18N.l('error')
	                             , message: M.I18N.l('errorWhileRequestingQuota') + ": " + err
	                           });                                                          
	                      });
	                      
	               } else {
	
	                   window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
	                             
	                      // get dataDirectory from filesystem (create if not exists)
	                      fileSystem.root.getDirectory("DIGIWebAppData", {create: true, exclusive: false}, function(dataDirectory) {
	                    	  
//                         	 var toArray = function(list) {
//                         		//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("in toArray");
//                        		 return Array.prototype.slice.call(list || [], 0);
//                        	 }

                         	 //var i = 0;
                        	 var myDirReader = dataDirectory.createReader();
                        	 //var entries = [];
                        	 var readEntries = function() {
                        		 myDirReader.readEntries (function(results) {
//                        			 if (!results.length) {
                        				 // alle Verzeichniseinträge geladen
                        				 var result = [];
//                        				 _.each(entries.sort(), function(fileEntry) {
                            		     _.each(results, function(fileEntry) {
                            		    	 //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log(fileEntry.fullPath);
                            		    	 var myArr = fileEntry.fullPath.split("/");
                        					 result.push(myArr[myArr.length - 1]);
                        				 });
                            		     ////if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("listDirectory result", result);
                        				 successCallback(result);
//                        			 } else {
//                        				 //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("results", results);
//                        				 //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("entries", entries);
//                        				 entries = entries.concat(toArray(results));
//                        				 i++;
//                        				 if (i < 10) {
//                        					 readEntries();
//                        				 } else {
//                        					 //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log(entries);
//                            			 }
//                        			 }
                        		 }, function(err){console.error("error in readEntries:", err);});
                        	  };

                        	  readEntries(); // Start reading dirs.

	                      }, errorCallback);         // fileSystem.root.getDirectory
	                   }, errorCallback);             // window.requestFileSystem
	               }
	        } catch(e9) {
	               errorCallback(e9);
	        }
		};
	}
//	, directoryServiceAppObj: null
	, listDirectory: function(callback) {
	    var myServiceApp = new DigiWebApp.ServiceAppController.ServiceAppCommunication({}, callback);
//	    this.directoryServiceAppObj = myServiceApp;
	    myServiceApp.listDataDirectory(callback);
	}
	
	, deleteFile: function(fileName, callback) {
	    var myServiceApp = new DigiWebApp.ServiceAppController.ServiceAppCommunication({}, callback);
	    myServiceApp.deleteFile(fileName, callback, callback);
	}
	
	, knockknock: function(successCallback, errorCallback, timeout) {
		////if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("in knockknock");
	    var knockknockData = { "GET": { "buchungen": [] , "queryParameter": null } };
	    var callback = function(data) {
			   if (this.available) {
				   successCallback(data);
			   } else {
				   console.log("this.available = " + this.available);
				   errorCallback();
			   }
	    };
	    var myServiceApp = new DigiWebApp.ServiceAppController.ServiceAppCommunication(knockknockData, callback, timeout);
	    myServiceApp.send();
	}
	
	, getBookings: function(ids, successCallback, errorCallback, timeout, engeKopplungOverride) {
		//DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('ServiceAppKommunikation'));
		//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("in getBookings");
	    var payloadData = { "GET": { "buchungen": [] , "queryParameter": {"ids": ids} } };
	    var callback = function(data) {
			   if (this.available) {
				   //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("getBookings Success");
				   successCallback(data);
			   } else {
				   //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("this.available = " + this.available);
				   //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("getBookings Error");
				   errorCallback();
			   }
	    };
	    var myServiceApp = new DigiWebApp.ServiceAppController.ServiceAppCommunication(payloadData, callback, timeout);
	    myServiceApp.engeKopplung = (typeof(engeKopplungOverride) !== "undefined" && engeKopplungOverride === true);
	    myServiceApp.send();
	}

	, deleteFilesInServiceApp: function(fileNames, successCallback, errorCallback, timeout, engeKopplungOverride) {
		//DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('ServiceAppKommunikation'));
		//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("in deleteFilesInServiceApp");
	    var payloadData = { "DELETEFILES": { "files": [] , "queryParameter": {"fileNames": fileNames} } };
	    var callback = function(data) {
			   if (this.available) {
				   ////if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("deleteFilesInServiceApp Success");
				   successCallback(data);
			   } else {
				   //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("this.available = " + this.available);
				   ////if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("deleteFilesInServiceApp Error");
				   errorCallback();
			   }
	    };
	    var myServiceApp = new DigiWebApp.ServiceAppController.ServiceAppCommunication(payloadData, callback, timeout);
	    myServiceApp.engeKopplung = (typeof(engeKopplungOverride) !== "undefined" && engeKopplungOverride === true);
	    myServiceApp.send();
	}
	
	, pollBookings: function(ids, successCallback, errorCallback, timeout) {
		DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('ServiceAppKommunikation'));
		//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("in pollBookings");
		var internalErrorCallback = function() {				   
			//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("this.available = " + this.available);
			errorCallback();
		};

		var internalSuccessCallback = function(data) {
			try {
				//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("pollBookings Success");
				var datensaetze = [];
				_.each(JSON.parse(data).GET.buchungen, function(buchung) {
					if (buchung.status === "OK") {
						datensaetze.push(buchung.datensatz);
					}
				});
				//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("pollBookings Success mit " + datensaetze.length + " Datensätzen");
				successCallback(datensaetze);
			} catch(e10) {
				console.error(e10);
				errorCallback(e10.message);
			}
		};
		this.getBookings(ids, internalSuccessCallback, internalErrorCallback, timeout, true);
	}
	
	, putBookings: function(bookings, successCallback, errorCallback, timeout) {
		DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('ServiceAppKommunikation'));
		//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("in putBookings");
		var payloadData = { "PUT": { "buchungen": [] } };
	    _.each(bookings, function(booking) {
	    	payloadData.PUT.buchungen.push({"datensatz": booking, "status": "WAIT"});
	    });
	    var callback = function(data) {
			   if (this.available) {
				   successCallback(data);
			   } else {
				   //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("this.available = " + this.available);
				   errorCallback();
			   }
	    };
	    var myServiceApp = new DigiWebApp.ServiceAppController.ServiceAppCommunication(payloadData, callback, timeout);
	    myServiceApp.send();
	}
	
	, postBookings: function(bookings, successCallback, errorCallback, timeout) {
		DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('ServiceAppKommunikation'));
		//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("in postBookings");
		var payloadData = { "POST": { "buchungen": [] } };
	    _.each(bookings, function(booking) {
	    	payloadData.POST.buchungen.push({ "datensatz": booking, "status": "WAIT" });
	    });
	    var callback = function(data) {
			   if (this.available) {
				   successCallback(data);
			   } else {
				   //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("this.available = " + this.available);
				   errorCallback();
			   }
	    };
	    var myServiceApp = new DigiWebApp.ServiceAppController.ServiceAppCommunication(payloadData, callback, timeout);
	    myServiceApp.send();
	}

	, deleteBookings: function(ids, successCallback, errorCallback, timeout) {
		DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('ServiceAppKommunikation'));
		//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("in deleteBookings");
	    var payloadData = { "DELETE": { "buchungen": [] , "queryParameter": {"ids": ids} } };
	    var callback = function(data) {
			   if (this.available) {
				   //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("deleteBookings Success");
				   successCallback(data);
			   } else {
				   //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("this.available = " + this.available);
				   //if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("deleteBookings Error");
				   errorCallback();
			   }
	    };
	    var myServiceApp = new DigiWebApp.ServiceAppController.ServiceAppCommunication(payloadData, callback, timeout);
	    myServiceApp.engeKopplung = (typeof(engeKopplungOverride) !== "undefined" && engeKopplungOverride === true);
	    myServiceApp.send();
	}

	, refreshWAITBookings: function(successCallback, errorCallback, fileNamesToDelete, doEngeKopplung) {
		var that = this;

		//DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('ServiceAppKommunikation'));
		//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("in refreshWAITBookings");
		var bookings = DigiWebApp.Booking.find();
		var bookingIdsRefresh = [];
		_.each(bookings, function(booking){
			if (typeof(booking.get("ServiceApp_Status")) == "undefined" || booking.get("ServiceApp_Status") === "WAIT") {
				bookingIdsRefresh.push(booking.m_id);
			}
		});
		var iDsOnWAITgefunden = [];
		if (bookingIdsRefresh.length > 0) {
			//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("bookingIdsRefresh: " + JSON.stringify(bookingIdsRefresh));
			that.getBookings(bookingIdsRefresh, function(data){
				if (fileNamesToDelete !== [] && fileNamesToDelete !== null && typeof(fileNamesToDelete) !== "undefined") {
//					that.deleteFilesInServiceApp(fileNamesToDelete, function(data2){
//					}, function(){
//					});
				}
				try {
					//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("data: ", data);
					var recievedBookings = JSON.parse(data).GET.buchungen;
					_.each(recievedBookings, function(rBooking) {
						var datensatz = rBooking.datensatz;
						var updateModelBooking = function(modelBooking, datensatzObj) {
							if (DigiWebApp.SettingsController.getSetting("ServiceApp_ermittleGeokoordinate")) {
								var datensatz = datensatzObj.record;
								//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("veraebeite datensatz ", datensatz);
								if (typeof(datensatz.latitude) !== "undefined") { modelBooking.set("latitude", datensatz.latitude); }
								if (typeof(datensatz.latitude_bis) !== "undefined") { modelBooking.set("latitude_bis", datensatz.latitude_bis); }
								if (typeof(datensatz.longitude) !== "undefined") { modelBooking.set("longitude", datensatz.longitude); }
								if (typeof(datensatz.longitude_bis) !== "undefined") { modelBooking.set("longitude_bis", datensatz.longitude_bis); }
								if (typeof(datensatz.ermittlungsverfahren_bis) !== "undefined") { modelBooking.set("ermittlungsverfahrenBis", datensatz.ermittlungsverfahren_bis); }
								if (typeof(datensatz.ermittlungsverfahren) !== "undefined") { modelBooking.set("ermittlungsverfahrenVon", datensatz.ermittlungsverfahren); }
								if (typeof(datensatz.genauigkeit_bis) !== "undefined") { modelBooking.set("genauigkeitBis", datensatz.genauigkeit_bis); }
								if (typeof(datensatz.genauigkeit) !== "undefined") { modelBooking.set("genauigkeitVon", datensatz.genauigkeit); }
								if (typeof(datensatz.gps_zeitstempel_bis) !== "undefined") { modelBooking.set("gps_zeitstempelBis", datensatz.gps_zeitstempel_bis); }
								if (typeof(datensatz.gps_zeitstempel) !== "undefined") { modelBooking.set("gps_zeitstempelVon", datensatz.gps_zeitstempel); }
								if (typeof(datensatz.status) !== "undefined") { modelBooking.set("ServiceApp_Status", datensatz.status); }
								modelBooking.save();
								//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("refreshWAITBookings: datensatz " + datensatzObj.m_id + " gespeichert");
							}
						};
						var modelBooking = _.find(DigiWebApp.Booking.find(), function(b) { return b.m_id === datensatz.m_id;});
						modelBooking.set("ServiceApp_Status", rBooking.status);
						modelBooking.save();
						switch(rBooking.status) {
							case "WAIT":
								updateModelBooking(modelBooking, datensatz);
								iDsOnWAITgefunden.push(datensatz.m_id);
								break;
							case "OK":
								updateModelBooking(modelBooking, datensatz);
								break;
							case "SENT":
								// move to SentBookings
								if (DigiWebApp.SettingsController.getSetting("ServiceApp_datenUebertragen")) {
									var mySentBooking = DigiWebApp.BookingController.sentBooking(modelBooking);
									if (mySentBooking != null) {
										mySentBooking.save();
									}
									modelBooking.del();
								}
								break;
							case "DELETE":
								modelBooking.del();
								break;
							default:
								errorCallback("refreshWAITBookings: Unbekannter Status");
						}
					});
					DigiWebApp.ApplicationController.DigiLoaderView.hide();
					if (iDsOnWAITgefunden.length > 0 && typeof(successCallback) === "function" && doEngeKopplung) {
						//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("pollBookings (enge Kopplung) mit", iDsOnWAITgefunden);
						var checkForOK = function(datensaetze) {
							//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log(datensaetze.length + " Datensätze empfangen");
							_.each(datensaetze, function(datensatzObj) {
								//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("speichere gepollten Datensatz " + datensatzObj.m_id);
								try {
									var modelBooking = _.find(DigiWebApp.Booking.find(), function(b) { return b.m_id === datensatzObj.m_id; } );
									var datensatz = datensatzObj.record;
									//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("modelBooking: ", modelBooking);
									//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("datensatz: ", datensatz);
									modelBooking.set("latitude", datensatz.latitude);
									modelBooking.set("latitude_bis", datensatz.latitude_bis);
									modelBooking.set("longitude", datensatz.longitude);
									modelBooking.set("longitude_bis", datensatz.longitude_bis);
									modelBooking.set("ermittlungsverfahrenBis", datensatz.ermittlungsverfahren_bis);
									modelBooking.set("ermittlungsverfahrenVon", datensatz.ermittlungsverfahren);
									modelBooking.set("genauigkeitBis", datensatz.genauigkeit_bis);
									modelBooking.set("genauigkeitVon", datensatz.genauigkeit);
									modelBooking.set("gps_zeitstempelBis", datensatz.gps_zeitstempel_bis);
									modelBooking.set("gps_zeitstempelVon", datensatz.gps_zeitstempel);
									modelBooking.set("ServiceApp_Status", datensatz.status);
									modelBooking.save();
									//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("datensatz " + datensatzObj.m_id + " gespeichert");
								} catch(exNotFound) {
									//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("datensatz " + datensatzObj.m_id + " nicht gefunden");
								}
							});
							successCallback();
						};
						that.pollBookings(iDsOnWAITgefunden, checkForOK, successCallback, DigiWebApp.SettingsController.getSetting('GPSTimeOut'));
					} else {
						if (typeof(successCallback) === "function") successCallback();	
					}
				} catch(e11) {
					DigiWebApp.ApplicationController.DigiLoaderView.hide();
					errorCallback("ERROR in refreshWAITBookings: " + e11.message);
				}
			}, function(){
				DigiWebApp.ApplicationController.DigiLoaderView.hide();
				if (fileNamesToDelete !== [] && fileNamesToDelete !== null && typeof(fileNamesToDelete) !== "undefined") {
//					that.deleteFilesInServiceApp(fileNamesToDelete, function(data){
//					}, function(){
//					});
				}
				errorCallback("refreshWAITBookings: ServiceApp hat nicht geantwortet!");
			});
		} else {
			// es gibt keine Buchungen zu aktialisieren
			if (fileNamesToDelete !== [] && fileNamesToDelete !== null && typeof(fileNamesToDelete) !== "undefined") {
//				that.deleteFilesInServiceApp(fileNamesToDelete, function(data){
//				}, function(){
//				});
			}
			if (typeof(successCallback) === "function") successCallback();
		}
	}
	
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: SettingsController
// ==========================================================================
// manuell var-checked
DigiWebApp.SettingsController = M.Controller.extend({

      showCredentialsAlert: NO
    , credentialsAlertShown: false
    , showIOSMessage: true

    , settings: null
    
    , mitarbeiterNameVorname: ""
    
    , globalDebugMode: NO
    
    , defaultsettings_object: {
    	  debug: false
    	, treatAllAsTablet: false
    	, treatAllAsPhone: false
        , company: ''
        , password: ''
        , connectionCode: ''
        , settingsPassword: 'digi$'
        , workerId: ''
        , platform: ''
        , userAgent: ''
        , skipEvents: ''
        , timeouthappened: ''
        , mapType: 'Google' // or OSM for OpenStreetMap
        , autoSyncAfterBookTime: false
        , autoTransferAfterBookTime: true
        , autoTransferAfterClosingDay: true
        , autoSaveGPSData: false
        , GPSDataIsMandatory: false
        , remarkIsMandatory: false
        , remarkIsOptional: false
        , useTransitionsSetting: true
        , daysToHoldBookingsOnDevice: '40'
        , bautagebuchLimit_autoStartUhrzeit: false
        , datatransfer_min_delay: 10000
        , branding: ''
        , GPSTimeOut: 60000
        , WebserviceTimeOut: 30000
        , LoaderTimeOut: 30000
        , silentLoader: false
        , currentTimezoneOffset: null
        , currentTimezone: null
        , ServiceApp_ermittleGeokoordinate: false
        , ServiceApp_datenUebertragen: false
        , ServiceApp_engeKopplung: false
        , ServiceApp_PORT: '60000'
        , ServiceApp_FallBack: true
        , debugDatabaseServer: null
        , mitarbeiterVorname: ""
        , mitarbeiterNachname: ""
        , mitarbeiterId: "0"
        , auftragsDetailsKoppeln: false
        , detailierteZeitdaten: true
        , vibrationsDauer: 100
        , terminliste_keineKuenstlichenTermine: false
        , terminliste_ignoriereAuftragszeitraum: true
        , stammdatenabgleichBeimAppStart: false
        , festePauseStornieren_nurAktuellerTag: true
    }

    , defaultsettings: null
    
    , init: function(isFirstLoad, myinteractWithServiceApp) {
    	
    	var that = DigiWebApp.SettingsController;
    	
    	var interactWithServiceApp = (myinteractWithServiceApp && DigiWebApp.SettingsController.featureAvailable('417'));

    	M.I18N.defaultLanguage = "de_de";
    	
    	DigiWebApp.TabBar.setActiveTab(DigiWebApp.TabBar.tabItem2);
    	
        if (that.showCredentialsAlert && !that.credentialsAlertShown) {
            if (
            	  (    ( M.Environment.getPlatform().substr(0,4) === "iPad"   )
            	    || ( M.Environment.getPlatform().substr(0,6) === "iPhone" )
                  )
                  && ( typeof(device) !== "undefined" ) 
            ) {
            	// we are on iOS inside a native container
//            	if ((device.version >= "5.1" && DigiWebApp.SettingsController.showIOSMessage) && (false)) {
//            		DigiWebApp.NavigationController.toNoSettingsiOSPage();
//            	} else {
            		DigiWebApp.ApplicationController.enforceChefToolOnly();
            		console.log("device.version: " + device.version);
    	        	DigiWebApp.ApplicationController.nativeAlertDialogView({
    	                  title: M.I18N.l('noCredentials')
    	                , message: M.I18N.l('noCredentialsMsg')
    	            });
//            	}
            } else {
	            // any other platform
        		DigiWebApp.ApplicationController.enforceChefToolOnly();
	        	DigiWebApp.ApplicationController.nativeAlertDialogView({
	                  title: M.I18N.l('noCredentials')
	                , message: M.I18N.l('noCredentialsMsg')
	            });
            }
            that.credentialsAlertShown = true;
        }
    	
        that.defaultsettings = DigiWebApp.Settings.createRecord(DigiWebApp.SettingsController.defaultsettings_object);

        DigiWebApp.Settings.find();        
        
        // Start::Bemerkungsfeld (403)
        if (DigiWebApp.SettingsController.featureAvailable('403')) {
        	$('#' + DigiWebApp.SettingsPage.content.remarkIsMandatory.id).show();
        	$('#' + DigiWebApp.SettingsPage.content.remarkIsOptional.id).show();
        } else {
        	$('#' + DigiWebApp.SettingsPage.content.remarkIsMandatory.id).hide();
        	$('#' + DigiWebApp.SettingsPage.content.remarkIsOptional.id).hide();
        }
        // End::Bemerkungsfeld
        
        // Start::Auftragsinfo (406)
        if (DigiWebApp.SettingsController.featureAvailable('406')) {
        	$('#' + DigiWebApp.SettingsPage.content.auftragsDetailsKoppeln.id).show();
        } else {
        	$('#' + DigiWebApp.SettingsPage.content.auftragsDetailsKoppeln.id).hide();
        }
        // End::Auftragsinfo
        
        // Start::Zeitbuchungen für X Tage vorhalten (411)
        if (DigiWebApp.SettingsController.featureAvailable('411')) {
        	$('#' + DigiWebApp.SettingsPage.content.daysToHoldBookingsOnDeviceSliderContainer.id).show();
        } else {
        	$('#' + DigiWebApp.SettingsPage.content.daysToHoldBookingsOnDeviceSliderContainer.id).hide();
        }
        // End::Zeitbuchungen für X Tage vorhalten

        // Start::Bautagebuch (412)
        if (DigiWebApp.SettingsController.featureAvailable('412')) {
        	$('#' + DigiWebApp.SettingsPage.content.bautagebuchLimit_autoStartUhrzeit.id).show();
        } else {
        	$('#' + DigiWebApp.SettingsPage.content.bautagebuchLimit_autoStartUhrzeit.id).hide();
        }
        // End::Bautagebuch

        // Start::Terminliste (423)
        if (DigiWebApp.SettingsController.featureAvailable('423')) {
        	$('#' + DigiWebApp.SettingsPage.content.terminlisteEinstellungen.id).show();
        	DigiWebApp.SettingsController.set('terminlisteEinstellungen_titel', DigiWebApp.SettingsController.terminlisteEinstellungen_titel)
        } else {
        	$('#' + DigiWebApp.SettingsPage.content.terminlisteEinstellungen.id).hide();
        }
        // End::Terminliste
        
        // Start::FestePauseStornieren (425)
        if (DigiWebApp.SettingsController.featureAvailable('425')) {
        	$('#' + DigiWebApp.SettingsPage.content.festePauseStornierenEinstellungen.id).show();
        	DigiWebApp.SettingsController.set('festePauseStornierenEinstellungen_titel', DigiWebApp.SettingsController.festePauseStornierenEinstellungen_titel)
        } else {
        	$('#' + DigiWebApp.SettingsPage.content.festePauseStornierenEinstellungen.id).hide();
        }
        // End::FestePauseStornieren

        DigiWebApp.ApplicationController.enforceChefToolOnly();
        
        $('#' + DigiWebApp.SettingsPage.content.useTransitionsSetting.id).hide();
        // Start::TransitionsAvailable
        /*var p = M.Environment.getPlatform();
        if (   (p.substr(0,10) !== "BlackBerry") 
            && (navigator.userAgent.toLowerCase().indexOf("android") === -1)
        ) {
        	$('#' + DigiWebApp.SettingsPage.content.useTransitionsSetting.id).show();
        } else {
        	console.log("hiding useTransitionsSetting");
        	$('#' + DigiWebApp.SettingsPage.content.useTransitionsSetting.id).hide();
        }*/
        // End::TransitionsAvailable
        
        var settings = null;

        /* values from local storage */
        if (DigiWebApp.Settings.records().length > 0) {
        	        	
        	//console.log("loading settings from local storage");
            var record = DigiWebApp.Settings.records()[0];
        	
            var daysToHoldBookingsOnDevice = record.get('daysToHoldBookingsOnDevice');
            if (!daysToHoldBookingsOnDevice) daysToHoldBookingsOnDevice = DigiWebApp.SettingsController.defaultsettings.get("daysToHoldBookingsOnDevice");

            var vibrationsDauer = record.get('vibrationsDauer');
            if (!vibrationsDauer) {
            	var plat = "";
            	try {
            		plat = device.platform.substr(0,3);
            	} catch(e) {}
            	if (plat === "iOS") {
            		// disable vibration on iOS by default
            		vibrationsDauer = 0;
            	} else {
            		vibrationsDauer = DigiWebApp.SettingsController.defaultsettings.get("vibrationsDauer");
            	}
            }

            var GPSDataIsMandatory = record.get('GPSDataIsMandatory');
            if (!GPSDataIsMandatory) GPSDataIsMandatory = DigiWebApp.SettingsController.defaultsettings.get("GPSDataIsMandatory");
            
            var bautagebuchLimit_autoStartUhrzeit = record.get('bautagebuchLimit_autoStartUhrzeit');
            if (!bautagebuchLimit_autoStartUhrzeit) bautagebuchLimit_autoStartUhrzeit = DigiWebApp.SettingsController.defaultsettings.get("bautagebuchLimit_autoStartUhrzeit");

            var terminliste_keineKuenstlichenTermine = DigiWebApp.SettingsController.defaultsettings.get("terminliste_keineKuenstlichenTermine");
            try {
	            if (typeof(record.record.terminliste_keineKuenstlichenTermine) !== "undefined") {
	            		terminliste_keineKuenstlichenTermine = record.get('terminliste_keineKuenstlichenTermine');
	            }
            } catch (e) {}
            
            var terminliste_ignoriereAuftragszeitraum = DigiWebApp.SettingsController.defaultsettings.get("terminliste_ignoriereAuftragszeitraum");
            try {
	            if (typeof(record.record.terminliste_ignoriereAuftragszeitraum) !== "undefined") {
	            		terminliste_ignoriereAuftragszeitraum = record.get('terminliste_ignoriereAuftragszeitraum');
	            }
            } catch (e) {}

            var festePauseStornieren_nurAktuellerTag = DigiWebApp.SettingsController.defaultsettings.get("festePauseStornieren_nurAktuellerTag");
            try {
	            if (typeof(record.record.festePauseStornieren_nurAktuellerTag) !== "undefined") {
	            	festePauseStornieren_nurAktuellerTag = record.get('festePauseStornieren_nurAktuellerTag');
	            }
            } catch (e) {}

            settings = {
            	  debug: [{
                      value: record.get('debug')
                    , label: 'debug'
                    , isSelected: record.get('debug')
                }]
                , treatAllAsTablet: [{
                      value: record.get('treatAllAsTablet')
                    , label: 'treatAllAsTablet'
                    , isSelected: record.get('treatAllAsTablet')
                }]
                , treatAllAsPhone: [{
                      value: record.get('treatAllAsPhone')
                    , label: 'treatAllAsPhone'
                    , isSelected: record.get('treatAllAsPhone')
                }]
                , daysToHoldBookingsOnDevice: daysToHoldBookingsOnDevice
                , company: record.get('company')
                , password: record.get('password')
                , connectionCode: record.get('connectionCode')
                , settingsPassword: record.get('settingsPassword')
                , workerId: record.get('workerId')
                , timeouthappened: DigiWebApp.ApplicationController.timeouthappened
        		, skipEvents: DigiWebApp.ApplicationController.skipEvents
                , platform: M.Environment.getPlatform()
                , userAgent: navigator.userAgent
                , mapType: record.get('mapType')
                , autoTransferAfterBookTime: [{
                      value: record.get('autoTransferAfterBookTime')
                    , label: M.I18N.l('autoTransferAfterBookTimeCheck')
                    , isSelected: record.get('autoTransferAfterBookTime')
                }]
                , autoTransferAfterClosingDay: [{
                      value: record.get('autoTransferAfterClosingDay')
                    , label: M.I18N.l('autoTransferAfterClosingDayCheck')
                    , isSelected: record.get('autoTransferAfterClosingDay')
                }]
                , autoSyncAfterBookTime: [{
                    value: record.get('autoSyncAfterBookTime')
                  , label: M.I18N.l('autoSyncAfterBookTimeCheck')
                  , isSelected: record.get('autoSyncAfterBookTime')
                }]
	            , stammdatenabgleichBeimAppStart: [{
	                  value: record.get('stammdatenabgleichBeimAppStart')
	                , label: M.I18N.l('stammdatenabgleichBeimAppStart')
	                , isSelected: record.get('stammdatenabgleichBeimAppStart')
	            }]
                , autoSaveGPSData: [{
                      value: record.get('autoSaveGPSData')
                    , label: M.I18N.l('autoSaveGPSData')
                    , isSelected: record.get('autoSaveGPSData')
                }]
                , bautagebuchLimit_autoStartUhrzeit: [{
	                    value: bautagebuchLimit_autoStartUhrzeit
	                  , label: M.I18N.l('bautagebuchLimit_autoStartUhrzeit')
	                  , isSelected: bautagebuchLimit_autoStartUhrzeit
	              }]
                , GPSDataIsMandatory: [{
                      value: GPSDataIsMandatory
                    , label: M.I18N.l('GPSDataIsMandatory')
                    , isSelected: GPSDataIsMandatory
                }]
                , remarkIsMandatory: [{
                      value: record.get('remarkIsMandatory')
                    , label: M.I18N.l('remarkIsMandatory')
                    , isSelected: record.get('remarkIsMandatory')
                }]
                , remarkIsOptional: [{
	                   value: record.get('remarkIsOptional')
	                 , label: M.I18N.l('remarkIsOptional')
	                 , isSelected: record.get('remarkIsOptional')
	            }]
                , detailierteZeitdaten: [{
 	                   value: record.get('detailierteZeitdaten')
 	                 , label: M.I18N.l('detailierteZeitdaten')
 	                 , isSelected: record.get('detailierteZeitdaten')
 	            }]
                , useTransitionsSetting: [{
                      value: record.get('useTransitionsSetting')
                    , label: M.I18N.l('useTransitionsSetting')
                    , isSelected: record.get('useTransitionsSetting')
                }]
                , datatransfer_min_delay: record.get('datatransfer_min_delay')
                , branding: record.get('branding')
                , GPSTimeOut: record.get('GPSTimeOut')
                , WebserviceTimeOut: record.get('WebserviceTimeOut')
                , LoaderTimeOut: record.get('LoaderTimeOut')
                , silentLoader: record.get('silentLoader')
                , currentTimezoneOffset: record.get('currentTimezoneOffset')
                , currentTimezone: record.get('currentTimezone')
                , ServiceApp_ermittleGeokoordinate: [{
	                   value: record.get('ServiceApp_ermittleGeokoordinate')
	                 , label: M.I18N.l('ServiceApp_ermittleGeokoordinate')
	                 , isSelected: record.get('ServiceApp_ermittleGeokoordinate')
	            }]
                , ServiceApp_datenUebertragen: [{
 	                   value: record.get('ServiceApp_datenUebertragen')
 	                 , label: M.I18N.l('ServiceApp_datenUebertragen')
 	                 , isSelected: record.get('ServiceApp_datenUebertragen')
 	            }]
               , ServiceApp_engeKopplung: [{
	                   value: record.get('ServiceApp_engeKopplung')
	                 , label: M.I18N.l('ServiceApp_engeKopplung')
	                 , isSelected: record.get('ServiceApp_engeKopplung')
	            }]
               , ServiceApp_FallBack: [{
	                   value: record.get('ServiceApp_FallBack')
	                 , label: M.I18N.l('ServiceApp_FallBack')
	                 , isSelected: record.get('ServiceApp_FallBack')
	            }]
               , ServiceApp_PORT: record.get('ServiceApp_PORT')
               , debugDatabaseServer: record.get('debugDatabaseServer')
               , mitarbeiterVorname: record.get('mitarbeiterVorname')
               , mitarbeiterNachname: record.get('mitarbeiterNachname')
               , mitarbeiterId: record.get('mitarbeiterId')
	           , auftragsDetailsKoppeln: [{
	                   value: record.get('auftragsDetailsKoppeln')
	                 , label: M.I18N.l('auftragsDetailsKoppeln')
	                 , isSelected: record.get('auftragsDetailsKoppeln')
	           }]
               , vibrationsDauer: vibrationsDauer
	           , terminliste_keineKuenstlichenTermine: [{
	                   value: terminliste_keineKuenstlichenTermine
	                 , label: M.I18N.l('terminliste_keineKuenstlichenTermine')
	                 , isSelected: terminliste_keineKuenstlichenTermine
	           }]
    	       , terminliste_ignoriereAuftragszeitraum: [{
	                   value: terminliste_ignoriereAuftragszeitraum
	                 , label: M.I18N.l('terminliste_ignoriereAuftragszeitraum')
	                 , isSelected: terminliste_ignoriereAuftragszeitraum
	           }]
    	       , festePauseStornieren_nurAktuellerTag: [{
	                   value: festePauseStornieren_nurAktuellerTag
	                 , label: M.I18N.l('festePauseStornieren_nurAktuellerTag')
	                 , isSelected: festePauseStornieren_nurAktuellerTag
    	       }]

            };
        /* default values */
        } else {
        	//console.log("using default settings");
            settings = {
                  debug: [{
                      value: DigiWebApp.SettingsController.defaultsettings.get("debug")
                    , label: 'debug'
                }]
                , treatAllAsTablet: [{
                      value: DigiWebApp.SettingsController.defaultsettings.get("treatAllAsTablet")
                    , label: 'treatAllAsTablet'
                }]
                , treatAllAsPhone: [{
                      value: DigiWebApp.SettingsController.defaultsettings.get("treatAllAsPhone")
                    , label: 'treatAllAsPhone'
                }]
                , daysToHoldBookingsOnDevice: DigiWebApp.SettingsController.defaultsettings.get("daysToHoldBookingsOnDevice")
                , company: DigiWebApp.SettingsController.defaultsettings.get("company")
                , password: DigiWebApp.SettingsController.defaultsettings.get("password")
                , connectionCode: DigiWebApp.SettingsController.defaultsettings.get("connectionCode")
                , settingsPassword: DigiWebApp.SettingsController.defaultsettings.get("settingsPassword")
                , workerId: DigiWebApp.SettingsController.defaultsettings.get("workerId")
                , timeouthappened: DigiWebApp.ApplicationController.timeouthappened
            	, skipEvents: DigiWebApp.ApplicationController.skipEvents
                , platform: M.Environment.getPlatform()
                , userAgent: navigator.userAgent
                , mapType: DigiWebApp.SettingsController.defaultsettings.get("mapType")
                , autoTransferAfterBookTime: [{
                      value: DigiWebApp.SettingsController.defaultsettings.get("autoTransferAfterBookTime")
                    , label: M.I18N.l('autoTransferAfterBookTimeCheck')
                }]
                , autoTransferAfterClosingDay: [{
                      value: DigiWebApp.SettingsController.defaultsettings.get("autoTransferAfterClosingDay")
                    , label: M.I18N.l('autoTransferAfterClosingDayCheck')
                }]
                , autoSyncAfterBookTime: [{
                    value: DigiWebApp.SettingsController.defaultsettings.get("autoSyncAfterBookTime")
                  , label: M.I18N.l('autoSyncAfterBookTimeCheck')
                }]
                , stammdatenabgleichBeimAppStart: [{
	                  value: DigiWebApp.SettingsController.defaultsettings.get("stammdatenabgleichBeimAppStart")
	                , label: M.I18N.l('stammdatenabgleichBeimAppStart')
	            }]
                , autoSaveGPSData: [{
                      value: DigiWebApp.SettingsController.defaultsettings.get("autoSaveGPSData")
                    , label: M.I18N.l('autoSaveGPSData')
                }]
                , bautagebuchLimit_autoStartUhrzeit: [{
                      value: DigiWebApp.SettingsController.defaultsettings.get("bautagebuchLimit_autoStartUhrzeit")
                    , label: M.I18N.l('bautagebuchLimit_autoStartUhrzeit')
                }]
                , GPSDataIsMandatory: [{
                      value: DigiWebApp.SettingsController.defaultsettings.get("GPSDataIsMandatory")
                    , label: M.I18N.l('GPSDataIsMandatory')
                }]
                , remarkIsMandatory: [{
                      value: DigiWebApp.SettingsController.defaultsettings.get("remarkIsMandatory")
                    , label: M.I18N.l('remarkIsMandatory')
                }]
	            , remarkIsOptional: [{
	                  value: DigiWebApp.SettingsController.defaultsettings.get("remarkIsOptional")
	                , label: M.I18N.l('remarkIsOptional')
	            }]
	            , detailierteZeitdaten: [{
  	                  value: DigiWebApp.SettingsController.defaultsettings.get("detailierteZeitdaten")
  	                , label: M.I18N.l('detailierteZeitdaten')
  	            }]
                , useTransitionsSetting: [{
                      value: DigiWebApp.SettingsController.defaultsettings.get("useTransitionsSetting")
                    , label: M.I18N.l('useTransitionsSetting')
                }]
                , datatransfer_min_delay: DigiWebApp.SettingsController.defaultsettings.get('datatransfer_min_delay')
                , branding: DigiWebApp.SettingsController.defaultsettings.get('branding')
                , GPSTimeOut: DigiWebApp.SettingsController.defaultsettings.get('GPSTimeOut')
                , WebserviceTimeOut: DigiWebApp.SettingsController.defaultsettings.get('WebserviceTimeOut')
                , LoaderTimeOut: DigiWebApp.SettingsController.defaultsettings.get('LoaderTimeOut')
                , silentLoader: DigiWebApp.SettingsController.defaultsettings.get('silentLoader')
                , currentTimezoneOffset: DigiWebApp.SettingsController.defaultsettings.get('currentTimezoneOffset')
                , currentTimezone: DigiWebApp.SettingsController.defaultsettings.get('currentTimezone')
	            , ServiceApp_ermittleGeokoordinate: [{
	                  value: DigiWebApp.SettingsController.defaultsettings.get("ServiceApp_ermittleGeokoordinate")
	                , label: M.I18N.l('ServiceApp_ermittleGeokoordinate')
	            }]
	            , ServiceApp_datenUebertragen: [{
	                  value: DigiWebApp.SettingsController.defaultsettings.get("ServiceApp_datenUebertragen")
	                , label: M.I18N.l('ServiceApp_datenUebertragen')
	            }]
	            , ServiceApp_engeKopplung: [{
	                  value: DigiWebApp.SettingsController.defaultsettings.get("ServiceApp_engeKopplung")
	                , label: M.I18N.l('ServiceApp_engeKopplung')
	            }]
	            , ServiceApp_FallBack: [{
  	                  value: DigiWebApp.SettingsController.defaultsettings.get("ServiceApp_FallBack")
  	                , label: M.I18N.l('ServiceApp_FallBack')
  	            }]
	            , ServiceApp_PORT: DigiWebApp.SettingsController.defaultsettings.get('ServiceApp_PORT')
	            , debugDatabaseServer: DigiWebApp.SettingsController.defaultsettings.get('debugDatabaseServer')
	            , mitarbeiterVorname: DigiWebApp.SettingsController.defaultsettings.get('mitarbeiterVorname')
	            , mitarbeiterNachname: DigiWebApp.SettingsController.defaultsettings.get('mitarbeiterNachname')
	            , mitarbeiterId: DigiWebApp.SettingsController.defaultsettings.get('mitarbeiterId')
	            , auftragsDetailsKoppeln: [{
	                  value: DigiWebApp.SettingsController.defaultsettings.get("auftragsDetailsKoppeln")
	                , label: M.I18N.l('auftragsDetailsKoppeln')
	            }]
                , vibrationsDauer: DigiWebApp.SettingsController.defaultsettings.get("vibrationsDauer")
 	           , terminliste_keineKuenstlichenTermine: [{
	                   value: DigiWebApp.SettingsController.defaultsettings.get('terminliste_keineKuenstlichenTermine')
	                 , label: M.I18N.l('terminliste_keineKuenstlichenTermine')
	           }]
		       , terminliste_ignoriereAuftragszeitraum: [{
	                   value: DigiWebApp.SettingsController.defaultsettings.get('terminliste_ignoriereAuftragszeitraum')
	                 , label: M.I18N.l('terminliste_ignoriereAuftragszeitraum')
	           }]
		       , festePauseStornieren_nurAktuellerTag: [{
	                   value: DigiWebApp.SettingsController.defaultsettings.get('festePauseStornieren_nurAktuellerTag')
	                 , label: M.I18N.l('festePauseStornieren_nurAktuellerTag')
		       }]

            };
            
            record = DigiWebApp.Settings.createRecord(DigiWebApp.SettingsController.defaultsettings_object).save();
        }
                
        that.set('settings', settings);

        var fileNamesToDelete = [];
		var cleanDataDirectory = function() {
			var refreshWAIT = function() {
//				if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("refreshWAIT");
				DigiWebApp.ServiceAppController.refreshWAITBookings(function(){
//					if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("refreshWAIT done");
					DigiWebApp.BookingController.init(YES);
				},function(err){console.error(err);}
				, fileNamesToDelete);
			};
			if (false) {
//				if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("clean DataDirectory");
				DigiWebApp.ServiceAppController.listDirectory(function(results) {
					fileNamesToDelete = [];
					_.each(results, function(fileName) {
						if (fileName.search("DigiWebAppServiceApp.*.response.json") === 0) {
							//if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("delete " + fileName);
							fileNamesToDelete.push(fileName);
							//DigiWebApp.ServiceAppController.deleteFile(fileName, function(){}, function(){});
						}
					});
					refreshWAIT();
				});
			} else {
				refreshWAIT();
			}
		};

		var hideShowSettingsServiceApp = function () {
         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_datenUebertragen.id).hide();
//         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_ermittleGeokoordinate.id).hide();
//         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_engeKopplung.id).hide();
//         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_PORTGrid.id).hide();
//         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_FallBack.id).hide();
        	if (DigiWebApp.SettingsController.featureAvailable('417')) {
           	 	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_PORTGrid.id).show();
	         	//$('#' + DigiWebApp.SettingsPage.content.ServiceApp_datenUebertragen.id).show();
	         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_datenUebertragen.id).hide();
	         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_ermittleGeokoordinate.id).show();
	         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_engeKopplung.id).show();
	         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_FallBack.id).show();
	             DigiWebApp.ServiceAppController.knockknock(function(data) {
	            	 				if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("ServiceApp is available");
	            		         	if (JSON.parse(data) !== null) {
	            		         		try {
			            		         	var deleteBookingsInServiceappIDs = [];
			            		         	var allBookings = DigiWebApp.Booking.find();
			            		         	_.each(JSON.parse(data).GET.buchungen, function(buchung){
			            		         		var found = false;
			            		         		var datensatzObj = buchung.datensatz;
			            		         		_.each(allBookings, function(modelBooking){
			            		         			if (modelBooking.m_id === datensatzObj.m_id) {
			            		         				found = true;
			            		         			}
			            		         		});
			            		         		if (!found) {
			            		         			deleteBookingsInServiceappIDs.push(datensatzObj.m_id);
			            		         		}
			            		         	});
//			            		         	if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("deleteBookingsInServiceappIDs:",deleteBookingsInServiceappIDs);
			      		  				    DigiWebApp.ServiceAppController.deleteBookings(deleteBookingsInServiceappIDs, cleanDataDirectory, cleanDataDirectory);
	            		         		} catch(e3) {
	            		         			if (interactWithServiceApp) cleanDataDirectory();
	            		         		}
	            		         	} else {
	            		         		if (interactWithServiceApp) cleanDataDirectory();
	            		         	}
	            			   }, function() {
	            				   if (DigiWebApp.SettingsController.getSetting("debug"))  console.log("ServiceApp is NOT available");
//	            		         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_datenUebertragen.id).hide();
//	            		         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_ermittleGeokoordinate.id).hide();
//	            		         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_engeKopplung.id).hide();
//	            		         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_FallBack.id).hide();
	            		         	if (interactWithServiceApp) cleanDataDirectory();
	            			   }
	            );
	        } else {
//	         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_datenUebertragen.id).hide();
//	         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_ermittleGeokoordinate.id).hide();
//	         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_engeKopplung.id).hide();
//	         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_PORTGrid.id).hide();
//	         	$('#' + DigiWebApp.SettingsPage.content.ServiceApp_FallBack.id).hide();
	         	//if (interactWithServiceApp) cleanDataDirectory();
	        }
	    };
        
        if (interactWithServiceApp && DigiWebApp.SettingsController.featureAvailable('417')) {
	        // check for ServiceApp
        	cleanDataDirectory();
        }
        hideShowSettingsServiceApp();
	}
	
	, saveDone: YES 

    , save: function() {
		
		if (DigiWebApp.SettingsController.saveDone !== YES) {
			return;
		}
		
		DigiWebApp.SettingsController.saveDone = NO;
		
    	var debug                       = DigiWebApp.SettingsController.globalDebugMode;
    	var treatAllAsTablet            = DigiWebApp.SettingsController.getSetting('treatAllAsTablet');
    	var treatAllAsPhone             = DigiWebApp.SettingsController.getSetting('treatAllAsPhone');
    	var settingsPassword            = DigiWebApp.SettingsController.getSetting('settingsPassword');

    	//var company                     = M.ViewManager.getView('settingsPage', 'companyInput').value;
        //var password                    = M.ViewManager.getView('settingsPage', 'passwordInput').value;
        //var connectionCode              = M.ViewManager.getView('settingsPage', 'connectionCodeInput').value;
        //var workerId                    = M.ViewManager.getView('settingsPage', 'workerIdInput').value;

    	var daysToHoldBookingsOnDevice     = $('#' + M.ViewManager.getView('settingsPage', 'daysToHoldBookingsOnDeviceSlider').id).val();
    	var company                        = $('#' + M.ViewManager.getView('settingsPage', 'companyInput').id).val();
        var password                       = $('#' + M.ViewManager.getView('settingsPage', 'passwordInput').id).val();
        var connectionCode                 = $('#' + M.ViewManager.getView('settingsPage', 'connectionCodeInput').id).val();
        var workerId                       = $('#' + M.ViewManager.getView('settingsPage', 'workerIdInput').id).val();
        var timeouthappened                = DigiWebApp.ApplicationController.timeouthappened;
        var skipEvents                     = DigiWebApp.ApplicationController.skipEvents;
        var platform                       = M.Environment.getPlatform();
        var userAgent                      = navigator.userAgent;
    	var mapType                        = DigiWebApp.SettingsController.getSetting('mapType');
        var autoTransferAfterBookTime      = $('#' + M.ViewManager.getView('settingsPage', 'autoTransferAfterBookTimeCheck').id      + ' label.ui-checkbox-on').length > 0 ? YES : NO;
        var autoTransferAfterClosingDay    = $('#' + M.ViewManager.getView('settingsPage', 'autoTransferAfterClosingDayCheck').id    + ' label.ui-checkbox-on').length > 0 ? YES : NO;
        var autoSyncAfterBookTime          = $('#' + M.ViewManager.getView('settingsPage', 'autoSyncAfterBookTimeCheck').id          + ' label.ui-checkbox-on').length > 0 ? YES : NO;
        var stammdatenabgleichBeimAppStart = $('#' + M.ViewManager.getView('settingsPage', 'stammdatenabgleichBeimAppStartCheck').id + ' label.ui-checkbox-on').length > 0 ? YES : NO;
        var autoSaveGPSData                = $('#' + M.ViewManager.getView('settingsPage', 'autoSaveGPSData').id                     + ' label.ui-checkbox-on').length > 0 ? YES : NO;
        var useTransitionsSetting          = $('#' + M.ViewManager.getView('settingsPage', 'useTransitionsSetting').id               + ' label.ui-checkbox-on').length > 0 ? YES : NO;

        var remarkIsMandatory = NO;
        if (M.ViewManager.getView('settingsPage', 'remarkIsMandatory') !== null) {
        	remarkIsMandatory = $('#' + M.ViewManager.getView('settingsPage', 'remarkIsMandatory').id + ' label.ui-checkbox-on').length > 0 ? YES : NO;
        }

        var remarkIsOptional = NO;
        if (M.ViewManager.getView('settingsPage', 'remarkIsOptional') !== null) {
        	remarkIsOptional = $('#' + M.ViewManager.getView('settingsPage', 'remarkIsOptional').id + ' label.ui-checkbox-on').length > 0 ? YES : NO;
        	if (remarkIsOptional === YES) {
        		remarkIsMandatory = NO;
        	}
        }

        var detailierteZeitdaten         = $('#' + M.ViewManager.getView('settingsPage', 'detailierteZeitdaten').id            + ' label.ui-checkbox-on').length > 0 ? YES : NO;

        var GPSDataIsMandatory = NO;
        if (M.ViewManager.getView('settingsPage', 'GPSDataIsMandatory') !== null) {
        	GPSDataIsMandatory = $('#' + M.ViewManager.getView('settingsPage', 'GPSDataIsMandatory').id + ' label.ui-checkbox-on').length > 0 ? YES : NO;
        }

        var bautagebuchLimit_autoStartUhrzeit = NO;
        if (M.ViewManager.getView('settingsPage', 'bautagebuchLimit_autoStartUhrzeit') !== null) {
        	bautagebuchLimit_autoStartUhrzeit = $('#' + M.ViewManager.getView('settingsPage', 'bautagebuchLimit_autoStartUhrzeit').id + ' label.ui-checkbox-on').length > 0 ? YES : NO;
        }
        
        var datatransfer_min_delay      = DigiWebApp.SettingsController.getSetting('datatransfer_min_delay');
        var branding                    = DigiWebApp.SettingsController.getSetting('branding');
        var GPSTimeOut                  = DigiWebApp.SettingsController.getSetting('GPSTimeOut');
        var WebserviceTimeOut           = DigiWebApp.SettingsController.getSetting('WebserviceTimeOut');
        var LoaderTimeOut               = DigiWebApp.SettingsController.getSetting('LoaderTimeOut');
        var silentLoader                = DigiWebApp.SettingsController.getSetting('silentLoader');
    	var currentTimezoneOffset       = DigiWebApp.SettingsController.getSetting('currentTimezoneOffset');
    	var currentTimezone             = DigiWebApp.SettingsController.getSetting('currentTimezone');

        var ServiceApp_ermittleGeokoordinate = DigiWebApp.SettingsController.getSetting('ServiceApp_ermittleGeokoordinate');
        if (M.ViewManager.getView('settingsPage', 'ServiceApp_ermittleGeokoordinate') !== null) {
        	ServiceApp_ermittleGeokoordinate = $('#' + M.ViewManager.getView('settingsPage', 'ServiceApp_ermittleGeokoordinate').id + ' label.ui-checkbox-on').length > 0 ? YES : NO;
        }
        var ServiceApp_datenUebertragen      = DigiWebApp.SettingsController.getSetting('ServiceApp_datenUebertragen');
        if (M.ViewManager.getView('settingsPage', 'ServiceApp_datenUebertragen') !== null) {
        	ServiceApp_datenUebertragen = $('#' + M.ViewManager.getView('settingsPage', 'ServiceApp_datenUebertragen').id + ' label.ui-checkbox-on').length > 0 ? YES : NO;
        }
        var ServiceApp_engeKopplung          = DigiWebApp.SettingsController.getSetting('ServiceApp_engeKopplung');
        if (M.ViewManager.getView('settingsPage', 'ServiceApp_engeKopplung') !== null) {
        	ServiceApp_engeKopplung = $('#' + M.ViewManager.getView('settingsPage', 'ServiceApp_engeKopplung').id + ' label.ui-checkbox-on').length > 0 ? YES : NO;
        }
        var ServiceApp_FallBack          	 = DigiWebApp.SettingsController.getSetting('ServiceApp_FallBack');
        if (M.ViewManager.getView('settingsPage', 'ServiceApp_FallBack') !== null) {
        	ServiceApp_FallBack = $('#' + M.ViewManager.getView('settingsPage', 'ServiceApp_FallBack').id + ' label.ui-checkbox-on').length > 0 ? YES : NO;
        }
        var ServiceApp_PORT                  = DigiWebApp.SettingsController.getSetting('ServiceApp_PORT');
        if (M.ViewManager.getView('settingsPage', 'ServiceApp_PORTInput') !== null) {
        	ServiceApp_PORT = $('#' + M.ViewManager.getView('settingsPage', 'ServiceApp_PORTInput').id).val();
        }

        var debugDatabaseServer              = DigiWebApp.SettingsController.getSetting('debugDatabaseServer');
        var mitarbeiterVorname               = DigiWebApp.SettingsController.getSetting('mitarbeiterVorname');
        var mitarbeiterNachname              = DigiWebApp.SettingsController.getSetting('mitarbeiterNachname');
        var mitarbeiterId                    = DigiWebApp.SettingsController.getSetting('mitarbeiterId');
        var auftragsDetailsKoppeln			 = $('#' + M.ViewManager.getView('settingsPage', 'auftragsDetailsKoppeln').id + ' label.ui-checkbox-on').length > 0 ? YES : NO;
    	var vibrationsDauer                  = $('#' + M.ViewManager.getView('settingsPage', 'vibrationsDauerSlider').id).val();
        var terminliste_keineKuenstlichenTermine  = $('#' + M.ViewManager.getView('settingsPage', 'terminliste_keineKuenstlichenTermine').id + ' label.ui-checkbox-on').length > 0 ? YES : NO;
        var terminliste_ignoriereAuftragszeitraum = $('#' + M.ViewManager.getView('settingsPage', 'terminliste_ignoriereAuftragszeitraum').id + ' label.ui-checkbox-on').length > 0 ? YES : NO;

        var festePauseStornieren_nurAktuellerTag = $('#' + M.ViewManager.getView('settingsPage', 'festePauseStornieren_nurAktuellerTag').id + ' label.ui-checkbox-on').length > 0 ? YES : NO;

        var numberRegex = /^[0-9]+$/;
        if (company) {
            if(!numberRegex.test(company)) {
                DigiWebApp.ApplicationController.nativeAlertDialogView({
                      title: M.I18N.l('inputError')
                    , message: M.I18N.l('inputErrorOnlyNumbers') + ':<br />' + M.I18N.l('company')
                });
                DigiWebApp.SettingsController.saveDone = YES;
                return;
            }
        }
        if (workerId) {
            if(!numberRegex.test(workerId)) {
                DigiWebApp.ApplicationController.nativeAlertDialogView({
                      title: M.I18N.l('inputError')
                    , message: M.I18N.l('inputErrorOnlyNumbers') + ':<br />' + M.I18N.l('workerId')
                });
                DigiWebApp.SettingsController.saveDone = YES;
                return;
            }
        }
        if (daysToHoldBookingsOnDevice) {
            if(!numberRegex.test(daysToHoldBookingsOnDevice)) {
                DigiWebApp.ApplicationController.nativeAlertDialogView({
                      title: M.I18N.l('inputError')
                    , message: M.I18N.l('inputErrorOnlyNumbers') + ':<br />' + M.I18N.l('daysToHoldBookingsOnDeviceLabel')
                });
                DigiWebApp.SettingsController.saveDone = YES;
                return;
            }
        }


        //M.DialogView.confirm({
        DigiWebApp.ApplicationController.nativeConfirmDialogView({
              title: M.I18N.l('hint')
            , message: M.I18N.l('confirmSaveOfSettings')
            , callbacks: {
                  confirm: {
                    action: function() {
                        var record = DigiWebApp.Settings.find()[0];
                        /* if there already is a record, update it */
                        if(record) {

                            /* if some of the hard stuff changed, check for open and not-transfered bookings */
                            var isNew = record.get('company') == '' && record.get('password') == '' && record.get('connectionCode') == '' && record.get('workerId') == '';
                            if (!isNew && (    record.get('company')        != company
                            				|| record.get('password')       != password
                            				|| record.get('connectionCode') != connectionCode
                            				|| record.get('workerId')       != workerId
                            				)
                            	) {

                            	DigiWebApp.RequestController.DatabaseServer = null;
                            	
                                /* check for open bookings */
                                var bookings = DigiWebApp.Booking.find();
                                if(bookings.length > 0) {
                                    //M.DialogView.confirm({
                                    DigiWebApp.ApplicationController.nativeConfirmDialogView({
                                          title: M.I18N.l('hint')
                                        , message: M.I18N.l('openBookingsOverwriteBySettingsUpdate')
                                        , callbacks: {
                                              confirm: {
                                                action: function() {
                                                    /* reset the app */
                                    				DigiWebApp.ApplicationController.restartApp = YES;
                                    				record.set('debug', debug);
                            						record.set('treatAllAsTablet', treatAllAsTablet);
                                                	record.set('treatAllAsPhone', treatAllAsPhone);
                                        			record.set('daysToHoldBookingsOnDevice', daysToHoldBookingsOnDevice);
                                        			record.set('company', company);
                                                    record.set('password', password);
                                                    record.set('connectionCode', connectionCode);
                                                    record.set('settingsPassword', settingsPassword);
                                                    record.set('workerId', workerId);
                                                    record.set('timeouthappened', timeouthappened);
                                                    record.set('skipEvents', skipEvents);
                                                    record.set('platform', platform);
                                                    record.set('userAgent', userAgent);
                                                    record.set('mapType', mapType);
                                                    record.set('autoTransferAfterBookTime', autoTransferAfterBookTime);
                                                    record.set('autoTransferAfterClosingDay', autoTransferAfterClosingDay);
                                                    record.set('autoSyncAfterBookTime', autoSyncAfterBookTime);
                                                    record.set('stammdatenabgleichBeimAppStart', stammdatenabgleichBeimAppStart);
                                                    record.set('autoSaveGPSData', autoSaveGPSData);
                                                    record.set('bautagebuchLimit_autoStartUhrzeit', bautagebuchLimit_autoStartUhrzeit);
                                                    record.set('GPSDataIsMandatory', GPSDataIsMandatory);
                                                    record.set('remarkIsMandatory', remarkIsMandatory);
                                                    record.set('remarkIsOptional', remarkIsOptional);
                                                    record.set('detailierteZeitdaten', detailierteZeitdaten);
                                                    record.set('useTransitionsSetting', useTransitionsSetting);
                                                    record.set('datatransfer_min_delay', datatransfer_min_delay);
                                                    record.set('branding', branding);
                                                    record.set('GPSTimeOut', GPSTimeOut);
                                                    record.set('WebserviceTimeOut', WebserviceTimeOut);
                                                    record.set('LoaderTimeOut', LoaderTimeOut);
                                                    record.set('silentLoader', silentLoader);
                                                    record.set('currentTimezoneOffset', currentTimezoneOffset);
                                                    record.set('currentTimezone', currentTimezone);
                                                    record.set('ServiceApp_ermittleGeokoordinate', ServiceApp_ermittleGeokoordinate);
                                                    record.set('ServiceApp_datenUebertragen', ServiceApp_datenUebertragen);
                                                    record.set('ServiceApp_engeKopplung', ServiceApp_engeKopplung);
                                                    record.set('ServiceApp_PORT', ServiceApp_PORT);
                                                    record.set('ServiceApp_FallBack', ServiceApp_FallBack);
                                                    record.set('debugDatabaseServer', debugDatabaseServer);
                                                    record.set('mitarbeiterVorname', mitarbeiterVorname);
                                                    record.set('mitarbeiterNachname', mitarbeiterNachname);
                                                    record.set('mitarbeiterId', mitarbeiterId);
                                                    record.set('auftragsDetailsKoppeln', auftragsDetailsKoppeln);
                                                    record.set('vibrationsDauer', vibrationsDauer);
                                                    record.set('terminliste_keineKuenstlichenTermine', terminliste_keineKuenstlichenTermine);
                                                    record.set('terminliste_ignoriereAuftragszeitraum', terminliste_ignoriereAuftragszeitraum);
                                                    record.set('festePauseStornieren_nurAktuellerTag', festePauseStornieren_nurAktuellerTag);

                                                    /* now save */
                                                    //alert("saveSettings (if(record) == true)");
                                                    DigiWebApp.SettingsController.saveSettings(record, YES);
                                            		DigiWebApp.SettingsController.saveDone = YES;
                                                }
                                            }
                                            , cancel: {
                                                action: function() {
                                                	//DialogView.alert with action
                                                	//M.DialogView.alert({
													DigiWebApp.ApplicationController.nativeAlertDialogView({
                                                          title: M.I18N.l('hint')
                                                        , message: M.I18N.l('settingsUpdateCanceled')
                                                        , callbacks: {
                                                            confirm: {
                                                                action: function() {
																	if (DigiWebApp.SettingsController.featureAvailable('404')) {
	                                                                    DigiWebApp.NavigationController.backToButtonDashboardPage();
																	} else {
	                                                                    DigiWebApp.NavigationController.backToDashboardPage();
																	}
                                                            		DigiWebApp.SettingsController.saveDone = YES;
                                                                }
                                                            }
                                                        }
                                                    });
                                                }
                                            }
                                        }
                                    });
                                } else {
                    				DigiWebApp.ApplicationController.restartApp = YES;
                                	record.set('debug', debug);
                                	record.set('treatAllAsTablet', treatAllAsTablet);
                                	record.set('treatAllAsPhone', treatAllAsPhone);
                        			record.set('daysToHoldBookingsOnDevice', daysToHoldBookingsOnDevice);
                                	record.set('company', company);
                                    record.set('password', password);
                                    record.set('connectionCode', connectionCode);
                                    record.set('settingsPassword', settingsPassword);
                                    record.set('workerId', workerId);
                                    record.set('timeouthappened', timeouthappened);
                                    record.set('skipEvents', skipEvents);
                                    record.set('platform', platform);
                                    record.set('userAgent', userAgent);
                                    record.set('mapType', mapType);
                                    record.set('autoTransferAfterBookTime', autoTransferAfterBookTime);
                                    record.set('autoTransferAfterClosingDay', autoTransferAfterClosingDay);
                                    record.set('autoSyncAfterBookTime', autoSyncAfterBookTime);
                                    record.set('stammdatenabgleichBeimAppStart', stammdatenabgleichBeimAppStart);
                                    record.set('autoSaveGPSData', autoSaveGPSData);
                                    record.set('bautagebuchLimit_autoStartUhrzeit', bautagebuchLimit_autoStartUhrzeit);
                                    record.set('GPSDataIsMandatory', GPSDataIsMandatory);
                                    record.set('remarkIsMandatory', remarkIsMandatory);
                                    record.set('remarkIsOptional', remarkIsOptional);
                                    record.set('detailierteZeitdaten', detailierteZeitdaten);
                                    record.set('useTransitionsSetting', useTransitionsSetting);
                                    record.set('datatransfer_min_delay', datatransfer_min_delay);
                                    record.set('branding', branding);
                                    record.set('GPSTimeOut', GPSTimeOut);
                                    record.set('WebserviceTimeOut', WebserviceTimeOut);
                                    record.set('LoaderTimeOut', LoaderTimeOut);
                                    record.set('silentLoader', silentLoader);
                                    record.set('currentTimezoneOffset', currentTimezoneOffset);
                                    record.set('currentTimezone', currentTimezone);
                                    record.set('ServiceApp_ermittleGeokoordinate', ServiceApp_ermittleGeokoordinate);
                                    record.set('ServiceApp_datenUebertragen', ServiceApp_datenUebertragen);
                                    record.set('ServiceApp_engeKopplung', ServiceApp_engeKopplung);
                                    record.set('ServiceApp_PORT', ServiceApp_PORT);
                                    record.set('ServiceApp_FallBack', ServiceApp_FallBack);
                                    record.set('debugDatabaseServer', debugDatabaseServer);
                                    record.set('mitarbeiterVorname', mitarbeiterVorname);
                                    record.set('mitarbeiterNachname', mitarbeiterNachname);
                                    record.set('mitarbeiterId', mitarbeiterId);
                                    record.set('auftragsDetailsKoppeln', auftragsDetailsKoppeln);
                                    record.set('vibrationsDauer', vibrationsDauer);
                                    record.set('terminliste_keineKuenstlichenTermine', terminliste_keineKuenstlichenTermine);
                                    record.set('terminliste_ignoriereAuftragszeitraum', terminliste_ignoriereAuftragszeitraum);
                                    record.set('festePauseStornieren_nurAktuellerTag', festePauseStornieren_nurAktuellerTag);

                                    /* now save */
                                    //alert("saveSettings (if(record) == false)");
                                    DigiWebApp.SettingsController.saveSettings(record, YES);
                            		DigiWebApp.SettingsController.saveDone = YES;
                                }
                            } else if (isNew) {
                            	record.set('debug', debug);
                            	record.set('treatAllAsTablet', treatAllAsTablet);
                            	record.set('treatAllAsPhone', treatAllAsPhone);
                    			record.set('daysToHoldBookingsOnDevice', daysToHoldBookingsOnDevice);
                            	record.set('company', company);
                                record.set('password', password);
                                record.set('connectionCode', connectionCode);
                                record.set('settingsPassword', settingsPassword);
                                record.set('workerId', workerId);
                                record.set('timeouthappened', timeouthappened);
                                record.set('skipEvents', skipEvents);
                                record.set('platform', platform);
                                record.set('userAgent', userAgent);
                                record.set('mapType', mapType);
                                record.set('autoTransferAfterBookTime', autoTransferAfterBookTime);
                                record.set('autoTransferAfterClosingDay', autoTransferAfterClosingDay);
                                record.set('autoSyncAfterBookTime', autoSyncAfterBookTime);
                                record.set('stammdatenabgleichBeimAppStart', stammdatenabgleichBeimAppStart);
                                record.set('autoSaveGPSData', autoSaveGPSData);
                                record.set('bautagebuchLimit_autoStartUhrzeit', bautagebuchLimit_autoStartUhrzeit);
                                record.set('GPSDataIsMandatory', GPSDataIsMandatory);
                                record.set('remarkIsMandatory', remarkIsMandatory);
                                record.set('remarkIsOptional', remarkIsOptional);
                                record.set('detailierteZeitdaten', detailierteZeitdaten);
                                record.set('useTransitionsSetting', useTransitionsSetting);
                                record.set('datatransfer_min_delay', datatransfer_min_delay);
                                record.set('branding', branding);
                                record.set('GPSTimeOut', GPSTimeOut);
                                record.set('WebserviceTimeOut', WebserviceTimeOut);
                                record.set('LoaderTimeOut', LoaderTimeOut);
                                record.set('silentLoader', silentLoader);
                                record.set('currentTimezoneOffset', currentTimezoneOffset);
                                record.set('currentTimezone', currentTimezone);
                                record.set('ServiceApp_ermittleGeokoordinate', ServiceApp_ermittleGeokoordinate);
                                record.set('ServiceApp_datenUebertragen', ServiceApp_datenUebertragen);
                                record.set('ServiceApp_engeKopplung', ServiceApp_engeKopplung);
                                record.set('ServiceApp_PORT', ServiceApp_PORT);
                                record.set('ServiceApp_FallBack', ServiceApp_FallBack);
                                record.set('debugDatabaseServer', debugDatabaseServer);
                                record.set('mitarbeiterVorname', mitarbeiterVorname);
                                record.set('mitarbeiterNachname', mitarbeiterNachname);
                                record.set('mitarbeiterId', mitarbeiterId);
                                record.set('auftragsDetailsKoppeln', auftragsDetailsKoppeln);
                                record.set('vibrationsDauer', vibrationsDauer);
                                record.set('terminliste_keineKuenstlichenTermine', terminliste_keineKuenstlichenTermine);
                                record.set('terminliste_ignoriereAuftragszeitraum', terminliste_ignoriereAuftragszeitraum);
                                record.set('festePauseStornieren_nurAktuellerTag', festePauseStornieren_nurAktuellerTag);

                                /* now save */
                                //alert("saveSettings (isNew)");
                                //console.log(record)
                                DigiWebApp.SettingsController.saveSettings(record, YES);
                        		DigiWebApp.SettingsController.saveDone = YES;
                            } else {
                            	record.set('debug', debug);
                            	record.set('treatAllAsTablet', treatAllAsTablet);
                            	record.set('treatAllAsPhone', treatAllAsPhone);
                    			record.set('daysToHoldBookingsOnDevice', daysToHoldBookingsOnDevice);
                            	record.set('company', company);
                                record.set('password', password);
                                record.set('connectionCode', connectionCode);
                                record.set('settingsPassword', settingsPassword);
                                record.set('workerId', workerId);
                                record.set('timeouthappened', timeouthappened);
                                record.set('skipEvents', skipEvents);
                                record.set('platform', platform);
                                record.set('userAgent', userAgent);
                                record.set('mapType', mapType);
                                record.set('autoTransferAfterBookTime', autoTransferAfterBookTime);
                                record.set('autoTransferAfterClosingDay', autoTransferAfterClosingDay);
                                record.set('autoSyncAfterBookTime', autoSyncAfterBookTime);
                                record.set('stammdatenabgleichBeimAppStart', stammdatenabgleichBeimAppStart);
                                record.set('autoSaveGPSData', autoSaveGPSData);
                                record.set('bautagebuchLimit_autoStartUhrzeit', bautagebuchLimit_autoStartUhrzeit);
                                record.set('GPSDataIsMandatory', GPSDataIsMandatory);
                                record.set('remarkIsMandatory', remarkIsMandatory);
                                record.set('remarkIsOptional', remarkIsOptional);
                                record.set('detailierteZeitdaten', detailierteZeitdaten);
                                record.set('useTransitionsSetting', useTransitionsSetting);
                                record.set('datatransfer_min_delay', datatransfer_min_delay);
                                record.set('branding', branding);
                                record.set('GPSTimeOut', GPSTimeOut);
                                record.set('WebserviceTimeOut', WebserviceTimeOut);
                                record.set('LoaderTimeOut', LoaderTimeOut);
                                record.set('silentLoader', silentLoader);
                                record.set('currentTimezoneOffset', currentTimezoneOffset);
                                record.set('currentTimezone', currentTimezone);
                                record.set('ServiceApp_ermittleGeokoordinate', ServiceApp_ermittleGeokoordinate);
                                record.set('ServiceApp_datenUebertragen', ServiceApp_datenUebertragen);
                                record.set('ServiceApp_engeKopplung', ServiceApp_engeKopplung);
                                record.set('ServiceApp_PORT', ServiceApp_PORT);
                                record.set('ServiceApp_FallBack', ServiceApp_FallBack);
                                record.set('debugDatabaseServer', debugDatabaseServer);
                                record.set('mitarbeiterVorname', mitarbeiterVorname);
                                record.set('mitarbeiterNachname', mitarbeiterNachname);
                                record.set('mitarbeiterId', mitarbeiterId);
                                record.set('auftragsDetailsKoppeln', auftragsDetailsKoppeln);
                                record.set('vibrationsDauer', vibrationsDauer);
                                record.set('terminliste_keineKuenstlichenTermine', terminliste_keineKuenstlichenTermine);
                                record.set('terminliste_ignoriereAuftragszeitraum', terminliste_ignoriereAuftragszeitraum);
                                record.set('festePauseStornieren_nurAktuellerTag', festePauseStornieren_nurAktuellerTag);

                                /* now save */
                                //alert("saveSettings (not isNew)");
                                DigiWebApp.SettingsController.saveSettings(record);
                        		DigiWebApp.SettingsController.saveDone = YES;
                            }
                        /* otherwise create a new one */
                        } else {
                            record = DigiWebApp.Settings.createRecord({
                            	  debug: debug
                            	, treatAllAsTablet: treatAllAsTablet
                            	, treatAllAsPhone: treatAllAsPhone
                            	, daysToHoldBookingsOnDevice: daysToHoldBookingsOnDevice
                            	, company: company
                                , password: password
                                , connectionCode: connectionCode
                                , settingsPassword: settingsPassword
                                , workerId: workerId
                                , timeouthappened: timeouthappened
                            	, skipEvents: skipEvents
                                , platform: platform
                                , userAgent: userAgent
                                , mapType: mapType
                                , autoTransferAfterBookTime: autoTransferAfterBookTime
                                , autoTransferAfterClosingDay: autoTransferAfterClosingDay
                                , autoSyncAfterBookTime: autoSyncAfterBookTime
                                , stammdatenabgleichBeimAppStart: stammdatenabgleichBeimAppStart
                                , autoSaveGPSData: autoSaveGPSData
                                , GPSDataIsMandatory: GPSDataIsMandatory
                                , bautagebuchLimit_autoStartUhrzeit: bautagebuchLimit_autoStartUhrzeit
                                , remarkIsMandatory: remarkIsMandatory
                                , remarkIsOptional: remarkIsOptional
                                , detailierteZeitdaten: detailierteZeitdaten
                                , useTransitionsSetting: useTransitionsSetting
                                , datatransfer_min_delay: datatransfer_min_delay
                                , branding: branding
                                , GPSTimeOut: GPSTimeOut
                                , WebserviceTimeOut: WebserviceTimeOut
                                , LoaderTimeOut: LoaderTimeOut
                                , silentLoader: silentLoader
                                , currentTimezoneOffset: currentTimezoneOffset
                                , currentTimezone: currentTimezone
                                , ServiceApp_ermittleGeokoordinate: ServiceApp_ermittleGeokoordinate
                                , ServiceApp_datenUebertragen: ServiceApp_datenUebertragen
                                , ServiceApp_engeKopplung: ServiceApp_engeKopplung
                                , ServiceApp_PORT: ServiceApp_PORT
                                , ServiceApp_FallBack: ServiceApp_FallBack
                                , debugDatabaseServer: debugDatabaseServer
                                , mitarbeiterVorname: mitarbeiterVorname
                                , mitarbeiterNachname: mitarbeiterNachname
                                , mitarbeiterId: mitarbeiterId
                                , auftragsDetailsKoppeln: auftragsDetailsKoppeln
                                , vibrationsDauer: vibrationsDauer
                                , terminliste_keineKuenstlichenTermine: terminliste_keineKuenstlichenTermine
                                , terminliste_ignoriereAuftragszeitraum: terminliste_ignoriereAuftragszeitraum
                                , festePauseStornieren_nurAktuellerTag: festePauseStornieren_nurAktuellerTag

                          });

                            /* now save */
                            //alert("saveSettings (createNewOne)");
                            DigiWebApp.SettingsController.saveSettings(record);
                    		DigiWebApp.SettingsController.saveDone = YES;
                        }
                    }
                }
                , cancel: {
                    action: function() {
            			DigiWebApp.SettingsController.saveDone = YES;
                        return;
                    }
                }
            }
        });
    }

    , saveSettings: function(record, reloadApplication, silent, superSilent) {

        /* clear the LS if its a reload */
        if (reloadApplication) {
			DigiWebApp.ApplicationController.deleteAllData(); 
        	DigiWebApp.BookingController.currentBooking = null;
        	if (typeof(DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp) !== "undefined") {
            	$('#' + DigiWebApp.BookingPageWithIconsScholpp.content.currentBookingLabel.id).html("");
        	} else {
            	$('#' + DigiWebApp.BookingPage.content.currentBookingLabel.id).html("");
        	}
        }

        if (record.save()) {
        	DigiWebApp.SettingsController.mitarbeiterNameVorname = "";
        	//console.log("record saved");
        	//console.log(record);
        	if (!superSilent) {
	            if (!reloadApplication) {
	                // switch back to dashboard
	            	if (silent) {
	                    if (DigiWebApp.ApplicationController.profilingIntervalVar === null) {
	                    	if (DigiWebApp.ApplicationController.syncRunning !== YES) {
								if (DigiWebApp.SettingsController.featureAvailable('404')) {
	                                DigiWebApp.NavigationController.backToButtonDashboardPage();
								} else {
	                                DigiWebApp.NavigationController.backToDashboardPage();
								}
	                    	}
	                    }
	            	} else {
		                //DialogView.alert with action
		                //M.DialogView.alert({
		                DigiWebApp.ApplicationController.nativeAlertDialogView({
		                      title: M.I18N.l('hint')
		                    , message: M.I18N.l('settingsSaveDone')
		                    , callbacks: {
		                        confirm: {
		                            action: function() {
										if (DigiWebApp.SettingsController.featureAvailable('404')) {
				                            DigiWebApp.NavigationController.backToButtonDashboardPage();
										} else {
				                            DigiWebApp.NavigationController.backToDashboardPage();
										}
		                            }
		                        }
		                    }
		                });
	            	}
	            } else {
	            	//DialogView.alert with action
	                //M.DialogView.alert({
	                DigiWebApp.ApplicationController.nativeAlertDialogView({
	                      title: M.I18N.l('hint')
	                    , message: M.I18N.l('settingsSaveDoneReloadApp')
	                    , callbacks: {
	                        confirm: {
	                            action: function() {
	                                //location.href = location.protocol + '//' + location.host + location.pathname;
	                				DigiWebApp.SettingsController.showCredentialsAlert = NO;
	                				DigiWebApp.ApplicationController.init(true);
	                			}
	                        }
	                    }
	                });
	            }
        	}
        } else {
            //M.DialogView.alert({
            DigiWebApp.ApplicationController.nativeAlertDialogView({
                  title: M.I18N.l('error')
                , message: M.I18N.l('settingsSaveError')
            });
        }
    }

    , getSetting: function(prop) {
        var setting = DigiWebApp.Settings.find()[0];
        if ( typeof(setting) !== "undefined" ) {
        	var propvalue = setting.get(prop); 
        	if ( typeof(propvalue) === "undefined" || (propvalue !== null && typeof(propvalue["xsi:nil"]) !== "undefined" && (propvalue["xsi:nil"] === "true" || propvalue["xsi:nil"] === true))) { 
        		try {
        			propvalue = DigiWebApp.SettingsController.defaultsettings_object[prop];
        			setting.set(prop, propvalue);
        		} catch(e4) { console.error("ERROR: setting.get for prop=" + prop); }
        	}
            return propvalue;
        }
    }

    , setSetting: function(prop, value) {
        var setting = DigiWebApp.Settings.find()[0];
        if ( typeof(setting) !== "undefined" ) {
        	try {
        		setting.set(prop, value);
    		} catch(e5) { console.error("ERROR: setting.set for prop=" + prop); }
        	if ((prop === "currentTimezoneOffset") || (prop === "currentTimezone")) {
        		// be superSilent
        		DigiWebApp.SettingsController.saveSettings(setting, NO, YES, YES);
        	} else {
        		DigiWebApp.SettingsController.saveSettings(setting, NO, YES);
        	}
        }
    }
      
	, featureAvailable: function(featureId) {
			
		if ( typeof(featureId) !== "string" ) {
			return false;
		}
	
		if ( featureId.length === 0) {
			return false;
		}
	
		var FeatureSetting = _.select(DigiWebApp.Features.find(), function(f) {
		    if (f) return f.get('id') == featureId;
		})[0];
	
		if (typeof(FeatureSetting) === "undefined") {
			return false;
		} else {
			return (FeatureSetting.get('isAvailable') === "true");
		}
	
	}
	
	, refreshMitarbeiterNameVorname: function(MitarbeiterWebAppID, callback) {
        try {
        	DigiWebApp.Anwesenheitsliste.find({urlParams:{},callbacks: {success: { action: function(records) {
        		try { 
        			_.each(records, function(record) {
        				try { if (record.get("geraeteId") === MitarbeiterWebAppID) DigiWebApp.SettingsController.mitarbeiterNameVorname = record.get("nameVorname");} catch(e6) { console.error(e6); }
        			}); 
        			if (callback) {
        				callback();
        			}
        		} catch(e7) { console.error(e7); }
        	}}, error: { action: function(){}}}});
        } catch(e8) { console.error(e8); }
	}

    , sendConfiguration: function() {
    	//alert("in sendConfiguration");
        var settings = DigiWebApp.Settings.find();    		
    	//alert("typeof(settings)=" + typeof(settings));
    	//var MitarbeiterWebAppID = "0";
    	//try { MitarbeiterWebAppID = settings[0].get("workerId"); } catch(e) { console.error(e); }
    	//alert("typeof(DigiWebApp.RequestController.sendConfiguration)=" + typeof(DigiWebApp.RequestController.sendConfiguration));
        DigiWebApp.RequestController.sendConfiguration({
              settings: settings
            , success: {
                  target: this
                , action: function() {
        			// Konfiguration erfolgreich übertragen
		        	if (DigiWebApp.ApplicationController.profilingIntervalVar === null) {
		            	DigiWebApp.NavigationController.toBookTimePageTransition();
		            	//DigiWebApp.NavigationController.toDashboardPageFlipTransition(YES);
		        	}
//	                // empfange den konfigurierten Mitarbeiternamen
//		    		var recieveObj = {
//		    				  webservice: "mitarbeiter"
//		    				, loaderText: M.I18N.l('BautagebuchLadeMitarbeiter')
//		    				, successCallback: function(data){
//					        		if (data && data.mitarbeiter && data.mitarbeiter.length > 0) {
//				        			DigiWebApp.SettingsController.setSetting("mitarbeiterVorname", data.mitarbeiter[0].vorname);
//				        			DigiWebApp.SettingsController.setSetting("mitarbeiterNachname", data.mitarbeiter[0].nachname);
//				        			DigiWebApp.SettingsController.setSetting("mitarbeiterId", data.mitarbeiter[0].mitarbeiterId);
//				        		} else {
//				        			DigiWebApp.SettingsController.setSetting("mitarbeiterVorname", "");
//				        			DigiWebApp.SettingsController.setSetting("mitarbeiterNachname", "");
//				        			DigiWebApp.SettingsController.setSetting("mitarbeiterId", "0");
//				        		}
//				        	}
//		    				, errorCallback: function(error) {
//		    					console.error(error);
//	    		        	}
//		    				, additionalQueryParameter: "getAll=true&webAppId=" + DigiWebApp.SettingsController.getSetting("workerId")
//		    				//, timeout: 
//		    				, geraeteIdOverride: true
//		    				, modus: '1'
//		    			};
//		        	DigiWebApp.JSONDatenuebertragungController.recieveData(recieveObj);
        		}
            }
            , error: {
                  target: this
                , action: function() {
            		// Konfiguration nicht übertragen
            		//console.log("sendConfiguration failed");
                    //DigiWebApp.ApplicationController.nativeAlertDialogView({
                    //      title: M.I18N.l('sendConfigurationFail')
                    //    , message: M.I18N.l('sendConfigurationFailMsg')
                    //});
                }
            }
        });
    }

    , terminlisteEinstellungen_titel: [{
    	  "label": M.I18N.l('Terminliste')
    	, "items": []
    }]
    		
    , festePauseStornierenEinstellungen_titel: [{
	  	  "label": M.I18N.l('FestePauseStornieren')
	  	, "items": []
    }]

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: StudieChecklisteController
// ==========================================================================
// manuell var-checked
DigiWebApp.StudieChecklisteController = M.Controller.extend({
	
	  listData: null

	, t1: null
	, t2: null

	, comboBoxData: null
			
	, init: function(isFirstLoad) {
        if (isFirstLoad) {
            /* do something here, when page is loaded the first time. */
        }
        
        this.set("listData", [
                              {label: "Test 1", comboBox: [{label: "eintrag 1", value: "1"},{label: "eintrag 2", value: "2"}]}
                              , {label: "Test 2", comboBox: [{label: "eintrag 3", value: "3"},{label: "eintrag 4", value: "4"}]}
                              , {label: "Test 3", comboBox: [{label: "eintrag 5", value: "5"},{label: "eintrag 6", value: "6"}]}
                     	]);	

    }

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: TerminlisteController
// ==========================================================================

DigiWebApp.TerminlisteController = M.Controller.extend({

	  items: null
	  
	, datum: null
	, datumAsDate: null
		
	, init: function(isFirstLoad) {
		var that = DigiWebApp.TerminlisteController;
		if (isFirstLoad) {
			// do something only for the first load
		}
		
		var datumArray = DigiWebApp.TerminlisteController.datum.split(".");
		DigiWebApp.TerminlisteController.set("datumAsDate", datumArray[2] + "-" + datumArray[1] + "-" + datumArray[0]);

		var tabBar = DigiWebApp.TerminlisteVorZurueckTabBar;
		tabBar.setActiveTab(tabBar.tabItemDayToShow);
		
		/* TerminlistePage zurücksetzen */
		var itemsToShow = [];
		
		var ganztaegigeItems = [];
		var ganztaegigeItemsObject = {
				  label: M.I18N.l("ganztaegig")
				, items: ganztaegigeItems
		};
		itemsToShow.push(ganztaegigeItemsObject);

		var nachUhrzeitItems = [];
		var nachUhrzeitItemsObject = {
				  label: M.I18N.l("nachUhrzeit")
				, items: nachUhrzeitItems
		};
		itemsToShow.push(nachUhrzeitItemsObject);
		
		that.set("items", itemsToShow);

		/* erstelle Terminliste */
		itemsToShow = [];
		ganztaegigeItems = [];
		nachUhrzeitItems = [];

		_.each(DigiWebApp.Position.find(), function(pos) {
			
			var tageZuvor = 0;
			var tageDanach = 0;
			var myDate = D8.create(DigiWebApp.TerminlisteController.datum).addDays(0 - tageZuvor);
			
			for (var x=0; x <= tageZuvor + tageDanach; x++) {
				
				var todayStart = D8.create(myDate.format("dd.mm.yyyy"));
				var todayEnd = todayStart.addDays(1).addMilliseconds(-1);
				var todayStr = todayStart.format("dd.mm.yyyy");
				
				// läuft der Auftrag bereits?
				var posBeginnStr = pos.get("positionBegin");
				var posBeginn = null;
				if (posBeginnStr !== "") {
					posBeginn = D8.create(posBeginnStr);
				}
				// Wurde der Auftrag bereits abgeschlossen?
				var posEndeStr = pos.get("positionEnd");
				var posEnde = null;
				if (posEndeStr !== "") {
					posEnde = D8.create(posEndeStr);
				}
	
				var heuteLiegtImAuftragsZeitraum = NO; 
				var mitarbeiterHatHeuteTermine = NO;
				var auftragHatTermine = NO;

				// liegt heute im Zeitraum des Auftrags?
				var posBeginnTimestamp;
				if (posBeginn != null) {
					posBeginnTimestamp = posBeginn.getTimestamp();
				}
				
				var posEndeTimestamp;
				if (posEnde != null) {
					posEndeTimestamp = posEnde.addDays(1).addMilliseconds(-1).getTimestamp();
				}
				
				var todayStartTimestamp = todayStart.getTimestamp();
				var todayEndTimestamp = todayEnd.getTimestamp();
				
				var inAuftragszeitraumOhneEnde = ((posBeginn && (posBeginnTimestamp <= todayStartTimestamp)) && !posEnde)
				var inAuftragszeitraumMitEnde =  ((posBeginn && (posBeginnTimestamp <= todayStartTimestamp)) && (posEnde && (todayEndTimestamp <= posEndeTimestamp)))
				if (inAuftragszeitraumOhneEnde || inAuftragszeitraumMitEnde || !posBeginn) {
					heuteLiegtImAuftragsZeitraum = YES;
				}
				
				// Gibt es Termine?
				var termineList = JSON.parse(pos.get("appointments"));
				auftragHatTermine = (termineList.length !== 0);
				
				// Hat der Mitarbeiter heute (mind.) einen Termin für diesen Auftrag?
				var termineHeute = [];
				if (auftragHatTermine) {
					termineHeute = _.filter(termineList, function(terminStr){
						var termin = JSON.parse(terminStr);
						return D8.create(termin.von).format("dd.mm.yyyy") == todayStr; 
					});
					if ((typeof(terminHeute) !== "undefined")) {
						mitarbeiterHatHeuteTermine = YES;
					}
				}
				
				if (auftragHatTermine) {
					// konkrete Termine
					_.each(termineHeute, function(terminStr) {
						var termin = JSON.parse(terminStr);
						termin.m_id = pos.m_id;
						if (
								   (DigiWebApp.SettingsController.getSetting("terminliste_ignoriereAuftragszeitraum"))
								|| (heuteLiegtImAuftragsZeitraum)
						) {
							if (termin.ganzerTag) {
								addToListIfNotFoundById(ganztaegigeItems, termin, termin.terminId)
							} else {
								addToListIfNotFoundById(nachUhrzeitItems, termin, termin.terminId)
							}
						}
					});
				} else {
					if (
							(!DigiWebApp.SettingsController.getSetting("terminliste_keineKuenstlichenTermine"))
						&&	(    (DigiWebApp.SettingsController.getSetting("terminliste_ignoriereAuftragszeitraum"))
							  || (heuteLiegtImAuftragsZeitraum)
							)
					){
						// künstlicher Termin für diesen Auftrag
						var order = _.find(DigiWebApp.Order.find(), function(o) { return parseInt(o.get("id")) == parseInt(pos.get("orderId"))});
						var orderName = "";
						if (order) {
							orderName = ", " + order.get("name");
						}
						var kuenstlicherTermin = {
								  _createdAt: D8.create().getTimestamp()
								, _updatedAt: D8.create().getTimestamp()
								, beschreibung: null
								, betreff: pos.get("name") + orderName
								, von: todayStr + " 00:00:00"
								, bis: todayStr + " 23:59:59"
								, erinnert: false
								, erinnerung: null
								, erstellerBenutzerId: null
								, ganzerTag: false
								, neueTerminId: null
								, ortId: null
								, positionId: pos.get("id")
								, ressourcen: null
								, serienterminId: null
								, status: null
								, terminId: null
								, terminartId: null
								, timeStampBis: D8.create(todayStr + " 23:59:59").getTimestamp()
								, timeStampErinnerung: null
								, timeStampVon: D8.create(todayStr + " 00:00:00").getTimestamp()
								, zeitstempel: D8.create().getTimestamp()
								, m_id: pos.m_id
						}
						addToListIfNotFoundById(ganztaegigeItems, kuenstlicherTermin, kuenstlicherTermin.terminId);
					}
				}
				
			}
		});
		
		//if (ganztaegigeItems.length > 0) {
			ganztaegigeItems = _.sortBy(ganztaegigeItems, function(el){
				return D8.create(el.timeStampVon).getTimestamp();
			});
			ganztaegigeItemsObject = {
					  label: M.I18N.l("ganztaegig")
					, items: ganztaegigeItems
			};
			itemsToShow.push(ganztaegigeItemsObject);
		//}
		
		//if (nachUhrzeitItems.length > 0) {
			nachUhrzeitItems = _.sortBy(nachUhrzeitItems, function(el){
				return D8.create(el.timeStampVon).getTimestamp();
			});
			nachUhrzeitItemsObject = {
					  label: M.I18N.l("nachUhrzeit")
					, items: nachUhrzeitItems
			};
			itemsToShow.push(nachUhrzeitItemsObject);
		//}
		
		that.set("items", itemsToShow);
	}

});

//// ==========================================================================
//// The M-Project - Mobile HTML5 Application Framework
//// Generated with: Espresso 
////
//// Project: DigiWebApp
//// Controller: WipeController
//// ==========================================================================
//
//DigiWebApp.WipeController = M.Controller.extend({
//
//      wipeStartX: 0
//    , wipeStartY: 0
//    , wipeStopX: 0
//    , wipeStopY: 0
//    , wipeIsMoving: false
//    , wipeIsPressed: false
//    , wipeIsPressedStart: 0
//    , wipeIsPressedStop: 0
//    , wipeDecideX: 150
//    , wipeDecideY: 300
//    , wipeDecideTimeout: 200
//	
//	, wipeActionUp: function() {
//	}
//	
//	, wipeActionDown: function() {
//		if (
//				( M.ViewManager.currentPage.id !== DigiWebApp.TimeDataPage.id )
//			 && ( M.ViewManager.currentPage.id !== DigiWebApp.EditTimeDataPage.id )
//			 &&	( M.ViewManager.currentPage.id !== DigiWebApp.SettingsPage.id )
//			 &&	( M.ViewManager.currentPage.id !== DigiWebApp.CameraPage.id )
//			 &&	( M.ViewManager.currentPage.id !== DigiWebApp.EditPicturePage.id )
//			 &&	( M.ViewManager.currentPage.id !== DigiWebApp.MediaListPage.id )
//		){
//			try {
//				if ( (typeof(M.ViewManager.currentPage.header) !== "undefined") && (M.ViewManager.currentPage.header !== null) ) { 
//	  				if ( (typeof(M.ViewManager.currentPage.header.backButton) !== "undefined") && (M.ViewManager.currentPage.header.backButton !== null)) { 
//	  					if ( (typeof(M.ViewManager.currentPage.header.backButton.events) !== "undefined") && (M.ViewManager.currentPage.header.backButton.events !== null)) { 
//	  						if ( (typeof(M.ViewManager.currentPage.header.backButton.events.tap) !== "undefined") && (M.ViewManager.currentPage.header.backButton.events.tap !== null) ) {
//								if (typeof(M.ViewManager.currentPage.header.backButton.events.tap.action) === "function") {
//									M.ViewManager.currentPage.header.backButton.events.tap.action();					
//								} else {
//									M.ViewManager.currentPage.header.backButton.events.tap.target.get(M.ViewManager.currentPage.header.backButton.events.tap.action)();
//								}
//				}}}}
//			} catch(e) { console.log(e); }
//		}
//    }
//    
//	, wipeActionLeft: function() {
//			if ( M.ViewManager.currentPage.id === DigiWebApp.BookingPage.id ) {
//  				DigiWebApp.NavigationController.toDashboardPageFlipTransition();
//  			} else if ( M.ViewManager.currentPage.id === DigiWebApp.DashboardPage.id ){
//	  			DigiWebApp.NavigationController.backToBookTimePageFlipTransition();		  				
//  			} else {
//  				//console.log("else left");
//  			}
//    }
//    
//	, wipeActionRight: function() {
//		if ( M.ViewManager.currentPage.id === DigiWebApp.DashboardPage.id ) {
//			DigiWebApp.NavigationController.toBookTimePageFlipTransition();
//		} else if ( M.ViewManager.currentPage.id === DigiWebApp.BookingPage.id ){
//			DigiWebApp.NavigationController.backToDashboardPageFlipTransition();
//		} else {
//			//console.log("else right");
//			if (
//					( M.ViewManager.currentPage.id !== DigiWebApp.EditTimeDataPage.id )
//				 &&	( M.ViewManager.currentPage.id !== DigiWebApp.CameraPage.id )
//			){
//				try {
//					if ( (typeof(M.ViewManager.currentPage.header) !== "undefined") && (M.ViewManager.currentPage.header !== null) ) { 
//		  				if ( (typeof(M.ViewManager.currentPage.header.backButton) !== "undefined") && (M.ViewManager.currentPage.header.backButton !== null)) { 
//		  					if ( (typeof(M.ViewManager.currentPage.header.backButton.events) !== "undefined") && (M.ViewManager.currentPage.header.backButton.events !== null)) { 
//		  						if ( (typeof(M.ViewManager.currentPage.header.backButton.events.tap) !== "undefined") && (M.ViewManager.currentPage.header.backButton.events.tap !== null) ) {
//									if (typeof(M.ViewManager.currentPage.header.backButton.events.tap.action) === "function") {
//										M.ViewManager.currentPage.header.backButton.events.tap.action();					
//									} else {
//										M.ViewManager.currentPage.header.backButton.events.tap.target.get(M.ViewManager.currentPage.header.backButton.events.tap.action)();
//									}
//		  			}}}}
//				} catch(e) { console.log(e); }
//			}
//		}
//	}
//
//	, stopDefault: function(evt) {
//	    if ( navigator.userAgent.match(/Android/i) ) {
//	    	//evt.originalEvent.preventDefault();
//	    } else {
//		    if (evt && evt.preventDefault) {
//		        evt.preventDefault();
//		    }
//		    if (window.event && window.event.returnValue) {
//		        window.event.returnValue = false;
//		    }
//	    }
//	}
//	
//	, wipeDoStop: function(ev) {
//		var dx = DigiWebApp.WipeController.wipeStartX - DigiWebApp.WipeController.wipeStopX;
//		var dy = DigiWebApp.WipeController.wipeStartY - DigiWebApp.WipeController.wipeStopY;
//		var timeStart = DigiWebApp.WipeController.wipeIsPressedStart;
//		var timeStop  = DigiWebApp.WipeController.wipeIsPressedStop;
//		var dTime = timeStart - timeStop;
//		try { /*console.log("unbinding " + ev.type);*/ $(this).unbind(ev); } catch (e) { console.log("error while unbind"); }
//		_.each(DigiWebApp.app.pages, function(myPage) {
//			try { $('#' + myPage.id).unbind('touchmove', DigiWebApp.WipeController.wipeOnTouchMove); } catch (e) { console.log("error while unbind touchmove"); };
//			try { $('#' + myPage.id).unbind('mousemove', DigiWebApp.WipeController.wipeOnTouchMove); } catch (e) { console.log("error while unbind mousemove"); };
//			try { $('#' + myPage.id).unbind('touchmove'); } catch (e) { console.log("error while unbind touchmove"); };
//			try { $('#' + myPage.id).unbind('mousemove'); } catch (e) { console.log("error while unbind mousemove"); };
//			try { $('#' + myPage.id).unbind('touchstop', DigiWebApp.WipeController.wipeOnMoveStop); } catch (e) { console.log("error while unbind touchstop"); };
//			try { $('#' + myPage.id).unbind('mouseup',   DigiWebApp.WipeController.wipeOnMoveStop); } catch (e) { console.log("error while unbind mouseup"); };
//			try { $('#' + myPage.id).unbind('touchstop'); } catch (e) { console.log("error while unbind touchstop"); };
//			try { $('#' + myPage.id).unbind('mouseup');   } catch (e) { console.log("error while unbind mouseup"); };
//		});
//		var dxIsLongEnough = (Math.abs(dx) >= DigiWebApp.WipeController.wipeDecideX);
//		var dyIsLongEnough = (Math.abs(dy) >= DigiWebApp.WipeController.wipeDecideY);
//		var wipeBelowTimeout = (dTime < DigiWebApp.WipeController.wipeDecideTimeout);
//		var noInitialStopX = (DigiWebApp.WipeController.wipeStopX > 0);
//		var noInitialStopY = (DigiWebApp.WipeController.wipeStopY > 0);
//		//console.log("dxIsLongEnough: " + dxIsLongEnough);
//		//console.log("dyIsLongEnough: " + dyIsLongEnough);
//		//console.log("wipeBelowTimeout: " + wipeBelowTimeout);
//		//console.log("noInitialStopX: " + noInitialStopX);
//		//console.log("noInitialStopY: " + noInitialStopY);
//		if (DigiWebApp.WipeController.wipeIsMoving) {
//			if (wipeBelowTimeout) {
//				if ((dxIsLongEnough || dyIsLongEnough) 
//				&& (noInitialStopX && noInitialStopY)
//				){
//					if (dxIsLongEnough) {
//						if(dx > 0) {
//							console.log("wipe left");
//							//console.log(((DigiWebApp.WipeController.wipeStopX > 0) && (DigiWebApp.WipeController.wipeStopY > 0)));
//							//console.log("dx=" + dx + ", dy=" + dy + ", " + DigiWebApp.WipeController.wipeStopX + ", " + DigiWebApp.WipeController.wipeStopY);
//				  			DigiWebApp.WipeController.wipeActionLeft();
//						} else {
//							console.log("wipe right");
//				  			DigiWebApp.WipeController.wipeActionRight();
//						}
//					}
//					if (dyIsLongEnough) {
//						if(dy > 0) {
//				  			console.log("wipe up");
//		    				DigiWebApp.WipeController.wipeActionUp();
//		    			} else {
//				  			console.log("wipe down");
//		    				DigiWebApp.WipeController.wipeActionDown();
//		    			}
//					}
//					DigiWebApp.WipeController.stopDefault(ev);
//					return false;
//				} else {
//					//console.log("wipe too short");				
//				}
//			} else {
//				//console.log("scroll");
//			}
//		}
//		//console.log("reset touchstats");
//		DigiWebApp.WipeController.wipeIsPressed = false;
//		DigiWebApp.WipeController.wipeIsPressedStop = 0;
//		DigiWebApp.WipeController.wipeIsPressedStart = 0;
//		DigiWebApp.WipeController.wipeStartX = 0;
//		DigiWebApp.WipeController.wipeStartY = 0;
//		DigiWebApp.WipeController.wipeStopX = 0;
//		DigiWebApp.WipeController.wipeStopY = 0;
//		DigiWebApp.WipeController.wipeIsMoving = false;
//    }
//    
//    , wipeOnMoveStop: function(ev) {
//		/*
//    	var dx = DigiWebApp.WipeController.wipeStartX - DigiWebApp.WipeController.wipeStopX;
//		var dy = DigiWebApp.WipeController.wipeStartY - DigiWebApp.WipeController.wipeStopY;
//		var timeStart = DigiWebApp.WipeController.wipeIsPressedStart;
//		var timeStop  = DigiWebApp.WipeController.wipeIsPressedStop;
//		var dTime = timeStart - timeStop;
//    	console.log("wipeOnMoveStop: " + DigiWebApp.WipeController.wipeIsMoving + " (" + dx + ", " + dy + ") " + dTime);
//    	*/
//		try { /*console.log("unbinding " + ev.type);*/ $(this).unbind(ev); } catch (e) { console.log("error while unbind"); }
//		DigiWebApp.WipeController.wipeDoStop(ev);
//	}
//	
//	, wipeOnTouchStart: function(ev) {
//		
//	}
//	
//	, touchMoveEventSaved: null
//	, touchStartEventSaved: null
//	
//	, wipeOnTouchMove: function(ev) {
//		DigiWebApp.WipeController.touchMoveEventSaved = ev;
//		//try {
//			var x = 0;
//			var y = 0;
//	        if (typeof(ev.touches) !== "undefined") {
//	        	//console.log("touchmove: using ev.touches[0].page...");
//			  	x = ev.touches[0].pageX;
//			  	y = ev.touches[0].pageY;
//	        } else if ( typeof(ev.originalEvent.touches) !== "undefined" ) {
//	        	//console.log("touchmove: using ev.originalEvent.touches[0].page...");
//			  	x = ev.originalEvent.touches[0].pageX;
//			  	y = ev.originalEvent.touches[0].pageY;
//	        } else if ( typeof(ev.originalEvent) !== "undefined" ) {
//	        	//console.log("touchmove: using ev.originalEvent.page...");
//			  	x = ev.originalEvent.pageX;
//			  	y = ev.originalEvent.pageY;
//	        } else {
//	        	//console.log("touchmove: using ev.page...");
//	        	x = ev.pageX;
//	        	y = ev.pageY;
//	        }
//	        var xMoveSinceLastEvent = Math.abs(Math.abs(DigiWebApp.WipeController.wipeStopX) - x); 
//	        var yMoveSinceLastEvent = Math.abs(Math.abs(DigiWebApp.WipeController.wipeStopY) - y);
//	        var enoughMovement = ((xMoveSinceLastEvent < 200) && (yMoveSinceLastEvent < 200));
//	        /*
//	        console.log("xMoveSinceLastEvent=" + xMoveSinceLastEvent);
//	        console.log("yMoveSinceLastEvent=" + yMoveSinceLastEvent);
//	        console.log("DigiWebApp.WipeController.wipeStartX: " + DigiWebApp.WipeController.wipeStartX);
//	        console.log("DigiWebApp.WipeController.wipeStartY: " + DigiWebApp.WipeController.wipeStartY);
//	        console.log("DigiWebApp.WipeController.wipeStopX: " + DigiWebApp.WipeController.wipeStopX);
//	        console.log("DigiWebApp.WipeController.wipeStopY: " + DigiWebApp.WipeController.wipeStopY);
//	        console.log("enoughMovement=" + enoughMovement);
//	        */
//	        if ((enoughMovement && (x > 0) && (y > 0)) 
//	        || ((DigiWebApp.WipeController.wipeStopX === 0) && (DigiWebApp.WipeController.wipeStopY === 0))
//	        ) {
//		        DigiWebApp.WipeController.wipeStopX = x;
//		        DigiWebApp.WipeController.wipeStopY = y;
//		        DigiWebApp.WipeController.wipeIsPressedStop = (+new Date()).toString();
//				var dx = DigiWebApp.WipeController.wipeStartX - x;
//			  	var dy = DigiWebApp.WipeController.wipeStartY - y;
//		        var timeStart = DigiWebApp.WipeController.wipeIsPressedStart;
//				var timeStop  = DigiWebApp.WipeController.wipeIsPressedStop;
//				var dTime = timeStart - timeStop;
//			  	if ( (Math.abs(dx) > 10) || (Math.abs(dy) > 10)) {
//			  		DigiWebApp.WipeController.wipeIsMoving = true;
//			  	} else {
//			  		DigiWebApp.WipeController.wipeIsMoving = false;
//			  	}
//				var dxIsLongEnough = (Math.abs(dx) >= DigiWebApp.WipeController.wipeDecideX);
//				var dyIsLongEnough = (Math.abs(dy) >= DigiWebApp.WipeController.wipeDecideY);
//				var wipeTimeout = (dTime >= DigiWebApp.WipeController.wipeDecideTimeout);
//				//console.log("dx: " + dx);
//				//console.log("dy: " + dy);
//				//console.log("dxIsLongEnough: " + dxIsLongEnough);
//				//console.log("dyIsLongEnough: " + dyIsLongEnough);
//				//console.log("wipeTimeout: " + wipeTimeout);
//				if (( dxIsLongEnough || dyIsLongEnough || wipeTimeout) && (DigiWebApp.WipeController.wipeIsMoving)) {
//			    	//console.log("stopping wipe: " + DigiWebApp.WipeController.wipeIsMoving + " (" + dx + ", " + dy + ") " + dTime);
//					try { /*console.log("unbinding " + ev.type);*/ $(this).unbind(ev); } catch (e) { console.log("error while unbind"); }
//			  		if (typeof(device) !== "undefined") {
//			  			if ( 
//			  					( device.version.substr(0,1) >= 4 ) && ( device.platform.substr(0,7) >= "Android" ) && (DigiWebApp.SettingsController.globalDebugMode) )
//			  			{
//			  				DigiWebApp.WipeController.stopDefault(ev);
//			  			}
//			  		}
//					DigiWebApp.WipeController.wipeDoStop(ev);
//				};
//				//return false;
//	        } else {
//	        	console.log("blocked wipe");
//	        	//console.log("x=" + x + ", y=" + y + " " + DigiWebApp.WipeController.wipeStartX + ", " + DigiWebApp.WipeController.wipeStartY + " " + DigiWebApp.WipeController.wipeStopX + ", " + DigiWebApp.WipeController.wipeStopY);
//	    		DigiWebApp.WipeController.wipeIsPressed = false;
//	    		DigiWebApp.WipeController.wipeIsPressedStop = 0;
//	    		DigiWebApp.WipeController.wipeIsPressedStart = 0;
//	    		DigiWebApp.WipeController.wipeStartX = 0;
//	    		DigiWebApp.WipeController.wipeStartY = 0;
//	    		DigiWebApp.WipeController.wipeStopX = 0;
//	    		DigiWebApp.WipeController.wipeStopY = 0;
//	    		DigiWebApp.WipeController.wipeIsMoving = false;
//	        	try { /*console.log("unbinding " + ev.type);*/ $(this).unbind(ev); } catch (e) { console.log("error while unbind"); }
//	        	DigiWebApp.WipeController.wipeDoStop(ev);
//	        }
//		//} catch (e) { console.log(e); }
//	}
//	
//	, regTouchStart: function(pageid,ev) {
//		DigiWebApp.WipeController.wipeIsPressed = false;
//		DigiWebApp.WipeController.wipeIsPressedStop = 0;
//		DigiWebApp.WipeController.wipeIsPressedStart = 0;
//		DigiWebApp.WipeController.wipeStartX = 0;
//		DigiWebApp.WipeController.wipeStartY = 0;
//		DigiWebApp.WipeController.wipeStopX = 0;
//		DigiWebApp.WipeController.wipeStopY = 0;
//		DigiWebApp.WipeController.wipeIsMoving = false;
//		DigiWebApp.WipeController.touchStartEventSaved = ev;
//		if( navigator.userAgent.match(/Android/i) ) {
//			//console.log("preventing touchstarts default");
//			//ev.preventDefault();
//		}
//        if (typeof(ev.touches) !== "undefined") {
//        	//console.log("touchstart: using ev.touches[0]");
//    		DigiWebApp.WipeController.wipeStartX = ev.touches[0].pageX;
//    		DigiWebApp.WipeController.wipeStartY = ev.touches[0].pageY;
//        } else if ( typeof(ev.originalEvent.touches) !== "undefined" ) {
//        	//console.log("touchstart: using ev.originalEvent.touches[0].page...");
//        	DigiWebApp.WipeController.wipeStartX = ev.originalEvent.touches[0].pageX;
//        	DigiWebApp.WipeController.wipeStartY = ev.originalEvent.touches[0].pageY;
//        } else {
//        	//console.log("touchstart: using ev.page...");
//        	DigiWebApp.WipeController.wipeStartX = ev.pageX;
//        	DigiWebApp.WipeController.wipeStartY = ev.pageY;
//        }
//        //console.log("DigiWebApp.WipeController.wipeStartX: " + DigiWebApp.WipeController.wipeStartX);
//        //console.log("DigiWebApp.WipeController.wipeStartY: " + DigiWebApp.WipeController.wipeStartY);
//		DigiWebApp.WipeController.wipeIsMoving = false;
//		DigiWebApp.WipeController.wipeIsPressed = true;
//		DigiWebApp.WipeController.wipeIsPressedStart = (+new Date()).toString();
//		DigiWebApp.WipeController.wipeIsPressedStop = null;
//		var eventType = ev.type.substr(0,5);
//		//alert(eventType);
//		//console.log("binding " + eventType + "move for pageid " + pageid);
//    	var myPlatform = M.Environment.getPlatform();
//
//    	var deviceversion = "0";
//    	if (typeof(device) !== "undefined") deviceversion = new String(device.version);
//
//    	var deviceplatform = "";
//    	if (typeof(device) !== "undefined") deviceplatform = new String(device.platform);
//    	
//
//        if (       ( myPlatform.substr(-2)  === "86" )
//        		|| ( myPlatform.substr(-5)  === "Win32" )
//        		|| ( myPlatform.substr(-5)  === "Win64" )
//        		|| ( myPlatform.substr(0,3) === "Mac" )
//        		|| ( myPlatform.substr(0,2) === "iP")
//        		|| (DigiWebApp.SettingsController.globalDebugMode)
//        		|| ( ( deviceversion.substr(0,1) >= 4 ) && ( deviceplatform.substr(0,7) >= "Android" ) && (DigiWebApp.SettingsController.globalDebugMode) )
//        	) {
//    		try { $('#' + pageid).bind(eventType + 'move', DigiWebApp.WipeController.wipeOnTouchMove); } catch (e) { console.log("error while binding " + eventType + "move for " + pageid);}
//    		if (eventType === "touch") {
//    			//console.log("binding touchstop for pageid " + pageid);
//    			try { $('#' + pageid).bind('touchstop', DigiWebApp.WipeController.wipeOnMoveStop); } catch (e) { console.log("error while binding touchstop for " + pageid);};
//    		} else if (eventType === "mouse") {
//    			//console.log("binding mouseup for pageid " + pageid);
//    			try { $('#' + pageid).bind('mouseup', DigiWebApp.WipeController.wipeOnMoveStop); } catch (e) { console.log("error while binding mouseup for " + pageid);};
//    		} else {
//    			console.log("unknown eventtype: " + ev.type);
//    		}
//        } else {
//        	if (DigiWebApp.SettingsController.globalDebugMode) console.log("skipping touchmove");
//        }
//	}
//	
//});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// Controller: ZeitbuchungenController
// ==========================================================================

DigiWebApp.ZeitbuchungenController = M.Controller.extend({

	  items: null
	 
	, itemForDetails: null
		
	, datum: null
	
	, mitarbeiterID: null
	
	, mitarbeiterNameVorname: null
	
	, init: function(isFirstLoad) {
		DigiWebApp.VorZurueckTabBar.setActiveTab(DigiWebApp.VorZurueckTabBar.tabItemDayToShow);
		var that = DigiWebApp.ZeitbuchungenController;
		if(that.items === null) {
			DigiWebApp.RequestController.getDatabaseServer(DigiWebApp.ZeitbuchungenController.initWithServer, isFirstLoad);
		} else {
			DigiWebApp.ZeitbuchungenController.initWithServer(isFirstLoad);
		}
	}

    , initWithServer: function(isFirstLoad) {
		var that = DigiWebApp.ZeitbuchungenController;
		if(that.items === null) {
			//console.log("Zeitbuchungen: showing Loader");		
			DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('ZeitbuchungenLaden'));

			//console.log("Zeitbuchungen: find --> request");		
			DigiWebApp.Zeitbuchungen.find({
	              urlParams: {
					  datum: DigiWebApp.ZeitbuchungenController.datum
					, mitarbeiterID: DigiWebApp.ZeitbuchungenController.mitarbeiterID
				}
	            , callbacks: {
	                  success: {
	                    action: function(records) {
							//console.log(records);
	            			DigiWebApp.ApplicationController.DigiLoaderView.hide();
	            			try {
		                        if ((!records) || (records && records.length === 0) || (records && records.length === 1 && (typeof(records[0].get('mitarbeiterId')) === "undefined" || records[0].get('mitarbeiterId') == null))) {
		                        	DigiWebApp.ZeitbuchungenController.set('items', []);
		                        } else {
		                        	DigiWebApp.ZeitbuchungenController.set('items', records);
		                        }
	            			} catch(e2) {
	            		        DigiWebApp.ApplicationController.nativeAlertDialogView({
	            		              title: M.I18N.l('error')
	            		            , message: M.I18N.l('ZeitbuchungenKonntenNichtGeladenWerden')
	            		            , callbacks: {
	            		                confirm: {
	            		                    target: this,
	            		                    action: function () {
	            		        				DigiWebApp.NavigationController.backToAnwesenheitslistePageTransition();
	            		                    }
	            		                }
	            		            }
	            		        });
	            			}
	                    }
	                }
	                , error: {
	                    action: function(request, error) {
	        				DigiWebApp.ApplicationController.DigiLoaderView.hide();
	                		//console.log("Zeitbuchungen: error request failed");		
	        		        DigiWebApp.ApplicationController.nativeAlertDialogView({
	        		              title: M.I18N.l('error')
	        		            , message: M.I18N.l('ZeitbuchungenKonntenNichtGeladenWerden')
	        		            , callbacks: {
	        		                confirm: {
	        		                      target: this
	        		                    , action: function () {
		        							DigiWebApp.NavigationController.backToAnwesenheitslistePageTransition();
	        		                    }
	        		                }
	        		            }
	        		        });
	                    }
	                }
	            }
	        });    	
        }

		if (DigiWebApp.ZeitbuchungenController.mitarbeiterNameVorname !== null) { 
			//DigiWebApp.ZeitbuchungenPage.header.title.set("value", M.I18N.l('Zeitbuchungen') + ": " + DigiWebApp.ZeitbuchungenController.mitarbeiterNameVorname);
			var wochentag = "";
			try {
				wochentag = M.I18N.l(D8.create(DigiWebApp.ZeitbuchungenController.datum).format("dddd")).substring(0,2) + ', ';
			} catch(e2) {
				wochentag = "";
			}
			DigiWebApp.ZeitbuchungenPage.header.title.set("value", DigiWebApp.ZeitbuchungenController.mitarbeiterNameVorname + '<br />' + wochentag + DigiWebApp.ZeitbuchungenController.datum);
			DigiWebApp.ZeitbuchungenPage.header.title.renderUpdate();
		}
		
    }

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: AnwesenheitslisteTemplateView
// ==========================================================================

DigiWebApp.AnwesenheitslisteTemplateView = M.ListItemView.design({

      isSelectable: YES

    , childViews: 'farbeAnwesenheit nameVorname spacer1 datumLabel datum uhrzeit spacer2 fehlzeitBezeichnung auftragsBezeichnung positionsBezeichnung handauftragsBezeichnung taetigkeit gpsBreite gpsLaenge spacer3 gpsBreitePosition gpsLaengePosition'

    , events: {
        tap: {
			action: function(id, m_id) {
			    var view = M.ViewManager.getViewById(id);
			    var mitarbeiter_modelId = view.modelId;
			    var doShow = NO;
			    _.each(DigiWebApp.AnwesenheitslisteController.items, function(AnwesenheitslisteItem) {
					if (AnwesenheitslisteItem.m_id === mitarbeiter_modelId) {
						if (AnwesenheitslisteItem.get("datum") !== "-") {
							DigiWebApp.ZeitbuchungenController.set('datum', AnwesenheitslisteItem.get("datum"));
							DigiWebApp.ZeitbuchungenController.set('mitarbeiterID', AnwesenheitslisteItem.get("mitarbeiterId"));
							DigiWebApp.ZeitbuchungenController.set('mitarbeiterNameVorname', AnwesenheitslisteItem.get("nameVorname"));
							doShow = YES;
						}
					}
				});
				if (doShow === YES) DigiWebApp.NavigationController.toZeitbuchungenPageTransition();
			}
        }
    }

	, spacer1: M.LabelView.design({
	      cssClass: 'unselectable marginBottom12'
	    , value: ' '
	})
	
	, spacer2: M.LabelView.design({
	      cssClass: 'unselectable marginBottom12'
	    , value: ' '
	})
	, spacer3: M.LabelView.design({
	      cssClass: 'unselectable'
	    , value: ' '
	})


//"datumLabel": "...",
, datumLabel: M.LabelView.design({
    cssClass: 'normal unselectable'
  , isInline: YES
  , computedValue: {
        valuePattern: '<%= datumLabel %>'
      , operation: function(v) {
				return v;
          }
  }
})

, datum: M.LabelView.design({
    cssClass: 'normal unselectable'
  , isInline: YES
  , computedValue: {
        valuePattern: '<%= datum %>'
      , operation: function(v) {
			if (v !== "-") {
				return v;
			} else {
				return "";
			}
          }
  }
})
//"farbeAmpel": "",
, farbeAmpel: M.LabelView.design({
    cssClass: 'unselectable'
  , computedValue: {
        valuePattern: '<%= farbeAmpel %>'
      , operation: function(v) {
              return v;
          }
  }
})
//"farbeAnwesenheit": "#00FF00",
, farbeAnwesenheit: M.LabelView.design({
    cssClass: 'unselectable'
  , isInline: YES
  , computedValue: {
        valuePattern: '<%= farbeAnwesenheit %>'
      , operation: function(v) {
    			//return '<span style="-moz-border-radius: 3em 0em;-webkit-border-radius: 24px 0;border-radius: 24px 0;box-shadow: 2px 2px 6px rgba(0,0,0,0.6);background:' + v + ';color:' + v + '">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;';
    			return '<span style="box-shadow: 2px 2px 6px rgba(0,0,0,0.6);background:' + v + ';color:' + v + ';margin-right: 5px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;';
          }
  }
})
//"fehlzeitBezeichnung": "",
, fehlzeitBezeichnung: M.LabelView.design({
    cssClass: 'normal unselectable'
  , computedValue: {
        valuePattern: '<%= fehlzeitBezeichnung %>'
      , operation: function(v) {
			if (v !== "" && typeof(v) !== "undefined" && v !== "undefined" && v !== "-" && v !== "null" && v !== null) {
				return M.I18N.l('fehlzeit') + ': ' + v;
			} else {
				return '';
			}
          }
  }
})
//	  gpsBreite: "0.0"
, gpsBreite: M.LabelView.design({
    cssClass: 'normal unselectable'
  , isInline: YES
  , computedValue: {
        valuePattern: '<%= gpsBreite %>'
      , operation: function(v) {
		        if (v != "0.0" && v !== "null" && v !== null) { 
		        	var str = new Number(v);
		       		return M.I18N.l('buchungskoordinaten') + ': ' + str.toFixed(4);
		        } else {
		            return '';
		        }
          }
  }
})
//	  gpsBreitePosition: "0.0"
, gpsBreitePosition: M.LabelView.design({
    cssClass: 'normal unselectable'
  , isInline: YES
  , computedValue: {
        valuePattern: '<%= gpsBreitePosition %>'
      , operation: function(v) {
	        if (v != "0.0" && v !== "null" && v !== null) { 
	        	var str = new Number(v);
	       		return M.I18N.l('auftragskoordinaten') + ': ' + str.toFixed(4);
	        } else {
	            return '';
	        }
          }
  }
})
//	  gpsLaenge: "0.0"
, gpsLaenge: M.LabelView.design({
    cssClass: 'normal unselectable'
  , isInline: YES
  , computedValue: {
        valuePattern: '<%= gpsLaenge %>'
      , operation: function(v) {
	        if (v != "0.0" && v !== "null" && v !== null) { 
	        	var str = new Number(v);
	       		return ', ' + str.toFixed(4);
	        } else {
	            return '';
	        }
          }
  }
})
//	  gpsLaengePosition: "0.0"
, gpsLaengePosition: M.LabelView.design({
    cssClass: 'normal unselectable'
  , isInline: YES
  , computedValue: {
        valuePattern: '<%= gpsLaengePosition %>'
      , operation: function(v) {
		        if (v != "0.0" && v !== "null" && v !== null) { 
		        	var str = new Number(v);
		       		return ', ' + str.toFixed(4);
		        } else {
		            return '';
		        }
          }
  }
})

//"handauftragsBezeichnung": "",
, handauftragsBezeichnung: M.LabelView.design({
    cssClass: 'normal unselectable'
  , computedValue: {
        valuePattern: '<%= handauftragsBezeichnung %>'
      , operation: function(v) {
			if (v !== "" && typeof(v) !== "undefined" && v !== "undefined" && v !== "-" && v !== "null" && v !== null) {
				return M.I18N.l('handApplications') + ': ' + v;
			} else {
				return '';
			}
          }
  }
})
//"handauftragsId": "",
, handauftragsId: M.LabelView.design({
    cssClass: 'unselectable'
  , computedValue: {
        valuePattern: '<%= handauftragsId %>'
      , operation: function(v) {
              return v;
          }
  }
})
//"mitarbeiterId": "29",
, mitarbeiterId: M.LabelView.design({
    cssClass: 'unselectable'
  , computedValue: {
        valuePattern: '<%= mitarbeiterId %>'
      , operation: function(v) {
              return v;
          }
  }
})
//"name": "Maier",
, name: M.LabelView.design({
    cssClass: 'bold unselectable'
  , computedValue: {
        valuePattern: '<%= name %>'
      , operation: function(v) {
              return v;
          }
  }
})
//"nameVorname": "Maier, Peter",
, nameVorname: M.LabelView.design({
    cssClass: 'bold unselectable'
  , isInline: YES
  , computedValue: {
        valuePattern: '<%= nameVorname %>'
      , operation: function(v) {
              return v;
          }
  }
})

//"auftragsBezeichnung": "1446DEKRA",
, auftragsBezeichnung: M.LabelView.design({
	  cssClass: 'normal unselectable'
	, computedValue: {
	      valuePattern: '<%= auftragsBezeichnung %>'
	    , operation: function(v) {
				if (v !== "" && typeof(v) !== "undefined" && v !== "undefined" && v !== "-" && v !== "null" && v !== null) {
					return M.I18N.l('order') + ': ' + v;
				} else {
					return '';
				}
	        }
	}
})

//"positionsBezeichnung": "1446DEKRA",
, positionsBezeichnung: M.LabelView.design({
    cssClass: 'normal unselectable'
  , computedValue: {
        valuePattern: '<%= positionsBezeichnung %>'
      , operation: function(v) {
			if (v !== "" && typeof(v) !== "undefined" && v !== "undefined" && v !== "-" && v !== "null" && v !== null) {
				return M.I18N.l('position') + ': ' + v;
			} else {
				return '';
			}
          }
  }
})
//"positionsId": "1929",
, positionsId: M.LabelView.design({
    cssClass: 'unselectable'
  , computedValue: {
        valuePattern: '<%= positionsId %>'
      , operation: function(v) {
              return v;
          }
  }
})
//"taetigkeit": "05Stromversorger",
, taetigkeit: M.LabelView.design({
    cssClass: 'normal unselectable'
  , computedValue: {
        valuePattern: '<%= taetigkeit %>'
      , operation: function(v) {
			if (v !== "" && typeof(v) !== "undefined" && v !== "undefined" && v !== "-" && v !== "null" && v !== null) {
				return M.I18N.l('activity') + ': ' + v;
			} else {
				return '';
			}
          }
  }
})
//"taetigkeitsId": "89",
, taetigkeitsId: M.LabelView.design({
    cssClass: 'unselectable'
  , computedValue: {
        valuePattern: '<%= taetigkeitsId %>'
      , operation: function(v) {
              return v;
          }
  }
})
//"taetigkeitsart": "0",
, taetigkeitsart: M.LabelView.design({
    cssClass: 'unselectable'
  , computedValue: {
        valuePattern: '<%= taetigkeitsart %>'
      , operation: function(v) {
              return v;
          }
  }
})
//"uhrzeit": "27-08-2012 11:50:52",
, uhrzeit: M.LabelView.design({
    cssClass: 'normal unselectable'
  , isInline: YES
  , computedValue: {
        valuePattern: '<%= uhrzeit %>'
      , operation: function(v) {
			if (v !== "" && typeof(v) !== "undefined" && v !== "undefined" && v !== "-" && v !== "null" && v !== null) {
		        return ' ' + v;
			} else {
				return "";
			}
          }
  }
})
//"vorname": "Peter"
, vorname: M.LabelView.design({
    cssClass: 'bold unselectable'
  , computedValue: {
        valuePattern: '<%= vorname %>'
      , operation: function(v) {
              return v;
          }
  }
})
    
});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: AnwesenheitslistePage
// ==========================================================================

m_require('app/views/AnwesenheitslisteTemplateView');

DigiWebApp.AnwesenheitslistePage = M.PageView.design({

    events: {
		pageshow: {
              target: DigiWebApp.AnwesenheitslisteController
            , action: 'init'
        }
    }

    , childViews: 'header content'

    , cssClass: 'anwesenheitslistePage unselectable'

    , header: M.ToolbarView.design({
        childViews: 'backButton title refreshButton'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} this.backToDashboardPage();}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('Anwesenheitsliste')
            , anchorLocation: M.CENTER
        })
        , refreshButton: M.ButtonView.design({
              value: M.I18N.l('refresh')
            , icon: 'refresh'
            , anchorLocation: M.RIGHT
            , events: {
                tap: {
        			action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e4){}
			    		DigiWebApp.AnwesenheitslisteController.set('items', {});
			    		DigiWebApp.AnwesenheitslisteController.items = null;
						DigiWebApp.AnwesenheitslisteController.init();
					}
                }
            }
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
          childViews: 'list'
        , list: M.ListView.design({
              contentBinding: {
                  target: DigiWebApp.AnwesenheitslisteController
                , property: 'items'
            }
            , listItemTemplateView: DigiWebApp.AnwesenheitslisteTemplateView
        })
    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: AudioPage
// ==========================================================================

DigiWebApp.AudioPage = M.PageView.design({

    /* Use the 'events' property to bind events like 'pageshow' */
    events: {
		pagebeforeshow: {
              target: DigiWebApp.AudioController
            , action: 'init'
        }
    }

    , childViews: 'header content'

    , cssClass: 'audioPage'

    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: 'backToMediaListPageTransition'
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('settings')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({

          childViews: 'audioIcon grid'
        
        , audioIcon: M.ImageView.design({
    		  value: 'theme/images/icon_record.png'
    		, cssClass: 'audioIcon'
        	, events: {
        		tap: {
        			  target: DigiWebApp.AudioController
					, action: 'recordAudio'
        		}
    		}
        })

        , recordIcon: M.ImageView.design({
    		  value: 'theme/images/icon_record.png'
    		, cssClass: 'mediaIcon'
        	, events: {
        		tap: {
        			action: DigiWebApp.AudioController.recordAudio
        		}
    		}
        })

        , stopRecordIcon: M.ImageView.design({
    		  value: 'theme/images/icon_stop.png'
    		, cssClass: 'mediaIcon'
        	, events: {
        		tap: {
					action: DigiWebApp.AudioController.stopRecord
        		}
    		}
        })

        , playIcon: M.ImageView.design({
    		  value: 'theme/images/icon_playbackAudio.png'
    		, cssClass: 'mediaIcon'
        	, events: {
        		tap: {
					action: DigiWebApp.AudioController.playbackAudio
        		}
    		}
        })

        , stopIcon: M.ImageView.design({
    		  value: 'theme/images/icon_stop.png'
    		, cssClass: 'mediaIcon'
        	, events: {
        		tap: {
					action: DigiWebApp.AudioController.stopPlayback
        		}
    		}
        })

        , grid: M.GridView.design({
        	  childViews: 'button icon'
        	, layout: {
            	  cssClass: 'marginTop40 digiButton'
            	, columns: {
                	  0: 'button'
                	, 1: 'icon'
            	}
        	}
        
        	, button: M.ButtonView.design({
        		  value: M.I18N.l('recordAudio')
        		, cssClass: 'digiButton'
        		, anchorLocation: M.RIGHT
        		, events: {
                	tap: {
        				  target: DigiWebApp.AudioController
        				, action: 'recordAudio'
                	}
            	}
        	})
        
        	, icon: M.ImageView.design({
        		value: 'theme/images/icon_bookTime.png'
        	})
        })
    })


});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchBautageberichtDetailsPage
// ==========================================================================

DigiWebApp.BautagebuchBautageberichtDetailsPage = M.PageView.design({

      events: {
		  pagebeforeshow: {
            action: function() {

					if (DigiWebApp.BautagebuchBautageberichtDetailsController.datum) {
						var datumArray = DigiWebApp.BautagebuchBautageberichtDetailsController.datum.split(".");
						DigiWebApp.BautagebuchBautageberichtDetailsController.set("datumAsDate", datumArray[2] + "-" + datumArray[1] + "-" + datumArray[0]);
					}

					//alert("pagebeforeshow");
					// verfügbare Projektleiter kopieren und ausgewählten selektieren
		            var projektleiterArray = _.map(DigiWebApp.BautagebuchMainController.projektleiter, function(o) {
		            	if ( typeof(o) === "undefined" ) {
		            		console.log("UNDEFINED PROJEKTLEADER");
		            	} else {    
		    				if (DigiWebApp.BautagebuchBautageberichtDetailsController.projektleiterId) {
		    					o.isSelected = (o.value === DigiWebApp.BautagebuchBautageberichtDetailsController.projektleiterId);
		    				}
		                    return o;
		            	}
		            });
		            projektleiterArray = _.compact(projektleiterArray);
		            //console.log(projektleiterArray);
					DigiWebApp.BautagebuchBautageberichtDetailsController.set("projektleiterList", projektleiterArray);

					// verfügbare Aufträge kopieren und ausgewählten selektieren
		            var auftraegeArray = _.map(DigiWebApp.BautagebuchMainController.auftraege, function(o) {
		            	if ( typeof(o) === "undefined" ) {
		            		console.log("UNDEFINED ORDER");
		            	} else {    
		    				if (DigiWebApp.BautagebuchBautageberichtDetailsController.auftragsId) {
		    					o.isSelected = (o.value === DigiWebApp.BautagebuchBautageberichtDetailsController.auftragsId);
		    				}
		                    return o;
		            	}
		            });
					auftraegeArray = _.compact(auftraegeArray);
					DigiWebApp.BautagebuchBautageberichtDetailsController.set("auftraegeList", auftraegeArray);

					// verfügbare Positionen kopieren und ausgewählten selektieren
					if (DigiWebApp.BautagebuchBautageberichtDetailsController.auftragsId) {
						DigiWebApp.BautagebuchBautageberichtDetailsController.setPositionen(DigiWebApp.BautagebuchBautageberichtDetailsController.auftragsId);
    				} else {
			            var positionenArray = _.map(DigiWebApp.BautagebuchMainController.positionen, function(o) {
			            	if ( typeof(o) === "undefined" ) {
			            		console.log("UNDEFINED POSITION");
			            	} else {    
//			    				if (DigiWebApp.BautagebuchBautageberichtDetailsController.positionId) {
//			    					o.isSelected = (o.value === DigiWebApp.BautagebuchBautageberichtDetailsController.positionId);
//			    				}
			                    return o;
			            	}
			            });
			            positionenArray = _.compact(positionenArray);
						DigiWebApp.BautagebuchBautageberichtDetailsController.set("positionenList", positionenArray);
    				}

					// verfügbare Mitarbeiter kopieren und ausgewählte selektieren
                    var mitarbeiterIds = DigiWebApp.BautagebuchBautageberichtDetailsController.mitarbeiterIds; 
                    var mitarbeiterList = [];
                    var myMitarbeiterList = JSON.parse(JSON.stringify(DigiWebApp.BautagebuchMainController.mitarbeiter));
                    var mitarbeiterArray = mitarbeiterList;
    				if (mitarbeiterIds && mitarbeiterIds.length !== 0) {
    					mitarbeiterArray = _.map(myMitarbeiterList, function(o) {
    						var mitarbeiterSelected = NO;
    						_.each(mitarbeiterIds, function(m) {
    							if (m === o.value) {
    								mitarbeiterSelected = YES;
    							}
    						});
    						o.isSelected = (mitarbeiterSelected === YES);
							return o;
		    			});
	            	} else {
	            		mitarbeiterArray = DigiWebApp.BautagebuchMainController.mitarbeiter;
	            	}
    				mitarbeiterArray = _.compact(mitarbeiterArray);
					DigiWebApp.BautagebuchBautageberichtDetailsController.set("mitarbeiterList", mitarbeiterArray);
					
					// set mitarbeiterListSelected
                    var mitarbeiterListSelected = [];
                    var mitarbeiterArraySelected = mitarbeiterListSelected;
                    myMitarbeiterList = JSON.parse(JSON.stringify(DigiWebApp.BautagebuchMainController.mitarbeiter));
    				if (mitarbeiterIds && mitarbeiterIds.length !== 0) {
    					mitarbeiterArraySelected = _.map(myMitarbeiterList, function(o) {
    						var mitarbeiterSelected = NO;
    						_.each(mitarbeiterIds, function(m) {
    							if (m === o.value) {
    								mitarbeiterSelected = YES;
    							}
    						});
    						if (mitarbeiterSelected) {
    							o.isSelected = YES;
    							return o;
    						}
		    			});
	            	}
    				mitarbeiterArraySelected = _.compact(mitarbeiterArraySelected);
					DigiWebApp.BautagebuchBautageberichtDetailsController.set("mitarbeiterListSelected", mitarbeiterArraySelected);

					
			  		if (DigiWebApp.SettingsController.getSetting('bautagebuchLimit_autoStartUhrzeit')) {
						$(DigiWebApp.BautagebuchBautageberichtDetailsPage.content.startUhrzeit)[0].disable();
					} else {
						$(DigiWebApp.BautagebuchBautageberichtDetailsPage.content.startUhrzeit)[0].enable();
					}
			  		
			  		$('#' + DigiWebApp.BautagebuchBautageberichtDetailsPage.content.mitarbeiter_zeiten_ButtonGrid.mitarbeiterButton.id).addClass("bigButton");
			  		$('#' + DigiWebApp.BautagebuchBautageberichtDetailsPage.content.mitarbeiter_zeiten_ButtonGrid.zeitenButton.id).addClass("bigButton");
			  		$('#' + DigiWebApp.BautagebuchBautageberichtDetailsPage.content.material_wetter_ButtonGrid.materialienButton.id).addClass("bigButton");
			  		$('#' + DigiWebApp.BautagebuchBautageberichtDetailsPage.content.material_wetter_ButtonGrid.wetterButton.id).addClass("bigButton");
			  		$('#' + DigiWebApp.BautagebuchBautageberichtDetailsPage.content.medien_notizen_ButtonGrid.medienButton.id).addClass("bigButton");
			  		$('#' + DigiWebApp.BautagebuchBautageberichtDetailsPage.content.medien_notizen_ButtonGrid.notizenButton.id).addClass("bigButton");
			  		
			  		// Positionen-ComboBox ausblenden, falls DigiWebApp.BautagebuchEinstellungenController.settings.positionVorselektieren != true
			  		if (DigiWebApp.BautagebuchEinstellungenController.settings.positionVorselektieren) {
			  			$('#' + DigiWebApp.BautagebuchBautageberichtDetailsPage.content.positionComboBox.id).parent().parent().parent().show();
			  		} else {
			  			$('#' + DigiWebApp.BautagebuchBautageberichtDetailsPage.content.positionComboBox.id).parent().parent().parent().hide();
			  		}
			  		
			  		DigiWebApp.BautagebuchBautageberichtDetailsController.setStartUhrzeit();
			  		
	            	if (DigiWebApp.BautagebuchBautageberichtDetailsController.get('handOrderId')) {
	            		$('#' + DigiWebApp.BautagebuchBautageberichtDetailsPage.content.positionComboBox.id + "_container").hide();
	            	} else {
	            		$('#' + DigiWebApp.BautagebuchBautageberichtDetailsPage.content.positionComboBox.id + "_container").show();
	            	}

			}
        }
        , pagehide: {
            action: function() {

        	}
        }
    }

    , cssClass: 'bautagebuchBautageberichtDetailsPage'

    , childViews: 'header content'

    , header: M.ToolbarView.design({
          childViews: 'backButton title uebersichtButton'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} 
                    	this.backToBautagebuchBautageberichteListePageTransition();
                    	//history.back();
                    }
                }
            }
        })
//        , title: M.TextFieldView.design({
//              value: ''
//            , anchorLocation: M.CENTER
//            , cssClass: 'dateTitle'
//            , inputType: M.INPUT_DATE
//            , contentBinding: {
//        		  target: DigiWebApp.BautagebuchBautageberichtDetailsController
//        		, property: 'datumAsDate'
//        	}
//	        , contentBindingReverse: {
//	    		  target: DigiWebApp.BautagebuchBautageberichtDetailsController
//	    		, property: 'datumAsDate'
//	    	}
//            , events: {
//            	  blur: {
//            		action: function() {
//            			if (DigiWebApp.BautagebuchBautageberichtDetailsController.datumAsDate) {
//            				var datumArray = DigiWebApp.BautagebuchBautageberichtDetailsController.datumAsDate.split("-");
//            				DigiWebApp.BautagebuchBautageberichtDetailsController.set("datum", datumArray[2] + "." + datumArray[1] + "." + datumArray[0]);
//            			}
//            		}
//            	}
//	            , tap: {
//	                action: function() {
//            			try{DigiWebApp.ApplicationController.vibrate();}catch(e3){}
//				  		if (DigiWebApp.SettingsController.getSetting('bautagebuchLimit_autoStartUhrzeit')) {
//				  				$(DigiWebApp.BautagebuchBautageberichtDetailsPage.header.title).blur();
//								return;
//						}
//        			}
//	            }
//	        }
//        })
        , title: M.LabelView.design({
              value: ''
            , anchorLocation: M.CENTER
            , contentBinding: {
        		  target: DigiWebApp.BautagebuchBautageberichtDetailsController
        		, property: 'datum'
        	}
            , events: {
	            tap: {
	                action: function() {
            			try{DigiWebApp.ApplicationController.vibrate();}catch(e3){}
				  		if (DigiWebApp.SettingsController.getSetting('bautagebuchLimit_autoStartUhrzeit')) {
								return;
						}
			      		M.DatePickerView.show({
			    		      source: M.ViewManager.getView('bautagebuchBautageberichtDetailsPage', 'title')
			    		    , initialDate: D8.create(DigiWebApp.BautagebuchBautageberichtDetailsController.datum)
			    		    , showTimePicker: NO
			    		    , showDatePicker: YES
			    		    , dateOrder: 'ddMMyy'
		          		    , dateFormat: "dd.mm.yy"
		          		    , timeFormat: "HH:ii"
		          		    , minutesLabel: M.I18N.l('minute')
		          		    , hoursLabel: M.I18N.l('hour')
		          		    , dayLabel: M.I18N.l('day')
		          		    , monthLabel: M.I18N.l('month')
		          		    , yearLabel: M.I18N.l('year')
		          		    , dayNamesShort: DigiWebApp.ApplicationController.dayNamesShort
		          		    , dayNames: DigiWebApp.ApplicationController.dayNames
		          		    , monthNamesShort: DigiWebApp.ApplicationController.monthNamesShort
		          		    , monthNames: DigiWebApp.ApplicationController.monthNames
		          		    , callbacks: {
			      				confirm: {
			      					  target: this
			      					, action: function(value, date) {
			      						DigiWebApp.BautagebuchBautageberichtDetailsController.set("datum", value);
			      					}
			      				}
			      				, before: {
			      					action: function(value, date) {
			      					
			      					}
			      				}
			      				, cancel: {
			      					action: function() {
			      					
			      					}
			      				}
			      			}
			    		});
        			}
	            }
	        }
        })
        , delButton: M.ButtonView.design({
              value: M.I18N.l('BautagebuchDelete')
            , icon: 'delete'
            , anchorLocation: M.RIGHT
            , cssClass: 'red_background'
            , events: {
                tap: {
                      //target: DigiWebApp.BautagebuchBautageberichtDetailsController
                    //, action: 'delete'
        			action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e4){}
        				DigiWebApp.BautagebuchBautageberichtDetailsController.deleteBautagesbericht(DigiWebApp.NavigationController.backToBautagebuchBautageberichteListePageTransition);
        			}
                }
            }
        })
        , uebersichtButton: M.ButtonView.design({
              value: M.I18N.l('uebersicht')
            , icon: 'forward'
            , anchorLocation: M.RIGHT
            , events: {
                tap: {
                      //target: DigiWebApp.BautagebuchBautageberichtDetailsController
                    //, action: 'delete'
        			action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e4){}
        				DigiWebApp.NavigationController.backToBautagebuchBautageberichteListePageTransition();
        			}
                }
            }
        })
       , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({

    	  //childViews: 'projektleiterComboBox auftragComboBox mitarbeiterGroup startUhrzeit spacer2 zeitenButton materialienButton notizenButton medienButton wetterButton spacer1 grid'
    	  childViews: 'auftragComboBox positionComboBox projektleiterComboBox startUhrzeitContainer spacer2 spacer3 mitarbeiter_zeiten_ButtonGrid material_wetter_ButtonGrid medien_notizen_ButtonGrid spacer1 grid loeschenButton'
    		  
        , cssClass: 'content'
    	
        , spacer1: M.LabelView.design({
            value: '&nbsp;<br>'
        })

        , spacer2: M.LabelView.design({
            value: '&nbsp;<br>'
        })
        
        , spacer3: M.LabelView.design({
            value: '&nbsp;<br>'
        })
        
        , startUhrzeitContainer: M.ContainerView.design({
    	      label: M.I18N.l('BautagebuchStartUhrzeit')
			, childViews: 'plusGrid startUhrzeitGrid minusGrid' 
			, plusGrid: M.GridView.design({
					  childViews: 'stundePlusButton trennText minutePlusButton'
					, layout: {
				          cssClass: 'timecontainer'
				        , columns: {
				              0: 'column1'
				            , 1: 'column2'
				            , 2: 'column3'
				        }
				    }
					, stundePlusButton: M.ButtonView.design({
		    	          value: "+"
		    	        , cssClass: 'plusMinusButton'
		    	        , events: {
		    	            tap: {
	    		    			action: function() {
							  		if (DigiWebApp.SettingsController.getSetting('bautagebuchLimit_autoStartUhrzeit')) {
											return;
									}
									var myStunde = parseInt($('#'+DigiWebApp.BautagebuchBautageberichtDetailsPage.content.startUhrzeitContainer.startUhrzeitGrid.stundeFeld.id)[0].value);
									var myMinute = parseInt($('#'+DigiWebApp.BautagebuchBautageberichtDetailsPage.content.startUhrzeitContainer.startUhrzeitGrid.minuteFeld.id)[0].value);
									myStunde = (myStunde + 1) % 24;
									var startUhrzeitStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
									DigiWebApp.BautagebuchBautageberichtDetailsController.set('startUhrzeit', startUhrzeitStr);
									DigiWebApp.BautagebuchBautageberichtDetailsController.setStartUhrzeit();
								}
		    	            }
		    	          }
		    	    })
		    	    , trennText: M.LabelView.design({
		    	    	value: "&nbsp;"
		    	    })
					, minutePlusButton: M.ButtonView.design({
		    	          value: "+"
		    	        , cssClass: 'plusMinusButton'
		    	        , events: {
		    	            tap: {
	    		    			action: function() {
							  		if (DigiWebApp.SettingsController.getSetting('bautagebuchLimit_autoStartUhrzeit')) {
											return;
									}
									var myStunde = parseInt($('#'+DigiWebApp.BautagebuchBautageberichtDetailsPage.content.startUhrzeitContainer.startUhrzeitGrid.stundeFeld.id)[0].value);
									var myMinute = parseInt($('#'+DigiWebApp.BautagebuchBautageberichtDetailsPage.content.startUhrzeitContainer.startUhrzeitGrid.minuteFeld.id)[0].value);
									var minuteSteps = 1;
									if (DigiWebApp.BautagebuchEinstellungenController.settings.in15MinutenSchritten) {
										minuteSteps = 15;
									}
									if ((myMinute + minuteSteps) > 59) {
										myStunde = (myStunde + 1) % 24;										
									}
									myMinute = (myMinute + minuteSteps) % 60;
									var startUhrzeitStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
									DigiWebApp.BautagebuchBautageberichtDetailsController.set('startUhrzeit', startUhrzeitStr);
									DigiWebApp.BautagebuchBautageberichtDetailsController.setStartUhrzeit();
		  						}
		    	            }
		    	          }
		    	    })
			})
			, startUhrzeitGrid: M.GridView.design({
				  childViews: 'stundeFeld trennText minuteFeld'
				, layout: {
			          cssClass: 'timecontainer'
			        , columns: {
			              0: 'column1'
			            , 1: 'column2'
			            , 2: 'column3'
			        }
			    }
				, stundeFeld: M.TextFieldView.design({
					cssClass: 'startUhrzeit'
		    	  , inputType: M.INPUT_TEXT
		        })
		        , trennText: M.LabelView.design({
		    	    	value: ":"
		    	})
				, minuteFeld: M.TextFieldView.design({
					cssClass: 'startUhrzeit'
		    	  , inputType: M.INPUT_TEXT
		        })
			})
			, minusGrid: M.GridView.design({
				  childViews: 'stundeMinusButton trennText minuteMinusButton'
				, layout: {
			          cssClass: 'timecontainer'
			        , columns: {
			              0: 'column1'
			            , 1: 'column2'
			            , 2: 'column3'
			        }
			    }
				, stundeMinusButton: M.ButtonView.design({
	    	          value: "-"
	    	        , cssClass: 'plusMinusButton'
	    	        , events: {
	    	            tap: {
  		    				action: function() {
						  		if (DigiWebApp.SettingsController.getSetting('bautagebuchLimit_autoStartUhrzeit')) {
										return;
								}
								var myStunde = parseInt($('#'+DigiWebApp.BautagebuchBautageberichtDetailsPage.content.startUhrzeitContainer.startUhrzeitGrid.stundeFeld.id)[0].value);
								var myMinute = parseInt($('#'+DigiWebApp.BautagebuchBautageberichtDetailsPage.content.startUhrzeitContainer.startUhrzeitGrid.minuteFeld.id)[0].value);
								myStunde = myStunde - 1;
								if (myStunde < 0) {
									myStunde = 23;
								}
								var startUhrzeitStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
								DigiWebApp.BautagebuchBautageberichtDetailsController.set('startUhrzeit', startUhrzeitStr);
								DigiWebApp.BautagebuchBautageberichtDetailsController.setStartUhrzeit();
	  						}
	    	            }
	    	          }
	    	    })
	    	    , trennText: M.LabelView.design({
	    	    	value: "&nbsp;"
	    	    })
	    	    , minuteMinusButton: M.ButtonView.design({
	    	          value: "-"
	    	        , cssClass: 'plusMinusButton'
	    	        , events: {
	    	            tap: {
  		    				action: function() {
						  		if (DigiWebApp.SettingsController.getSetting('bautagebuchLimit_autoStartUhrzeit')) {
										return;
								}
								var myStunde = parseInt($('#'+DigiWebApp.BautagebuchBautageberichtDetailsPage.content.startUhrzeitContainer.startUhrzeitGrid.stundeFeld.id)[0].value);
								var myMinute = parseInt($('#'+DigiWebApp.BautagebuchBautageberichtDetailsPage.content.startUhrzeitContainer.startUhrzeitGrid.minuteFeld.id)[0].value);
								var minuteSteps = 1;
								if (DigiWebApp.BautagebuchEinstellungenController.settings.in15MinutenSchritten) {
									minuteSteps = 15;
								}
								if ((myMinute - minuteSteps) < 0) {
									myStunde = myStunde - 1;
									if (myStunde < 0) {
										myStunde = 23;
									}
									myMinute = 60;
								}
								myMinute = (myMinute - minuteSteps) % 60;
								if (myMinute < 0) {
									myMinute = 60 - minuteSteps;
								}
								var startUhrzeitStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
								DigiWebApp.BautagebuchBautageberichtDetailsController.set('startUhrzeit', startUhrzeitStr);
								DigiWebApp.BautagebuchBautageberichtDetailsController.setStartUhrzeit();
	  						}
	    	            }
	    	          }
	    	    })
			})
		})
          

        , startUhrzeit: M.TextFieldView.design({
	    	    label: M.I18N.l('BautagebuchStartUhrzeit')
	    	  , cssClass: 'startUhrzeit'
	    	  , inputType: M.INPUT_TIME
	    	  , contentBindingReverse: {
	                target: DigiWebApp.BautagebuchBautageberichtDetailsController
	              , property: 'startUhrzeit'
	          }
	          , contentBinding: {
	                target: DigiWebApp.BautagebuchBautageberichtDetailsController
	              , property: 'startUhrzeit'
	          }
	      	  , events: {
	      		  	tap: {
	          		  	action: function(id, event) {
				          		if (DigiWebApp.SettingsController.getSetting('bautagebuchLimit_autoStartUhrzeit')) {
				  					return;
					  			}
	      	  			}
	      	  		}
	      	 }
        })

        , startUhrzeitOld: M.GridView.design({
	            childViews: 'startUhrzeitLabel startUhrzeitInput'
	          , layout: M.TWO_COLUMNS
	          , startUhrzeitLabel: M.LabelView.design({
		    	    cssClass: 'whiteText'
	              , value: M.I18N.l('BautagebuchStartUhrzeit')
	          })
	          , startUhrzeitInput: M.TextFieldView.design({
	        	    contentBindingReverse: {
	                    target: DigiWebApp.BautagebuchBautageberichtDetailsController
	                  , property: 'startUhrzeit'
	              }
	              , contentBinding: {
	                    target: DigiWebApp.BautagebuchBautageberichtDetailsController
	                  , property: 'startUhrzeit'
	              }
	          	  , events: {
	          		  tap: {
		          		  	action: function(id, event) {
					          		if (DigiWebApp.SettingsController.getSetting('bautagebuchLimit_autoStartUhrzeit')) {
	          		  					return;
	          		  				}
	          		  				$(DigiWebApp.BautagebuchBautageberichtDetailsPage.content.startUhrzeit.startUhrzeitInput).blur();
					          		M.DatePickerView.show({
					          		      source: M.ViewManager.getView('bautagebuchBautageberichtDetailsPage', 'startUhrzeitInput')
					          		    , initialDate: D8.create("01.01.1993 " + DigiWebApp.BautagebuchBautageberichtDetailsController.startUhrzeit)
					          		    , showTimePicker: YES
					          		    , showDatePicker: NO
					          		    , showAmPm: NO
						    		    , dateOrder: 'ddmmyy'
					          		    , dateFormat: "dd.mm.yy"
					          		    , timeFormat: "HH:ii"
					          		    , minutesLabel: M.I18N.l('minute')
					          		    , hoursLabel: M.I18N.l('hour')
					          		    , dayLabel: M.I18N.l('day')
					          		    , monthLabel: M.I18N.l('month')
					          		    , yearLabel: M.I18N.l('year')
					          		    , dayNamesShort: DigiWebApp.ApplicationController.dayNamesShort
					          		    , dayNames: DigiWebApp.ApplicationController.dayNames
					          		    , monthNamesShort: DigiWebApp.ApplicationController.monthNamesShort
					          		    , monthNames: DigiWebApp.ApplicationController.monthNames
					          		    , callbacks: {
						      				confirm: {
						      					  target: this
						      					, action: function(value, date) {
						      						DigiWebApp.BautagebuchBautageberichtDetailsController.set("startUhrzeit", value);
						      					}
						      				}
						      				, before: {
						      					action: function(value, date) {
						      					
						      					}
						      				}
						      				, cancel: {
						      					action: function() {
						      					
						      					}
						      				}
						      			}
					          		});
	          		  		}
	          	  	  }
	          	  }
	          })
	    })

	    , projektleiterComboBox: M.SelectionListView.design({

            /* renders a selection view like check boxes */
              selectionMode: M.SINGLE_SELECTION_DIALOG

            , initialText: M.I18N.l('noData')
            
            , label: M.I18N.l('BautagebuchProjektleiter')

            , applyTheme: NO

            /* this seleciton view has no static entries, instead it is filled via content binding. */
            , contentBinding: {
                  target: DigiWebApp.BautagebuchBautageberichtDetailsController
                , property: 'projektleiterList'
            }

            , events: {
                  change: {
                      action: function(itemValues, items) {
            			DigiWebApp.BautagebuchBautageberichtDetailsController.set("projektleiterId", M.ViewManager.getView('bautagebuchBautageberichtDetailsPage', 'projektleiterComboBox').getSelection(YES).value);
                    }
                }
            }
        })
        	
        , auftragComboBox: M.SelectionListView.design({

            /* renders a selection view like check boxes */
              selectionMode: M.SINGLE_SELECTION_DIALOG

            , initialText: M.I18N.l('noData')
          
            , label: M.I18N.l('order')

            , applyTheme: NO

            /* this seleciton view has no static entries, instead it is filled via content binding. */
            , contentBinding: {
                  target: DigiWebApp.BautagebuchBautageberichtDetailsController
                , property: 'auftraegeList'
            }

	        , events: {
		            change: {
		                action: function(itemValues, items) {
	        				var mySelection = M.ViewManager.getView('bautagebuchBautageberichtDetailsPage', 'auftragComboBox').getSelection(YES);
	        				if (mySelection.label == mySelection.value || isGUID(mySelection.value)) {
			      				DigiWebApp.BautagebuchBautageberichtDetailsController.set("handOrderId", mySelection.value);
			      				DigiWebApp.BautagebuchBautageberichtDetailsController.set("handOrderName", mySelection.label);
			            		$('#' + DigiWebApp.BautagebuchBautageberichtDetailsPage.content.positionComboBox.id + "_container").hide();
	        				} else {
			      				DigiWebApp.BautagebuchBautageberichtDetailsController.set("handOrderId", null);
			      				DigiWebApp.BautagebuchBautageberichtDetailsController.set("handOrderName", null);
			            		$('#' + DigiWebApp.BautagebuchBautageberichtDetailsPage.content.positionComboBox.id + "_container").show();
	        				}
		      				DigiWebApp.BautagebuchBautageberichtDetailsController.set("auftragsId", mySelection.value);
		      				DigiWebApp.BautagebuchBautageberichtDetailsController.set("auftragsName", mySelection.label);
		      				DigiWebApp.BautagebuchBautageberichtDetailsController.setPositionen(M.ViewManager.getView('bautagebuchBautageberichtDetailsPage', 'auftragComboBox').getSelection(YES).value);
		              }
		          }
		    }
        })
        
        , positionComboBox: M.SelectionListView.design({

            /* renders a selection view like check boxes */
              selectionMode: M.SINGLE_SELECTION_DIALOG

            , initialText: M.I18N.l('noData')
          
            , label: M.I18N.l('position')

            , applyTheme: NO

            /* this seleciton view has no static entries, instead it is filled via content binding. */
            , contentBinding: {
                  target: DigiWebApp.BautagebuchBautageberichtDetailsController
                , property: 'positionenList'
            }

	        , events: {
		            change: {
		                action: function(itemValues, items) {
			  				DigiWebApp.BautagebuchBautageberichtDetailsController.set("positionId", M.ViewManager.getView('bautagebuchBautageberichtDetailsPage', 'positionComboBox').getSelection(YES).value);
			  				DigiWebApp.BautagebuchBautageberichtDetailsController.set("positionName", M.ViewManager.getView('bautagebuchBautageberichtDetailsPage', 'positionComboBox').getSelection(YES).label);
		              }
		          }
		    }
        })
        
        , mitarbeiter_zeiten_ButtonGrid: M.GridView.design({
        	
        	  childViews: 'mitarbeiterButton zeitenButton'
        		  
            , layout: M.TWO_COLUMNS
      	    , mitarbeiterButton: M.GridView.design({
	            childViews: 'buttongrid'
	                , layout: M.TWO_COLUMNS
	                , buttongrid: M.GridView.design({
	      	            childViews: 'button icon'
	      	          , layout: {
	      	                cssClass: 'bautagebuchButton'
	      	              , columns: {
	      	                    0: 'button'
	      	                  , 1: 'icon'
	      	              }
	      	          }
	      	          , button: M.ButtonView.design({
	      	                value: M.I18N.l('employees')
	      	              , cssClass: 'bautagebuchButton'
	      	              , anchorLocation: M.RIGHT
	      	              , events: {
	      	                  tap: {
	      			    			action: function() {
	      	        	  				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
	      	        	  				//DigiWebApp.BautagebuchBautageberichtDetailsController.save(DigiWebApp.NavigationController.toBautagebuchMitarbeiterAuswahlPage);
	      	        	  				DigiWebApp.NavigationController.toBautagebuchMitarbeiterAuswahlPage();
	      				    		}
	      	                  }
	      	              }
	      	          })
	      	          , icon: M.ImageView.design({
	      	              value: 'theme/images/48x48_plain_businessmen.png'
	      	          })
	      	      }) 
	        }) 
    	
	  	    , zeitenButton: M.GridView.design({
	            childViews: 'buttongrid'
	                , layout: M.TWO_COLUMNS
	                , buttongrid: M.GridView.design({
	      	            childViews: 'button icon'
	      	          , layout: {
	      	                cssClass: 'bautagebuchButton'
	      	              , columns: {
	      	                    0: 'button'
	      	                  , 1: 'icon'
	      	              }
	      	          }
	      	          , button: M.ButtonView.design({
	      	                value: M.I18N.l('BautagebuchZeiten')
	      	              , cssClass: 'bautagebuchButton'
	      	              , anchorLocation: M.RIGHT
	      	              , events: {
	      	                  tap: {
	      			    			action: function() {
	      	        	  				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
	      	        	  				if (DigiWebApp.BautagebuchZeitbuchung.findSorted(DigiWebApp.BautagebuchBautageberichtDetailsController.item.get('id')).length > 0) {
	      	        	  					DigiWebApp.BautagebuchBautageberichtDetailsController.save(DigiWebApp.NavigationController.toBautagebuchZeitenListePageTransition);
	      	        	  				} else {
	      	        	  					DigiWebApp.BautagebuchBautageberichtDetailsController.save(DigiWebApp.BautagebuchZeitenListeController.neu);
	      	        	  				}
	      				    		}
	      	                  }
	      	              }
	      	          })
	      	          , icon: M.ImageView.design({
	      	              value: 'theme/images/48x48_plain_note_view.png'
	      	          })
	      	      }) 
	        }) 

        })
        	
        , medien_notizen_ButtonGrid: M.GridView.design({
        	  childViews: 'medienButton notizenButton'
            , layout: M.TWO_COLUMNS
    	    , notizenButton: M.GridView.design({
	            childViews: 'buttongrid'
	                , layout: M.TWO_COLUMNS
	                , buttongrid: M.GridView.design({
	      	            childViews: 'button icon'
	      	          , layout: {
	      	                cssClass: 'bautagebuchButton'
	      	              , columns: {
	      	                    0: 'button'
	      	                  , 1: 'icon'
	      	              }
	      	          }
	      	          , button: M.ButtonView.design({
	      	                value: M.I18N.l('BautagebuchNotizen')
	      	              , cssClass: 'bautagebuchButton'
	      	              , anchorLocation: M.RIGHT
	      	              , events: {
	      	                  tap: {
	      			    			action: function() {
	      	        	  				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
	      	        	  				//DigiWebApp.BautagebuchBautageberichtDetailsController.save(DigiWebApp.NavigationController.toBautagebuchNotizenListePageTransition);
	      	        	  				DigiWebApp.BautagebuchNotizenListeController.init();
	      	        	  				DigiWebApp.BautagebuchBautageberichtDetailsController.save(DigiWebApp.BautagebuchNotizenListeController.neu);
	      				    		}
	      	                  }
	      	              }
	      	          })
	      	          , icon: M.ImageView.design({
	      	              value: 'theme/images/48x48_plain_clipboard.png'
	      	          })
	      	      }) 
	        }) 
	  	
	  	    , medienButton: M.GridView.design({
		            childViews: 'buttongrid'
		                , layout: M.TWO_COLUMNS
		                , buttongrid: M.GridView.design({
		      	            childViews: 'button icon'
		      	          , layout: {
		      	                cssClass: 'bautagebuchButton'
		      	              , columns: {
		      	                    0: 'button'
		      	                  , 1: 'icon'
		      	              }
		      	          }
		      	          , button: M.ButtonView.design({
		      	                value: M.I18N.l('BautagebuchMedien')
		      	              , cssClass: 'bautagebuchButton'
		      	              , anchorLocation: M.RIGHT
		      	              , events: {
		      	                  tap: {
		      			    			action: function() {
		      	        	  				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
		      	        	  				//DigiWebApp.BautagebuchBautageberichtDetailsController.save(DigiWebApp.NavigationController.toBautagebuchMedienListePageTransition);
		      	        	  				DigiWebApp.BautagebuchMedienListeController.init();
		      	        	  				DigiWebApp.BautagebuchBautageberichtDetailsController.save(DigiWebApp.BautagebuchMedienListeController.neu);
		      				    		}
		      	                  }
		      	              }
		      	          })
		      	          , icon: M.ImageView.design({
		      	              value: 'theme/images/48x48_plain_camera2.png'
		      	          })
		      	      }) 
		        })
        })

        , material_wetter_ButtonGrid: M.GridView.design({
        	  childViews: 'materialienButton wetterButton'
            , layout: M.TWO_COLUMNS
      	    , materialienButton: M.GridView.design({
	            childViews: 'buttongrid'
	                , layout: M.TWO_COLUMNS
	                , buttongrid: M.GridView.design({
	      	            childViews: 'button icon'
	      	          , layout: {
	      	                cssClass: 'bautagebuchButton'
	      	              , columns: {
	      	                    0: 'button'
	      	                  , 1: 'icon'
	      	              }
	      	          }
	      	          , button: M.ButtonView.design({
	      	                value: M.I18N.l('BautagebuchMaterialien')
	      	              , cssClass: 'bautagebuchButton'
	      	              , anchorLocation: M.RIGHT
	      	              , events: {
	      	                  tap: {
	      			    			action: function() {
      	        	  					try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
	      	        	  				//DigiWebApp.BautagebuchBautageberichtDetailsController.save(DigiWebApp.NavigationController.toBautagebuchMaterialienListePageTransition);
					      	        	DigiWebApp.BautagebuchBautageberichteListeController.init();
					      	        	DigiWebApp.BautagebuchBautageberichtDetailsController.save(DigiWebApp.BautagebuchMaterialienListeController.neu);
	      				    		}
	      	                  }
	      	              }
	      	          })
	      	          , icon: M.ImageView.design({
	      	              value: 'theme/images/48x48_plain_shelf.png'
	      	          })
	      	      }) 
	        })
//      	    	M.ButtonView.design({
//	  	          value: M.I18N.l('BautagebuchMaterialien')
//	  	        , cssClass: 'bautagebuchButton'
//	  	        //, anchorLocation: M.CENTER
//	  	        , events: {
//	  	            tap: {
//	  	                //target: DigiWebApp.NavigationController,
//	  	                //action: 'toBautagebuchMaterialienListePageTransition'
//	  		    			action: function() {
//	  						DigiWebApp.BautagebuchBautageberichtDetailsController.save(DigiWebApp.NavigationController.toBautagebuchMaterialienListePageTransition);
//	  					}
//	  	            }
//	  	          }
//	  	    })
	
	  	    , wetterButton: M.GridView.design({
	  	    		  childViews: 'buttongrid'
	                , layout: M.TWO_COLUMNS
	                , buttongrid: M.GridView.design({
	      	            childViews: 'button icon'
	      	          , layout: {
	      	                cssClass: 'bautagebuchButton'
	      	              , columns: {
	      	                    0: 'button'
	      	                  , 1: 'icon'
	      	              }
	      	          }
	      	          , button: M.ButtonView.design({
	      	                value: M.I18N.l('BautagebuchWetter')
	      	              , cssClass: 'bautagebuchButton'
	      	              , anchorLocation: M.RIGHT
	      	              , events: {
	      	                  tap: {
	      			    			action: function() {
	      	        	  				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
	      	        	  				DigiWebApp.BautagebuchBautageberichtDetailsController.save(DigiWebApp.NavigationController.toBautagebuchWetterPageTransition);
	      				    		}
	      	                  }
	      	              }
	      	          })
	      	          , icon: M.ImageView.design({
	      	              value: 'theme/images/48x48_plain_cloud_dark.png'
	      	          })
	      	      }) 
	        })
//	  	    	M.ButtonView.design({
//	  	          value: M.I18N.l('BautagebuchWetter')
//	  	        , cssClass: 'bautagebuchButton'
//	  	        , events: {
//	  	            tap: {
//  		    			action: function() {
//  		    				DigiWebApp.BautagebuchBautageberichtDetailsController.save(DigiWebApp.NavigationController.toBautagebuchWetterPageTransition);
//  						}
//	  	            }
//	  	          }
//	  	    })
        })


        , grid: M.GridView.design({
            childViews: 'speichernButton abschliessenButton'
          , layout: M.TWO_COLUMNS
          , speichernButton: M.GridView.design({
	            childViews: 'button icon'
	          , layout: {
	                cssClass: 'digiButton'
	              , columns: {
	                    0: 'button'
	                  , 1: 'icon'
	              }
	          }
	          , button: M.ButtonView.design({
	                value: M.I18N.l('BautagebuchSpeichern')
	              , cssClass: 'digiButton green_background'
	              , anchorLocation: M.RIGHT
	              , events: {
	                  tap: {
			    			action: function() {
	        	  				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
	        	  				DigiWebApp.BautagebuchBautageberichtDetailsController.save(DigiWebApp.NavigationController.backToBautagebuchBautageberichteListePageTransition);
				    		}
	                  }
	              }
	          })
	          , icon: M.ImageView.design({
	              value: 'theme/images/icon_bookTime.png'
	          })
	      })
          , abschliessenButton: M.GridView.design({
	            childViews: 'button icon'
	          , layout: {
	                cssClass: 'digiButton'
	              , columns: {
	                    0: 'button'
	                  , 1: 'icon'
	              }
	          }
	          , button: M.ButtonView.design({
	                value: M.I18N.l('BautagebuchAbschliessen')
	              , cssClass: 'digiButton'
	              , anchorLocation: M.RIGHT
	              , events: {
	                  tap: {
			    			action: function() {
	        	  					try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
			    		        	DigiWebApp.BautagebuchBautageberichtDetailsController.finish();
				    		}
	                  }
	              }
	          })
	          , icon: M.ImageView.design({
	              value: 'theme/images/icon_bookTime.png'
	          })
	      })

      })
      , loeschenButton: M.GridView.design({
          childViews: 'button icon'
        , layout: {
              cssClass: 'digiButton'
            , columns: {
                  0: 'button'
                , 1: 'icon'
            }
        }
        , button: M.ButtonView.design({
              value: M.I18N.l('BautagebuchDelete')
            , cssClass: 'red_background'
            , anchorLocation: M.RIGHT
            , events: {
                tap: {
		    			action: function() {
        					try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
        					DigiWebApp.BautagebuchBautageberichtDetailsController.deleteBautagesbericht(DigiWebApp.NavigationController.backToBautagebuchBautageberichteListePageTransition);
			    		}
                }
            }
        })
        , icon: M.ImageView.design({
            value: ''
        })
    })

//        , grid_old: M.GridView.design({
//              childViews: 'button icon'
//            , layout: {
//                  cssClass: 'digiButton'
//                , columns: {
//                      0: 'button'
//                    , 1: 'icon'
//                }
//            }
//            , button: M.ButtonView.design({
//                  value: M.I18N.l('BautagebuchSpeichernAbschliessen')
//                , cssClass: 'digiButton'
//                , anchorLocation: M.RIGHT
//                , events: {
//                    tap: {
//		                //target: DigiWebApp.BautagebuchBautageberichtDetailsController,
//		                //action: 'save'
//		    			action: function() {
//		    				//var that = this;
//					    	M.DialogView.actionSheet({
//						          title: M.I18N.l('BautagebuchSaveOrClose')
//						        , cancelButtonValue: M.I18N.l('cancel')
//						        , otherButtonValues: [M.I18N.l('save'), M.I18N.l('BautagebuchBautageberichtAbschliessen')]
//						        , otherButtonTags: ["save","finish"]
//						        , callbacks: {
//					    			  other: {action: function(buttonTag) {
//					    			    switch(buttonTag) {
//						    		        case 'save':
//						    		        	DigiWebApp.BautagebuchBautageberichtDetailsController.save(DigiWebApp.NavigationController.backToBautagebuchBautageberichteListePageTransition);
//						    		            break;
//						    		        case 'finish':
//						    		        	DigiWebApp.BautagebuchBautageberichtDetailsController.finish();
//						    		            break;
//						    		        default:
//						    		            console.log("unknonw ButtonTag");
//						    		            break;
//					    			    }
//					    			}}
//					    			, cancel: {action: function() {
//					    				//console.log(M.I18N.l('cancel'));
//					    			}}
//					    		}
//						    });
//			    		}
//                    }
//                }
//            })
//            , icon: M.ImageView.design({
//                value: 'theme/images/icon_bookTime.png'
//            })
//        })

    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchBautageberichtTemplateView
// ==========================================================================

DigiWebApp.BautagebuchBautageberichtTemplateView = M.ListItemView.design({

      isSelectable: YES

    , childViews: 'abgeschlossen datum startUhrzeit orderName'

    , events: {
        tap: {
			action: function(id, m_id) {
				//console.log("tap");
			    var view = M.ViewManager.getViewById(id);
			    var view_modelId = view.modelId;
			    _.each(DigiWebApp.BautagebuchBautageberichteListeController.items, function(selectedItem) {
					if (selectedItem.m_id === view_modelId) {
						if (selectedItem.get("bautagesberichtTyp") == "<standard>") {
							DigiWebApp.BautagebuchBautageberichtDetailsController.load(selectedItem);
							if (selectedItem.get("abgeschlossen") === YES) {
								DigiWebApp.BautagebuchZusammenfassungController.load(selectedItem);
								DigiWebApp.NavigationController.toBautagebuchZusammenfassungPageTransition();
							} else {
								DigiWebApp.NavigationController.toBautagebuchBautageberichtDetailsPageTransition();
							}
						} else {
				            DigiWebApp.ApplicationController.nativeAlertDialogView({
				                title: M.I18N.l('materialPickUp')
				              , message: M.I18N.l('nurMaterialErfassung')
				            });
						}
					}
				});
			}
        }
    }

	, spacer: M.LabelView.design({
	      cssClass: 'unselectable marginBottom12'
	    , value: ' '
	})
	
	, abgeschlossen: M.LabelView.design({
	    cssClass: 'bigLabel unselectable'
	  , isInline: NO
	  , computedValue: {
	        valuePattern: '<%= abgeschlossen %>'
	      , operation: function(v) {
					if (parseBool(v)) {
						return M.I18N.l('BautagebuchAbgeschlossen');
					} else {
						return "";
					}
	          }
	  }
	})
	
	, datum: M.LabelView.design({
	    cssClass: 'normal unselectable'
	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= datum %>'
	      , operation: function(v) {
					if (v && v !== "") {
						return v;
					} else {
						return "";
					}
	          }
	  }
	})
	
	, startUhrzeit: M.LabelView.design({
	    cssClass: 'normal unselectable'
	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= startUhrzeit %>'
	      , operation: function(v) {
					if (v && v !== "") {
						return ", " + M.I18N.l('BautagebuchStartingFrom') + " " + v;
					} else {
						return "";
					}
	          }
	  }
	})

	, orderName: M.LabelView.design({
	    cssClass: 'normal unselectable'
	  , computedValue: {
	        valuePattern: '<%= orderName %>'
	      , operation: function(v) {
				if (v && v !== "") {
					return v;
				} else {
					return "";
				}
	          }
	  }
	})

    
});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchEinstellungenPage
// ==========================================================================

DigiWebApp.BautagebuchEinstellungenPage = M.PageView.design({

      events: {
		  pagebeforeshow: {
            action: function() {
				DigiWebApp.BautagebuchEinstellungenController.load();
				//DigiWebApp.BautagebuchEinstellungenPage.content.startUhrzeit.startUhrzeitInput.setValue(DigiWebApp.BautagebuchEinstellungenController.settings.startUhrzeit);
				DigiWebApp.BautagebuchEinstellungenController.set('settings', DigiWebApp.BautagebuchEinstellungenController.settings);
		  		DigiWebApp.BautagebuchEinstellungenController.setStartUhrzeit();		  		
			}
        }
        , pagebeforehide: {
            action: function() {
				DigiWebApp.BautagebuchEinstellungenController.save();
        	}
        }
    }

	, controller: DigiWebApp.BautagebuchEinstellungenController
	, navigationController: DigiWebApp.NavigationController

    , cssClass: 'settingsPage'

    , childViews: 'header content'

    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.backToBautagebuchBautageberichteListePageTransition();}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('BautagebuchBautagebericht')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({

	        childViews: 'startUhrzeitContainer inStundenBuchenCheckbox falscheZeitenIgnorierenCheckbox positionVorselektierenCheckbox in15MinutenSchrittenCheckbox'

            , startUhrzeitContainer: M.ContainerView.design({
	      	      label: M.I18N.l('BautagebuchTaeglicheStartUhrzeit')
	  			, childViews: 'plusGrid startUhrzeitGrid minusGrid' 
	  			, plusGrid: M.GridView.design({
	  					  childViews: 'stundePlusButton trennText minutePlusButton'
	  					, layout: {
	  				          cssClass: 'timecontainer'
	  				        , columns: {
	  				              0: 'column1'
	  				            , 1: 'column2'
	  				            , 2: 'column3'
	  				        }
	  				    }
	  					, stundePlusButton: M.ButtonView.design({
	  		    	          value: "+"
	  		    	        , cssClass: 'plusMinusButton'
	  		    	        , events: {
	  		    	            tap: {
	  	    		    			action: function() {
	  									var myStunde = parseInt($('#'+DigiWebApp.BautagebuchEinstellungenPage.content.startUhrzeitContainer.startUhrzeitGrid.stundeFeld.id)[0].value);
	  									var myMinute = parseInt($('#'+DigiWebApp.BautagebuchEinstellungenPage.content.startUhrzeitContainer.startUhrzeitGrid.minuteFeld.id)[0].value);
	  									myStunde = (myStunde + 1) % 24;
	  									var startUhrzeitStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
	  									DigiWebApp.BautagebuchEinstellungenController.set('settings.startUhrzeit', startUhrzeitStr);
	  									DigiWebApp.BautagebuchEinstellungenController.setStartUhrzeit();
	  								}
	  		    	            }
	  		    	          }
	  		    	    })
	  		    	    , trennText: M.LabelView.design({
	  		    	    	value: "&nbsp;"
	  		    	    })
	  					, minutePlusButton: M.ButtonView.design({
	  		    	          value: "+"
	  		    	        , cssClass: 'plusMinusButton'
	  		    	        , events: {
	  		    	            tap: {
	  	    		    			action: function() {
	  									var myStunde = parseInt($('#'+DigiWebApp.BautagebuchEinstellungenPage.content.startUhrzeitContainer.startUhrzeitGrid.stundeFeld.id)[0].value);
	  									var myMinute = parseInt($('#'+DigiWebApp.BautagebuchEinstellungenPage.content.startUhrzeitContainer.startUhrzeitGrid.minuteFeld.id)[0].value);
	  									var minuteSteps = 1;
	  									if (DigiWebApp.BautagebuchEinstellungenController.settings.in15MinutenSchritten) {
	  										minuteSteps = 15;
	  									}
	  									if ((myMinute + minuteSteps) > 59) {
	  										myStunde = (myStunde + 1) % 24;										
	  									}
	  									myMinute = (myMinute + minuteSteps) % 60;
	  									var startUhrzeitStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
	  									DigiWebApp.BautagebuchEinstellungenController.set('settings.startUhrzeit', startUhrzeitStr);
	  									DigiWebApp.BautagebuchEinstellungenController.setStartUhrzeit();
	  		  						}
	  		    	            }
	  		    	          }
	  		    	    })
	  			})
	  			, startUhrzeitGrid: M.GridView.design({
	  				  childViews: 'stundeFeld trennText minuteFeld'
	  				, layout: {
	  			          cssClass: 'timecontainer'
	  			        , columns: {
	  			              0: 'column1'
	  			            , 1: 'column2'
	  			            , 2: 'column3'
	  			        }
	  			    }
	  				, stundeFeld: M.TextFieldView.design({
	  					cssClass: 'startUhrzeit'
	  		    	  , inputType: M.INPUT_TEXT
	  		        })
	  		        , trennText: M.LabelView.design({
	  		    	    	value: ":"
	  		    	})
	  				, minuteFeld: M.TextFieldView.design({
	  					cssClass: 'startUhrzeit'
	  		    	  , inputType: M.INPUT_TEXT
	  		        })
	  			})
	  			, minusGrid: M.GridView.design({
	  				  childViews: 'stundeMinusButton trennText minuteMinusButton'
	  				, layout: {
	  			          cssClass: 'timecontainer'
	  			        , columns: {
	  			              0: 'column1'
	  			            , 1: 'column2'
	  			            , 2: 'column3'
	  			        }
	  			    }
	  				, stundeMinusButton: M.ButtonView.design({
	  	    	          value: "-"
	  	    	        , cssClass: 'plusMinusButton'
	  	    	        , events: {
	  	    	            tap: {
	    		    				action: function() {
	  								var myStunde = parseInt($('#'+DigiWebApp.BautagebuchEinstellungenPage.content.startUhrzeitContainer.startUhrzeitGrid.stundeFeld.id)[0].value);
	  								var myMinute = parseInt($('#'+DigiWebApp.BautagebuchEinstellungenPage.content.startUhrzeitContainer.startUhrzeitGrid.minuteFeld.id)[0].value);
	  								myStunde = myStunde - 1;
	  								if (myStunde < 0) {
	  									myStunde = 23;
	  								}
	  								var startUhrzeitStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
	  								DigiWebApp.BautagebuchEinstellungenController.set('settings.startUhrzeit', startUhrzeitStr);
	  								DigiWebApp.BautagebuchEinstellungenController.setStartUhrzeit();
	  	  						}
	  	    	            }
	  	    	          }
	  	    	    })
	  	    	    , trennText: M.LabelView.design({
	  	    	    	value: "&nbsp;"
	  	    	    })
	  	    	    , minuteMinusButton: M.ButtonView.design({
	  	    	          value: "-"
	  	    	        , cssClass: 'plusMinusButton'
	  	    	        , events: {
	  	    	            tap: {
	    		    				action: function() {
	  								var myStunde = parseInt($('#'+DigiWebApp.BautagebuchEinstellungenPage.content.startUhrzeitContainer.startUhrzeitGrid.stundeFeld.id)[0].value);
	  								var myMinute = parseInt($('#'+DigiWebApp.BautagebuchEinstellungenPage.content.startUhrzeitContainer.startUhrzeitGrid.minuteFeld.id)[0].value);
	  								var minuteSteps = 1;
	  								if (DigiWebApp.BautagebuchEinstellungenController.settings.in15MinutenSchritten) {
	  									minuteSteps = 15;
	  								}
	  								if ((myMinute - minuteSteps) < 0) {
	  									myStunde = myStunde - 1;
	  									if (myStunde < 0) {
	  										myStunde = 23;
	  									}
	  									myMinute = 60;
	  								}
	  								myMinute = (myMinute - minuteSteps) % 60;
	  								if (myMinute < 0) {
	  									myMinute = 60 - minuteSteps;
	  								}
	  								var startUhrzeitStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
	  								DigiWebApp.BautagebuchEinstellungenController.set('settings.startUhrzeit', startUhrzeitStr);
	  								DigiWebApp.BautagebuchEinstellungenController.setStartUhrzeit();
	  	  						}
	  	    	            }
	  	    	          }
	  	    	    })
	  			})
	  		})

//	  		, startUhrzeit: M.GridView.design({
//	            childViews: 'startUhrzeitLabel startUhrzeitInput'
//	          , layout: M.TWO_COLUMNS
//	          , startUhrzeitLabel: M.LabelView.design({
//	              value: M.I18N.l('BautagebuchTaeglicheStartUhrzeit')
//	          })
//	          , startUhrzeitInput: M.TextFieldView.design({
//	        	    inputType: M.INPUT_TIME
//	        	  , contentBindingReverse: {
//	                    target: DigiWebApp.BautagebuchEinstellungenController
//	                  , property: 'settings.startUhrzeit'
//	              }
//	              , contentBinding: {
//	                    target: DigiWebApp.BautagebuchEinstellungenController
//	                  , property: 'settings.startUhrzeit'
//	              }
//	          	  , events: {
//	          		  tap: {
//		          		  	action: function(id, event) {
//	          		  		}
//	          	  	  }
//	          	  }
//	          })
//	      })
	        	          
	      , inStundenBuchenCheckbox: M.SelectionListView.design({
		          selectionMode: M.MULTIPLE_SELECTION
	            , contentBinding: {
	                  target: DigiWebApp.BautagebuchEinstellungenController
	                , property: 'settings.inStundenBuchenItem'
	            }
			    , events: {
		    		change: {
			    		  target: DigiWebApp.BautagebuchEinstellungenController
		    			, action: function(itemValues, items) {
			    			this.settings.inStundenBuchen = (itemValues.length === 1);
			    			this.settings.inStundenBuchenItem.isSelected = (itemValues.length === 1);
						}
		    		}
				}
	      })
    
	      , falscheZeitenIgnorierenCheckbox: M.SelectionListView.design({
		          selectionMode: M.MULTIPLE_SELECTION
	            , contentBinding: {
	                  target: DigiWebApp.BautagebuchEinstellungenController
	                , property: 'settings.falscheZeitenIgnorierenItem'
	            }
			    , events: {
		    		change: {
			    		  target: DigiWebApp.BautagebuchEinstellungenController
		    			, action: function(itemValues, items) {
			    			this.settings.falscheZeitenIgnorieren = (itemValues.length === 1);
			    			this.settings.falscheZeitenIgnorierenItem.isSelected = (itemValues.length === 1);
						}
		    		}
				}
	      })

	      , positionVorselektierenCheckbox: M.SelectionListView.design({
		          selectionMode: M.MULTIPLE_SELECTION
	            , contentBinding: {
	                  target: DigiWebApp.BautagebuchEinstellungenController
	                , property: 'settings.positionVorselektierenItem'
	            }
			    , events: {
		    		change: {
			    		  target: DigiWebApp.BautagebuchEinstellungenController
		    			, action: function(itemValues, items) {
			    			this.settings.positionVorselektieren = (itemValues.length === 1);
			    			this.settings.positionVorselektierenItem.isSelected = (itemValues.length === 1);
						}
		    		}
				}
	      })

	      , in15MinutenSchrittenCheckbox: M.SelectionListView.design({
		          selectionMode: M.MULTIPLE_SELECTION
	            , contentBinding: {
	                  target: DigiWebApp.BautagebuchEinstellungenController
	                , property: 'settings.in15MinutenSchrittenItem'
	            }
			    , events: {
		    		change: {
			    		  target: DigiWebApp.BautagebuchEinstellungenController
		    			, action: function(itemValues, items) {
			    			this.settings.in15MinutenSchritten = (itemValues.length === 1);
			    			this.settings.in15MinutenSchrittenItem.isSelected = (itemValues.length === 1);
						}
		    		}
				}
	      })
	

      //	      , sliderContainer: M.ContainerView.design({
//	    	  		  childViews: 'daysToHoldBookingsOnDeviceSlider'
//			        , slider: M.SliderView.design({
//			        	  label: M.I18N.l('daysToHoldBookingsOnDeviceLabel')
//			        	, min: 1
//			        	, max: 40
//			        	, highlightLeftPart: YES
//			        	, cssClass: 'daysToHoldBookingsOnDeviceSlider'
//			            , contentBinding: {
//			                  target: DigiWebApp.SettingsController
//			                , property: 'settings.daysToHoldBookingsOnDevice'
//			            }
//			        })
//	      })
	    
    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchMaterialienDetailsPage
// ==========================================================================

DigiWebApp.BautagebuchMaterialienDetailsPage = M.PageView.design({

      events: {
		  pagebeforeshow: {
            action: function() {
					var itemSelected = NO;
					var relevantDetailsController = DigiWebApp.BautagebuchMaterialienDetailsController;

					if (relevantDetailsController.auftragId) {
						relevantDetailsController.set("auftraegeList", DigiWebApp.Order.getList({selectedId: relevantDetailsController.auftragId}));
					} else if (DigiWebApp.BookingController.currentBooking) {
						if (DigiWebApp.BookingController.currentBooking.get('handOrderId')) {
							relevantDetailsController.set("auftraegeList", DigiWebApp.Order.getList({selectedId: DigiWebApp.BookingController.currentBooking.get('handOrderId')}));
							relevantDetailsController.set('handOrderId', DigiWebApp.BookingController.currentBooking.get('handOrderId'));
							relevantDetailsController.set('handOrderName', DigiWebApp.BookingController.currentBooking.get('handOrderName'));
						} else {
							relevantDetailsController.set("auftraegeList", DigiWebApp.Order.getList({selectedId: DigiWebApp.BookingController.currentBooking.get('orderId')}));
							relevantDetailsController.set('auftragId', DigiWebApp.BookingController.currentBooking.get('orderId'));
							relevantDetailsController.set('auftragName', DigiWebApp.BookingController.currentBooking.get('orderName'));
						}
					} else {
						relevantDetailsController.set("auftraegeList", DigiWebApp.Order.getList());
					}

					if (DigiWebApp.BautagebuchBautageberichtDetailsController.bautagesberichtTyp == "<standard>") {
						var myPositionenList = JSON.parse(JSON.stringify(DigiWebApp.BautagebuchBautageberichtDetailsController.positionenList));
						_.each(myPositionenList, function(p) {
							if (parseInt(p.value) !== 0) {
								p.isSelected = NO;
							} else {
								p.isSelected = YES;
							}
						});
					    var positionenArray = _.map(myPositionenList, function(o) {
					    	if ( typeof(o) === "undefined" ) {
					    		console.log("UNDEFINED position");
					    	} else {    
								if (relevantDetailsController.positionId) {
									o.isSelected = (o.value === relevantDetailsController.positionId);
									if (o.isSelected) { itemSelected = YES; }
								}
					            return o;
					    	}
					    });
					    if (!itemSelected && DigiWebApp.BautagebuchEinstellungenController.settings.positionVorselektieren) {
						    positionenArray = _.map(positionenArray, function(o) {
								if (DigiWebApp.BautagebuchBautageberichtDetailsController.positionId) {
									o.isSelected = (o.value === DigiWebApp.BautagebuchBautageberichtDetailsController.positionId);
									if (o.isSelected) { itemSelected = YES; 
										relevantDetailsController.set("positionId", o.value);
										relevantDetailsController.set("positionName", o.label);
									}
								}
					            return o;
						    });
					    }
					    positionenArray = _.compact(positionenArray);
					    if (positionenArray.length > 1) {
					    	positionenArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected: !itemSelected});
					    }
					    if (!itemSelected && positionenArray.length == 1) {
					    	positionenArray[0].isSelected = YES;
					    	relevantDetailsController.set("positionId", positionenArray[0].value);
					    	relevantDetailsController.set("positionName", positionenArray[0].label);
					    }
					    relevantDetailsController.set("positionenList", positionenArray);
					    
					} else {
						
						relevantDetailsController.setPositionen(relevantDetailsController.auftragId);
					}
					
				    relevantDetailsController.setTaetigkeiten(relevantDetailsController.positionId);

					relevantDetailsController.setLieferanten(YES);
					relevantDetailsController.setHersteller(YES);
					relevantDetailsController.setMaterialtypen(YES);
					relevantDetailsController.setMaterialgruppen(YES);
				    
					relevantDetailsController.setMaterialien(YES);
					
					relevantDetailsController.setMengeneinheiten(YES);
					
					M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'mengenInput').setValue(DigiWebApp.BautagebuchMaterialienDetailsController.menge);
					
                	var myTyp = DigiWebApp.BautagebuchBautageberichtDetailsController.get("bautagesberichtTyp");
					if (DigiWebApp.BautagebuchBautageberichtDetailsController.item.get("abgeschlossen") && myTyp == "<standard>") {
						$("#" + DigiWebApp.BautagebuchMaterialienDetailsPage.content.speichernButton.id).hide();
						$("#" + DigiWebApp.BautagebuchMaterialienDetailsPage.header.delButton.id).hide();
					} else {
						$("#" + DigiWebApp.BautagebuchMaterialienDetailsPage.content.speichernButton.id).show();
						$("#" + DigiWebApp.BautagebuchMaterialienDetailsPage.header.delButton.id).show();
					}
					
                	if (myTyp == "<materialerfassung_only>") {
                		$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.auftragComboBox.id + "_container").show();
                    	$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.materialgruppeComboBox.id + "_container").show();
                	} else {
                		$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.auftragComboBox.id + "_container").hide();
                    	$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.materialgruppeComboBox.id + "_container").hide();
                	}

                	if (relevantDetailsController.get('handOrderId')) {
                		$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.positionComboBox.id + "_container").hide();
                	} else {
                		$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.positionComboBox.id + "_container").show();
                	}

                	$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.activityComboBox.id + "_container").hide();
                	$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.materialtypComboBox.id + "_container").hide();
                	$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.herstellerComboBox.id + "_container").hide();
                	$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.lieferantComboBox.id + "_container").hide();

			}
        }
        , pagehide: {
            action: function() {

        	}
        }
    }

    , cssClass: 'bautagebuchMaterialienDetailsPage'

    , childViews: 'header content'

    , header: M.ToolbarView.design({
          childViews: 'backButton title uebersichtButton'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                    //  target: DigiWebApp.NavigationController
                    //, action: 'backToBautagebuchMaterialienListePageTransition'
        			action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} 
        				history.back();
        			}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('BautagebuchMaterial')
            , anchorLocation: M.CENTER
        })
        , delButton: M.ButtonView.design({
              value: M.I18N.l('BautagebuchDelete')
            , icon: 'delete'
            , anchorLocation: M.RIGHT
            , cssClass: 'red_background'
            , events: {
                tap: {
                      target: DigiWebApp.BautagebuchMaterialienDetailsController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} 
                    	this.deleteMaterialbuchung();
                    }
                }
            }
        })
        , uebersichtButton: M.ButtonView.design({
              value: M.I18N.l('uebersicht')
            , icon: 'forward'
            , anchorLocation: M.RIGHT
            , events: {
                tap: {
                      target: DigiWebApp.BautagebuchMaterialienDetailsController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} 
                    	//this.deleteMaterialbuchung();
                    	DigiWebApp.NavigationController.backToBautagebuchMaterialienListePageTransition();
                    }
                }
            }
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({

    	  childViews: 'auftragComboBox positionComboBox activityComboBox materialtypComboBox materialgruppeComboBox herstellerComboBox lieferantComboBox materialComboBox materialInput spacer1 mengeGrid speichernButton loeschenButton'
        	  
        , cssClass: 'content'
    	
        , spacer1: M.LabelView.design({
            value: '&nbsp;<br>'
        })

        , spacer2: M.LabelView.design({
            value: '&nbsp;<br>'
        })

        , spacer3: M.LabelView.design({
            value: '&nbsp;<br>'
        })

        , auftragComboBox: M.SelectionListView.design({

                /* renders a selection view like check boxes */
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('noData')
                , label: M.I18N.l('order')
                , applyTheme: NO
                /* this seleciton view has no static entries, instead it is filled via content binding. */
                , contentBinding: {
                      target: DigiWebApp.BautagebuchMaterialienDetailsController
                    , property: 'auftraegeList'
                }
                , events: {
                    change: {
                    	/* executed in scope of DOMWindow because no target defined */
                    	action: function(selectedValue, selectedItem) {
                			var mySelection = M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'auftragComboBox').getSelection(YES);
                			if (mySelection.label == mySelection.value || isGUID(mySelection.value)) {
			      				DigiWebApp.BautagebuchMaterialienDetailsController.set("orderId", null);
			      				DigiWebApp.BautagebuchMaterialienDetailsController.set("orderName", null);
			      				DigiWebApp.BautagebuchMaterialienDetailsController.set("handOrderId", mySelection.value);
			      				DigiWebApp.BautagebuchMaterialienDetailsController.set("handOrderName", mySelection.label);
                        		$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.positionComboBox.id + "_container").hide();
                			} else {
    		      				DigiWebApp.BautagebuchMaterialienDetailsController.set("orderId", mySelection.value);
    		      				DigiWebApp.BautagebuchMaterialienDetailsController.set("orderId", mySelection.label);
			      				DigiWebApp.BautagebuchMaterialienDetailsController.set("handOrderId", null);
			      				DigiWebApp.BautagebuchMaterialienDetailsController.set("handOrderName", null);
                        		$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.positionComboBox.id + "_container").show();
                			}
		      				DigiWebApp.BautagebuchMaterialienDetailsController.setPositionen(M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'auftragComboBox').getSelection(YES).value);
                    	}
                	}
                }
        })
            	
        , positionComboBox: M.SelectionListView.design({

                /* renders a selection view like check boxes */
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('noData')
                , label: M.I18N.l('position')
                , applyTheme: NO
                /* this seleciton view has no static entries, instead it is filled via content binding. */
                , contentBinding: {
                      target: DigiWebApp.BautagebuchMaterialienDetailsController
                    , property: 'positionenList'
                }
                , events: {
                    change: {
                    	/* executed in scope of DOMWindow because no target defined */
                    	action: function(selectedValue, selectedItem) {
		      				DigiWebApp.BautagebuchMaterialienDetailsController.set("positionId", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'positionComboBox').getSelection(YES).value);
		      				DigiWebApp.BautagebuchMaterialienDetailsController.set("positionName", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'positionComboBox').getSelection(YES).label);
		      				DigiWebApp.BautagebuchMaterialienDetailsController.setTaetigkeiten(M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'positionComboBox').getSelection(YES).value);
                    	}
                	}
                }
        })
        
        , activityComboBox: M.SelectionListView.design({

                /* renders a selection view like check boxes */
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('noData')
                , label: M.I18N.l('activity')
                , applyTheme: NO
                /* this seleciton view has no static entries, instead it is filled via content binding. */
                , contentBinding: {
                      target: DigiWebApp.BautagebuchMaterialienDetailsController
                    , property: 'activityList'
                }
                , events: {
                    change: {
                    	/* executed in scope of DOMWindow because no target defined */
                    	action: function(selectedValue, selectedItem) {
		      				DigiWebApp.BautagebuchMaterialienDetailsController.set("activityId", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'activityComboBox').getSelection(YES).value);
		      				DigiWebApp.BautagebuchMaterialienDetailsController.set("activityName", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'activityComboBox').getSelection(YES).label);
                    	}
                	}
                }
        })
            	
        , materialtypComboBox: M.SelectionListView.design({

                /* renders a selection view like check boxes */
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('noData')
                , label: M.I18N.l('BautagebuchMaterialtyp')
                , applyTheme: NO
                /* this seleciton view has no static entries, instead it is filled via content binding. */
                , contentBinding: {
                      target: DigiWebApp.BautagebuchMaterialienDetailsController
                    , property: 'materialtypenList'
                }
                , events: {
                    change: {
                    	/* executed in scope of DOMWindow because no target defined */
                    	action: function(selectedValue, selectedItem) {
		      				DigiWebApp.BautagebuchMaterialienDetailsController.set("materialtypId", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'materialtypComboBox').getSelection(YES).value);
		      				DigiWebApp.BautagebuchMaterialienDetailsController.set("materialtypBezeichnung", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'materialtypComboBox').getSelection(YES).label);
		      				DigiWebApp.BautagebuchMaterialienDetailsController.setMaterialien();
                    	}
                	}
                }
        })

        , materialgruppeComboBox: M.SelectionListView.design({

                /* renders a selection view like check boxes */
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('noData')
                , label: M.I18N.l('BautagebuchMaterialgruppe')
                , applyTheme: NO
                /* this seleciton view has no static entries, instead it is filled via content binding. */
                , contentBinding: {
                      target: DigiWebApp.BautagebuchMaterialienDetailsController
                    , property: 'materialgruppenList'
                }
                , events: {
                    change: {
                    	/* executed in scope of DOMWindow because no target defined */
                    	action: function(selectedValue, selectedItem) {
		      				DigiWebApp.BautagebuchMaterialienDetailsController.set("materialgruppeId", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'materialgruppeComboBox').getSelection(YES).value);
		      				DigiWebApp.BautagebuchMaterialienDetailsController.set("materialgruppeBezeichnung", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'materialgruppeComboBox').getSelection(YES).label);
		      				DigiWebApp.BautagebuchMaterialienDetailsController.setMaterialien();
                    	}
                	}
                }
        })

        , herstellerComboBox: M.SelectionListView.design({

                /* renders a selection view like check boxes */
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('noData')
                , label: M.I18N.l('BautagebuchHersteller')
                , applyTheme: NO
                /* this seleciton view has no static entries, instead it is filled via content binding. */
                , contentBinding: {
                      target: DigiWebApp.BautagebuchMaterialienDetailsController
                    , property: 'herstellerList'
                }
                , events: {
                    change: {
                    	/* executed in scope of DOMWindow because no target defined */
                    	action: function(selectedValue, selectedItem) {
		      				DigiWebApp.BautagebuchMaterialienDetailsController.set("herstellerId", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'herstellerComboBox').getSelection(YES).value);
		      				DigiWebApp.BautagebuchMaterialienDetailsController.set("herstellerBezeichnung", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'herstellerComboBox').getSelection(YES).label);
		      				DigiWebApp.BautagebuchMaterialienDetailsController.setMaterialien();
                    	}
                	}
                }
        })

        , lieferantComboBox: M.SelectionListView.design({

                /* renders a selection view like check boxes */
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('noData')
                , label: M.I18N.l('BautagebuchLieferant')
                , applyTheme: NO
                /* this seleciton view has no static entries, instead it is filled via content binding. */
                , contentBinding: {
                      target: DigiWebApp.BautagebuchMaterialienDetailsController
                    , property: 'lieferantenList'
                }
                , events: {
                    change: {
                    	/* executed in scope of DOMWindow because no target defined */
                    	action: function(selectedValue, selectedItem) {
		      				DigiWebApp.BautagebuchMaterialienDetailsController.set("lieferantId", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'lieferantComboBox').getSelection(YES).value);
		      				DigiWebApp.BautagebuchMaterialienDetailsController.set("lieferantBezeichnung", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'lieferantComboBox').getSelection(YES).label);
		      				DigiWebApp.BautagebuchMaterialienDetailsController.setMaterialien();
                    	}
                	}
                }
        })
        
        , materialComboBox: M.SelectionListView.design({

                /* renders a selection view like check boxes */
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('noData')
                , label: M.I18N.l('BautagebuchMaterial')
                , applyTheme: NO
                /* this seleciton view has no static entries, instead it is filled via content binding. */
                , contentBinding: {
                      target: DigiWebApp.BautagebuchMaterialienDetailsController
                    , property: 'materialienList'
                }
                , events: {
                    change: {
                    	/* executed in scope of DOMWindow because no target defined */
                    	action: function(selectedValue, selectedItem) {
                			var relevantDetailsController = DigiWebApp.BautagebuchMaterialienDetailsController;
                			relevantDetailsController.set("materialId", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'materialComboBox').getSelection(YES).value);
                			if (selectedValue === 0 || parseInt(selectedValue) === 0) {
                				$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.materialInput.id).parent().show()
                			} else {
                				$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.materialInput.id).parent().hide()
    		      				relevantDetailsController.set("artikel", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'materialComboBox').getSelection(YES).label);
                			}
                			relevantDetailsController.set('mengeneinheitId', null);
        					relevantDetailsController.setMengeneinheiten();
                    	}
                	}
                }
        })
            	
        , materialInput: M.TextFieldView.design({
        	   cssClass: 'materialInput'
	         , events: {
        		keyup: {
	                /* executed in scope of DOMWindow because no target defined */
	            	action: function(selectedValue, selectedItem) {
	        				DigiWebApp.BautagebuchMaterialienDetailsController.set("artikel", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'materialInput').getValue());
	            	}
	            }
	    	}
        })

        , mengeGrid: M.GridView.design({
        	
	      	  childViews: 'mengenInput mengeneinheitComboBox'
	        , layout: M.TWO_COLUMNS
	        , label: M.I18N.l('BautagebuchMenge')
		    , mengeneinheitComboBox: M.SelectionListView.design({
		
		        /* renders a selection view like check boxes */
		          selectionMode: M.SINGLE_SELECTION_DIALOG
		        , initialText: M.I18N.l('noData')
		        //, label: M.I18N.l('BautagebuchMengeneinheit')
		        , applyTheme: NO
		        /* this seleciton view has no static entries, instead it is filled via content binding. */
		        , contentBinding: {
		              target: DigiWebApp.BautagebuchMaterialienDetailsController
		            , property: 'mengeneinheitenList'
		        }
		        , events: {
		                    change: {
		                        /* executed in scope of DOMWindow because no target defined */
				            	action: function(selectedValue, selectedItem) {
		        					DigiWebApp.BautagebuchMaterialienDetailsController.set("mengeneinheitId", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'mengeneinheitComboBox').getSelection(YES).value);
		                			if (selectedValue === 0 || parseInt(selectedValue) === 0) {
//		                				$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.mengeneinheitInput.id).show();
//			                			$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.mengeneinheitInput.id).parent().removeClass("transparent");
		                			} else {
//		                				$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.mengeneinheitInput.id).hide();
//			                			$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.mengeneinheitInput.id).parent().addClass("transparent");
		                				var mengeneinheitId = M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'mengeneinheitComboBox').getSelection(YES).value;
		                				var mengeneinheitKuerzel = DigiWebApp.BautagebuchMengeneinheit.findSorted(mengeneinheitId)[0].get("kuerzel");
		                				DigiWebApp.BautagebuchMaterialienDetailsController.set("einheit", mengeneinheitKuerzel);
					    			}
				            	}
		                    }
		        }
		    })
	
	        , mengeneinheitInput: M.TextFieldView.design({
		         events: {
	        		keyup: {
	                    /* executed in scope of DOMWindow because no target defined */
		            	action: function(selectedValue, selectedItem) {
	            				DigiWebApp.BautagebuchMaterialienDetailsController.set("einheit", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'mengeneinheitInput').getValue());
		            	}
	                }
	        	}
	        })
	
	        , mengenInput: M.TextFieldView.design({
	        	  inputType: M.INPUT_NUMBER
	            //, label: M.I18N.l('BautagebuchMenge')
	        	, cssClass: 'mengeInput'
		        , events: {
	        		keyup: {
	                    /* executed in scope of DOMWindow because no target defined */
		            	action: function(selectedValue, selectedItem) {
	            				DigiWebApp.BautagebuchMaterialienDetailsController.set("menge", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'mengenInput').getValue());
		            	}
	                }
	        	}
	        })
        })

        , speichernButton: M.GridView.design({
              childViews: 'button icon'
            , layout: {
                  cssClass: 'digiButton'
                , columns: {
                      0: 'button'
                    , 1: 'icon'
                }
            }
            , button: M.ButtonView.design({
                  value: M.I18N.l('save')
                , cssClass: 'digiButton green_background'
                , anchorLocation: M.RIGHT
                , events: {
                    tap: {
		                target: DigiWebApp.BautagebuchMaterialienDetailsController,
		                action: function() {
            				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
                			var relevantDetailsController = DigiWebApp.BautagebuchMaterialienDetailsController;
                			relevantDetailsController.set("materialId", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'materialComboBox').getSelection(YES).value);
                			var selectedValue = M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'materialComboBox').getSelection(YES).value;
                			if (selectedValue == 0 || parseInt(selectedValue) == 0) {
                				$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.materialInput.id).parent().show()
                			} else {
                				$('#' + DigiWebApp.BautagebuchMaterialienDetailsPage.content.materialInput.id).parent().hide()
    		      				relevantDetailsController.set("artikel", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'materialComboBox').getSelection(YES).label);
                			}
            				//relevantDetailsController.set("einheit", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'mengeneinheitInput').getValue());
                			relevantDetailsController.set("menge", M.ViewManager.getView('bautagebuchMaterialienDetailsPage', 'mengenInput').getValue());
            				this.save();
            			}
                    }
                }
            })
            , icon: M.ImageView.design({
                value: 'theme/images/icon_bookTime.png'
            })
        })
		
	    , loeschenButton: M.ButtonView.design({
		      value: M.I18N.l('BautagebuchDelete')
		    , cssClass: 'red_background'
		    //, anchorLocation: M.CENTER
		    , events: {
		        tap: {
		            target: DigiWebApp.BautagebuchMaterialienDetailsController,
		            action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
        				this.deleteMaterialbuchung();
	    			}
		        }
		      }
	    })

    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchMaterialienTemplateView
// ==========================================================================

DigiWebApp.BautagebuchMaterialienTemplateView = M.ListItemView.design({

      isSelectable: YES

    , childViews: 'positionName handOrderName activityName spacer menge einheit artikel'

    , events: {
        tap: {
			action: function(id, m_id) {
			    var view = M.ViewManager.getViewById(id);
			    var view_modelId = view.modelId;
			    _.each(DigiWebApp.BautagebuchMaterialienListeController.items, function(selectedItem) {
					if (selectedItem.m_id === view_modelId) {
						DigiWebApp.BautagebuchMaterialienDetailsController.load(selectedItem);
					}
				});
			    DigiWebApp.NavigationController.toBautagebuchMaterialienDetailsPageTransition();
			}
        }
    }
	
	, spacer: M.LabelView.design({
	      value: ''
	})

	, positionName: M.LabelView.design({
	    cssClass: 'normal unselectable'
  	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= positionName %>'
	      , operation: function(v) {
					if (v !== "" && v !== null) {
						return v;
					} else {
						return "";
					}
	          }
	  }
	})
	
	, handOrderName: M.LabelView.design({
	    cssClass: 'normal unselectable'
  	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= handOrderName %>'
	      , operation: function(v) {
					if (v !== "" && v !== null) {
						return v;
					} else {
						return "";
					}
	          }
	  }
	})
	
	, activityName: M.LabelView.design({
	    cssClass: 'normal unselectable'
  	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= activityName %>'
	      , operation: function(v) {
					if (v !== "" && v !== null) {
						return ", " + v + ":";
					} else {
						return ":";
					}
	          }
	  }
	})
	
	, menge: M.LabelView.design({
	    cssClass: 'normal unselectable'
  	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= menge %>'
	      , operation: function(v) {
					if (v !== "" && v !== null) {
						return v;
					} else {
						return "";
					}
	          }
	  }
	})
	
	, einheit: M.LabelView.design({
	    cssClass: 'normal unselectable'
	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= einheit %>'
	      , operation: function(v) {
					if (v !== "" && v !== null) {
						return " " + v;
					} else {
						return "";
					}
	          }
	  }
	})

	, artikel: M.LabelView.design({
	    cssClass: 'normal unselectable'
	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= artikel %>'
	      , operation: function(v) {
					if (v !== "" && v !== null) {
						return " \"" + v + "\"";
					} else {
						return "";
					}
	          }
	  }
	})
    
});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchMaterialienListePage
// ==========================================================================

m_require('app/views/BautagebuchMaterialienTemplateView');

DigiWebApp.BautagebuchMaterialienListePage = M.PageView.design({

    events: {
		pagebeforeshow: {
              target: DigiWebApp.BautagebuchMaterialienListeController
            , action: 'init'
        }
    }

    , childViews: 'header content'

    , cssClass: 'bautagebuchListePage unselectable'

    , header: M.ToolbarView.design({
        childViews: 'backButton title newButton'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
                    	var myTyp = DigiWebApp.BautagebuchBautageberichtDetailsController.get("bautagesberichtTyp");
                    	if (myTyp == "<standard>") {
                    		this.backToBautagebuchBautageberichtDetailsPageTransition();
                    	} else if (myTyp == "<materialerfassung_only>") {
                    		DigiWebApp.NavigationController.backToDashboardPage();
                    	} else {
                    		history.back();
                    	}
                    }
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('BautagebuchMaterialien')
            , anchorLocation: M.CENTER
        })
        , newButton: M.ButtonView.design({
              value: M.I18N.l('BautagebuchAdd')
            , icon: 'new'
            , anchorLocation: M.RIGHT
            , cssClass: 'green_background'
            , events: {
                tap: {
        			action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} 
        				DigiWebApp.BautagebuchMaterialienListeController.neu();
					}
                }
            }
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
          childViews: 'list'
        , list: M.ListView.design({
              contentBinding: {
                  target: DigiWebApp.BautagebuchMaterialienListeController
                , property: 'items'
            }
            , listItemTemplateView: DigiWebApp.BautagebuchMaterialienTemplateView
        })
    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchMedienDetailsPage
// ==========================================================================

DigiWebApp.BautagebuchMedienDetailsPage = M.PageView.design({

      events: {
		  pagebeforeshow: {
            action: function() {
				// verfügbare Positionen kopieren und ausgewählte selektieren
				var itemSelected = NO;
//				var myPositionenList = JSON.parse(JSON.stringify(DigiWebApp.BautagebuchBautageberichtDetailsController.positionenList));
//				_.each(myPositionenList, function(p) {
//					if (parseInt(p.value) !== 0) {
//						p.isSelected = NO;
//					} else {
//						p.isSelected = YES;
//					}
//				});
//			    var positionenArray = _.map(myPositionenList, function(o) {
//			    	if ( typeof(o) === "undefined" ) {
//			    		console.log("UNDEFINED position");
//			    	} else {    
//						if (DigiWebApp.BautagebuchMedienDetailsController.positionId) {
//							o.isSelected = (o.value === DigiWebApp.BautagebuchMedienDetailsController.positionId);
//							if (o.isSelected) { itemSelected = YES; }
//						}
//			            return o;
//			    	}
//			    });
//			    positionenArray = _.compact(positionenArray);
//			    if (positionenArray.length !== 1) {
//			    	positionenArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected: !itemSelected});
//			    } else {
//			    	DigiWebApp.BautagebuchMedienDetailsController.set("positionId", positionenArray[0].value);
//			    	DigiWebApp.BautagebuchMedienDetailsController.set("positionName", positionenArray[0].label);
//			    }
//			    if (positionenArray.length == 1) {
//			    	positionenArray[0].isSelected = YES;
//			    }
//				DigiWebApp.BautagebuchMedienDetailsController.set("positionenList", positionenArray);
//				
//				DigiWebApp.BautagebuchMedienDetailsController.setTaetigkeiten(DigiWebApp.BautagebuchMedienDetailsController.positionId);
				var relevantDetailsController = DigiWebApp.BautagebuchMedienDetailsController;
				var myPositionenList = JSON.parse(JSON.stringify(DigiWebApp.BautagebuchBautageberichtDetailsController.positionenList));
				_.each(myPositionenList, function(p) {
					if (parseInt(p.value) !== 0) {
						p.isSelected = NO;
					} else {
						p.isSelected = YES;
					}
				});
			    var positionenArray = _.map(myPositionenList, function(o) {
			    	if ( typeof(o) === "undefined" ) {
			    		console.log("UNDEFINED position");
			    	} else {    
						if (relevantDetailsController.positionId) {
							o.isSelected = (o.value === relevantDetailsController.positionId);
							if (o.isSelected) { itemSelected = YES; }
						}
			            return o;
			    	}
			    });
			    if (!itemSelected && DigiWebApp.BautagebuchEinstellungenController.settings.positionVorselektieren) {
				    positionenArray = _.map(positionenArray, function(o) {
						if (DigiWebApp.BautagebuchBautageberichtDetailsController.positionId) {
							o.isSelected = (o.value === DigiWebApp.BautagebuchBautageberichtDetailsController.positionId);
							if (o.isSelected) { itemSelected = YES; 
								relevantDetailsController.set("positionId", o.value);
								relevantDetailsController.set("positionName", o.label);
							}
						}
			            return o;
				    });
			    }
			    positionenArray = _.compact(positionenArray);
			    if (positionenArray.length > 1) {
			    	positionenArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected: !itemSelected});
			    }
			    if (!itemSelected && positionenArray.length == 1) {
			    	positionenArray[0].isSelected = YES;
			    	relevantDetailsController.set("positionId", positionenArray[0].value);
			    	relevantDetailsController.set("positionName", positionenArray[0].label);
			    }
			    relevantDetailsController.set("positionenList", positionenArray);
				
			    relevantDetailsController.setTaetigkeiten(relevantDetailsController.positionId);

				M.ViewManager.getView('bautagebuchMedienDetailsPage', 'remarkInput').setValue(DigiWebApp.BautagebuchMedienDetailsController.remark);
				$('#' + DigiWebApp.BautagebuchMedienDetailsPage.content.remarkInput.id)[0].focus();
				$('#' + DigiWebApp.BautagebuchMedienDetailsPage.content.remarkInput.id)[0].blur();

				if (DigiWebApp.BautagebuchBautageberichtDetailsController.item.get("abgeschlossen")) {
					$("#" + DigiWebApp.BautagebuchMedienDetailsPage.content.grid.id).hide();
					$("#" + DigiWebApp.BautagebuchMedienDetailsPage.header.delButton.id).hide();
				} else {
					$("#" + DigiWebApp.BautagebuchMedienDetailsPage.content.grid.id).show();
					$("#" + DigiWebApp.BautagebuchMedienDetailsPage.header.delButton.id).show();
				}
				
				$('#' + DigiWebApp.BautagebuchMedienDetailsPage.content.activityComboBox.id + "_container").hide();

            	if (relevantDetailsController.get('handOrderId')) {
            		$('#' + DigiWebApp.BautagebuchMedienDetailsPage.content.positionComboBox.id + "_container").hide();
            	} else {
            		$('#' + DigiWebApp.BautagebuchMedienDetailsPage.content.positionComboBox.id + "_container").show();
            	}
			}
        }
		, pageshow: {
		    action: function() {
				$('#' + DigiWebApp.BautagebuchMedienDetailsPage.content.remarkInput.id)[0].focus();
				$('#' + DigiWebApp.BautagebuchMedienDetailsPage.content.remarkInput.id)[0].blur();
			}
		}
		, pagehide: {
		    action: function() {
				// reset auto-grow
				M.ViewManager.getView('bautagebuchMedienDetailsPage', 'remarkInput').setCssProperty("height","50px");
			}
		}
    }
	
    , cssClass: 'bautagebuchMedienDetailsPage'

    , childViews: 'header content'

    , header: M.ToolbarView.design({
          childViews: 'backButton title uebersichtButton'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                    //  target: DigiWebApp.NavigationController
                    //, action: 'backToBautagebuchMedienListePageTransition'
        			action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} 
        				history.back();
        			}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('BautagebuchMedium')
            , anchorLocation: M.CENTER
        })
        , delButton: M.ButtonView.design({
              value: M.I18N.l('BautagebuchDelete')
            , icon: 'delete'
            , anchorLocation: M.RIGHT
            , cssClass: 'red_background'
            , events: {
                tap: {
                      target: DigiWebApp.BautagebuchMedienDetailsController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} 
                    	this.deleteMedienBuchung();
                    }
                }
            }
        })
        , uebersichtButton: M.ButtonView.design({
              value: M.I18N.l('uebersicht')
            , icon: 'forward'
            , anchorLocation: M.RIGHT
            , events: {
                tap: {
                      target: DigiWebApp.BautagebuchMedienDetailsController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} 
                    	//this.deleteMedienBuchung();
                    	DigiWebApp.NavigationController.backToBautagebuchMedienListePageTransition();
                    }
                }
            }
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({

    	  childViews: 'positionComboBox activityComboBox image remarkInput grid loeschenButton'
        	  
        , cssClass: 'content'
    	
        , image: M.ImageView.design({
      		  value: ''
      		, cssClass: 'photo'
        })
        
        , remarkInput: M.TextFieldView.design({
              label: M.I18N.l('remark')
            , cssClass: 'remarkInput'
            , cssClassOnInit: 'remarkInputInitial'
            , initialText: "max. 255 " + M.I18N.l('characters')
            , hasMultipleLines: YES
   	        , events: {
        		keyup: {
	                /* executed in scope of DOMWindow because no target defined */
	            	action: function(selectedValue, selectedItem) {
						var myValue = M.ViewManager.getView('bautagebuchMedienDetailsPage', 'remarkInput').getValue();
						if (myValue.length <= 255) {
							DigiWebApp.BautagebuchMedienDetailsController.set("remark", M.ViewManager.getView('bautagebuchMedienDetailsPage', 'remarkInput').getValue());
						} else {
							M.ViewManager.getView('bautagebuchMedienDetailsPage', 'remarkInput').setValue(DigiWebApp.BautagebuchMedienDetailsController.remark);
				            DigiWebApp.ApplicationController.nativeAlertDialogView({
				                title: M.I18N.l('maximaleFeldlaengeErreicht')
				              , message: M.I18N.l('maximaleFeldlaengeErreichtMsg')
				            });
						}
	            	}
	            }
	    	}
        })

        , positionComboBox: M.SelectionListView.design({

                /* renders a selection view like check boxes */
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('noData')
                , label: M.I18N.l('position')
                , applyTheme: NO
                /* this seleciton view has no static entries, instead it is filled via content binding. */
                , contentBinding: {
                      target: DigiWebApp.BautagebuchMedienDetailsController
                    , property: 'positionenList'
                }
                , events: {
                    change: {
                    	/* executed in scope of DOMWindow because no target defined */
                    	action: function(selectedValue, selectedItem) {
		      				DigiWebApp.BautagebuchMedienDetailsController.set("positionId", M.ViewManager.getView('bautagebuchMedienDetailsPage', 'positionComboBox').getSelection(YES).value);
		      				DigiWebApp.BautagebuchMedienDetailsController.set("positionName", M.ViewManager.getView('bautagebuchMedienDetailsPage', 'positionComboBox').getSelection(YES).label);
		      				DigiWebApp.BautagebuchMedienDetailsController.setTaetigkeiten(M.ViewManager.getView('bautagebuchMedienDetailsPage', 'positionComboBox').getSelection(YES).value);
                    	}
                	}
                }
        })
            	
        , activityComboBox: M.SelectionListView.design({

                /* renders a selection view like check boxes */
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('noData')
                , label: M.I18N.l('activity')
                , applyTheme: NO
                /* this seleciton view has no static entries, instead it is filled via content binding. */
                , contentBinding: {
                      target: DigiWebApp.BautagebuchMedienDetailsController
                    , property: 'activityList'
                }
                , events: {
                    change: {
                    	/* executed in scope of DOMWindow because no target defined */
                    	action: function(selectedValue, selectedItem) {
		      				DigiWebApp.BautagebuchMedienDetailsController.set("activityId", M.ViewManager.getView('bautagebuchMedienDetailsPage', 'activityComboBox').getSelection(YES).value);
		      				DigiWebApp.BautagebuchMedienDetailsController.set("activityName", M.ViewManager.getView('bautagebuchMedienDetailsPage', 'activityComboBox').getSelection(YES).label);
                    	}
                	}
                }
        })
        
        , grid: M.GridView.design({
	            childViews: 'button icon'
	          , layout: {
	                cssClass: 'digiButton'
	              , columns: {
	                    0: 'button'
	                  , 1: 'icon'
	              }
	          }
	          , button: M.ButtonView.design({
	                value: M.I18N.l('save')
	              , cssClass: 'digiButton green_background'
	              , anchorLocation: M.RIGHT
	              , events: {
	                  tap: {
			                target: DigiWebApp.BautagebuchMedienDetailsController,
			                action: function() {
	            				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
	            				this.save();
	            			}
	                  }
	              }
	          })
	          , icon: M.ImageView.design({
	              value: 'theme/images/icon_bookTime.png'
	          })
        })
        
        , loeschenButton: M.ButtonView.design({
	  	      value: M.I18N.l('BautagebuchDelete')
	  	    , cssClass: 'red_background'
	  	    //, anchorLocation: M.CENTER
	  	    , events: {
	  	        tap: {
	  	            target: DigiWebApp.BautagebuchMedienDetailsController,
	  	            action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
        				this.deleteMedienBuchung();
        			}
	  	        }
	  	      }
	      })

    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchMedienTemplateView
// ==========================================================================

DigiWebApp.BautagebuchMedienTemplateView = M.ListItemView.design({

      isSelectable: YES

    , childViews: 'positionName handOrderName activityName spacer remark'

    , events: {
        tap: {
			action: function(id, m_id) {
				    var view = M.ViewManager.getViewById(id);
				    var view_modelId = view.modelId;
				    _.each(DigiWebApp.BautagebuchMedienListeController.items, function(selectedItem) {
						if (selectedItem.m_id === view_modelId) {
							DigiWebApp.BautagebuchMedienDetailsController.load(selectedItem);
						}
					});
				    DigiWebApp.NavigationController.toBautagebuchMedienDetailsPageTransition();
			}
        }
    }
	
	, spacer: M.LabelView.design({
	    value: ''
	})
	
	, positionName: M.LabelView.design({
	    cssClass: 'normal unselectable'
  	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= positionName %>'
	      , operation: function(v) {
					if (v !== "" && v !== null) {
						return v;
					} else {
						return "";
					}
	          }
	  }
	})
	
	, handOrderName: M.LabelView.design({
	    cssClass: 'normal unselectable'
  	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= handOrderName %>'
	      , operation: function(v) {
					if (v !== "" && v !== null) {
						return v;
					} else {
						return "";
					}
	          }
	  }
	})
	
	, activityName: M.LabelView.design({
	      cssClass: 'normal unselectable'
	    , isInline: YES
		, computedValue: {
		      valuePattern: '<%= activityName %>'
		    , operation: function(v) {
						if (v !== "" && v !== null) {
							return ", " + v + ":";
						} else {
							return ":";
						}
		        }
		}
	})

	, remark: M.LabelView.design({
	      cssClass: 'small unselectable'
		, computedValue: {
		      valuePattern: '<%= remark %>'
		    , operation: function(v) {
						if (v !== "" && v !== null) {
							var outputLength = 50;
							if (v.length > outputLength) { 
								return v.substring(0,outputLength) + "..."; 
							} else { 
								return v.substring(0,outputLength);
							}
						} else {
							return "";
						}
		        }
		}
	})
    
});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchMedienListePage
// ==========================================================================

m_require('app/views/BautagebuchMedienTemplateView');

DigiWebApp.BautagebuchMedienListePage = M.PageView.design({

    events: {
		pagebeforeshow: {
              target: DigiWebApp.BautagebuchMedienListeController
            , action: 'init'
        }
    }

	, controller: DigiWebApp.BautagebuchMedienListeController
	, navigationController: DigiWebApp.NavigationController
	
    , childViews: 'header content'

    , cssClass: 'bautagebuchListePage unselectable'

    , header: M.ToolbarView.design({
        childViews: 'backButton title newButton'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.backToBautagebuchBautageberichtDetailsPageTransition();}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('BautagebuchMedien')
            , anchorLocation: M.CENTER
        })
        , newButton: M.ButtonView.design({
              value: M.I18N.l('BautagebuchAdd')
            , icon: 'new'
            , anchorLocation: M.RIGHT
            , cssClass: 'green_background'
            , events: {
                tap: {
        			action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} 
						DigiWebApp.BautagebuchMedienListeController.neu();
					}
                }
            }
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
          childViews: 'list'
        , list: M.ListView.design({
              contentBinding: {
                  target: DigiWebApp.BautagebuchMedienListeController
                , property: 'items'
            }
            , listItemTemplateView: DigiWebApp.BautagebuchMedienTemplateView
        })
    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchMitarbeiterAuswahlPage
// ==========================================================================

DigiWebApp.BautagebuchMitarbeiterAuswahlPage = M.PageView.design({

      events: {
		  pagebeforeshow: {
            action: function() {

					// verfügbare Mitarbeiter kopieren und ausgewählte selektieren
                    var mitarbeiterIds = DigiWebApp.BautagebuchBautageberichtDetailsController.mitarbeiterIds; 
                    var mitarbeiterList = [];
                    var myMitarbeiterList = JSON.parse(JSON.stringify(DigiWebApp.BautagebuchMainController.mitarbeiter));
                    var mitarbeiterArray = mitarbeiterList;
    				if (mitarbeiterIds && mitarbeiterIds.length !== 0) {
    					mitarbeiterArray = _.map(myMitarbeiterList, function(o) {
    						var mitarbeiterSelected = NO;
    						_.each(mitarbeiterIds, function(m) {
    							if (m === o.value) {
    								mitarbeiterSelected = YES;
    							}
    						});
    						o.isSelected = (mitarbeiterSelected === YES);
							return o;
		    			});
	            	} else {
    					mitarbeiterArray = DigiWebApp.BautagebuchMainController.mitarbeiter;
	            	}
    				mitarbeiterArray = _.compact(mitarbeiterArray);
					DigiWebApp.BautagebuchBautageberichtDetailsController.set("mitarbeiterList", mitarbeiterArray);
					
					// set mitarbeiterListSelected
                    var mitarbeiterListSelected = [];
                    var mitarbeiterArraySelected = mitarbeiterListSelected;
                    myMitarbeiterList = JSON.parse(JSON.stringify(DigiWebApp.BautagebuchMainController.mitarbeiter));
    				if (mitarbeiterIds && mitarbeiterIds.length !== 0) {
    					mitarbeiterArraySelected = _.map(myMitarbeiterList, function(o) {
    						var mitarbeiterSelected = NO;
    						_.each(mitarbeiterIds, function(m) {
    							if (m === o.value) {
    								mitarbeiterSelected = YES;
    							}
    						});
    						if (mitarbeiterSelected) {
    							o.isSelected = YES;
    							return o;
    						}
		    			});
	            	}
    				mitarbeiterArraySelected = _.compact(mitarbeiterArraySelected);
					DigiWebApp.BautagebuchBautageberichtDetailsController.set("mitarbeiterListSelected", mitarbeiterArraySelected);

			}
        }
        , pagehide: {
            action: function() {

        	}
        }
    }

    , cssClass: 'bautagebuchMitarbeiterAuswahlPage'

    , childViews: 'header content'

    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} history.back();}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('employees')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({

    	  //childViews: 'projektleiterComboBox auftragComboBox mitarbeiterGroup startUhrzeit spacer2 zeitenButton materialienButton notizenButton medienButton wetterButton spacer1 grid'
    	  childViews: 'mitarbeiterGroup spacer1 grid'
    		  
        , cssClass: 'content'
    	
        , spacer1: M.LabelView.design({
            value: '&nbsp;<br>'
        })

        	
        , mitarbeiterGroup: M.SelectionListView.design({

            /* renders a selection view like check boxes */
              selectionMode: M.MULTIPLE_SELECTION

            , initialText: M.I18N.l('noData')
            
            //, label: M.I18N.l('employees')

            , applyTheme: NO

            /* this seleciton view has no static entries, instead it is filled via content binding. */
            , contentBinding: {
                  target: DigiWebApp.BautagebuchBautageberichtDetailsController
                , property: 'mitarbeiterList'
            }

            , events: {
                  change: {
                    /* executed in scope of DOMWindow because no target defined */
                      action: function(itemValues, items) {
	                        /* itemValues is an array because mode of selection is M.MULTIPLE_SELECTION */
	            			var mitarbeiterIds = [];
	                        for(var i = 0; i < itemValues.length; i++) {
	                        	mitarbeiterIds.push(itemValues[i]);
	                        }
	                        DigiWebApp.BautagebuchBautageberichtDetailsController.set("mitarbeiterIds", mitarbeiterIds);
	                        
	                        var mitarbeiterList = [];
	                        var mitarbeiterArray = mitarbeiterList;
		    				if (mitarbeiterIds && mitarbeiterIds.length !== 0) {
		    					mitarbeiterArray = _.map(DigiWebApp.BautagebuchMainController.mitarbeiter, function(o) {
		    						var mitarbeiterSelected = NO;
		    						_.each(mitarbeiterIds, function(m) {
		    							if (m === o.value) {
		    								mitarbeiterSelected = YES;
		    							}
		    						});
		    						if (mitarbeiterSelected) {
		    							o.isSelected = YES;
		    							return o;
		    						}
	    		    			});
    		            	}
		    				mitarbeiterArray = _.compact(mitarbeiterArray);
	    					DigiWebApp.BautagebuchBautageberichtDetailsController.set("mitarbeiterListSelected", mitarbeiterArray);
            		}
                }
            }
        })

        , grid: M.GridView.design({
              childViews: 'button icon'
            , layout: {
                  cssClass: 'digiButton'
                , columns: {
                      0: 'button'
                    , 1: 'icon'
                }
            }
            , button: M.ButtonView.design({
                  value: M.I18N.l('save')
                , cssClass: 'digiButton green_background'
                , anchorLocation: M.RIGHT
                , events: {
                    tap: {
		                //target: DigiWebApp.BautagebuchBautageberichtDetailsController,
		                //action: 'save'
		    			action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} history.back();}
                    }
                }
            })
            , icon: M.ImageView.design({
                value: 'theme/images/icon_bookTime.png'
            })
        })

    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchNotizenDetailsPage
// ==========================================================================

DigiWebApp.BautagebuchNotizenDetailsPage = M.PageView.design({

      events: {
		  pagebeforeshow: {
            action: function() {
				// verfügbare Positionen kopieren und ausgewählte selektieren
				var itemSelected = NO;
				var relevantDetailsController = DigiWebApp.BautagebuchNotizenDetailsController;
				var myPositionenList = JSON.parse(JSON.stringify(DigiWebApp.BautagebuchBautageberichtDetailsController.positionenList));
				_.each(myPositionenList, function(p) {
					if (parseInt(p.value) !== 0) {
						p.isSelected = NO;
					} else {
						p.isSelected = YES;
					}
				});
			    var positionenArray = _.map(myPositionenList, function(o) {
			    	if ( typeof(o) === "undefined" ) {
			    		console.log("UNDEFINED position");
			    	} else {    
						if (relevantDetailsController.positionId) {
							o.isSelected = (o.value === relevantDetailsController.positionId);
							if (o.isSelected) { itemSelected = YES; }
						}
			            return o;
			    	}
			    });
			    if (!itemSelected && DigiWebApp.BautagebuchEinstellungenController.settings.positionVorselektieren) {
				    positionenArray = _.map(positionenArray, function(o) {
						if (DigiWebApp.BautagebuchBautageberichtDetailsController.positionId) {
							o.isSelected = (o.value === DigiWebApp.BautagebuchBautageberichtDetailsController.positionId);
							if (o.isSelected) { itemSelected = YES; 
								relevantDetailsController.set("positionId", o.value);
								relevantDetailsController.set("positionName", o.label);
							}
						}
			            return o;
				    });
			    }
			    positionenArray = _.compact(positionenArray);
			    if (positionenArray.length > 1) {
			    	positionenArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected: !itemSelected});
			    }
			    if (!itemSelected && positionenArray.length == 1) {
			    	positionenArray[0].isSelected = YES;
			    	relevantDetailsController.set("positionId", positionenArray[0].value);
			    	relevantDetailsController.set("positionName", positionenArray[0].label);
			    }
			    relevantDetailsController.set("positionenList", positionenArray);
				
			    relevantDetailsController.setTaetigkeiten(relevantDetailsController.positionId);
				
				M.ViewManager.getView('bautagebuchNotizenDetailsPage', 'dataInput').setValue(DigiWebApp.BautagebuchNotizenDetailsController.data);
				$('#' + DigiWebApp.BautagebuchNotizenDetailsPage.content.dataInput.id)[0].focus();
				$('#' + DigiWebApp.BautagebuchNotizenDetailsPage.content.dataInput.id)[0].blur();
				
				if (DigiWebApp.BautagebuchBautageberichtDetailsController.item.get("abgeschlossen")) {
					$("#" + DigiWebApp.BautagebuchNotizenDetailsPage.content.speichernButton.id).hide();
					$("#" + DigiWebApp.BautagebuchNotizenDetailsPage.header.delButton.id).hide();
				} else {
					$("#" + DigiWebApp.BautagebuchNotizenDetailsPage.content.speichernButton.id).show();
					$("#" + DigiWebApp.BautagebuchNotizenDetailsPage.header.delButton.id).show();
				}
				
            	if (relevantDetailsController.get('handOrderId')) {
            		$('#' + DigiWebApp.BautagebuchNotizenDetailsPage.content.positionComboBox.id + "_container").hide();
            	} else {
            		$('#' + DigiWebApp.BautagebuchNotizenDetailsPage.content.positionComboBox.id + "_container").show();
            	}

			}
        }
		, pageshow: {
		    action: function() {
				$('#' + DigiWebApp.BautagebuchNotizenDetailsPage.content.dataInput.id)[0].focus();
				$('#' + DigiWebApp.BautagebuchNotizenDetailsPage.content.dataInput.id)[0].blur();
			}
		}
        , pagehide: {
            action: function() {
        		// reset auto-grow
        		M.ViewManager.getView('bautagebuchNotizenDetailsPage', 'dataInput').setCssProperty("height","400px");
        	}
        }
    }

    , cssClass: 'bautagebuchNotizenDetailsPage'

    , childViews: 'header content'

    , header: M.ToolbarView.design({
          childViews: 'backButton title uebersichtButton'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                    //  target: DigiWebApp.NavigationController
                    //, action: 'backToBautagebuchNotizenListePageTransition'
        			action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} 
        				history.back();
        			}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('BautagebuchNotiz')
            , anchorLocation: M.CENTER
        })
        , delButton: M.ButtonView.design({
              value: M.I18N.l('BautagebuchDelete')
            , icon: 'delete'
            , anchorLocation: M.RIGHT
            , cssClass: 'red_background'
            , events: {
                tap: {
                      target: DigiWebApp.BautagebuchNotizenDetailsController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} this.deleteNotiz();}
                }
            }
        })
        , uebersichtButton: M.ButtonView.design({
              value: M.I18N.l('uebersicht')
            , icon: 'forward'
            , anchorLocation: M.RIGHT
            , events: {
                tap: {
                      target: DigiWebApp.BautagebuchNotizenDetailsController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} 
                    	//this.deleteNotiz();
                    	DigiWebApp.NavigationController.backToBautagebuchNotizenListePageTransition();
                    }
                }
            }
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({

    	  childViews: 'positionComboBox activityComboBox dataInput speichernButton loeschenButton'
        	  
        , cssClass: 'content'
    	
        , positionComboBox: M.SelectionListView.design({

                /* renders a selection view like check boxes */
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('noData')
                , label: M.I18N.l('position')
                , applyTheme: NO
                /* this seleciton view has no static entries, instead it is filled via content binding. */
                , contentBinding: {
                      target: DigiWebApp.BautagebuchNotizenDetailsController
                    , property: 'positionenList'
                }
                , events: {
                    change: {
                    	/* executed in scope of DOMWindow because no target defined */
                    	action: function(selectedValue, selectedItem) {
		      				DigiWebApp.BautagebuchNotizenDetailsController.set("positionId", M.ViewManager.getView('bautagebuchNotizenDetailsPage', 'positionComboBox').getSelection(YES).value);
		      				DigiWebApp.BautagebuchNotizenDetailsController.set("positionName", M.ViewManager.getView('bautagebuchNotizenDetailsPage', 'positionComboBox').getSelection(YES).label);
		      				DigiWebApp.BautagebuchNotizenDetailsController.setTaetigkeiten(M.ViewManager.getView('bautagebuchNotizenDetailsPage', 'positionComboBox').getSelection(YES).value);
                    	}
                	}
                }
        })
            	
        , activityComboBox: M.SelectionListView.design({

                /* renders a selection view like check boxes */
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('noData')
                , label: M.I18N.l('activity')
                , applyTheme: NO
                /* this seleciton view has no static entries, instead it is filled via content binding. */
                , contentBinding: {
                      target: DigiWebApp.BautagebuchNotizenDetailsController
                    , property: 'activityList'
                }
                , events: {
                    change: {
                    	/* executed in scope of DOMWindow because no target defined */
                    	action: function(selectedValue, selectedItem) {
		      				DigiWebApp.BautagebuchNotizenDetailsController.set("activityId", M.ViewManager.getView('bautagebuchNotizenDetailsPage', 'activityComboBox').getSelection(YES).value);
		      				DigiWebApp.BautagebuchNotizenDetailsController.set("activityName", M.ViewManager.getView('bautagebuchNotizenDetailsPage', 'activityComboBox').getSelection(YES).label);
                    	}
                	}
                }
        })
            	
        , dataInput: M.TextFieldView.design({
                  label: M.I18N.l('BautagebuchNotiz')
                , cssClass: 'dataInput'
                , cssClassOnInit: 'dataInputInitial'
                , hasMultipleLines: YES
                , initialText: "max. 4000 " + M.I18N.l('characters')
                , numberOfChars: 4000
	   	        , events: {
	           		keyup: {
	   	                /* executed in scope of DOMWindow because no target defined */
	   	            	action: function(selectedValue, selectedItem) {
        						var myValue = M.ViewManager.getView('bautagebuchNotizenDetailsPage', 'dataInput').getValue();
        						if (myValue.length <= 4000) {
        							DigiWebApp.BautagebuchNotizenDetailsController.set("data", M.ViewManager.getView('bautagebuchNotizenDetailsPage', 'dataInput').getValue());
        						} else {
        							M.ViewManager.getView('bautagebuchNotizenDetailsPage', 'dataInput').setValue(DigiWebApp.BautagebuchNotizenDetailsController.data);
        				            DigiWebApp.ApplicationController.nativeAlertDialogView({
        				                title: M.I18N.l('maximaleFeldlaengeErreicht')
        				              , message: M.I18N.l('maximaleFeldlaengeErreichtMsg')
        				            });
        						}
	   	            	}
	   	            }
	   	    	}
        })
            
        , speichernButton: M.GridView.design({
              childViews: 'button icon'
            , layout: {
                  cssClass: 'digiButton'
                , columns: {
                      0: 'button'
                    , 1: 'icon'
                }
            }
            , button: M.ButtonView.design({
                  value: M.I18N.l('save')
                , cssClass: 'digiButton green_background'
                , anchorLocation: M.RIGHT
                , events: {
                    tap: {
		                target: DigiWebApp.BautagebuchNotizenDetailsController,
		                action: function() {
            				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
            				this.save();
            			}
                    }
                }
            })
            , icon: M.ImageView.design({
                value: 'theme/images/icon_bookTime.png'
            })
        })
        
        , loeschenButton: M.ButtonView.design({
	  	      value: M.I18N.l('BautagebuchDelete')
	  	    , cssClass: 'red_background'
	  	    //, anchorLocation: M.CENTER
	  	    , events: {
	  	        tap: {
	  	            target: DigiWebApp.BautagebuchNotizenDetailsController,
	  	            action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
        				this.deleteNotiz();
        			}
	  	        }
	  	      }
	      })

    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchNotizenTemplateView
// ==========================================================================

DigiWebApp.BautagebuchNotizenTemplateView = M.ListItemView.design({

      isSelectable: YES

    , childViews: 'positionName handOrderName activityName spacer data'

    , events: {
        tap: {
			action: function(id, m_id) {
			    var view = M.ViewManager.getViewById(id);
			    var view_modelId = view.modelId;
			    _.each(DigiWebApp.BautagebuchNotizenListeController.items, function(selectedItem) {
					if (selectedItem.m_id === view_modelId) {
						DigiWebApp.BautagebuchNotizenDetailsController.load(selectedItem);
					}
				});
			    DigiWebApp.NavigationController.toBautagebuchNotizenDetailsPageTransition();
			}
        }
    }

	, spacer: M.LabelView.design({
	    value: ''
	})
	
	, positionName: M.LabelView.design({
	    cssClass: 'normal unselectable'
  	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= positionName %>'
	      , operation: function(v) {
					if (v !== "" && v !== null) {
						return v;
					} else {
						return "";
					}
	          }
	  }
	})
	
	, handOrderName: M.LabelView.design({
	    cssClass: 'normal unselectable'
  	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= handOrderName %>'
	      , operation: function(v) {
					if (v !== "" && v !== null) {
						return v;
					} else {
						return "";
					}
	          }
	  }
	})
	
	, activityName: M.LabelView.design({
	      cssClass: 'normal unselectable'
	    , isInline: YES
		, computedValue: {
		      valuePattern: '<%= activityName %>'
		    , operation: function(v) {
						if (v !== "" && v !== null) {
							return ", " + v + ":";
						} else {
							return ":";
						}
		        }
		}
	})

	, data: M.LabelView.design({
	      cssClass: 'small unselectable'
		, computedValue: {
		      valuePattern: '<%= data %>'
		    , operation: function(v) {
						if (v !== "" && v !== null) {
							var outputLength = 50;
							if (v.length > outputLength) { 
								return v.substring(0,outputLength) + "..."; 
							} else { 
								return v.substring(0,outputLength);
							}
						} else {
							return "";
						}
		        }
		}
	})
    
});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchNotizenListePage
// ==========================================================================

m_require('app/views/BautagebuchNotizenTemplateView');

DigiWebApp.BautagebuchNotizenListePage = M.PageView.design({

    events: {
		pagebeforeshow: {
              target: DigiWebApp.BautagebuchNotizenListeController
            , action: 'init'
        }
    }

	, controller: DigiWebApp.BautagebuchNotizenListeController
	, navigationController: DigiWebApp.NavigationController
	
    , childViews: 'header content'

    , cssClass: 'bautagebuchListePage unselectable'

    , header: M.ToolbarView.design({
        childViews: 'backButton title newButton'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.backToBautagebuchBautageberichtDetailsPageTransition();}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('BautagebuchNotizen')
            , anchorLocation: M.CENTER
        })
        , newButton: M.ButtonView.design({
              value: M.I18N.l('BautagebuchAdd')
            , icon: 'new'
            , anchorLocation: M.RIGHT
            , cssClass: 'green_background'
            , events: {
                tap: {
        			action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} 
						DigiWebApp.BautagebuchNotizenListeController.neu();
					}
                }
            }
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
          childViews: 'list'
        , list: M.ListView.design({
              contentBinding: {
                  target: DigiWebApp.BautagebuchNotizenListeController
                , property: 'items'
            }
            , listItemTemplateView: DigiWebApp.BautagebuchNotizenTemplateView
        })
    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchNotizenZusammenfassungTemplateView
// ==========================================================================

DigiWebApp.BautagebuchNotizenZusammenfassungTemplateView = M.ListItemView.design({

      isSelectable: YES

    , childViews: 'positionName activityName spacer data'

    , events: {
        tap: {
			action: function(id, m_id) {
			    var view = M.ViewManager.getViewById(id);
			    var view_modelId = view.modelId;
			    _.each(DigiWebApp.BautagebuchNotizenListeController.items, function(selectedItem) {
					if (selectedItem.m_id === view_modelId) {
						DigiWebApp.BautagebuchNotizenDetailsController.load(selectedItem);
					}
				});
			    DigiWebApp.NavigationController.toBautagebuchNotizenDetailsPageTransition();
			}
        }
    }

	, spacer: M.LabelView.design({
	    value: ''
	})
	
	, positionName: M.LabelView.design({
	      cssClass: 'normal unselectable'
		, isInline: YES
		, computedValue: {
		      valuePattern: '<%= positionName %>'
		    , operation: function(v) {
						if (v !== "" && v !== null) {
							return v;
						} else {
							return "";
						}
		        }
		}
	})
	
	, activityName: M.LabelView.design({
	      cssClass: 'normal unselectable'
	    , isInline: YES
		, computedValue: {
		      valuePattern: '<%= activityName %>'
		    , operation: function(v) {
						if (v !== "" && v !== null) {
							return ", " + v + ":";
						} else {
							return ":";
						}
		        }
		}
	})

	, data: M.LabelView.design({
	      cssClass: 'small unselectable marginRight40'
		, computedValue: {
		      valuePattern: '<%= data %>'
		    , operation: function(v) {
						if (v !== "" && v !== null) {
//							var outputLength = 50;
//							if (v.length > outputLength) { 
//								return v.substring(0,outputLength) + "..."; 
//							} else { 
//								return v.substring(0,outputLength);
//							}
							return v;
						} else {
							return "";
						}
		        }
		}
	})
    
});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchTabBar
// ==========================================================================

DigiWebApp.BautagebuchTabBar = M.TabBarView.design({

      childViews: 'tabItemMitte'

    , anchorLocation: M.BOTTOM

    , isFixed: YES // useless as TMP set position fixed hard in code... :-(

    , transition: M.TRANSITION.FADE

    , name: 'bautagebuchtabbar'
    	
    , tabItemLinks: M.TabBarItemView.design({
          value: M.I18N.l('backward')
        , page: 'zeitbuchungenPage'
        , icon: 'arrow-l'
        , switchPage: function() {
    		try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} 
			that.backwardHandler();
    	}
    })

    , tabItemMitte: M.TabBarItemView.design({
          value: M.I18N.l('Bautagebuch') + " " + M.I18N.l('settings')
        , page: 'bautagebuchEinstellungenPage'
        , icon: 'gear'
        , switchPage: function() {
			DigiWebApp.BautagebuchEinstellungenController.lastPage = M.ViewManager.getCurrentPage();
			DigiWebApp.NavigationController.toBautagebuchEinstellungenPageTransition();
    	}
    })

    , tabItemRechts: M.TabBarItemView.design({
          value: M.I18N.l('forward')
        , page: 'zeitbuchungenPage'
        , icon: 'arrow-r'
        , switchPage: function() {
			try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} 
    		that.forwardHandler();
    	}
    })
        
    , backwardHandler: function() {
//		DigiWebApp.ZeitbuchungenController.set('items', null);
//		DigiWebApp.ZeitbuchungenController.items = null;
//		DigiWebApp.ZeitbuchungenController.set('datum', D8.create(DigiWebApp.ZeitbuchungenController.datum).addDays(-1).format("dd.mm.yyyy"));
//		DigiWebApp.ZeitbuchungenController.init(YES);
	}

	, forwardHandler: function() {
//		DigiWebApp.ZeitbuchungenController.set('items', null);
//		DigiWebApp.ZeitbuchungenController.items = null;
//		DigiWebApp.ZeitbuchungenController.set('datum', D8.create(DigiWebApp.ZeitbuchungenController.datum).addHours(25).format("dd.mm.yyyy"));
//		DigiWebApp.ZeitbuchungenController.init(YES);
	}

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchBautageberichteListePage
// ==========================================================================

m_require('app/views/BautagebuchTabBar.js');
m_require('app/views/BautagebuchBautageberichtTemplateView');

DigiWebApp.BautagebuchBautageberichteListePage = M.PageView.design({

    events: {
		pagebeforeshow: {
              target: DigiWebApp.BautagebuchBautageberichteListeController
            , action: 'init'
        }
    }
	
    , childViews: 'header content tabBar'

    , cssClass: 'bautagebuchListePage unselectable'

    , header: M.ToolbarView.design({
        childViews: 'backButton title newButton'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} 
                    	this.backToDashboardPage();
                    }
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('BautagebuchBautageberichte')
            , anchorLocation: M.CENTER
        })
        , newButton: M.ButtonView.design({
              value: M.I18N.l('BautagebuchAdd')
            , icon: 'new'
            , anchorLocation: M.RIGHT
            , cssClass: 'green_background'
            , events: {
                tap: {
        			action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e3){}
        				DigiWebApp.BautagebuchBautageberichteListeController.neu();
					}
                }
            }
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
          childViews: 'list'
        , list: M.ListView.design({
              contentBinding: {
                  target: DigiWebApp.BautagebuchBautageberichteListeController
                , property: 'items'
            }
            , listItemTemplateView: DigiWebApp.BautagebuchBautageberichtTemplateView
        })
    })
    
    , tabBar: DigiWebApp.BautagebuchTabBar

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchWetterPage
// ==========================================================================

DigiWebApp.BautagebuchWetterPage = M.PageView.design({

      events: {
		  pagebeforeshow: {
            action: function(m_id, event) {
				// lade eine evtl. zuvor gespeicherte Wetterauswahl aus dem Bautagesbericht
				DigiWebApp.BautagebuchBautageberichtDetailsController.set('wetterBackup', JSON.parse(JSON.stringify(DigiWebApp.BautagebuchBautageberichtDetailsController.get('wetter'))));
			}
        }
        , pagehide: {
            action: function(m_id, event) {
        		clearAllIntervals();
        	}
        }
    }
	
	, eventLoopInAction: null
    , cssClass: 'bautagebuchWetterPage'

    , childViews: 'header content'

    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function(m_id, event) {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
                    	clearAllIntervals();
                    	DigiWebApp.BautagebuchBautageberichtDetailsController.set('wetter', JSON.parse(JSON.stringify(DigiWebApp.BautagebuchBautageberichtDetailsController.wetterBackup)));
                    	this.backToBautagebuchBautageberichtDetailsPageTransition();
                    }
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('BautagebuchWetter')
            , anchorLocation: M.CENTER
        })
        , delButton: M.ButtonView.design({
              value: M.I18N.l('BautagebuchDelete')
            , icon: 'delete'
            , anchorLocation: M.RIGHT
            , events: {
                tap: {
                    //  target: Controller
                    //, action: 'deleteItem'
                }
            }
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({

    	  childViews: 'temperaturView luftfeuchteView bewoelkungView niederschlagView windView wechselhaftCheckbox speichernButton'
        	  
        , cssClass: 'content'
        	
        , spacer1: M.LabelView.design({
        	value: '&nbsp;'
        })
    	
        , wechselhaftCheckbox: M.SelectionListView.design({
	          selectionMode: M.MULTIPLE_SELECTION
            , contentBinding: {
                  target: DigiWebApp.BautagebuchBautageberichtDetailsController
                , property: 'wetter.wechselhaftItem'
            }
		    , events: {
		    		change: {
        				  target: DigiWebApp.BautagebuchBautageberichtDetailsController
						, action: function(itemValues, items) {
				  			this.wetter.wechselhaft = (itemValues.length === 1);
				  			this.wetter.wechselhaftItem.isSelected = (itemValues.length === 1);
						}
		    		}
			}
      	})
          
		, temperaturView: M.ContainerView.design({
			  childViews: 'myLabel myGrid'
	    	, cssClass: 'temperaturView'
		    , myLabel: M.LabelView.design({
		    	  cssClass: 'whiteText marginBottom5px'
	        	, value: M.I18N.l('BautagebuchTemperatur')
	        })
			, myGrid: M.GridView.design({
				  childViews: 'minusButton plusButton TextValue'
			    , layout: M.THREE_COLUMNS
			    , minusButton: M.ButtonView.design({
  		                value: "-"
		              , events: {
		                  tap: {
				    			action: function(m_id, event) {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
//				    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
//				    				if (myWetter.temperatur === -50) {
//				    					return;
//				    				}
//				    				myWetter.temperatur = myWetter.temperatur - 1;
//				    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
				    			}
		                  }
			              , mousedown: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			console.log("DigiWebApp.BautagebuchWetterPage.eventLoopInAction: " + DigiWebApp.BautagebuchWetterPage.eventLoopInAction);
			            	  			var addFunc = function() {
				            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
				            	  			console.log("addFunc DigiWebApp.BautagebuchWetterPage.eventLoopInAction: " + DigiWebApp.BautagebuchWetterPage.eventLoopInAction);
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.temperatur === -50) {
						    					return;
						    				}
						    				myWetter.temperatur = myWetter.temperatur - 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			              }
			              , mouseup: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction == "mousedown") {
			            	  				console.log("mousedown");
			            	  				DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			            	  			}
			              			}  
			              }
			              , touchstart: {
					    			action: function(m_id, event) {
	            	  					if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			console.log("DigiWebApp.BautagebuchWetterPage.eventLoopInAction: " + DigiWebApp.BautagebuchWetterPage.eventLoopInAction);
			            	  			var addFunc = function() {
				            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
				            	  			console.log("addFunc DigiWebApp.BautagebuchWetterPage.eventLoopInAction: " + DigiWebApp.BautagebuchWetterPage.eventLoopInAction);
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.temperatur === -50) {
						    					return;
						    				}
						    				myWetter.temperatur = myWetter.temperatur - 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , touchend: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction == "touchstart") {
			            	  				console.log("touchstart");
			            	  				DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			            	  			}
			              			}  
			              }
		              }
			    })
			    , plusButton: M.ButtonView.design({
		                value: "+"
		              , events: {
		                  tap: {
				    			action: function(m_id, event) {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} 
//				    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
//				    				if (myWetter.temperatur === 50) {
//				    					return;
//				    				}
//				    				myWetter.temperatur = myWetter.temperatur + 1;
//				    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
				    			}
		                  }
			              , mousedown: {
					    			action: function(m_id, event) {
	            	  					if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.temperatur === 50) {
						    					return;
						    				}
						    				myWetter.temperatur = myWetter.temperatur + 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , mouseup: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
			              , touchstart: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.temperatur === 50) {
						    					return;
						    				}
						    				myWetter.temperatur = myWetter.temperatur + 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , touchend: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
		              }
			    })
			    , TextValue: M.LabelView.design({
			    	  cssClass: 'whiteText centerText bold'
			    	, computedValue: {
				          contentBinding: {
				              target: DigiWebApp.BautagebuchBautageberichtDetailsController
				            , property: 'wetter.temperatur'
				        }
				        , contentBindingReverse: {
				              target: DigiWebApp.BautagebuchBautageberichtDetailsController
				            , property: 'wetter.temperatur'
					    }
			    		, value: 10
				        , operation: function(v) {
			    			return v + "°C";
				        }
				    }
			    })
			})
		})

		, luftfeuchteView: M.ContainerView.design({
			  childViews: 'myLabel myGrid'
	    	, cssClass: 'luftfeuchteView'
		    , myLabel: M.LabelView.design({
		    	  cssClass: 'whiteText marginBottom5px'
	        	, value: M.I18N.l('BautagebuchLuftfeuchtigkeit')
	        })
			, myGrid: M.GridView.design({
				  childViews: 'minusButton plusButton TextValue'
			    , layout: M.THREE_COLUMNS
			    , minusButton: M.ButtonView.design({
  		                value: "-"
		              , events: {
		                  tap: {
				    			action: function(m_id, event) {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
//				    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
//				    				if (myWetter.luftfeuchtigkeit === 0) {
//				    					return;
//				    				}
//				    				myWetter.luftfeuchtigkeit = myWetter.luftfeuchtigkeit - 10;
//				    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
				    			}
		                  }
			              , mousedown: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.luftfeuchtigkeit === 0) {
						    					return;
						    				}
						    				myWetter.luftfeuchtigkeit = myWetter.luftfeuchtigkeit - 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , mouseup: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
			              , touchstart: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.luftfeuchtigkeit === 0) {
						    					return;
						    				}
						    				myWetter.luftfeuchtigkeit = myWetter.luftfeuchtigkeit - 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , touchend: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }

		              }
			    })
			    , plusButton: M.ButtonView.design({
		                value: "+"
		              , events: {
		                  tap: {
				    			action: function(m_id, event) {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} 
//				    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
//				    				if (myWetter.luftfeuchtigkeit === 100) {
//				    					return;
//				    				}
//				    				myWetter.luftfeuchtigkeit = myWetter.luftfeuchtigkeit + 10;
//				    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
				    			}
		                  }
			              , mousedown: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.luftfeuchtigkeit === 100) {
						    					return;
						    				}
						    				myWetter.luftfeuchtigkeit = myWetter.luftfeuchtigkeit + 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , mouseup: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
			              , touchstart: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.luftfeuchtigkeit === 100) {
						    					return;
						    				}
						    				myWetter.luftfeuchtigkeit = myWetter.luftfeuchtigkeit + 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , touchend: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
		              }
			    })
			    , TextValue: M.LabelView.design({
			    	  cssClass: 'whiteText centerText bold'
			    	, computedValue: {
				          contentBinding: {
				              target: DigiWebApp.BautagebuchBautageberichtDetailsController
				            , property: 'wetter.luftfeuchtigkeit'
				        }
			    		, value: 0
				        , operation: function(v) {
			    			return v + "%";
				        }
				    }
			    })
			})
		})

		, bewoelkungView: M.ContainerView.design({
			  childViews: 'myLabel myGrid'
	    	, cssClass: 'bewoelkungView'
		    , myLabel: M.LabelView.design({
		    	  cssClass: 'whiteText marginBottom5px'
	        	, value: M.I18N.l('BautagebuchBewoelkung')
	        })
			, myGrid: M.GridView.design({
				  childViews: 'minusButton plusButton TextValue'
			    , layout: M.THREE_COLUMNS
			    , minusButton: M.ButtonView.design({
  		                value: "-"
		              , events: {
		                  tap: {
				    			action: function(m_id, event) {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
//				    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
//				    				if (myWetter.bewoelkung === 0) {
//				    					return;
//				    				}
//				    				myWetter.bewoelkung = myWetter.bewoelkung - 1;
//				    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
				    			}
		                  }
			              , mousedown: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.bewoelkung === 0) {
						    					return;
						    				}
						    				myWetter.bewoelkung = myWetter.bewoelkung - 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , mouseup: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
			              , touchstart: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.bewoelkung === 0) {
						    					return;
						    				}
						    				myWetter.bewoelkung = myWetter.bewoelkung - 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , touchend: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
		              }
			    })
			    , plusButton: M.ButtonView.design({
		                value: "+"
		              , events: {
		                  tap: {
				    			action: function(m_id, event) {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} 
//				    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
//				    				if (myWetter.bewoelkung === 3) {
//				    					return;
//				    				}
//				    				myWetter.bewoelkung = myWetter.bewoelkung + 1;
//				    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
				    			}
		                  }
			              , mousedown: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.bewoelkung === 3) {
						    					return;
						    				}
						    				myWetter.bewoelkung = myWetter.bewoelkung + 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , mouseup: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
			              , touchstart: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.bewoelkung === 3) {
						    					return;
						    				}
						    				myWetter.bewoelkung = myWetter.bewoelkung + 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , touchend: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
		              }
			    })
			    , TextValue: M.LabelView.design({
			    	  cssClass: 'whiteText centerText bold'
			    	, computedValue: {
				          contentBinding: {
				              target: DigiWebApp.BautagebuchBautageberichtDetailsController
				            , property: 'wetter.bewoelkung'
				        }
			    		, value: 0
				        , operation: function(v) {
				    		switch(v) {
				    			case 0:
				    				return M.I18N.l('BautagebuchBewoelkungKlar');
					    		case 1:
				    				return M.I18N.l('BautagebuchBewoelkungMaessig');
					    		case 2:
				    				return M.I18N.l('BautagebuchBewoelkungBedeckt');
					    		case 3:
				    				return M.I18N.l('BautagebuchBewoelkungNeblig');
					    		default:
					    			return "";
				    		}
				        }
				    }
			    })
			})
		})

		, niederschlagView: M.ContainerView.design({
			  childViews: 'myLabel myGrid'
	    	, cssClass: 'niederschlagView'
		    , myLabel: M.LabelView.design({
		    	  cssClass: 'whiteText marginBottom5px'
	        	, value: M.I18N.l('BautagebuchNiederschlag')
	        })
			, myGrid: M.GridView.design({
				  childViews: 'minusButton plusButton TextValue'
			    , layout: M.THREE_COLUMNS
			    , minusButton: M.ButtonView.design({
  		                value: "-"
		              , events: {
		                  tap: {
				    			action: function(m_id, event) {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
//				    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
//				    				if (myWetter.niederschlag === 0) {
//				    					return;
//				    				}
//				    				myWetter.niederschlag = myWetter.niederschlag - 1;
//				    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
				    			}
		                  }
			              , mousedown: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.niederschlag === 0) {
						    					return;
						    				}
						    				myWetter.niederschlag = myWetter.niederschlag - 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , mouseup: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
			              , touchstart: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.niederschlag === 0) {
						    					return;
						    				}
						    				myWetter.niederschlag = myWetter.niederschlag - 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , touchend: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
		              }
			    })
			    , plusButton: M.ButtonView.design({
		                value: "+"
		              , events: {
		                  tap: {
				    			action: function(m_id, event) {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} 
//				    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
//				    				if (myWetter.niederschlag === 5) {
//				    					return;
//				    				}
//				    				myWetter.niederschlag = myWetter.niederschlag + 1;
//				    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
				    			}
		                  }
			              , mousedown: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.niederschlag === 5) {
						    					return;
						    				}
						    				myWetter.niederschlag = myWetter.niederschlag + 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , mouseup: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
			              , touchstart: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.niederschlag === 5) {
						    					return;
						    				}
						    				myWetter.niederschlag = myWetter.niederschlag + 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , touchend: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
		              }
			    })
			    , TextValue: M.LabelView.design({
			    	  cssClass: 'whiteText centerText bold'
			    	, computedValue: {
				          contentBinding: {
				              target: DigiWebApp.BautagebuchBautageberichtDetailsController
				            , property: 'wetter.niederschlag'
				        }
			    		, value: 0
				        , operation: function(v) {
				    		switch(v) {
				    			case 0:
				    				return M.I18N.l('BautagebuchNiederschlagKein');
					    		case 1:
				    				return M.I18N.l('BautagebuchNiederschlagNiesel');
					    		case 2:
				    				return M.I18N.l('BautagebuchNiederschlagRegen');
					    		case 3:
				    				return M.I18N.l('BautagebuchNiederschlagGraupel');
					    		case 4:
				    				return M.I18N.l('BautagebuchNiederschlagSchnee');
					    		case 5:
				    				return M.I18N.l('BautagebuchNiederschlagHagel');
					    		default:
					    		    return "";
				    		}
				        }
				    }
			    })
			})
		})

		, windView: M.ContainerView.design({
			  childViews: 'myLabel myGrid'
	    	, cssClass: 'windView'
		    , myLabel: M.LabelView.design({
		    	  cssClass: 'whiteText marginBottom5px'
	        	, value: M.I18N.l('BautagebuchWind')
	        })
			, myGrid: M.GridView.design({
				  childViews: 'minusButton plusButton TextValue'
			    , layout: M.THREE_COLUMNS
			    , minusButton: M.ButtonView.design({
  		                value: "-"
		              , events: {
		                  tap: {
				    			action: function(m_id, event) {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
//				    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
//				    				if (myWetter.wind === 0) {
//				    					return;
//				    				}
//				    				myWetter.wind = myWetter.wind - 1;
//				    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
				    			}
		                  }
			              , mousedown: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.wind === 0) {
						    					return;
						    				}
						    				myWetter.wind = myWetter.wind - 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , mouseup: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
			              , touchstart: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.wind === 0) {
						    					return;
						    				}
						    				myWetter.wind = myWetter.wind - 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , touchend: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
		              }
			    })
			    , plusButton: M.ButtonView.design({
		                value: "+"
		              , events: {
		                  tap: {
				    			action: function(m_id, event) {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} 
//				    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
//				    				if (myWetter.wind === 3) {
//				    					return;
//				    				}
//				    				myWetter.wind = myWetter.wind + 1;
//				    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
				    			}
		                  }
			              , mousedown: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.wind === 3) {
						    					return;
						    				}
						    				myWetter.wind = myWetter.wind + 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , mouseup: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
			              , touchstart: {
					    			action: function(m_id, event) {
			            	  			if (DigiWebApp.BautagebuchWetterPage.eventLoopInAction && DigiWebApp.BautagebuchWetterPage.eventLoopInAction != event.type) return;
			            	  			var addFunc = function() {
						    				var myWetter = DigiWebApp.BautagebuchBautageberichtDetailsController.wetter;
						    				if (myWetter.wind === 3) {
						    					return;
						    				}
						    				myWetter.wind = myWetter.wind + 1;
						    				DigiWebApp.BautagebuchBautageberichtDetailsController.set("wetter", myWetter);
			            	  			}
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = event.type;
			            	  			DigiWebApp.BautagebuchMainController.buttonPressInterval_Var = setInterval(addFunc, DigiWebApp.BautagebuchMainController.buttonPressInterval);
			            	  			addFunc(); event.preventDefault();
					    			}
			                }
			              , touchend: {
					    			action: function(m_id, event) {
			            	  			clearAllIntervals();
			            	  			DigiWebApp.BautagebuchWetterPage.eventLoopInAction = null;
			              			}  
			              }
		              }
			    })
			    , TextValue: M.LabelView.design({
			    	  cssClass: 'whiteText centerText bold'
			    	, computedValue: {
				          contentBinding: {
				              target: DigiWebApp.BautagebuchBautageberichtDetailsController
				            , property: 'wetter.wind'
				        }
			    		, value: 0
				        , operation: function(v) {
				    		switch(v) {
				    			case 0:
				    				return M.I18N.l('BautagebuchWindStill');
					    		case 1:
				    				return M.I18N.l('BautagebuchWindMaessig');
					    		case 2:
				    				return M.I18N.l('BautagebuchWindBoeig');
					    		case 3:
				    				return M.I18N.l('BautagebuchWindStuermisch');
					    		default:
					    		    return "";
				    		}
				        }
				    }
			    })
			})
		})

        , speichernButton: M.GridView.design({
              childViews: 'button icon'
            , layout: {
                  cssClass: 'digiButton'
                , columns: {
                      0: 'button'
                    , 1: 'icon'
                }
            }
            , button: M.ButtonView.design({
                  value: M.I18N.l('save')
                , cssClass: 'digiButton green_background'
                , anchorLocation: M.RIGHT
                , events: {
                    tap: {
						action: function(m_id, event) {
								clearAllTimeouts();
								DigiWebApp.NavigationController.backToBautagebuchBautageberichtDetailsPageTransition();
						}
                    }
                }
            })
            , icon: M.ImageView.design({
                value: 'theme/images/icon_bookTime.png'
            })
        })
        
//		, speichernButton: M.ButtonView.design({
//	          value: M.I18N.l('save')
//	        , cssClass: 'marginTop25'
//	        //, anchorLocation: M.CENTER
//	        , events: {
//		            tap: {
//		                //  target: DigiWebApp.NavigationController
//		                //, action: 'backToBautagebuchBautageberichtDetailsPageTransition'
//						action: function(m_id, event) {
//								clearAllTimeouts();
//								DigiWebApp.NavigationController.backToBautagebuchBautageberichtDetailsPageTransition();
//						}
//		            }
//	          }
//	    })
	    
    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchZeitenDetailsPage
// ==========================================================================

DigiWebApp.BautagebuchZeitenDetailsPage = M.PageView.design({

      events: {
		  pagebeforeshow: {
            action: function() {
				// verfügbare Positionen kopieren und ausgewählte selektieren
				var itemSelected = NO;
				var relevantDetailsController = DigiWebApp.BautagebuchZeitenDetailsController;
				var myPositionenList = JSON.parse(JSON.stringify(DigiWebApp.BautagebuchBautageberichtDetailsController.positionenList));
				_.each(myPositionenList, function(p) {
					if (parseInt(p.value) !== 0) {
						p.isSelected = NO;
					} else {
						p.isSelected = YES;
					}
				});
			    var positionenArray = _.map(myPositionenList, function(o) {
			    	if ( typeof(o) === "undefined" ) {
			    		console.log("UNDEFINED position");
			    	} else {    
						if (relevantDetailsController.positionId) {
							o.isSelected = (o.value === relevantDetailsController.positionId);
							if (o.isSelected) { itemSelected = YES; }
						}
			            return o;
			    	}
			    });
			    if (!itemSelected && DigiWebApp.BautagebuchEinstellungenController.settings.positionVorselektieren) {
				    positionenArray = _.map(positionenArray, function(o) {
						if (DigiWebApp.BautagebuchBautageberichtDetailsController.positionId) {
							o.isSelected = (o.value === DigiWebApp.BautagebuchBautageberichtDetailsController.positionId);
							if (o.isSelected) { itemSelected = YES; 
								relevantDetailsController.set("positionId", o.value);
								relevantDetailsController.set("positionName", o.label);
							}
						}
			            return o;
				    });
			    }
			    positionenArray = _.compact(positionenArray);
			    if (positionenArray.length > 1) {
			    	positionenArray.push({label: M.I18N.l('selectSomething'), value: '0', isSelected: !itemSelected});
			    }
			    if (!itemSelected && positionenArray.length == 1) {
			    	positionenArray[0].isSelected = YES;
			    	relevantDetailsController.set("positionId", positionenArray[0].value);
			    	relevantDetailsController.set("positionName", positionenArray[0].label);
			    }
			    relevantDetailsController.set("positionenList", positionenArray);
				
			    relevantDetailsController.setTaetigkeiten(relevantDetailsController.positionId);
				
				// im Bautagesbericht verfügbare Mitarbeiter kopieren und ausgewählte selektieren
                var mitarbeiterIds = DigiWebApp.BautagebuchZeitenDetailsController.mitarbeiterIds; 
                var mitarbeiterList = [];
                var mitarbeiterArray = mitarbeiterList;
				mitarbeiterArray = _.map(JSON.parse(JSON.stringify(DigiWebApp.BautagebuchBautageberichtDetailsController.mitarbeiterListSelected)), function(o) {
					var mitarbeiterSelected = NO;
					_.each(mitarbeiterIds, function(m) {
						if (parseInt(m) === parseInt(o.value)) {
							mitarbeiterSelected = YES;
						}
					});
					o.isSelected = (mitarbeiterSelected === YES);
					return o;
    			});
				mitarbeiterArray = _.compact(mitarbeiterArray);
				DigiWebApp.BautagebuchZeitenDetailsController.set("mitarbeiterList", mitarbeiterArray);
				
				if (DigiWebApp.BautagebuchEinstellungen.find()[0].get("inStundenBuchen")) {
					try{$('[id=' + DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.id  + ']').each(function() { $(this).hide(); });}catch(e2){}
					try{$("label[for='" + DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.id  + "']").each(function() { $(this).hide(); });}catch(e2){}
					try{$('[id=' + DigiWebApp.BautagebuchZeitenDetailsPage.content.dauerContainer.id  + ']').each(function() { $(this).show();});}catch(e4){}
					try{$("label[for='" + DigiWebApp.BautagebuchZeitenDetailsPage.content.dauerContainer.id  + "']").each(function() { $(this).show();});}catch(e4){}
				} else {
					try{$('[id=' + DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.id  + ']').each(function() { $(this).show(); });}catch(e5){}
					try{$("label[for='" + DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.id  + "']").each(function() { $(this).show(); });}catch(e5){}
					try{$('[id=' + DigiWebApp.BautagebuchZeitenDetailsPage.content.dauerContainer.id  + ']').each(function() { $(this).hide();});}catch(e7){}
					try{$("label[for='" + DigiWebApp.BautagebuchZeitenDetailsPage.content.dauerContainer.id  + "']").each(function() { $(this).hide();});}catch(e7){}
				}
				
//		  		if (DigiWebApp.SettingsController.getSetting('bautagebuchLimit_autoStartUhrzeit')) {
//					$(DigiWebApp.BautagebuchBautageberichtDetailsPage.content.startUhrzeit.startUhrzeitInput)[0].disable();
//				} else {
//					$(DigiWebApp.BautagebuchBautageberichtDetailsPage.content.startUhrzeit.startUhrzeitInput)[0].enable();
//				}
				
				if (DigiWebApp.BautagebuchBautageberichtDetailsController.item.get("abgeschlossen")) {
					$("#" + DigiWebApp.BautagebuchZeitenDetailsPage.content.grid.id).hide();
					$("#" + DigiWebApp.BautagebuchZeitenDetailsPage.header.delButton.id).hide();
				} else {
					$("#" + DigiWebApp.BautagebuchZeitenDetailsPage.content.grid.id).show();
					$("#" + DigiWebApp.BautagebuchZeitenDetailsPage.header.delButton.id).show();
				}

				M.ViewManager.getView('bautagebuchZeitenDetailsPage', 'remarkInput').setValue(DigiWebApp.BautagebuchZeitenDetailsController.remark);

				DigiWebApp.BautagebuchZeitenDetailsController.setDauer();		  		
				DigiWebApp.BautagebuchZeitenDetailsController.setVonBis();		  		

            	if (relevantDetailsController.get('handOrderId')) {
            		$('#' + DigiWebApp.BautagebuchZeitenDetailsPage.content.positionComboBox.id + "_container").hide();
            	} else {
            		$('#' + DigiWebApp.BautagebuchZeitenDetailsPage.content.positionComboBox.id + "_container").show();
            	}

			}
        }
        , pagehide: {
            action: function() {

        	}
        }
    }
	
    , cssClass: 'bautagebuchZeitenDetailsPage'

    , childViews: 'header content'

    , header: M.ToolbarView.design({
          childViews: 'backButton title uebersichtButton'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                    //  target: DigiWebApp.NavigationController
                    //, action: 'backToBautagebuchZeitenListePageTransition'
        			action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e8){} 
        				history.back();
        			}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('Zeitbuchung')
            , anchorLocation: M.CENTER
        })
        , delButton: M.ButtonView.design({
              value: M.I18N.l('BautagebuchDelete')
            , icon: 'delete'
            , anchorLocation: M.RIGHT
            , cssClass: 'red_background'
            , events: {
                tap: {
                      target: DigiWebApp.BautagebuchZeitenDetailsController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e9){} this.deleteZeitbuchung();}
                }
            }
        })
        , uebersichtButton: M.ButtonView.design({
              value: M.I18N.l('uebersicht')
            , icon: 'forward'
            , anchorLocation: M.RIGHT
            , events: {
                tap: {
                      target: DigiWebApp.BautagebuchZeitenDetailsController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e9){} 
                    	//this.deleteZeitbuchung();
                    	DigiWebApp.NavigationController.backToBautagebuchZeitenListePageTransition();
                    }
                }
            }
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({

    	  childViews: 'positionComboBox activityComboBox mitarbeiterGroup VonBisContainer dauerContainer remarkInput grid loeschenButton'
        	  
        , cssClass: 'content'
    	
        , positionComboBox: M.SelectionListView.design({

                /* renders a selection view like check boxes */
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('noData')
                , label: M.I18N.l('position')
                , applyTheme: NO
                /* this seleciton view has no static entries, instead it is filled via content binding. */
                , contentBinding: {
                      target: DigiWebApp.BautagebuchZeitenDetailsController
                    , property: 'positionenList'
                }
                , events: {
                    change: {
                    	/* executed in scope of DOMWindow because no target defined */
                    	action: function(selectedValue, selectedItem) {
		      				DigiWebApp.BautagebuchZeitenDetailsController.set("positionId", M.ViewManager.getView('bautagebuchZeitenDetailsPage', 'positionComboBox').getSelection(YES).value);
		      				DigiWebApp.BautagebuchZeitenDetailsController.set("positionName", M.ViewManager.getView('bautagebuchZeitenDetailsPage', 'positionComboBox').getSelection(YES).label);
		      				DigiWebApp.BautagebuchZeitenDetailsController.setTaetigkeiten(M.ViewManager.getView('bautagebuchZeitenDetailsPage', 'positionComboBox').getSelection(YES).value);
                    	}
                	}
                }
        })
            	
        , activityComboBox: M.SelectionListView.design({

                /* renders a selection view like check boxes */
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('noData')
                , label: M.I18N.l('activity')
                , applyTheme: NO
                /* this seleciton view has no static entries, instead it is filled via content binding. */
                , contentBinding: {
                      target: DigiWebApp.BautagebuchZeitenDetailsController
                    , property: 'activityList'
                }
                , events: {
                    change: {
                    	/* executed in scope of DOMWindow because no target defined */
                    	action: function(selectedValue, selectedItem) {
		      				DigiWebApp.BautagebuchZeitenDetailsController.set("activityId", M.ViewManager.getView('bautagebuchZeitenDetailsPage', 'activityComboBox').getSelection(YES).value);
		      				DigiWebApp.BautagebuchZeitenDetailsController.set("activityName", M.ViewManager.getView('bautagebuchZeitenDetailsPage', 'activityComboBox').getSelection(YES).label);
                    	}
                	}
                }
        })

        , mitarbeiterGroup: M.SelectionListView.design({

            /* renders a selection view like check boxes */
              selectionMode: M.MULTIPLE_SELECTION

            , initialText: M.I18N.l('noData')
            
            , label: M.I18N.l('employees')

            , applyTheme: NO

            /* this seleciton view has no static entries, instead it is filled via content binding. */
            , contentBinding: {
                  target: DigiWebApp.BautagebuchZeitenDetailsController
                , property: 'mitarbeiterList'
            }

            , events: {
                  change: {
                    /* executed in scope of DOMWindow because no target defined */
                      action: function(itemValues, items) {
	                        /* itemValues is an array because mode of selection is M.MULTIPLE_SELECTION */
	            			var mitarbeiterIds = [];
	                        for(var i = 0; i < itemValues.length; i++) {
	                        	mitarbeiterIds.push(itemValues[i]);
	                        }
	                        DigiWebApp.BautagebuchZeitenDetailsController.set("mitarbeiterIds", mitarbeiterIds);
	                        
	                        var mitarbeiterList = [];
	                        var mitarbeiterArray = mitarbeiterList;
		    				if (mitarbeiterIds && mitarbeiterIds.length !== 0) {
		    					mitarbeiterArray = _.map(DigiWebApp.BautagebuchMainController.mitarbeiter, function(o) {
		    						var mitarbeiterSelected = NO;
		    						_.each(mitarbeiterIds, function(m) {
		    							if (m === o.value) {
		    								mitarbeiterSelected = YES;
		    							}
		    						});
		    						if (mitarbeiterSelected) {
		    							o.isSelected = YES;
		    							return o;
		    						}
	    		    			});
    		            	}
		    				mitarbeiterArray = _.compact(mitarbeiterArray);
	    					DigiWebApp.BautagebuchZeitenDetailsController.set("mitarbeiterListSelected", mitarbeiterArray);
            		}
                }
            }
        })
        
//        , GridVonBis: M.GridView.design({
//              childViews: 'vonInput bisInput'
//            , layout: M.TWO_COLUMNS
//            , vonInput: M.TextFieldView.design({
//	        	    label: M.I18N.l('bookingFrom')
//	        	  , inputType: M.INPUT_TIME
//	        	  , contentBindingReverse: {
//	                    target: DigiWebApp.BautagebuchZeitenDetailsController
//	                  , property: 'von'
//	              }
//	              , contentBinding: {
//	                    target: DigiWebApp.BautagebuchZeitenDetailsController
//	                  , property: 'von'
//	              }
//	          	  , events: {
//	          		  blur: {
//		          		  	action: function(id, event) {
//		    		  			try {
//		      		  				var myVon = D8.create("01.01.2000 " + DigiWebApp.BautagebuchZeitenDetailsController.von);
//		      		  				var myBis = D8.create("01.01.2000 " + DigiWebApp.BautagebuchZeitenDetailsController.bis);
//		      		  				var minutesInBetween = myVon.timeBetween(myBis, "minutes");
//		      		  				var hoursInBetween = Math.floor(minutesInBetween / 60);
//		      		  				var remainingMinutes = minutesInBetween % 60;
//		      		  				DigiWebApp.BautagebuchZeitenDetailsController.set("dauer", hoursInBetween.padLeft(2) + ":" + remainingMinutes.padLeft(2));
//		      		  			} catch(e) {}
//	          		  		}
//	          	  	  }
//	          	  }
//		    })
//	
//	        , bisInput: M.TextFieldView.design({
//	        	    label: M.I18N.l('bookingTo')
//	        	  , inputType: M.INPUT_TIME
//	        	  , contentBindingReverse: {
//	                    target: DigiWebApp.BautagebuchZeitenDetailsController
//	                  , property: 'bis'
//	              }
//	              , contentBinding: {
//	                    target: DigiWebApp.BautagebuchZeitenDetailsController
//	                  , property: 'bis'
//	              }
//	          	  , events: {
//	          		  blur: {
//		          		  	action: function(id, event) {
//	          		  			try {
//		      		  				var myVon = D8.create("01.01.2000 " + DigiWebApp.BautagebuchZeitenDetailsController.von);
//		      		  				var myBis = D8.create("01.01.2000 " + DigiWebApp.BautagebuchZeitenDetailsController.bis);
//		      		  				var minutesInBetween = myVon.timeBetween(myBis, "minutes");
//		      		  				var hoursInBetween = Math.floor(minutesInBetween / 60);
//		      		  				var remainingMinutes = minutesInBetween % 60;
//		      		  				DigiWebApp.BautagebuchZeitenDetailsController.set("dauer", hoursInBetween.padLeft(2) + ":" + remainingMinutes.padLeft(2));
//	          		  			} catch(e) {}
//	          		  		}
//	          	  	  }
//	          	  }
//	        })
//        })
                
//        , dauerInput: M.TextFieldView.design({
//	    	    label: M.I18N.l('bookingDuration')
//	    	  , cssClass: 'dauerInput'
//    		  , inputType: M.INPUT_TIME
//	    	  , contentBindingReverse: {
//	                target: DigiWebApp.BautagebuchZeitenDetailsController
//	              , property: 'dauer'
//	          }
//	          , contentBinding: {
//	                target: DigiWebApp.BautagebuchZeitenDetailsController
//	              , property: 'dauer'
//	          }
//	      	  , events: {
//	      		  tap: {
//	          		  	action: function(id, event) {
//	      		  				//$(DigiWebApp.BautagebuchZeitenDetailsPage.content.dauerInput).blur();
//	      		  		}
//	      	  	  }
//	      	  }
//      })
        
        , VonBisContainer: M.ContainerView.design({
    	      label: M.I18N.l('bookingFrom') + "/" + M.I18N.l('bookingTo')
			, childViews: 'plusGrid VonBisGrid minusGrid' 
			, plusGrid: M.GridView.design({
					  childViews: 'stundeVonPlusButton minuteVonPlusButton trennText stundeBisPlusButton minuteBisPlusButton'
					, layout: {
				          cssClass: 'vonbiscontainer'
				        , columns: {
				              0: 'column1'
				            , 1: 'column2'
				            , 2: 'column3'
				            , 3: 'column4'
				            , 4: 'column5'
				        }
				    }
					, stundeVonPlusButton: M.ButtonView.design({
		    	          value: "+"
		    	        , cssClass: 'plusMinusButton'
		    	        , events: {
		    	            tap: {
	    		    			action: function() {
									var myStunde = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.stundeVonFeld.id)[0].value);
									var myMinute = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.minuteVonFeld.id)[0].value);
  									myStunde = (myStunde + 1) % 24;
									var myStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
									DigiWebApp.BautagebuchZeitenDetailsController.set('von', myStr);
									DigiWebApp.BautagebuchZeitenDetailsController.setVonBis();
								}
		    	            }
		    	          }
		    	    })
					, minuteVonPlusButton: M.ButtonView.design({
		    	          value: "+"
		    	        , cssClass: 'plusMinusButton'
		    	        , events: {
		    	            tap: {
	    		    			action: function() {
									var myStunde = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.stundeVonFeld.id)[0].value);
									var myMinute = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.minuteVonFeld.id)[0].value);
									var minuteSteps = 1;
									if (DigiWebApp.BautagebuchEinstellungenController.settings.in15MinutenSchritten) {
										minuteSteps = 15;
									}
									if ((myMinute + minuteSteps) > 59) {
  										myStunde = (myStunde + 1) % 24;										
									}
									myMinute = (myMinute + minuteSteps) % 60;
									var myStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
									DigiWebApp.BautagebuchZeitenDetailsController.set('von', myStr);
									DigiWebApp.BautagebuchZeitenDetailsController.setVonBis();
		  						}
		    	            }
		    	          }
		    	    })
		    	    , trennText: M.LabelView.design({
		    	    	value: "&nbsp;"
		    	    })
					, stundeBisPlusButton: M.ButtonView.design({
		    	          value: "+"
		    	        , cssClass: 'plusMinusButton'
		    	        , events: {
		    	            tap: {
	    		    			action: function() {
									var myStunde = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.stundeBisFeld.id)[0].value);
									var myMinute = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.minuteBisFeld.id)[0].value);
  									myStunde = (myStunde + 1) % 24;
									var myStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
									DigiWebApp.BautagebuchZeitenDetailsController.set('bis', myStr);
									DigiWebApp.BautagebuchZeitenDetailsController.setVonBis();
								}
		    	            }
		    	          }
		    	    })
					, minuteBisPlusButton: M.ButtonView.design({
		    	          value: "+"
		    	        , cssClass: 'plusMinusButton'
		    	        , events: {
		    	            tap: {
	    		    			action: function() {
									var myStunde = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.stundeBisFeld.id)[0].value);
									var myMinute = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.minuteBisFeld.id)[0].value);
									var minuteSteps = 1;
									if (DigiWebApp.BautagebuchEinstellungenController.settings.in15MinutenSchritten) {
										minuteSteps = 15;
									}
									if ((myMinute + minuteSteps) > 59) {
	  									myStunde = (myStunde + 1) % 24;
									}
									myMinute = (myMinute + minuteSteps) % 60;
									var myStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
									DigiWebApp.BautagebuchZeitenDetailsController.set('bis', myStr);
									DigiWebApp.BautagebuchZeitenDetailsController.setVonBis();
		  						}
		    	            }
		    	          }
		    	    })
			})
			, VonBisGrid: M.GridView.design({
				  childViews: 'stundeVonFeld minuteVonFeld trennText stundeBisFeld minuteBisFeld'
				, layout: {
			          cssClass: 'vonbiscontainer'
			        , columns: {
			              0: 'column1'
			            , 1: 'column2'
			            , 2: 'column3'
			            , 3: 'column4'
			            , 4: 'column5'
			        }
			    }
				, stundeVonFeld: M.TextFieldView.design({
					cssClass: 'startUhrzeit'
		    	  , inputType: M.INPUT_TEXT
		        })
				, minuteVonFeld: M.TextFieldView.design({
					cssClass: 'startUhrzeit'
		    	  , inputType: M.INPUT_TEXT
		        })
		        , trennText: M.LabelView.design({
		    	    	value: "-"
		    	})
				, stundeBisFeld: M.TextFieldView.design({
					cssClass: 'startUhrzeit'
		    	  , inputType: M.INPUT_TEXT
		        })
				, minuteBisFeld: M.TextFieldView.design({
					cssClass: 'startUhrzeit'
		    	  , inputType: M.INPUT_TEXT
		        })
			})
			, minusGrid: M.GridView.design({
				  childViews: 'stundeVonMinusButton minuteVonMinusButton trennText stundeBisMinusButton minuteBisMinusButton'
				, layout: {
			          cssClass: 'vonbiscontainer'
			        , columns: {
			              0: 'column1'
			            , 1: 'column2'
			            , 2: 'column3'
			            , 3: 'column4'
			            , 4: 'column5'
			        }
			    }
				, stundeVonMinusButton: M.ButtonView.design({
	    	          value: "-"
	    	        , cssClass: 'plusMinusButton'
	    	        , events: {
	    	            tap: {
  		    				action: function() {
								var myStunde = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.stundeVonFeld.id)[0].value);
								var myMinute = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.minuteVonFeld.id)[0].value);
								myStunde = myStunde - 1;
								if (myStunde < 0) {
									myStunde = 23;
								}
								var myStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
								DigiWebApp.BautagebuchZeitenDetailsController.set('von', myStr);
								DigiWebApp.BautagebuchZeitenDetailsController.setVonBis();
	  						}
	    	            }
	    	          }
	    	    })
	    	    , minuteVonMinusButton: M.ButtonView.design({
	    	          value: "-"
	    	        , cssClass: 'plusMinusButton'
	    	        , events: {
	    	            tap: {
  		    				action: function() {
								var myStunde = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.stundeVonFeld.id)[0].value);
								var myMinute = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.minuteVonFeld.id)[0].value);
								var minuteSteps = 1;
								if (DigiWebApp.BautagebuchEinstellungenController.settings.in15MinutenSchritten) {
									minuteSteps = 15;
								}
  								if ((myMinute - minuteSteps) < 0) {
  									myStunde = myStunde - 1;
  									if (myStunde < 0) {
  										myStunde = 23;
  									}
  									myMinute = 60;
  								}
  								myMinute = (myMinute - minuteSteps) % 60;
  								if (myMinute < 0) {
  									myMinute = 60 - minuteSteps;
  								}
								var myStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
								DigiWebApp.BautagebuchZeitenDetailsController.set('von', myStr);
								DigiWebApp.BautagebuchZeitenDetailsController.setVonBis();
	  						}
	    	            }
	    	          }
	    	    })
	    	    , trennText: M.LabelView.design({
	    	    	value: "&nbsp;"
	    	    })
				, stundeBisMinusButton: M.ButtonView.design({
	    	          value: "-"
	    	        , cssClass: 'plusMinusButton'
	    	        , events: {
	    	            tap: {
		    				action: function() {
								var myStunde = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.stundeBisFeld.id)[0].value);
								var myMinute = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.minuteBisFeld.id)[0].value);
								myStunde = myStunde - 1;
								if (myStunde < 0) {
									myStunde = 23;
								}
								var myStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
								DigiWebApp.BautagebuchZeitenDetailsController.set('bis', myStr);
								DigiWebApp.BautagebuchZeitenDetailsController.setVonBis();
	  						}
	    	            }
	    	          }
	    	    })
	    	    , minuteBisMinusButton: M.ButtonView.design({
	    	          value: "-"
	    	        , cssClass: 'plusMinusButton'
	    	        , events: {
	    	            tap: {
		    				action: function() {
								var myStunde = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.stundeBisFeld.id)[0].value);
								var myMinute = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.VonBisContainer.VonBisGrid.minuteBisFeld.id)[0].value);
								var minuteSteps = 1;
								if (DigiWebApp.BautagebuchEinstellungenController.settings.in15MinutenSchritten) {
									minuteSteps = 15;
								}
  								if ((myMinute - minuteSteps) < 0) {
  									myStunde = myStunde - 1;
  									if (myStunde < 0) {
  										myStunde = 23;
  									}
  									myMinute = 60;
  								}
  								myMinute = (myMinute - minuteSteps) % 60;
  								if (myMinute < 0) {
  									myMinute = 60 - minuteSteps;
  								}
								var myStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
								DigiWebApp.BautagebuchZeitenDetailsController.set('bis', myStr);
								DigiWebApp.BautagebuchZeitenDetailsController.setVonBis();
	  						}
	    	            }
	    	          }
	    	    })
			})
		})
        
        , dauerContainer: M.ContainerView.design({
    	      label: M.I18N.l('bookingDuration')
			, childViews: 'plusGrid dauerGrid minusGrid' 
			, plusGrid: M.GridView.design({
					  childViews: 'stundePlusButton trennText minutePlusButton'
					, layout: {
				          cssClass: 'timecontainer'
				        , columns: {
				              0: 'column1'
				            , 1: 'column2'
				            , 2: 'column3'
				        }
				    }
					, stundePlusButton: M.ButtonView.design({
		    	          value: "+"
		    	        , cssClass: 'plusMinusButton'
		    	        , events: {
		    	            tap: {
	    		    			action: function() {
									var myStunde = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.dauerContainer.dauerGrid.stundeFeld.id)[0].value);
									var myMinute = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.dauerContainer.dauerGrid.minuteFeld.id)[0].value);
									myStunde = myStunde + 1;
									var dauerStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
									DigiWebApp.BautagebuchZeitenDetailsController.set('dauer', dauerStr);
									DigiWebApp.BautagebuchZeitenDetailsController.setDauer();
								}
		    	            }
		    	          }
		    	    })
		    	    , trennText: M.LabelView.design({
		    	    	value: "&nbsp;"
		    	    })
					, minutePlusButton: M.ButtonView.design({
		    	          value: "+"
		    	        , cssClass: 'plusMinusButton'
		    	        , events: {
		    	            tap: {
	    		    			action: function() {
									var myStunde = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.dauerContainer.dauerGrid.stundeFeld.id)[0].value);
									var myMinute = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.dauerContainer.dauerGrid.minuteFeld.id)[0].value);
									var minuteSteps = 1;
									if (DigiWebApp.BautagebuchEinstellungenController.settings.in15MinutenSchritten) {
										minuteSteps = 15;
									}
									if ((myMinute + minuteSteps) > 59) {
										myStunde = myStunde + 1;										
									}
									myMinute = (myMinute + minuteSteps) % 60;
									var dauerStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
									DigiWebApp.BautagebuchZeitenDetailsController.set('dauer', dauerStr);
									DigiWebApp.BautagebuchZeitenDetailsController.setDauer();
		  						}
		    	            }
		    	          }
		    	    })
			})
			, dauerGrid: M.GridView.design({
				  childViews: 'stundeFeld trennText minuteFeld'
				, layout: {
			          cssClass: 'timecontainer'
			        , columns: {
			              0: 'column1'
			            , 1: 'column2'
			            , 2: 'column3'
			        }
			    }
				, stundeFeld: M.TextFieldView.design({
					cssClass: 'startUhrzeit'
		    	  , inputType: M.INPUT_TEXT
		        })
		        , trennText: M.LabelView.design({
		    	    	value: ":"
		    	})
				, minuteFeld: M.TextFieldView.design({
					cssClass: 'startUhrzeit'
		    	  , inputType: M.INPUT_TEXT
		        })
			})
			, minusGrid: M.GridView.design({
				  childViews: 'stundeMinusButton trennText minuteMinusButton'
				, layout: {
			          cssClass: 'timecontainer'
			        , columns: {
			              0: 'column1'
			            , 1: 'column2'
			            , 2: 'column3'
			        }
			    }
				, stundeMinusButton: M.ButtonView.design({
	    	          value: "-"
	    	        , cssClass: 'plusMinusButton'
	    	        , events: {
	    	            tap: {
  		    				action: function() {
								var myStunde = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.dauerContainer.dauerGrid.stundeFeld.id)[0].value);
								var myMinute = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.dauerContainer.dauerGrid.minuteFeld.id)[0].value);
								myStunde = myStunde - 1;
								if (myStunde < 0) {
									myStunde = 0;
								}
								var dauerStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
								DigiWebApp.BautagebuchZeitenDetailsController.set('dauer', dauerStr);
								DigiWebApp.BautagebuchZeitenDetailsController.setDauer();
	  						}
	    	            }
	    	          }
	    	    })
	    	    , trennText: M.LabelView.design({
	    	    	value: "&nbsp;"
	    	    })
	    	    , minuteMinusButton: M.ButtonView.design({
	    	          value: "-"
	    	        , cssClass: 'plusMinusButton'
	    	        , events: {
	    	            tap: {
  		    				action: function() {
								var myStunde = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.dauerContainer.dauerGrid.stundeFeld.id)[0].value);
								var myMinute = parseInt($('#'+DigiWebApp.BautagebuchZeitenDetailsPage.content.dauerContainer.dauerGrid.minuteFeld.id)[0].value);
								var minuteSteps = 1;
								if (DigiWebApp.BautagebuchEinstellungenController.settings.in15MinutenSchritten) {
									minuteSteps = 15;
								}
								if ((myMinute - minuteSteps) < 0 && myStunde > 0) {
									myStunde = myStunde - 1;
									myMinute = 60;
								}
								myMinute = (myMinute - minuteSteps) % 60;
								if (myMinute < 0) {
									myMinute = 0;
								}
								var dauerStr = myStunde.padLeft(2,"0") + ":"+ myMinute.padLeft(2,"0");
								DigiWebApp.BautagebuchZeitenDetailsController.set('dauer', dauerStr);
								DigiWebApp.BautagebuchZeitenDetailsController.setDauer();
	  						}
	    	            }
	    	          }
	    	    })
			})
		})

		, remarkInput: M.TextFieldView.design({
              label: M.I18N.l('remark')
            , cssClass: 'remarkInput'
            , cssClassOnInit: 'remarkInputInitial'
            , initialText: "max. 255 " + M.I18N.l('characters')
            , hasMultipleLines: YES
//            , contentBinding: {
//		            target: DigiWebApp.BautagebuchZeitenDetailsController
//		          , property: 'remark'
//		    }
   	        , events: {
        		keyup: {
	                /* executed in scope of DOMWindow because no target defined */
	            	action: function(selectedValue, selectedItem) {
						var myValue = M.ViewManager.getView('bautagebuchZeitenDetailsPage', 'remarkInput').getValue();
						if (myValue.length <= 255) {
							DigiWebApp.BautagebuchZeitenDetailsController.set("remark", M.ViewManager.getView('bautagebuchZeitenDetailsPage', 'remarkInput').getValue());
						} else {
							M.ViewManager.getView('bautagebuchZeitenDetailsPage', 'remarkInput').setValue(DigiWebApp.BautagebuchZeitenDetailsController.remark);
				            DigiWebApp.ApplicationController.nativeAlertDialogView({
				                title: M.I18N.l('maximaleFeldlaengeErreicht')
				              , message: M.I18N.l('maximaleFeldlaengeErreichtMsg')
				            });
						}
	            	}
	            }
	    	}
        })

        , grid: M.GridView.design({
              childViews: 'button icon'
            , layout: {
                  cssClass: 'digiButton'
                , columns: {
                      0: 'button'
                    , 1: 'icon'
                }
            }
            , button: M.ButtonView.design({
                  value: M.I18N.l('save')
                , cssClass: 'digiButton green_background'
                , anchorLocation: M.RIGHT
                , events: {
                    tap: {
		                target: DigiWebApp.BautagebuchZeitenDetailsController,
		                action: function() {
            				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
            				this.save();
            			}
                    }
                }
            })
            , icon: M.ImageView.design({
                value: 'theme/images/icon_bookTime.png'
            })
        })
        , loeschenButton: M.GridView.design({
            childViews: 'button icon'
          , layout: {
                cssClass: 'digiButton'
              , columns: {
                    0: 'button'
                  , 1: 'icon'
              }
          }
          , button: M.ButtonView.design({
                value: M.I18N.l('BautagebuchDelete')
              , cssClass: 'red_background'
              , anchorLocation: M.RIGHT
              , events: {
                  tap: {
		                target: DigiWebApp.BautagebuchZeitenDetailsController,
		                action: function() {
            				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
            				this.deleteZeitbuchung();
            			}
                  }
              }
          })
          , icon: M.ImageView.design({
              value: ''
          })
      })

    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchZeitenTemplateView
// ==========================================================================

DigiWebApp.BautagebuchZeitenTemplateView = M.ListItemView.design({

      isSelectable: YES

    , childViews: 'positionName handOrderName activityName spacer von bis dauer latitude longitude latitude_bis longitude_bis mitarbeiterIds'

    , events: {
        tap: {
			action: function(id, m_id) {
			    var view = M.ViewManager.getViewById(id);
			    var view_modelId = view.modelId;
			    _.each(DigiWebApp.BautagebuchZeitenListeController.items, function(selectedItem) {
					if (selectedItem.m_id === view_modelId) {
						DigiWebApp.BautagebuchZeitenDetailsController.load(selectedItem);
					}
				});
			    DigiWebApp.NavigationController.toBautagebuchZeitenDetailsPageTransition();
			}
        }
	}
	
	, spacer: M.LabelView.design({
	    value: ''
	})

	, mitarbeiterIds: M.LabelView.design({
	      cssClass: 'small unselectable'
		, computedValue: {
		      valuePattern: '<%= mitarbeiterIds %>'
		    , operation: function(v) {
						if (v !== "" && v !== null) {
							var outString = "";
							// v ist eine (json-striginfied) Liste mit (DTC-)mitarbeiterIds
							var vAsArray = JSON.parse(v);
							var mitarbeiterList = DigiWebApp.BautagebuchMitarbeiter.findSorted();
							_.each(mitarbeiterList, function(el){
								if (vAsArray.indexOf(el.get("id")) !== -1) {
									if (outString !== "") {
										outString += ", ";
									}
									outString += "<nobr>" + el.vollername() + "</nobr>";
								}
							});
							return outString;
						} else {
							return "";
						}
		        }
		}
	})

	, positionName: M.LabelView.design({
	    cssClass: 'normal unselectable'
  	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= positionName %>'
	      , operation: function(v) {
					if (v !== "" && v !== null) {
						return v;
					} else {
						return "";
					}
	          }
	  }
	})
	
	, handOrderName: M.LabelView.design({
	    cssClass: 'normal unselectable'
  	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= handOrderName %>'
	      , operation: function(v) {
					if (v !== "" && v !== null) {
						return v;
					} else {
						return "";
					}
	          }
	  }
	})

	, activityName: M.LabelView.design({
	      cssClass: 'normal unselectable'
	    , isInline: YES
		, computedValue: {
		      valuePattern: '<%= activityName %>'
		    , operation: function(v) {
						if (v !== "" && v !== null) {
							return ", " + v + ":";
						} else {
							return ":";
						}
		        }
		}
	})

	, von: M.LabelView.design({
	      cssClass: 'normal unselectable'
		, isInline: YES
		, computedValue: {
		      valuePattern: '<%= von %>'
		    , operation: function(v) {
						if (v !== "" && v !== null && (!DigiWebApp.BautagebuchEinstellungen.find()[0].get("inStundenBuchen")) ) {
							return v;
						} else {
							return "";
						}
		        }
		}
	})
	
	, bis: M.LabelView.design({
	      cssClass: 'normal unselectable'
	    , isInline: YES
		, computedValue: {
		      valuePattern: '<%= bis %>'
		    , operation: function(v) {
						if (v !== "" && v !== null && (!DigiWebApp.BautagebuchEinstellungen.find()[0].get("inStundenBuchen")) ) {
							return " - " + v;
						} else {
							return "";
						}
		        }
		}
	})

	, dauer: M.LabelView.design({
	      cssClass: 'normal unselectable'
	    , isInline: YES
		, computedValue: {
		      valuePattern: '<%= dauer %>'
		    , operation: function(v) {
						if (v !== "" && v !== null && (DigiWebApp.BautagebuchEinstellungen.find()[0].get("inStundenBuchen")) ) {
							return M.I18N.l('bookingDuration') + ": " + v + " h";
						} else {
							return "";
						}
		        }
		}
	})

	, latitude: M.LabelView.design({
        cssClass: 'location unselectable'
      , computedValue: {
            valuePattern: '<%= latitude %>'
          , operation: function(v) {
              if(v > 0) {
              	var str = new Number(v);
             		return M.I18N.l('latitude') + ' Von: ' + str.toFixed(6);
              } else {
                  //return M.I18N.l('latitude') + ' Von: ' + M.I18N.l('GPSnotactive');
              	return '';
              }
          }
      }
  })

  , longitude: M.LabelView.design({
        cssClass: 'location unselectable'
      , computedValue: {
            valuePattern: '<%= longitude %>'
          , operation: function(v) {
              if (v > 0) { 
              	var str = new Number(v);
             		return M.I18N.l('longitude') + ' Von: ' + str.toFixed(6);
              } else {
                  //return M.I18N.l('longitude') + ' Von: ' + M.I18N.l('GPSnotactive');
                  return '';
              }
          }
      }
  })

	, latitude_bis: M.LabelView.design({
        cssClass: 'location unselectable'
      , computedValue: {
            valuePattern: '<%= latitude_bis %>'
          , operation: function(v) {
              if(v > 0) {
              	var str = new Number(v);
             		return M.I18N.l('latitude') + ' Bis: ' + str.toFixed(6);
              } else {
                  //return M.I18N.l('latitude') + ' Bis: ' + M.I18N.l('GPSnotactive');
              	return '';
              }
          }
      }
  })

  , longitude_bis: M.LabelView.design({
        cssClass: 'location unselectable'
      , computedValue: {
            valuePattern: '<%= longitude_bis %>'
          , operation: function(v) {
              if (v > 0) { 
              	var str = new Number(v);
             		return M.I18N.l('longitude') + ' Bis: ' + str.toFixed(6);
              } else {
                  //return M.I18N.l('longitude') + ' Bis: ' + M.I18N.l('GPSnotactive');
                  return '';
              }
          }
      }
  })

});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchZusammenfassungMitarbeiterSummeTemplateView
// ==========================================================================

DigiWebApp.BautagebuchZusammenfassungMitarbeiterSummeTemplateView = M.ListItemView.design({

      isSelectable: NO

    //, childViews: 'grid'
	, childViews: 'positionName handOrderName activity vonbisdauer mitarbeiterId'

    , events: {
        tap: {
			action: function(id, m_id) {
				var view = M.ViewManager.getViewById(id);
			    //console.log(view);
			    var view_mitarbeiterId = view.mitarbeiterId.value;
			    //console.log(view_mitarbeiterId);
//			    _.each(DigiWebApp.BautagebuchZusammenfassungController.ZeitbuchungenPerMitarbeiterList, function(maItem) {
//			        _.each(maItem.items, function(selectedItem) {
//						if (selectedItem.mitarbeiterId === view_mitarbeiterId ) {
//							//DigiWebApp.BautagebuchMaterialienDetailsController.load(selectedItem);
//							console.log(selectedItem.mitarbeiterId);
//						}
//					});
//				});
			    //DigiWebApp.NavigationController.toBautagebuchMaterialienDetailsPageTransition();
			    
			    if (M.ViewManager.getCurrentPage() === DigiWebApp.BautagebuchZeitenListePage) {
			    	// ZeitenListePage
				    var view_modelId = view.value.modelId;
				    _.each(DigiWebApp.BautagebuchZeitenListeController.items, function(selectedItem) {
						if (selectedItem.m_id === view_modelId) {
							DigiWebApp.BautagebuchZeitenDetailsController.load(selectedItem);
						}
					});
				    DigiWebApp.NavigationController.toBautagebuchZeitenDetailsPageTransition();
			    } else {
			    	// Zusammenfassung
				    DigiWebApp.BautagebuchZeitenListeController.neu(view_mitarbeiterId);			    	
			    }
			}
        }
    }

	, mitarbeiterId: M.LabelView.design({
	    cssClass: 'hiddenLabel'
	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= mitarbeiterId %>'
	      , operation: function(v) {
				return v;
	      }
	  }
	})

	, positionName: M.LabelView.design({
	    cssClass: 'normal unselectable'
  	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= positionName %>'
	      , operation: function(v) {
					if (v !== "" && v !== null) {
						return v;
					} else {
						return "";
					}
	          }
	  }
	})
	
	, handOrderName: M.LabelView.design({
	    cssClass: 'normal unselectable'
  	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= handOrderName %>'
	      , operation: function(v) {
					if (v !== "" && v !== null) {
						return v;
					} else {
						return "";
					}
	          }
	  }
	})
	
	, activity: M.LabelView.design({
		    cssClass: 'normal unselectable normalLabel'
	  	  , isInline: YES
		  , computedValue: {
		        valuePattern: '<%= activityName %>'
		      , operation: function(v) {
					return ", " + v;
		      }
		  }
	})
		

	, vonbisdauer: M.LabelView.design({
	    cssClass: 'normal unselectable normalLabel right'
	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= vonbisdauer %>'
	      , operation: function(v) {
					return ": " + v;
	      }
	  }
	})
			
//	, grid: M.GridView.design({
//		
//		  layout: M.TWO_COLUMNS
//		, childViews: 'name summe'
//			
//		, name: M.LabelView.design({
//		    cssClass: 'normal unselectable bigLabel'
//		  , computedValue: {
//		        valuePattern: '<%= id %>'
//		      , operation: function(v) {
//				    		var myMitarbeiter = DigiWebApp.BautagebuchMitarbeiter.find({query:{identifier: 'id', operator: '=', value: v}})[0];
//				    		if (typeof myMitarbeiter !== "undefined") {
//				    			return myMitarbeiter.vollername();
//				        	} else {
//				        		return v;
//				        	}
//	          }
//		  }
//		})
//		
//		, summe: M.LabelView.design({
//		    cssClass: 'normal unselectable bigLabel'
//		  , computedValue: {
//		        valuePattern: '<%= id %>'
//		      , operation: function(v) {
//							return v;
//	          }
//		  }
//		})
//	})
});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchZeitenListePage
// ==========================================================================

m_require('app/views/BautagebuchZusammenfassungMitarbeiterSummeTemplateView');
m_require('app/views/BautagebuchZeitenTemplateView');

DigiWebApp.BautagebuchZeitenListePage = M.PageView.design({

    events: {
		pagebeforeshow: {
              target: DigiWebApp.BautagebuchZeitenListeController
            , action: 'init'
        }
    }

	, controller: DigiWebApp.BautagebuchZeitenListeController
	, navigationController: DigiWebApp.NavigationController
	
    , childViews: 'header content'

    , cssClass: 'bautagebuchListePage unselectable'

    , header: M.ToolbarView.design({
        childViews: 'backButton title newButton'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.backToBautagebuchBautageberichtDetailsPageTransition();}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('BautagebuchZeiten')
            , anchorLocation: M.CENTER
        })
        , newButton: M.ButtonView.design({
              value: M.I18N.l('BautagebuchAdd')
            , icon: 'new'
            , anchorLocation: M.RIGHT
            , cssClass: 'green_background'
            , events: {
                tap: {
        			action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} 
        				DigiWebApp.BautagebuchZeitenListeController.neu();
					}
                }
            }
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
          childViews: 'leistungsnachweisList'
        , list: M.ListView.design({
              contentBinding: {
                  target: DigiWebApp.BautagebuchZeitenListeController
                , property: 'items'
            }
            , listItemTemplateView: DigiWebApp.BautagebuchZeitenTemplateView
        })
        , leistungsnachweisList: M.ContainerView.design({
	    	  	  childViews: 'list'
	    	  	, cssClass: 'marginBottom20 leistungsnachweisList'
	    	  	, doNotOverlapAtTop: YES
	    	  	, doNotOverlapAtBottom: YES
		        , list: M.ListView.design({
		        	  cssClass: ''
		        	, isDividedList: YES
		            , contentBinding: {
		                  target: DigiWebApp.BautagebuchZusammenfassungController
		                , property: 'ZeitbuchungenPerMitarbeiterList'
		            }
		            , listItemTemplateView: DigiWebApp.BautagebuchZusammenfassungMitarbeiterSummeTemplateView
		        })
	      })
    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchZusammenfassungPage
// ==========================================================================

m_require('app/views/BautagebuchZusammenfassungMitarbeiterSummeTemplateView');
m_require('app/views/BautagebuchMaterialienTemplateView');
m_require('app/views/BautagebuchNotizenZusammenfassungTemplateView');
m_require('app/views/BautagebuchMedienTemplateView');

DigiWebApp.BautagebuchZusammenfassungPage = M.PageView.design({

    events: {
		pagebeforeshow: {
            //  target: DigiWebApp.BautagebuchZusammenfassungController
            //, action: 'init'
			action: function() {
				DigiWebApp.BautagebuchZusammenfassungController.init(YES);
				$("#" + DigiWebApp.BautagebuchZusammenfassungPage.content.container.detailsGrid.id).addClass("marginBottom20");
				$("#" + DigiWebApp.BautagebuchZusammenfassungPage.content.container.detailsGrid.id).addClass("detailsGrid");
				DigiWebApp.BautagebuchMaterialienListeController.init(YES);
				DigiWebApp.BautagebuchNotizenListeController.init(YES);
				DigiWebApp.BautagebuchMedienListeController.init(YES);
				if (parseBool(DigiWebApp.BautagebuchZusammenfassungController.item.get("abgeschlossen"))) {
					$("#" + DigiWebApp.BautagebuchZusammenfassungPage.content.grid.id).hide();
					$('#' + DigiWebApp.BautagebuchZusammenfassungPage.header.delButton.id).show();
					$("#" + DigiWebApp.BautagebuchZusammenfassungPage.content.transferGrid.id).show();
					$('#' + DigiWebApp.BautagebuchZusammenfassungPage.content.container.leistungsnachweisList.zeitenAendernButton.id).hide();
				} else {
					$("#" + DigiWebApp.BautagebuchZusammenfassungPage.content.grid.id).show();
					$('#' + DigiWebApp.BautagebuchZusammenfassungPage.header.delButton.id).show();
					$("#" + DigiWebApp.BautagebuchZusammenfassungPage.content.transferGrid.id).hide();
					$('#' + DigiWebApp.BautagebuchZusammenfassungPage.content.container.leistungsnachweisList.zeitenAendernButton.id).show();
				}
				$('#' + DigiWebApp.BautagebuchZusammenfassungPage.content.container.leistungsnachweisList.zeitenAendernButton.id).addClass("zeitenAendernButton");
        		// Feature 405 (Unterschrift)
        		if ((DigiWebApp.SettingsController.featureAvailable('405')) && (typeof window.requestFileSystem !== "undefined")) {
        			$('#' + DigiWebApp.BautagebuchZusammenfassungPage.content.container.signature.id).show();
					// init canvas
					var sigPadOptions = {
							    bgColour : '#aaa'
							  , lineTop: 300
							  , drawOnly : true
							};
					if (DigiWebApp.BautagebuchZusammenfassungPage.signaturePadAPI === null) {
						DigiWebApp.BautagebuchZusammenfassungPage.signaturePadAPI = $('.sigPad2').signaturePad(sigPadOptions);
					}
        		} else {
        			$('#' + DigiWebApp.BautagebuchZusammenfassungPage.content.container.signature.id).hide();
        		}
        		// Feature 405 (Unterschrift)
        		if ((DigiWebApp.SettingsController.featureAvailable('405')) && (typeof window.requestFileSystem !== "undefined")) {
        			// load signature
        			if (DigiWebApp.BautagebuchZusammenfassungController.item.hasFileName() === YES) {
	        			DigiWebApp.BautagebuchZusammenfassungController.item.readFromFile(function(fileContent){
	        				if (fileContent && (fileContent !== "")) {
	       						DigiWebApp.BautagebuchZusammenfassungPage.signaturePadAPI.regenerate(fileContent);
	        				}
	        			}, function() {
	        				DigiWebApp.BautagebuchZusammenfassungPage.signaturePadAPI.clearCanvas();
	        			});
        			} else {
        				DigiWebApp.BautagebuchZusammenfassungPage.signaturePadAPI.clearCanvas();
        			}
        		}


			}
        }
    }

	, signaturePadAPI: null

    , childViews: 'header content'

    , cssClass: 'bautagebuchListePage unselectable'

    , header: M.ToolbarView.design({
        childViews: 'backButton title'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                    //  target: DigiWebApp.NavigationController
                    //, action: 'backToBautagebuchBautageberichtDetailsPageTransition'
        			action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} history.back();}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('BautagebuchZusammenfassung')
            , anchorLocation: M.CENTER
        })
        , delButton: M.ButtonView.design({
              value: M.I18N.l('BautagebuchDelete')
            , icon: 'delete'
            , anchorLocation: M.RIGHT
            , cssClass: 'red_background'
            , events: {
                tap: {
                      //target: DigiWebApp.BautagebuchBautageberichtDetailsController
                    //, action: 'delete'
        			action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} 
        				DigiWebApp.BautagebuchBautageberichtDetailsController.deleteBautagesbericht(DigiWebApp.NavigationController.backToBautagebuchBautageberichteListePageTransition);
        			}
                }
            }
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
          childViews: 'container grid transferGrid loeschenButton'
        	  
	    , container: M.ContainerView.design({
    	    	childViews: 'detailsGrid leistungsnachweisList materialienList notizenList medienList signature spacer'
    	      , cssClass: 'bautagebuchZusammenfassungScrollView'
    	    	  
    	      , spacer: M.LabelView.design({
    	    	  value: '&nbsp;'
    	      })
    	      
    	      , detailsGrid: M.GridView.design({
        		  childViews: 'details wetter'
        		, cssClass: 'marginBottom20 detailsGrid'
        		, layout: M.TWO_COLUMNS
        		, details: M.ContainerView.design({
        				  childViews: 'auftrag datum spacer1 projektleiter spacer2 startUhrzeit'
          				, spacer1: M.LabelView.design({
        					value: "&nbsp;"
        				})
        				, spacer2: M.LabelView.design({
        					value: "&nbsp;"
        				})
  		    			, auftrag: M.LabelView.design({
  						      value: ''
  						    , cssClass: 'bigLabel bold underline'
  						    , isInline: YES
  						    , computedValue: {
  						          contentBinding: {
  						              target: DigiWebApp.BautagebuchZusammenfassungController
  						            , property: 'auftragsName'
  						        }
  						        , value: ''
  						        , operation: function(v) {
  						            return v + ": ";
  						        }
  						    }
  		    			})
              			, datum: M.LabelView.design({
        				      value: ''
        				    , cssClass: 'bigLabel bold underline'
  						    , isInline: YES
        				    , contentBinding: {
        				          target: DigiWebApp.BautagebuchZusammenfassungController
        				        , property: 'datum'
        				    }
              			})
	        			, projektleiter: M.LabelView.design({
	    				      value: ''
	    				    , cssClass: 'bigLabel'
						    , computedValue: {
						          contentBinding: {
						              target: DigiWebApp.BautagebuchZusammenfassungController
						            , property: 'projektleiterId'
						        }
						        , value: ''
						        , operation: function(v) {
						        	// projekleiterName nachladen
					        		var myProjektleiter = _.find(DigiWebApp.BautagebuchProjektleiter.find(), function(a) { return (parseInt(a.get("id")) === v);});
					        		//DigiWebApp.BautagebuchProjektleiter.find({query:{identifier: 'id', operator: '=', value: v}})[0];
					        		if (typeof myProjektleiter !== "undefined") {
					        			return M.I18N.l('BautagebuchProjektleiter') + ": " + myProjektleiter.vollername();
						        	} else {
						        		return "";
						        	}
						        }
						    }
	        			})
						, startUhrzeit: M.LabelView.design({
						      value: ''
						    , cssClass: 'bigLabel'
						    , computedValue: {
						          contentBinding: {
						              target: DigiWebApp.BautagebuchZusammenfassungController
						            , property: 'startUhrzeit'
						        }
						        , value: ''
						        , operation: function(v) {
						            return M.I18N.l('BautagebuchStartingFrom') + " " + v + " " + M.I18N.l('oclock');
						        }
						    }
						})
        	    })
        	    , wetter: M.ContainerView.design({
        				  childViews: 'temperatur luftfeuchte bewoelkung niederschlag wind wechselhaft'
        				, cssClass: 'wetterBlock'
              			, temperatur: M.GridView.design({
              				  layout: M.TWO_COLUMNS
              				, childViews: 'myLabel myValue'
              				, myLabel: M.LabelView.design({
              					value: M.I18N.l('BautagebuchTemperatur')
              				})
                  			, myValue: M.LabelView.design({
	          				      value: ''
	          				    , cssClass: 'right'
							    , computedValue: {
							          contentBinding: {
							              target: DigiWebApp.BautagebuchZusammenfassungController
							            , property: 'wetter.temperatur'
							        }
							        , value: ''
							        , operation: function(v) {
							            return v + "°C";
							        }
							    }

                			})
              			})
              			, luftfeuchte: M.GridView.design({
              				  layout: M.TWO_COLUMNS
              				, childViews: 'myLabel myValue'
              				, myLabel: M.LabelView.design({
              					value: M.I18N.l('BautagebuchLuftfeuchtigkeit')
              				})
                  			, myValue: M.LabelView.design({
	          				      value: ''
	          				    , cssClass: 'right'
							    , computedValue: {
							          contentBinding: {
							              target: DigiWebApp.BautagebuchZusammenfassungController
							            , property: 'wetter.luftfeuchtigkeit'
							        }
							        , value: ''
							        , operation: function(v) {
							            return v + "%";
							        }
							    }

                			})
              			})
              			, bewoelkung: M.GridView.design({
              				  layout: M.TWO_COLUMNS
              				, childViews: 'myLabel myValue'
              				, myLabel: M.LabelView.design({
              					value: M.I18N.l('BautagebuchBewoelkung')
              				})
                  			, myValue: M.LabelView.design({
	          				      value: ''
	          				    , cssClass: 'right'
							    , computedValue: {
							          contentBinding: {
							              target: DigiWebApp.BautagebuchZusammenfassungController
							            , property: 'wetter.bewoelkung'
							        }
		    			    		, value: 0
		    				        , operation: function(v) {
		    				    		switch(v) {
		    				    			case 0:
		    				    				return M.I18N.l('BautagebuchBewoelkungKlar');
		    					    		case 1:
		    				    				return M.I18N.l('BautagebuchBewoelkungMaessig');
		    					    		case 2:
		    				    				return M.I18N.l('BautagebuchBewoelkungBedeckt');
		    					    		case 3:
		    				    				return M.I18N.l('BautagebuchBewoelkungNeblig');
		    					    		default:
		    					    		  return "";
		    				    		}
		    				        }
							    }

                			})
              			})
              			, niederschlag: M.GridView.design({
              				  layout: M.TWO_COLUMNS
              				, childViews: 'myLabel myValue'
              				, myLabel: M.LabelView.design({
              					value: M.I18N.l('BautagebuchNiederschlag')
              				})
                  			, myValue: M.LabelView.design({
	          				      value: ''
	          				    , cssClass: 'right'
							    , computedValue: {
							          contentBinding: {
							              target: DigiWebApp.BautagebuchZusammenfassungController
							            , property: 'wetter.niederschlag'
							        }
		    			    		, value: 0
		    				        , operation: function(v) {
		    				    		switch(v) {
		    				    			case 0:
		    				    				return M.I18N.l('BautagebuchNiederschlagKein');
		    					    		case 1:
		    				    				return M.I18N.l('BautagebuchNiederschlagNiesel');
		    					    		case 2:
		    				    				return M.I18N.l('BautagebuchNiederschlagRegen');
		    					    		case 3:
		    				    				return M.I18N.l('BautagebuchNiederschlagGraupel');
		    					    		case 4:
		    				    				return M.I18N.l('BautagebuchNiederschlagSchnee');
		    					    		case 5:
		    				    				return M.I18N.l('BautagebuchNiederschlagHagel');
		    					    		default:
		    					    		    return "";
		    				    		}
		    				        }
							    }

                			})
              			})
              			, wind: M.GridView.design({
              				  layout: M.TWO_COLUMNS
              				, childViews: 'myLabel myValue'
              				, myLabel: M.LabelView.design({
              					value: M.I18N.l('BautagebuchWind')
              				})
                  			, myValue: M.LabelView.design({
	          				      value: ''
	          				    , cssClass: 'right'
							    , computedValue: {
							          contentBinding: {
							              target: DigiWebApp.BautagebuchZusammenfassungController
							            , property: 'wetter.wind'
							        }
		    			    		, value: 0
		    				        , operation: function(v) {
		    				    		switch(v) {
		    				    			case 0:
		    				    				return M.I18N.l('BautagebuchWindStill');
		    					    		case 1:
		    				    				return M.I18N.l('BautagebuchWindMaessig');
		    					    		case 2:
		    				    				return M.I18N.l('BautagebuchWindBoeig');
		    					    		case 3:
		    				    				return M.I18N.l('BautagebuchWindStuermisch');
		    					    		default:
		    					    		    return "";
		    				    		}
		    				        }
							    }

                			})
              			})
              			, wechselhaft: M.GridView.design({
              				  layout: M.TWO_COLUMNS
              				, childViews: 'myLabel myValue'
              				, myLabel: M.LabelView.design({
              					value: M.I18N.l('BautagebuchWechselhaft')
              				})
                  			, myValue: M.LabelView.design({
	          				      value: ''
	          				    , cssClass: 'right'
							    , computedValue: {
							          contentBinding: {
							              target: DigiWebApp.BautagebuchZusammenfassungController
							            , property: 'wetter.wechselhaft'
							        }
		    			    		, value: 0
		    				        , operation: function(v) {
		    				    		switch(v) {
		    				    			case false:
		    				    				return M.I18N.l('no');
		    					    		case true:
		    				    				return M.I18N.l('yes');
		    					    		default:
		    					    		    return "";
		    				    		}
		    				        }
							    }

                			})
              			})

        	    	})
    	      })
    	      
    	      , leistungsnachweisList: M.ContainerView.design({
      	    	  	  childViews: 'myLabel zeitenAendernButton list'
      	    	  	, cssClass: 'marginBottom20 leistungsnachweisList'
      	    	  	, doNotOverlapAtTop: YES
      	    	  	, doNotOverlapAtBottom: YES
      	    	  	, myLabel: M.LabelView.design({
    	    	  		  cssClass: 'bigLabel bold'
    	    	  		, isInline: YES
    	    	  		, value: M.I18N.l('BautagebuchLeistungsnachweis') + ":"
    	    	  	})
      	    	  	, zeitenAendernButton: M.ButtonView.design({
	      	              value: M.I18N.l('BautagebuchZeitenAendern')
	      	            , anchorLocation: M.RIGHT
    	    	  		, isInline: YES
    	    	  		//, cssClass: 'zeitenAendernButton'
	      	            , events: {
	      	                tap: {
	      	                      target: DigiWebApp.NavigationController
	      	                    , action: 'backToBautagebuchZeitenListePageTransition'
	      	                }
	      	            }
	      	        })
	    	        , list: M.ListView.design({
	    	        	  cssClass: 'marginTop25important'
	    	        	, isDividedList: YES
	    	            , contentBinding: {
	    	                  target: DigiWebApp.BautagebuchZusammenfassungController
	    	                , property: 'ZeitbuchungenPerMitarbeiterList'
	    	            }
	    	            , listItemTemplateView: DigiWebApp.BautagebuchZusammenfassungMitarbeiterSummeTemplateView
	    	        })
    	      })

    	      , materialienList: M.ContainerView.design({
	  	    	  	  childViews: 'myLabel list'
	  	    	  	, cssClass: 'marginBottom20 materialienList'
	  	    	  	, doNotOverlapAtTop: YES
	  	    	  	, doNotOverlapAtBottom: YES
	  	    	  	, myLabel: M.LabelView.design({
	  	    	  		  cssClass: 'bigLabel bold'
	  	    	  		, value: M.I18N.l('BautagebuchMaterialien') + ":"
	  	    	  	})
	    	        , list: M.ListView.design({
	    	        	  cssClass: 'marginTop20'
	    	            , contentBinding: {
	    	                  target: DigiWebApp.BautagebuchMaterialienListeController
	    	                , property: 'items'
	    	            }
	    	            , listItemTemplateView: DigiWebApp.BautagebuchMaterialienTemplateView
	    	        })
    	      })

    	      , notizenList: M.ContainerView.design({
	  	    	  	  childViews: 'myLabel list'
	  	    	  	, cssClass: 'marginBottom20 notizenList'
	  	    	  	, doNotOverlapAtTop: YES
	  	    	  	, doNotOverlapAtBottom: YES
	  	    	  	, myLabel: M.LabelView.design({
	  	    	  		  cssClass: 'bigLabel bold'
	  	    	  		, value: M.I18N.l('BautagebuchNotizen') + ":"
	  	    	  	})
	    	        , list: M.ListView.design({
	    	        	  cssClass: 'marginTop20'
	    	            , contentBinding: {
	    	                  target: DigiWebApp.BautagebuchNotizenListeController
	    	                , property: 'items'
	    	            }
	    	            , listItemTemplateView: DigiWebApp.BautagebuchNotizenZusammenfassungTemplateView
	    	        })
		      })
		      
    	      , medienList: M.ContainerView.design({
	  	    	  	  childViews: 'myLabel list'
	  	    	  	, cssClass: 'marginBottom20 medienList borderBottom'
	  	    	  	, doNotOverlapAtTop: YES
	  	    	  	, doNotOverlapAtBottom: YES
	  	    	  	, myLabel: M.LabelView.design({
	  	    	  		  cssClass: 'bigLabel bold'
	  	    	  		, value: M.I18N.l('BautagebuchMedien') + ":"
	  	    	  	})
	    	        , list: M.ListView.design({
	    	        	  cssClass: 'marginTop20'
	    	            , contentBinding: {
	    	                  target: DigiWebApp.BautagebuchMedienListeController
	    	                , property: 'items'
	    	            }
	    	            , listItemTemplateView: DigiWebApp.BautagebuchMedienTemplateView
	    	        })
		      })
		      
	          , signature: M.ContainerView.design({
		        	
		        	  childViews: 'signatureform'
		        		  
		            , cssClass: 'signaturecanvas2 marginTop20 marginBottom20'

		        	, signatureform: M.FormView.design({
		            	
		            	  childViews: 'signaturecanvas'
		            	
		            	, signaturecanvas: M.CanvasView.design({

		            		  label: M.I18N.l('signature') + ":"

		            		, canvasWidth: 550
		                    , canvasHeight: 320
		                	
		                    , render: function() {
		                    	if (this.label) {
		                    		this.html += '<label for="' + this.id + '" class="signaturecanvaslabel">' + this.label + '</label>';
		                    	}
		    					this.html += '  <div id="' + this.id + '_container" class="sig sigWrapper2">';
		        				this.html += '    <canvas id="' + this.id + '_canvas" class="pad" width="' + this.canvasWidth + 'px" height="' + this.canvasHeight + 'px" style="border-color: #000; border: 1px solid #ccc;"></canvas>';
		        				this.html += '    <input id="' + this.id + '" type="hidden" name="output" class="output">';
		        				this.html += '  </div>';
		                    	return this.html;
		                	}
		    	        })
		                	
		                , render: function() {
		            		this.html += '<form method="post" action="" class="sigPad2">';
		                	this.renderChildViews();
		    				this.html += '</form>';
		                	return this.html;
		            	}
		            })
		      })


	    })
	
	    , grid: M.GridView.design({
		        childViews: 'button icon'
		      , layout: {
		            cssClass: 'digiButton marginTop20'
		          , columns: {
		                0: 'button'
		              , 1: 'icon'
		          }
		      }
		      , button: M.ButtonView.design({
		            value: M.I18N.l('BautagebuchBautageberichtAbschliessen')
		          , cssClass: 'digiButton green_background'
		          , anchorLocation: M.RIGHT
		          , events: {
		              tap: {
			                //  target: DigiWebApp.BautagebuchZusammenfassungController
			                //, action: 'finish'
			    			action: function() {
			    				//var that = this;
		    	  				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
			    				DigiWebApp.BautagebuchZusammenfassungController.finish(DigiWebApp.NavigationController.backToBautagebuchBautageberichteListePageTransition);
			    				DigiWebApp.BautagebuchZusammenfassungController.load(DigiWebApp.BautagebuchZusammenfassungController.item);
								DigiWebApp.NavigationController.toBautagebuchZusammenfassungPageTransition();
				    		}
		              }
		          }
		      })
		      , icon: M.ImageView.design({
		          value: 'theme/images/icon_bookTime.png'
		      })
		})
		  
	    , transferGrid: M.GridView.design({
	        childViews: 'button icon'
	      , layout: {
	            cssClass: 'digiButton marginTop20'
	          , columns: {
	                0: 'button'
	              , 1: 'icon'
	          }
	      }
	      , button: M.ButtonView.design({
	            value: M.I18N.l('BautagebuchUebertragen')
	          , cssClass: 'digiButton'
	          , anchorLocation: M.RIGHT
	          , events: {
	              tap: {
		                //  target: DigiWebApp.BautagebuchZusammenfassungController
		                //, action: 'finish'
		    			action: function() {
	    	  				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
		    		    	var that = DigiWebApp.BautagebuchZusammenfassungController;
		    		    	var startTransfer = NO;
		    		    	if (that.lastTimestampDatatransfer !== null) {
		    		    		var timestampNow = D8.now().getTimestamp();
		    		    		if (timestampNow - that.lastTimestampDatatransfer > parseInt(DigiWebApp.SettingsController.getSetting('datatransfer_min_delay'))) {
		    		    			startTransfer = YES;
		    		    		} else {
		    		    			// evtl. Fehlermeldung, dass noch eine Datenübertragung läuft bzw. nur alle 30 Sekunden eine Datenübertragung gestartet werden darf
		    		    		}
		    		    	}
		    		    	if (startTransfer === YES || that.lastTimestampDatatransfer === null) {
		    		    		that.set("lastTimestampDatatransfer", D8.now().getTimestamp());
			    				DigiWebApp.BautagebuchDatenuebertragungController.senden(
			    						DigiWebApp.BautagebuchZusammenfassungController.item
			    					    , function(msg) {
			    							//console.log("successHandler");
			    							DigiWebApp.BautagebuchZusammenfassungController.set("item", null);
			    							DigiWebApp.NavigationController.backToBautagebuchBautageberichteListePageTransition();
			    						}
			    						, function(xhr,err) {
			    							//console.log("errorHandler");
			    							console.error(xhr,err);
			    				            DigiWebApp.ApplicationController.nativeAlertDialogView({
			    				                title: M.I18N.l('BautagebuchUebertragungsfehler')
			    				              , message: M.I18N.l('BautagebuchUebertragungsfehlerMsg')
			    				            });
			    						}
			    				);
		    		    	}
			    		}
	              }
	          }
	      })
	      , icon: M.ImageView.design({
	          value: 'theme/images/icon_bookTime.png'
	      })
	  })
      , loeschenButton: M.GridView.design({
          childViews: 'button icon'
        , layout: {
              cssClass: 'digiButton'
            , columns: {
                  0: 'button'
                , 1: 'icon'
            }
        }
        , button: M.ButtonView.design({
              value: M.I18N.l('BautagebuchDelete')
            , cssClass: 'red_background'
            , anchorLocation: M.RIGHT
            , events: {
                tap: {
		                target: DigiWebApp.BautagebuchBautageberichtDetailsController,
		                action: function() {
            				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
            				this.deleteBautagesbericht(DigiWebApp.NavigationController.backToBautagebuchBautageberichteListePageTransition);

            			}
                }
            }
        })
        , icon: M.ImageView.design({
            value: ''
        })
    })
	
	})
	
});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BautagebuchZusammenfassungMitarbeiterZeitenTemplateView
// ==========================================================================

DigiWebApp.BautagebuchZusammenfassungMitarbeiterZeitenTemplateView = M.ListItemView.design({

      isSelectable: NO

    //, childViews: 'grid'
	, childViews: 'name summe'

    , events: {
        tap: {
			action: function(id, m_id) {
//			    var view = M.ViewManager.getViewById(id);
//			    var view_modelId = view.modelId;
//			    _.each(DigiWebApp.BautagebuchMaterialienListeController.items, function(selectedItem) {
//					if (selectedItem.m_id === view_modelId) {
//						DigiWebApp.BautagebuchMaterialienDetailsController.load(selectedItem);
//					}
//				});
//			    DigiWebApp.NavigationController.toBautagebuchMaterialienDetailsPageTransition();
			}
        }
    }
	
	, name: M.LabelView.design({
	    cssClass: 'normal unselectable bigLabel'
	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= id %>'
	      , operation: function(v) {
			    		var myMitarbeiter = _.find(DigiWebApp.BautagebuchMitarbeiter.find(), function(a) { return (parseInt(a.get("id")) === v);});
			    		//DigiWebApp.BautagebuchMitarbeiter.find({query:{identifier: 'id', operator: '=', value: v}})[0];
			    		if (typeof myMitarbeiter !== "undefined") {
			    			return myMitarbeiter.vollername();
			        	} else {
			        		return v;
			        	}
	      }
	  }
	})
	
	, summe: M.LabelView.design({
	    cssClass: 'normal unselectable bigLabel right'
  	  , isInline: YES
	  , computedValue: {
	        valuePattern: '<%= id %>'
	      , operation: function(v) {
						return v;
	      }
	  }
	})
	
//	, grid: M.GridView.design({
//		
//		  layout: M.TWO_COLUMNS
//		, childViews: 'name summe'
//			
//		, name: M.LabelView.design({
//		    cssClass: 'normal unselectable bigLabel'
//		  , computedValue: {
//		        valuePattern: '<%= id %>'
//		      , operation: function(v) {
//				    		var myMitarbeiter = DigiWebApp.BautagebuchMitarbeiter.find({query:{identifier: 'id', operator: '=', value: v}})[0];
//				    		if (typeof myMitarbeiter !== "undefined") {
//				    			return myMitarbeiter.vollername();
//				        	} else {
//				        		return v;
//				        	}
//	          }
//		  }
//		})
//		
//		, summe: M.LabelView.design({
//		    cssClass: 'normal unselectable bigLabel'
//		  , computedValue: {
//		        valuePattern: '<%= id %>'
//		      , operation: function(v) {
//							return v;
//	          }
//		  }
//		})
//	})
});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: CameraPage
// ==========================================================================

DigiWebApp.CameraPage = M.PageView.design({

    /* Use the 'events' property to bind events like 'pageshow' */
      events: {
		pagebeforeshow: {
            target: DigiWebApp.CameraController,
            action: 'init'
        }
    }

    , cssClass: 'cameraPage'

    , childViews: 'header content'

    , savePicture: function() {
    	
    	var myRemark = '';
    	if ((M.ViewManager.getView('cameraPage', 'remarkInput').value !== null) && (typeof(M.ViewManager.getView('cameraPage', 'remarkInput').value) !== "undefined")) {
    		myRemark = M.ViewManager.getView('cameraPage', 'remarkInput').value;
    	}
    			
		if (myRemark.length > 255) {
	        DigiWebApp.ApplicationController.DigiLoaderView.hide();
    		DigiWebApp.ApplicationController.nativeAlertDialogView({
    			  title: M.I18N.l('remarkTooLong')
    			, message: M.I18N.l('remarkTooLongMessage')
    		});
		} else {
			
            //if (/[[^a-zA-Z0-9_-äöüÄÖÜ,. !?;:/\\@€=]]+/.test(M.ViewManager.getView('cameraPage', 'remarkInput').value)) {
            if (DigiWebApp.ApplicationController.sonderzeichenCheck(myRemark)) {
    	        DigiWebApp.ApplicationController.DigiLoaderView.hide();
                DigiWebApp.ApplicationController.nativeAlertDialogView({
                      title: M.I18N.l('specialCharProblem')
                    , message: M.I18N.l('specialCharProblemMsg')
                });
            } else {
            	DigiWebApp.CameraController.savePicture();
            }

		}
    }

    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: 'backToMediaListPageTransition'
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('takePicture')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
    	
          childViews: 'image spacer order position activity remarkInput savePictureGrid'

        , image: M.ImageView.design({
        		  value: ''
        		, cssClass: 'photo'
        })
        
        , spacer: M.LabelView.design({
        		value: ' '
        })

        , order: M.SelectionListView.design({
              selectionMode: M.SINGLE_SELECTION_DIALOG
            , initialText: M.I18N.l('noData')
            , label: M.I18N.l('order')
            //, cssClass: 'unselectable'
            , applyTheme: NO
            , contentBinding: {
                  target: DigiWebApp.CameraController
                , property: 'orders'
            }
            , events: {
                change: {
                      target: DigiWebApp.CameraController
                    , action: function() {
                        this.setPositions();
                    }
                }
            }
        })
        
	    , position: M.SelectionListView.design({
	          selectionMode: M.SINGLE_SELECTION_DIALOG
	        , label: M.I18N.l('position')
	        , initialText: M.I18N.l('noData')
	        //, cssClass: 'unselectable'
	        , applyTheme: NO
	        , contentBinding: {
	              target: DigiWebApp.CameraController
	            , property: 'positions'
	        }
	        , events: {
	            change: {
	                  target: DigiWebApp.CameraController
	                , action: function() {
	                    this.setActivities(YES);
	                }
	            }
	        }
	    })
	
	    , activity: M.SelectionListView.design({
	          selectionMode: M.SINGLE_SELECTION_DIALOG
	        , label: M.I18N.l('activity')
	        , initialText: M.I18N.l('noData')
	        //, cssClass: 'unselectable'
	        , applyTheme: NO
	        , contentBinding: {
	              target: DigiWebApp.CameraController
	            , property: 'activities'
	        }
	        , events: {
	            change: {
	                  target: DigiWebApp.CameraController
	                , action: function() {
	                    //this.saveSelection();
	                }
	            }
	        }
	    })
        	        
        , remarkInput: M.TextFieldView.design({
              label: M.I18N.l('remark')
            , cssClass: 'remarkInput'
            , hasMultipleLines: YES
            , numberOfChars: 255
        })

//        , imageContainer: M.ContainerView.design({
//        	    childViews: 'imageCanvas'
//            , cssClass: 'imageContainer marginTop20 marginBottom20'
//
//        	, imageCanvas: M.CanvasView.design({
//                  cssClass: 'imageCanvas'
//                , canvasWidth: 300
//                , canvasHeight: 450
//                , render: function() {
//						this.html += '<canvas id="' + this.id + '" width="' + this.canvasWidth + 'px" height="' + this.canvasHeight + 'px" class="' + this.cssClass + '"></canvas>';
//	            		return this.html;
//        		}
//	        })
//	        
//        })

        , savePictureGrid: M.GridView.design({

        	  childViews: 'button icon'

        	, layout: {
            	  cssClass: 'marginTop40 digiButton'
            	, columns: {
                	  0: 'button'
                	, 1: 'icon'
            	}
        	}
        
        	, button: M.ButtonView.design({
        		  value: M.I18N.l('assume')
        		, cssClass: 'digiButton'
        		, anchorLocation: M.RIGHT
        		, events: {
                	tap: {
        				//  target: DigiWebApp.CameraPage
        				//, action: 'savePicture'
        				action: function() {
        					DigiWebApp.CameraPage.savePicture();
        				}
                	}
            	}
        	})
        
        	, icon: M.ImageView.design({
        		value: 'theme/images/icon_bookTime.png'
        	})
        })
        
    })
});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: ButtonDashboardTemplateView
// ==========================================================================

DigiWebApp.ButtonDashboardTemplateView = M.ListItemView.design({

    isSelectable: NO

    , childViews: 'button icon'

    , events: {
        tap: {
            target: DigiWebApp.DashboardController,
            action: 'itemSelected'
        }
    }

	, button: M.ButtonView.design({
		cssClass: 'scholppButton'
      , computedValue: {
	        valuePattern: '<%= label %>'
	        , operation: function(v) {
				if (v === null || typeof(v) === "undefined") {
					return null;
				} else {
					return v;
				}
	        }
	  }
	    , events: {
	        tap: {
	            target: DigiWebApp.DashboardController,
	            action: 'itemSelected'
	        }
	    }
	})
	
    , icon: M.ImageView.design({
		  cssClass: 'scholppButtonMenuIcon'
        , computedValue: {
	          valuePattern: '<%= icon %>'
	        , operation: function(v) {
				if (v === null || typeof(v) === "undefined") {
					return null;
				} else {
					return 'theme/images/' + v;
				}
	        }
	  }
    })

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: DashboardTemplateView
// ==========================================================================

DigiWebApp.DashboardTemplateView = M.ListItemView.design({

    isSelectable: NO

    , childViews: 'icon label'

    , events: {
        tap: {
            target: DigiWebApp.DashboardController,
            action: 'itemSelected'
        }
    }

    , icon: M.ImageView.design({
    	cssClass: 'unselectable'
        , computedValue: {
            valuePattern: '<%= icon %>'
            , operation: function(v) {
                return 'theme/images/' + v;
            }
        }
    })

    , label: M.LabelView.design({
    	cssClass: 'unselectable'
        , valuePattern: '<%= label %>'
    })

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: AudioPage
// ==========================================================================

DigiWebApp.DemoAudioPage = M.PageView.design({

    /* Use the 'events' property to bind events like 'pageshow' */
      events: {
		pagebeforeshow: {
            target: DigiWebApp.DemoAudioController,
            action: 'init'
        }
    }

    , childViews: 'header content'

    , cssClass: 'demoAudioPage'

    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: 'backToDemoMediaPage'
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('settings')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
        //childViews: 'audioIcon recordIcon stopRecordIcon playIcon stopIcon grid',
          childViews: 'audioIcon grid'
        
        , audioIcon: M.ImageView.design({
    		  value: 'theme/images/icon_record.png'
    		, cssClass: 'audioIcon'
        	, events: {
        		tap: {
        			  target: DigiWebApp.DemoAudioController
					, action: 'recordAudio'
        		}
    		}
        })

        , recordIcon: M.ImageView.design({
    		  value: 'theme/images/icon_record.png'
    		, cssClass: 'mediaIcon'
        	, events: {
        		tap: {
        			action: DigiWebApp.DemoAudioController.recordAudio
        		}
    		}
        })

        , stopRecordIcon: M.ImageView.design({
    		  value: 'theme/images/icon_stop.png'
    		, cssClass: 'mediaIcon'
        	, events: {
        		tap: {
					action: DigiWebApp.DemoAudioController.stopRecord
        		}
    		}
        })

        , playIcon: M.ImageView.design({
    		  value: 'theme/images/icon_playbackAudio.png'
    		, cssClass: 'mediaIcon'
        	, events: {
        		tap: {
					action: DigiWebApp.DemoAudioController.playbackAudio
        		}
    		}
        })

        , stopIcon: M.ImageView.design({
    		  value: 'theme/images/icon_stop.png'
    		, cssClass: 'mediaIcon'
        	, events: {
        		tap: {
					action: DigiWebApp.DemoAudioController.stopPlayback
        		}
    		}
        })

        , grid: M.GridView.design({
        	  childViews: 'button icon'
        	, layout: {
            	  cssClass: 'marginTop40 digiButton'
            	, columns: {
                	  0: 'button'
                	, 1: 'icon'
            	}
        	}
        
        	, button: M.ButtonView.design({
        		  value: M.I18N.l('recordAudio')
        		, cssClass: 'digiButton'
        		, anchorLocation: M.RIGHT
        		, events: {
                	tap: {
        				  target: DigiWebApp.DemoAudioController
        				, action: 'recordAudio'
                	}
            	}
        	})
        
        	, icon: M.ImageView.design({
        		value: 'theme/images/icon_bookTime.png'
        	})
        })
    })


});


//// ==========================================================================
//// The M-Project - Mobile HTML5 Application Framework
//// Generated with: Espresso 
////
//// Project: DigiWebApp
//// View: DemoCameraPage
//// ==========================================================================
//
//DigiWebApp.DemoCameraPage = M.PageView.design({
//
//    /* Use the 'events' property to bind events like 'pageshow' */
//      events: {
//		pagebeforeshow: {
//              target: DigiWebApp.DemoCameraController
//            , action: 'init'
//        }
//    }
//
//    , cssClass: 'demoCameraPage'
//
//    , childViews: 'header content'
//
//    , header: M.ToolbarView.design({
//          childViews: 'backButton title'
//        , cssClass: 'header'
//        , isFixed: YES
//        , backButton: M.ButtonView.design({
//              value: M.I18N.l('back')
//            , icon: 'arrow-l'
//            anchorLocation: M.LEFT
//            , events: {
//                tap: {
//                      target: DigiWebApp.NavigationController
//                    , action: 'backToDemoMediaPage'
//                }
//            }
//        })
//        , title: M.LabelView.design({
//              value: M.I18N.l('takePictureDemo')
//            , anchorLocation: M.CENTER
//        })
//        , anchorLocation: M.TOP
//    })
//
//    , content: M.ScrollView.design({
//          childViews: 'image takePictureGrid'
//
//        , image: M.ImageView.design({
//        		  value: ''
//        		, cssClass: 'demophoto'
//        })
//
//        , takePictureGrid: M.GridView.design({
//        	  childViews: 'button icon'
//        	, layout: {
//            	  cssClass: 'marginTop40 digiButton'
//            	, columns: {
//                	  0: 'button'
//                	, 1: 'icon'
//            	}
//        	}
//        
//        	, button: M.ButtonView.design({
//        		  value: M.I18N.l('takePicture')
//        		, cssClass: 'digiButton'
//        		, anchorLocation: M.RIGHT
//        		, events: {
//                	tap: {
//        				  target: DigiWebApp.DemoCameraController
//        				, action: 'takePicture'
//                	}
//            	}
//        	})
//        
//        	, icon: M.ImageView.design({
//        		value: 'theme/images/icon_bookTime.png'
//        	})
//
//        })
//    })
//});
//

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: DemoMediaPageTemplateView
// ==========================================================================

DigiWebApp.DemoMediaPageTemplateView = M.ListItemView.design({

      isSelectable: NO

    , childViews: 'icon label'

    , events: {
        tap: {
              target: DigiWebApp.DemoMediaPageController
            , action: 'itemSelected'
        }
    }

    , icon: M.ImageView.design({
        computedValue: {
              valuePattern: '<%= icon %>'
            , operation: function(v) {
                return 'theme/images/' + v;
            }
        }
    })

    , label: M.LabelView.design({
        valuePattern: '<%= label %>'
    })

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: DemoMediaPage
// ==========================================================================

m_require('app/views/DemoMediaPageTemplateView.js');

DigiWebApp.DemoMediaPage = M.PageView.design({

      childViews: 'header content'

    , cssClass: 'demoMediaPage'

    , events: {
		pagebeforeshow: {
              target: DigiWebApp.DemoMediaPageController
            , action: 'init'
        }
    }
    
    , needsUpdate: true
    
    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: 'backToDashboardPage'
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('info')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({

          childViews: 'list'

        , list: M.ListView.design({
              contentBinding: {
                  target: DigiWebApp.DemoMediaPageController
                , property: 'items'
            }
            , listItemTemplateView: DigiWebApp.DemoMediaPageTemplateView
        })
    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: DummyTemplateView
// ==========================================================================

DigiWebApp.DummyTemplateView = M.ListItemView.design({

      isSelectable: NO

    , childViews: ''

});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: FestePauseStornierenPage
// ==========================================================================

m_require('app/views/DummyTemplateView');

DigiWebApp.FestePauseStornierenPage = M.PageView.design({

    /* Use the 'events' property to bind events like 'pageshow' */
      events: {
		pagebeforeshow: {
            target: DigiWebApp.FestePauseStornierenController,
            action: 'init'
        }
    }

    , childViews: 'header content'

    , cssClass: 'festePauseStornierenPage'

    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
        			action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
						if (DigiWebApp.SettingsController.featureAvailable('404')) {
			        		DigiWebApp.NavigationController.backToButtonDashboardPage();
						} else {
			        		DigiWebApp.NavigationController.backToDashboardPage();
						}
        			}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('FestePauseStornieren')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
          childViews: 'gesternBalken gesternPausenList heuteBalken heutePausenList morgenBalken morgenPausenList stornierenButton'
        	  
        , gesternBalken: M.ListView.design({
	  	  	  isDividedList: YES
	        , contentBinding: {
            	  target: DigiWebApp.FestePauseStornierenController
            	, property: 'gesternBalken'
        	}
	        , listItemTemplateView: DigiWebApp.DummyTemplateView
      	})
      	
        , gesternPausenList: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            , cssClass: 'festePausen'
            , contentBinding: {
                  target: DigiWebApp.FestePauseStornierenController
                , property: 'gesternPausenList'
            }
        })
        
        , heuteBalken: M.ListView.design({
	  	  	  isDividedList: YES
	        , contentBinding: {
	          	  target: DigiWebApp.FestePauseStornierenController
	          	, property: 'heuteBalken'
	      	}
	        , listItemTemplateView: DigiWebApp.DummyTemplateView
    	})
    	
        , heutePausenList: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            , cssClass: 'festePausen'
            , contentBinding: {
                  target: DigiWebApp.FestePauseStornierenController
                , property: 'heutePausenList'
            }
        })
        
        , morgenBalken: M.ListView.design({
	  	  	  isDividedList: YES
	        , contentBinding: {
          	  target: DigiWebApp.FestePauseStornierenController
          	, property: 'morgenBalken'
      		}
	        , listItemTemplateView: DigiWebApp.DummyTemplateView
    	})
    	
        , morgenPausenList: M.SelectionListView.design({
            selectionMode: M.MULTIPLE_SELECTION
          , cssClass: 'festePausen'
          , contentBinding: {
                target: DigiWebApp.FestePauseStornierenController
              , property: 'morgenPausenList'
          }
        })

        , stornierenButton: M.GridView.design({
	            childViews: 'button icon'
	          , layout: {
	                cssClass: 'digiButton'
	              , columns: {
	                    0: 'button'
	                  , 1: 'icon'
	              }
	          }
	          , button: M.ButtonView.design({
	                value: M.I18N.l('stornierenSpeichern')
	              , cssClass: 'digiButton'
	              , anchorLocation: M.RIGHT
	              , events: {
	                  tap: {
	                        target: DigiWebApp.FestePauseStornierenController
	                      , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} this.save();}
	                  }
	              }
	          })
	          , icon: M.ImageView.design({
	        	  	value: 'theme/images/icon_bookTime.png'
	          })
	    })

    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: EditPicturePage
// ==========================================================================

DigiWebApp.EditPicturePage = M.PageView.design({

	  childViews: 'header content'
	
	, cssClass: 'editPicturePage'
	
	, events: {
		pagebeforeshow: {
	          target: DigiWebApp.EditPicturePageController
	        , action: 'init'
	    }
 	}

    , savePicture: function() {
    	var myRemark = '';
    	if ((M.ViewManager.getView('editPicturePage', 'remarkInput').value !== null) && (typeof(M.ViewManager.getView('editPicturePage', 'remarkInput').value) !== "undefined")) {
    		myRemark = M.ViewManager.getView('editPicturePage', 'remarkInput').value;
    	}

    	if (myRemark.length > 255) {
		      DigiWebApp.ApplicationController.DigiLoaderView.hide();
			  DigiWebApp.ApplicationController.nativeAlertDialogView({
					  title: M.I18N.l('remarkTooLong')
					, message: M.I18N.l('remarkTooLongMessage')
			  });
		} else {
		      //if (/[[^a-zA-Z0-9_-äöüÄÖÜ,. !?;:/\\@€=]]+/.test(M.ViewManager.getView('editPicturePage', 'remarkInput').value)) {
		      if (DigiWebApp.ApplicationController.sonderzeichenCheck(myRemark)) {
		          DigiWebApp.ApplicationController.DigiLoaderView.hide();
		          DigiWebApp.ApplicationController.nativeAlertDialogView({
		              	  title: M.I18N.l('specialCharProblem')
		              	, message: M.I18N.l('specialCharProblemMsg')
		              });
	          } else {
		          	DigiWebApp.EditPicturePageController.savePicture();
	          }
		}
	}
	
	, header: M.ToolbarView.design({
	      childViews: 'backButton title deleteButton'
	    , cssClass: 'header'
	    , isFixed: YES
	    , backButton: M.ButtonView.design({
	    	  value: M.I18N.l('back')
	    	, icon: 'arrow-l'
	    	, anchorLocation: M.LEFT
	    	, events: {
	          	tap: {
	              	  target: DigiWebApp.NavigationController
	              	, action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.backToMediaListPageTransition();}
	          	}
	      	  }
	    })
	    , deleteButton: M.ButtonView.design({
	    	  value: M.I18N.l('deleteLabel')
	    	, icon: 'delete'
	    	, anchorLocation: M.RIGHT
            , cssClass: 'red_background'
	    	, events: {
	          	tap: {
	              	//target: DigiWebApp.NavigationController,
	              	//action: 'backToMediaListPageTransition'
	    			action: function() {
	    				try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} 
	    				DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('deleteMediaFile'));
	    				DigiWebApp.EditPicturePageController.myMediaFile.deleteFile(
	    						  DigiWebApp.EditPicturePageController.deleteMediaFileFromLocalStorage
	    						, function() {
//	    							  DigiWebApp.ApplicationController.nativeAlertDialogView({
//	    									  title: M.I18N.l('error')
//	    									, message: M.I18N.l('errorWhileDeletingMediaFile')
//	    							  });
		    						  DigiWebApp.EditPicturePageController.deleteMediaFileFromLocalStorage();
	    						  }
	    				);
	    			}
	          	}
	      	  }
	    })

	  , title: M.LabelView.design({
	            value: M.I18N.l('editPicture')
	          , anchorLocation: M.CENTER
	        })
	      , anchorLocation: M.TOP
	  })
	
	  , content: M.ScrollView.design({
	  	
	        	childViews: 'image spacer order position activity remarkInput savePictureGrid'
	
			  , image: M.ImageView.design({
			  		  value: ''
			  		, cssClass: 'photo'
			  })
			  
			  , spacer: M.LabelView.design({
			  		value: ' '
			  })
			
			  , order: M.SelectionListView.design({
			      selectionMode: M.SINGLE_SELECTION_DIALOG
			      , initialText: M.I18N.l('noData')
			      , label: M.I18N.l('order')
			      //, cssClass: 'unselectable'
			      , applyTheme: NO
			      , contentBinding: {
			            target: DigiWebApp.EditPicturePageController
			          , property: 'orders'
			      }
			      , events: {
			          change: {
			                target: DigiWebApp.EditPicturePageController
			              , action: function() {
			                  this.setPositions();
			              }
			          }
			      }
			  })
	  
		    , position: M.SelectionListView.design({
		          selectionMode: M.SINGLE_SELECTION_DIALOG
		        , label: M.I18N.l('position')
		        , initialText: M.I18N.l('noData')
		        //, cssClass: 'unselectable'
		        , applyTheme: NO
		        , contentBinding: {
		              target: DigiWebApp.EditPicturePageController
		            , property: 'positions'
		        }
		        , events: {
		            change: {
		                  target: DigiWebApp.EditPicturePageController
		                , action: function() {
		                    this.setActivities(YES);
		                }
		            }
		        }
		    })
		
		    , activity: M.SelectionListView.design({
		          selectionMode: M.SINGLE_SELECTION_DIALOG
		        , label: M.I18N.l('activity')
		        , initialText: M.I18N.l('noData')
		        //, cssClass: 'unselectable'
		        , applyTheme: NO
		        , contentBinding: {
		              target: DigiWebApp.EditPicturePageController
		            , property: 'activities'
		        }
		        , events: {
		            change: {
		                  target: DigiWebApp.EditPicturePageController
		                , action: function() {
		                    //this.saveSelection();
		                }
		            }
		        }
		    })
		  	        
		  , remarkInput: M.TextFieldView.design({
		        label: M.I18N.l('remark')
		      , cssClass: 'remarkInput'
		      , hasMultipleLines: YES
		      , numberOfChars: 255
		  })
	
	//      , imageContainer: M.ContainerView.design({
	//      	  childViews: 'imageCanvas'
	//          , cssClass: 'imageContainer marginTop20 marginBottom20'
	//
	//      	, imageCanvas: M.CanvasView.design({
	//                cssClass: 'imageCanvas'
	//              , canvasWidth: 300
	//              , canvasHeight: 450
	//              , render: function() {
	//					this.html += '<canvas id="' + this.id + '" width="' + this.canvasWidth + 'px" height="' + this.canvasHeight + 'px" class="' + this.cssClass + '"></canvas>';
	//	            	return this.html;
	//      		}
	//	        })
	//	        
	//      })
	
		  , savePictureGrid: M.GridView.design({
		
			  	  childViews: 'button icon'
			
			  	, layout: {
			      	  cssClass: 'marginTop40 digiButton'
			      	, columns: {
			          	  0: 'button'
			          	, 1: 'icon'
			      	}
			  	}
			  
			  	, button: M.ButtonView.design({
			  		  value: M.I18N.l('assume')
			  		, cssClass: 'digiButton'
			  		, anchorLocation: M.RIGHT
			  		, events: {
			          	tap: {
			  				//  target: DigiWebApp.CameraPage
			  				//, action: 'savePicture'
			  				action: function() {
			  					try{DigiWebApp.ApplicationController.vibrate();}catch(e4){} 
			  					DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('saveMediaFile'));
			  					DigiWebApp.EditPicturePage.savePicture();
			  				}
			          	}
			      	}
			  	})
			  
			  	, icon: M.ImageView.design({
			  		value: 'theme/images/icon_bookTime.png'
		      	})
	      })
		      
	  })
	  
});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: EmployeePage
// ==========================================================================

DigiWebApp.EmployeePage = M.PageView.design({

      childViews: 'header content'

    , events: {
		pagebeforeshow: {
              target: DigiWebApp.EmployeeController
            , action: 'init'
        }
    }

    , cssClass: 'employeePage'

    , header: M.ToolbarView.design({
          cssClass: 'header'
        , isFixed: YES
        , value: M.I18N.l('selectEmployee')
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
    	
          childViews: 'employeeSelection buttonGrid'

        , employeeSelection: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            , label: M.I18N.l('employees')
            , cssClass: 'infoLabel'
            , contentBinding: {
                  target: DigiWebApp.EmployeeController
                , property: 'employees'
            }
        })

        , buttonGrid: M.GridView.design({
              childViews: 'button icon'
            , layout: {
                  cssClass: 'digiButton'
                , columns: {
                      0: 'button'
                    , 1: 'icon'
                }
            }
            , button: M.ButtonView.design({
                  value: M.I18N.l('apply')
                , cssClass: 'digiButton'
                , anchorLocation: M.RIGHT
                , events: {
                    tap: {
                          target: DigiWebApp.EmployeeController
                        , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.saveEmployeeSelection();}
                    }
                }
            })
            , icon: M.ImageView.design({
                value: 'theme/images/icon_bookTime.png'
            })
        })
    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: FileChooserPage
// ==========================================================================

DigiWebApp.FileChooserPage = M.PageView.design({

	  childViews: 'header content'
	
	, cssClass: 'fileChooserPage'
		
	, successCallback: function() {}
	
	, events: {
		pagebeforeshow: {
	        //  target: DigiWebApp.EditPicturePageController
	        //, action: 'init'
			action: function() {
				$("#" + DigiWebApp.FileChooserPage.content.inputfile.id).val("");
				$("#" + DigiWebApp.FileChooserPage.content.inputfile.id).unbind("change");
				$("#" + DigiWebApp.FileChooserPage.content.inputfile.id).bind("change", function(evt) { 
					var files = evt.target.files;
					var file = files[0];
					//console.log(file);
					var reader = new FileReader();
					reader.onload = function() {
						//console.log(this);
						DigiWebApp.FileChooserPage.successCallback(this.result, file.name);
					};
					reader.onerror = function() {
						DigiWebApp.FileChooserPage.successCallback(null);
					};
					reader.readAsDataURL(file);
				});
			}
	    }
 	}
	
	, header: M.ToolbarView.design({
	      childViews: 'backButton title'
	    , cssClass: 'header'
	    , isFixed: YES
	    
	    , backButton: M.ButtonView.design({
	    	  value: M.I18N.l('back')
	    	, icon: 'arrow-l'
	    	, anchorLocation: M.LEFT
	    	, events: {
	          	tap: {
	              	//  target: DigiWebApp.NavigationController
	              	//, action: DigiWebApp.FileChooserPage.NavigationControllerMethodToReturnTo
	    			action: function() {
	    				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} 
	    				history.back();
	    			}
	          	}
	      	  }
	    })

	  , title: M.LabelView.design({
	            value: M.I18N.l('editPicture')
	          , anchorLocation: M.CENTER
	        })
	      , anchorLocation: M.TOP
	  })
	
	  , content: M.ScrollView.design({
	  	
	        	childViews: 'inputfile'
	        
	          , cssClass: 'inputfile'
	
              , inputfile: M.FormView.design({
	                	
	              	    childViews: ''
	              		                  	
	                  , render: function() {
	              		this.html += '<form method="post" action="" class="">';
	                  	//this.renderChildViews();
	              		this.html += '<input type="file" id="' + this.id + '" enctype="multipart/form-data" />';
	      				this.html += '</form>';
	                  	return this.html;
	              	}
	              })
			  
		      
	  })
	  
});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: MediaActionTemplateView
// ==========================================================================

DigiWebApp.MediaActionTemplateView = M.ListItemView.design({

      isSelectable: NO

    , childViews: 'icon label'

    , events: {
        tap: {
              target: DigiWebApp.MediaListController
            , action: 'itemSelected'
        }
    }

    , icon: M.ImageView.design({
        computedValue: {
              valuePattern: '<%= icon %>'
            , operation: function(v) {
                	return 'theme/images/' + v;
            }
        }
    })

    , label: M.LabelView.design({
        valuePattern: '<%= label %>'
    })

});

// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: MediaListTemplateView
// ==========================================================================

DigiWebApp.MediaListTemplateView = M.ListItemView.design({

      isSelectable: YES

    , childViews: 'icon timeStamp order position activity latitude longitude remark'

    , events: {
        tap: {
			action: function(id, m_id) {
					DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('loadMediaFile'));
					var doShow = NO;
				    var view = M.ViewManager.getViewById(id);
				    var mediaFile_modelId = view.modelId;
				    _.each(DigiWebApp.MediaListController.items, function(MediaListItem) {
						if (MediaListItem.m_id === mediaFile_modelId) {
							//if (MediaListItem.get("datum") !== "-") {
								DigiWebApp.EditPicturePageController.set('myMediaFile', MediaListItem);
								doShow = YES;
							//}
						}
					});
					if (doShow === YES) {
						DigiWebApp.NavigationController.toEditPicturePageTransition();
					} else {
						DigiWebApp.ApplicationController.DigiLoaderView.hide();
					}
			}
        }
    }

    , icon: M.ImageView.design({
          cssClass: 'icon'
        , computedValue: {
              valuePattern: '<%= icon %>'
            , operation: function(v) {
			        if (v) {
			        	return 'theme/images/' + v;
			        } else {
			        	return '';
			        }
            }
        }
    })

	, timeStamp: M.LabelView.design({
          cssClass: 'date'
        , computedValue: {
              valuePattern: '<%= timeStamp %>'
            //, value: '01.01.2011, 08:01:02
            , operation: function(v) {
                var date1 = M.Date.create(Number(v));
                return date1.format('dd.mm.yyyy') + ', ' + date1.format('HH:MM:ss');

            }
        }
    })

    , order: M.LabelView.design({
          cssClass: 'application'
        , computedValue: {
              valuePattern: '<%= orderId %>'
            , operation: function(v) {
                var order = _.select(DigiWebApp.Order.findSorted().concat(DigiWebApp.HandOrder.findSorted()), function(o) {
                	if (o) return v == o.get('id') || v == o.get('name'); // || get('name') is for checking handOrders also
                });
                if(order && order.length > 0) {
                    order = order[0];
                    if (DigiWebApp.SettingsController.globalDebugMode) {
                    	return M.I18N.l('order') + ': ' + order.get('name') + ' (' + order.get('id') + ')';
                    } else {
                    	return M.I18N.l('order') + ': ' + order.get('name');
                    }
                } else {
                    return M.I18N.l('order') + ': ' + M.I18N.l('notDefined');
                }
            }
        }
    })

    , position: M.LabelView.design({
          cssClass: 'position'
        , computedValue: {
              valuePattern: '<%= positionId %>'
            , operation: function(v) {
                if(v) {
                    var position = _.select(DigiWebApp.Position.findSorted(), function(p) {
                    	if (p) return v == p.get('id');
                    });
                    if(position && position.length > 0) {
                        position = position[0];
                        return M.I18N.l('position') + ': ' + position.get('name');
                    } else {
                        return M.I18N.l('position') + ': ' + M.I18N.l('notDefined');
                    }
                } else {
                    return M.I18N.l('position') + ': ' + M.I18N.l('unknown');
                }

            }
        }
    })

    , activity: M.LabelView.design({
          cssClass: 'activity'
        , computedValue: {
              valuePattern: '<%= activityId %>'
            , operation: function(v) {
                if(v) {
                	var activity = null;
                	if (parseInt(v) !== 0) {
                        activity = _.select(DigiWebApp.Activity.findSorted(), function(a) {
                        	if (a) return v == a.get('id');
                        });
                	}
                    if(activity && activity.length > 0) {
                        activity = activity[0];
                        return M.I18N.l('activity') + ': ' + activity.get('name');
                    } else {
                        return M.I18N.l('activity') + ': ' + M.I18N.l('notDefined');
                    }

                } else {
                    return M.I18N.l('activity') + ': ' + M.I18N.l('unknown');
                }
            }
        }
    })
    
    , latitude: M.LabelView.design({
          cssClass: 'location'
        , computedValue: {
              valuePattern: '<%= latitude %>'
            , operation: function(v) {
                if(v > 0) {
                	var str = v;
               		return M.I18N.l('latitude') + ': ' + str.toFixed(6);
                } else {
                    //return M.I18N.l('latitude') + ': ' + M.I18N.l('GPSnotactive');
                	return '';
                }
            }
        }
    })

    , longitude: M.LabelView.design({
          cssClass: 'location'
        , computedValue: {
              valuePattern: '<%= longitude %>'
            , operation: function(v) {
                if (v > 0) { 
                	var str = v;
               		return M.I18N.l('longitude') + ': ' + str.toFixed(6);
                } else {
                    //return M.I18N.l('longitude') + ': ' + M.I18N.l('GPSnotactive');
                    return '';
                }
            }
        }
    })
    
    , remark: M.LabelView.design({
          cssClass: 'remark unselectable'
        , computedValue: {
              valuePattern: '<%= remark %>'
            , operation: function(v) {
                if (v) { 
               		return M.I18N.l('remark') + ': ' + v;
                } else {
                    return '';
                }
            }
        }
    })

});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: MediaListPage
// ==========================================================================

m_require('app/views/MediaListTemplateView.js');
m_require('app/views/MediaActionTemplateView.js');

DigiWebApp.MediaListPage = M.PageView.design({

    /* Use the 'events' property to bind events like 'pageshow' */
      events: {
		pagebeforeshow: {
              target: DigiWebApp.MediaListController
            , action: 'init'
        }
    }

    , needsUpdate: true

    , childViews: 'header actions mediafiles'

    , cssClass: 'mediaListPage unselectable'

    , header: M.ToolbarView.design({
          childViews: 'backButton title newButton'
        , cssClass: 'header'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.backToDashboardPage();}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('mediaList')
            , anchorLocation: M.CENTER
        })
        , newButton: M.ButtonView.design({
              value: M.I18N.l('BautagebuchAdd')
            , icon: 'new'
            , anchorLocation: M.RIGHT
            , cssClass: 'green_background'
            , events: {
                tap: {
        			action: function() {
						DigiWebApp.MediaListController.neu();
					}
                }
            }
        })
        , anchorLocation: M.TOP
    })

    , mediafiles: M.ScrollView.design({

          childViews: 'mediafileslist'

        , cssClass: 'mediafilesList'
        	
        , mediafileslist: M.ListView.design({
              contentBinding: {
                  target: DigiWebApp.MediaListController
                , property: 'items'
              }
            , listItemTemplateView: DigiWebApp.MediaListTemplateView
        })
    })
    
    , actions: M.ScrollView.design({

          childViews: 'actionslist'
        	  
        , cssClass: 'actionsList'

        , actionslist: M.ListView.design({
              contentBinding: {
                  target: DigiWebApp.MediaListController
                , property: 'actions'
              }
            , listItemTemplateView: DigiWebApp.MediaActionTemplateView
        })
    })
    
});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: OrderInfoTemplateView
// ==========================================================================

DigiWebApp.OrderInfoTemplateView = M.ListItemView.design({

      isSelectable: NO
    
    , hasSingleAction: NO

    //, childViews: 'container'
    	
    //, container: M.ContainerView.design({
    	
	    , childViews: 'orderName positionName spacer1 positionStrasseUndHausnummer positionPLZundORT positionLand positionTelefon positionFax positionEmail spacerNachEmail positionAnsprechpartner positionKundenname spacer3 positionBeschreibung spacer4 positionLongitude positionLatitude spacer5 arbeitsbeginn arbeitsende spacer6 showCoordinatesInMapButton saveAsContactButton showAddressInMapButton'

	    , orderName: M.LabelView.design({
	          cssClass: 'orderName'
	        , computedValue: {
	              valuePattern: '<%= orderName %>'
	            , operation: function(v) {
	    			return v;
	              }
	          }
	    })
	
	    , positionName: M.LabelView.design({
	          cssClass: 'positionName'
	        , computedValue: {
	              valuePattern: '<%= positionName %>'
	            , operation: function(v) {
					if (v === '' || v === null) {
						return M.I18N.l('position') + ": " + M.I18N.l('noData');
					} else {
						return M.I18N.l('position') + ": " + v;
					}
				  }
	          }
	    })
	    
	    , positionStrasseUndHausnummer: M.LabelView.design({
	          cssClass: 'positionName'
	        , computedValue: {
	        	  valuePattern: '<%= positionStrasseUndHausnummer %>'
	        	, operation: function(v) {
	    			return v;
	        	  }
	    	  }
	    })
	    
	    , positionPLZundORT: M.LabelView.design({
	          cssClass: 'positionName' 
	        , computedValue: {
	        	  valuePattern: '<%= positionPLZundOrt %>'
	        	, operation: function(v) {
	    			return v;
	        	  }
	    	  }
	    })
	    
	    , positionLand: M.LabelView.design({
	          cssClass: 'positionName' 
	        , computedValue: {
	        	  valuePattern: '<%= positionLand %>'
	        	, operation: function(v) {
					return v;
	        	  }
	    	  }
	    })
	    
	    , positionTelefon: M.LabelView.design({
	          cssClass: 'positionName' 
	        , computedValue: {
	        	  valuePattern: '<%= positionTelefon %>'
	        	, operation: function(v) {
	    			if (v === '' || v === null || v === "undefined" || typeof(v) === "undefined") {
	    				return '';
	    			} else {
	    				return M.I18N.l('phone') + ": " + v;
	    			}
	        	  }
	    	  }
	    })
	    
	    , positionFax: M.LabelView.design({
	          cssClass: 'positionName' 
	        , computedValue: {
	        	  valuePattern: '<%= positionFax %>'
	        	, operation: function(v) {
					if (v === '' || v === null || v === "undefined" || typeof(v) === "undefined") {
						return '';
					} else {
						return M.I18N.l('fax') + ": " + v;
					}
				  } 
	    	  }
	    })
	    
        , positionEmail: M.LabelView.design({
	          cssClass: 'positionName' 
	        , computedValue: {
	        	  valuePattern: '<%= positionEmail %>'
	        	, operation: function(v) {
						if (v === '' || v === null || v === "undefined" || typeof(v) === "undefined") {
							return '';
						} else {
							return M.I18N.l('email') + ": " + v;
						}
				  } 
	    	  }
	    })

    	, spacerNachEmail: M.LabelView.design({
    		  value: ' '
  	        , cssClass: 'marginBottom12' 
    	})

	    
	    , positionAnsprechpartner: M.LabelView.design({
	          cssClass: 'positionName' 
	        , computedValue: {
	        	  valuePattern: '<%= positionAnsprechpartner %>'
	        	, operation: function(v) {
					if (v === '' || v === null || v === "undefined" || typeof(v) === "undefined") {
						return '';
					} else {
						return M.I18N.l('ansprechpartner') + ": " + v;
					}
	        	  }
	    	  }
	    })
	    
	    , positionKundenname: M.LabelView.design({
	          cssClass: 'positionName' 
	        , computedValue: {
	        	  valuePattern: '<%= positionKundenname %>'
	        	, operation: function(v) {
					if (v === '' || v === null || v === "undefined" || typeof(v) === "undefined") {
						return '';
					} else {
						return M.I18N.l('kundenname') + ": " + v;
					}
	        	  }
	    	  }
	    })
	    
	    , positionLongitude: M.LabelView.design({
	          cssClass: 'positionName' 
	        , computedValue: {
	    		  valuePattern: '<%= positionLongitude %>'
	        	, operation: function(v) {
    				if (v === '0.0' || v === 0 || v === null || v === "undefined" || typeof(v) === "undefined") {
    					return '';
    				} else {
    					return M.I18N.l('longitude') + ": " + v;
    				}
	        	  }
	    	  }
	    })
	    
	    , positionLatitude: M.LabelView.design({
	          cssClass: 'positionName' 
	        , computedValue: {
		          valuePattern: '<%= positionLatitude %>'
	        	, operation: function(v) {
					if (v === '0.0' || v === 0 || v === null || v === "undefined" || typeof(v) === "undefined") {
						return '';
					} else {
						return M.I18N.l('latitude') + ": " + v;
					}
	        	  }
	    	  }
	    })
	    
	    , positionBeschreibung: M.LabelView.design({
	          cssClass: 'positionName' 
	        , computedValue: {
	        	  valuePattern: '<%= positionBeschreibung %>'
	        	, operation: function(v) {
						if (v === '' || v === null || v === "undefined" || typeof(v) === "undefined") {
							return '';
						} else {
							return M.I18N.l('positionDescription') + ":<br />" + v;
						}
	        	  }
	    	  }
	    })
	    
	    , arbeitsbeginn: M.LabelView.design({
	          cssClass: 'positionName' 
	        , computedValue: {
	        	  valuePattern: '<%= arbeitsbeginn %>'
	        	, operation: function(v) {
						if (v === '' || v === null || v === "undefined" || typeof(v) === "undefined") {
							return '';
						} else {
							return M.I18N.l('arbeitsbeginn') + ": " + v;
						}
	        	  }
	    	  }
	    })

	    , arbeitsende: M.LabelView.design({
	          cssClass: 'positionName' 
	        , computedValue: {
	        	  valuePattern: '<%= arbeitsende %>'
	        	, operation: function(v) {
						if (v === '' || v === null || v === "undefined" || typeof(v) === "undefined") {
							return '';
						} else {
							return M.I18N.l('arbeitsende') + ": " + v;
						}
	        	  }
	    	  }
	    })

	    , spacer1: M.LabelView.design({
	          value: ' '
	        , cssClass: 'marginBottom12'
	    })
	
	    , spacer2: M.LabelView.design({
	          value: ' '
	        , cssClass: 'marginBottom12'
	    })
	
	    , spacer3: M.LabelView.design({
	          value: ' '
	        , cssClass: 'marginBottom12'
	    })
	
	    , spacer4: M.LabelView.design({
	          value: ' '
	        , cssClass: 'marginBottom12'
	    })
	
	    , spacer5: M.LabelView.design({
	          value: ' '
	        , cssClass: 'marginBottom12'
	    })
		
	    , spacer6: M.LabelView.design({
	          value: ' '
	        , cssClass: 'marginBottom12'
	    })
		
	    , saveAsContactButton: M.ButtonView.design({
	          value: M.I18N.l('saveAsContact')
	        //, cssClass: 'digiButton'
	        //, anchorLocation: M.CENTER
	        , events: {
	            tap: {
	                target: DigiWebApp.OrderInfoController,
	                action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.saveAsContact();}
	            }
	          }
	    })
	
	    , showAddressInMapButton: M.ButtonView.design({
	          value: M.I18N.l('showAddressInMap')
	        //, cssClass: 'digiButton'
	        //, anchorLocation: M.CENTER
	        , events: {
	            tap: {
	                action: function(buttonid, ev) {
	    				try{DigiWebApp.ApplicationController.vibrate();}catch(e4){}
	    				if (DigiWebApp.OrderInfoController.items.length === 0) {
	    					DigiWebApp.OrderInfoController.set('items', DigiWebApp.OrderDetailsController.positionForDetails);
	    				}
	    				try { ev.preventDefault(); } catch(e3) { console.error(e3); }
						var country = DigiWebApp.OrderInfoController.items[0].positionCountryCode;
						var zip = DigiWebApp.OrderInfoController.items[0].positionPLZ;
						var city = DigiWebApp.OrderInfoController.items[0].positionOrt;
						var street = DigiWebApp.OrderInfoController.items[0].positionStrasse;
						var housenumber = DigiWebApp.OrderInfoController.items[0].positionHausnummer;
						var addressdetails = '0';
						var url_byAddress = '';
						switch ( DigiWebApp.SettingsController.getSetting('mapType') ) {
						case "OSM":
							if (DigiWebApp.SettingsController.featureAvailable('419')) {
								alert(M.I18N.l('showInMapScholpp'));
							} else {
								alert(M.I18N.l('showInMapOSMAlert'));
							}
							url_byAddress = "http://nominatim.openstreetmap.org/search/" + country + "/" + city + "/" + street + "/" + housenumber + "?format=html&polygon=1&addressdetails=" + addressdetails;
							break;
						case "Bing":
							if (DigiWebApp.SettingsController.featureAvailable('419')) {
								alert(M.I18N.l('showInMapScholpp'));
							} else {
								alert(M.I18N.l('showInMapBingAlert'));
							}
							url_byAddress = "http://www.bing.com/maps/default.aspx?rtp=~adr." + street + " " + housenumber + " " + zip + " " + city + " " + country;
							break;
						case "Google":
							if (DigiWebApp.SettingsController.featureAvailable('419')) {
								alert(M.I18N.l('showInMapScholpp'));
							} else {
								alert(M.I18N.l('showInMapGoogleAlert'));
							}
							url_byAddress = "http://maps.google.com/maps?q=" + street + " " + housenumber + " " + zip + " " + city + " " + country + "&hl=de";
							break;
						default:
							url_byAddress = "disabled";
							break;
						}
						if (url_byAddress !== "disabled") {
							if (typeof(plugins) !== "undefined") {
			    				if (typeof(plugins.childBrowser) !== "undefined") {
			    					try { plugins.childBrowser.close(); } catch(e5) { alert("Error: " + e5.message); }
			    					try { 
			    						plugins.childBrowser.showWebPage(encodeURI(url_byAddress), { showNavigationBar: true });
			    					} catch(e6) { alert("Error: " + e6.message); }
			    				} else {
			    					DigiWebApp.ApplicationController.inAppBrowser_var = window.open(url_byAddress,'childBrowser','width=800,height=600,menubar=no,status=no,location=yes,copyhistory=no,directories=no');
			    				}
		    				} else {
		    					DigiWebApp.ApplicationController.inAppBrowser_var = window.open(url_byAddress,'childBrowser','width=800,height=600,menubar=no,status=no,location=yes,copyhistory=no,directories=no');
		    				}
						} else {
							// TODO: Error-Message for disabled Map-Services
						}
						return false;
	    			}
	            }
	        }
	    })
	
	    , showCoordinatesInMapButton: M.ButtonView.design({
	          value: M.I18N.l('showCoordinatesInMap')
	        //, cssClass: 'digiButton'
	        //, anchorLocation: M.CENTER
	        , events: {
	            tap: {
	                action: function() {
	    				try{DigiWebApp.ApplicationController.vibrate();}catch(e7){}
						if (DigiWebApp.OrderInfoController.items.length === 0) {
							DigiWebApp.OrderInfoController.set('items', DigiWebApp.OrderDetailsController.positionForDetails);
						}
						var longitude = DigiWebApp.OrderInfoController.items[0].positionLongitude;
						var latitude = DigiWebApp.OrderInfoController.items[0].positionLatitude;
						var zoom = '15';
						var url_byCoordinates = "";
						switch ( DigiWebApp.SettingsController.getSetting('mapType') ) {
							case "OSM":
								if (DigiWebApp.SettingsController.featureAvailable('419')) {
									alert(M.I18N.l('showInMapScholpp'));
								} else {
									alert(M.I18N.l('showInMapOSMAlert'));
								}
								url_byCoordinates = "http://www.openstreetmap.org/index.html?mlat=" + latitude + "&mlon=" + longitude + "&zoom=" + zoom + "&layers=M";
								break;
							case "Bing":
								if (DigiWebApp.SettingsController.featureAvailable('419')) {
									alert(M.I18N.l('showInMapScholpp'));
								} else {
									alert(M.I18N.l('showInMapBingAlert'));
								}
								url_byCoordinates = "http://www.bing.com/maps/default.aspx?rtp=adr.~pos." + latitude + "_" + longitude + "_&lvl=" + (zoom + 1);
								break;
							case "Google":
								if (DigiWebApp.SettingsController.featureAvailable('419')) {
									alert(M.I18N.l('showInMapScholpp'));
								} else {
									alert(M.I18N.l('showInMapGoogleAlert'));
								}
								url_byCoordinates = "http://maps.google.com/maps?q=" + latitude + "+" + longitude + "&hl=de";
								break;
							default:
								url_byCoordinates = "disabled";
								break;
						}
						if (url_byCoordinates !== "disabled") {
		    				if (typeof(plugins) !== "undefined") {
			    				if (typeof(plugins.childBrowser) !== "undefined") {
			    					try { plugins.childBrowser.close(); } catch(e8) { alert("Error: " + e8.message); }
			    					try { 
				    					plugins.childBrowser.showWebPage(encodeURI(url_byCoordinates), { showNavigationBar: true });
			    					} catch(e9) { alert("Error: " + e9.message); }
			    				} else {
			    					DigiWebApp.ApplicationController.inAppBrowser_var = window.open(url_byCoordinates,'childBrowser','width=800,height=600,menubar=no,status=no,location=yes,copyhistory=no,directories=no');
			    				}
		    				} else {
		    					DigiWebApp.ApplicationController.inAppBrowser_var = window.open(url_byCoordinates,'childBrowser','width=800,height=600,menubar=no,status=no,location=yes,copyhistory=no,directories=no');
		    				}
						} else {
							// TODO: Error-Message for disabled Map-Services
						}
	    			}
	            }
	        }
	    })

    //})
});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: OrderInfoPage
// ==========================================================================

m_require('app/views/OrderInfoTemplateView');

DigiWebApp.OrderDetailsPage = M.PageView.design({

    /* Use the 'events' property to bind events like 'pageshow' */
    events: {
		pageshow: {
            target: DigiWebApp.OrderDetailsController,
            action: 'init'
        }
    }

    , childViews: 'header spacer list'

    , cssClass: 'orderInfoPage'

    , header: M.ToolbarView.design({
        childViews: 'backButton title'
        , cssClass: 'header'
        , isFixed: YES
        , backButton: M.ButtonView.design({
            value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                    target: DigiWebApp.NavigationController,
                    action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.backToZeitbuchungDetailsPageTransition();}
                }
            }
        })
        , title: M.LabelView.design({
            value: M.I18N.l('orderInfo')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

	, spacer: M.LabelView.design({
	      value: ' '
        , cssClass: 'marginBottom12' 
	})

    , list: M.ListView.design({
          contentBinding: {
              target: DigiWebApp.OrderDetailsController
            , property: 'positionForDetails'
        }
        , listItemTemplateView: DigiWebApp.OrderInfoTemplateView
    })
    
});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: OrderInfoPage
// ==========================================================================

m_require('app/views/OrderInfoTemplateView');

DigiWebApp.OrderInfoPage = M.PageView.design({

    /* Use the 'events' property to bind events like 'pageshow' */
    events: {
		pagebeforeshow: {
            target: DigiWebApp.OrderInfoController,
            action: 'init'
        }
    }

    , childViews: 'header selectionContent list'

    , cssClass: 'orderInfoPage'

    , header: M.ToolbarView.design({
        childViews: 'backButton title'
        , cssClass: 'header'
        , isFixed: YES
        , backButton: M.ButtonView.design({
            value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                    target: DigiWebApp.NavigationController,
                    action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} 
                    	//this.backToDashboardPage();
        				history.back();
                    }
                }
            }
        })
        , title: M.LabelView.design({
            value: M.I18N.l('orderInfo')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , selectionContent: M.ScrollView.design({
        childViews: 'order position'
	    , order: M.SelectionListView.design({
	        selectionMode: M.SINGLE_SELECTION_DIALOG
	        , initialText: M.I18N.l('noData')
	        , label: M.I18N.l('order')
	        //, cssClass: 'marginBottom25'
	        , applyTheme: NO
	        , contentBinding: {
	            target: DigiWebApp.OrderInfoController,
	            property: 'orders'
	        }
	        , events: {
	            change: {
	                target: DigiWebApp.OrderInfoController,
	                action: function() {
		                var orderId = M.ViewManager.getView('orderInfoPage', 'order').getSelection(YES).value;
		                if (orderId) {
			                var orders = DigiWebApp.HandOrder.findSorted().concat(DigiWebApp.Order.findSorted()); // we need to check handOrders also
			                _.each(orders, function(order) {
		                    	if (order.get('id') == orderId) {
		                    		DigiWebApp.OrderInfoController.set('activeOrder', [order]);
		                    		if (DigiWebApp.SettingsController.getSetting("auftragsDetailsKoppeln")) {
		                    			var s = DigiWebApp.SelectionController.selections;
		                    			s.order = M.ViewManager.getView('orderInfoPage', 'order').getSelection();
		                    			DigiWebApp.SelectionController.set('selections', s);
		                    			M.ViewManager.getView('bookingPage', 'order').setSelection(M.ViewManager.getView('orderInfoPage', 'order').getSelection());
		                    			DigiWebApp.SelectionController.setPositions();
		                    		}
		                    	}
			                });
			                DigiWebApp.OrderInfoController.setPositions();
		                }
		                DigiWebApp.OrderInfoController.setItem();
	                }
	            }
//		        , tap: {
//					action: function() {
//	            		try{DigiWebApp.ApplicationController.vibrate();}catch(e3){}
//	  				}
//	            }
	        }
	    })
	    
	    , position: M.SelectionListView.design({
	        selectionMode: M.SINGLE_SELECTION_DIALOG
	        , initialText: M.I18N.l('noData')
	        , label: M.I18N.l('position')
	        //, cssClass: 'marginBottom25'
	        , applyTheme: NO
	        , contentBinding: {
	            target: DigiWebApp.OrderInfoController,
	            property: 'positions'
	        }
	        , events: {
	            change: {
	                target: DigiWebApp.OrderInfoController,
	                action: function() {
		                var positionId = M.ViewManager.getView('orderInfoPage', 'position').getSelection(YES).value;
		                if (positionId) {
			                var positions = DigiWebApp.Position.findSorted();
			                _.each(positions, function(position) {
		                    	if (position.get('id') == positionId) {
		                    		DigiWebApp.OrderInfoController.set('activePosition', [position]);
		                    		if (DigiWebApp.SettingsController.getSetting("auftragsDetailsKoppeln")) {
		                    			var s = DigiWebApp.SelectionController.selections;
		                    			s.position = M.ViewManager.getView('orderInfoPage', 'position').getSelection();
		                    			DigiWebApp.SelectionController.set('selections', s);
		                    			M.ViewManager.getView('bookingPage', 'position').setSelection(M.ViewManager.getView('orderInfoPage', 'position').getSelection());
		                    			DigiWebApp.SelectionController.setActivities(YES);
		                    		}
		                    	}
			                });
		                }
                		DigiWebApp.OrderInfoController.setItem();
	                }
	            }
//		        , tap: {
//					action: function() {
//	            		try{DigiWebApp.ApplicationController.vibrate();}catch(e4){}
//	  				}
//	            }
	        }
	    })
    })

    , list: M.ListView.design({
          contentBinding: {
              target: DigiWebApp.OrderInfoController
            , property: 'items'
        }
        , listItemTemplateView: DigiWebApp.OrderInfoTemplateView
    })
    
});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: SettingsPasswordPage
// ==========================================================================

DigiWebApp.SettingsPasswordPage = M.PageView.design({

    /* Use the 'events' property to bind events like 'pageshow' */
      events: {
		pagebeforeshow: {
            //target: DigiWebApp.MyController,
            //action: 'init'
			action: function() {
				$('#' + DigiWebApp.SettingsPasswordPage.content.passwordGrid.passwordInput.id).val('');
			}
        }
    }

    , childViews: 'header content'

    , cssClass: 'settingsPasswordPage'

    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                    //  target: DigiWebApp.NavigationController
                    //, action: 'backToDashboardPagePOP'
        			action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
						if (DigiWebApp.SettingsController.featureAvailable('404')) {
			        		DigiWebApp.NavigationController.backToButtonDashboardPagePOP();
						} else {
			        		DigiWebApp.NavigationController.backToDashboardPagePOP();
						}
        			}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('password')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
          childViews: 'passwordGrid grid'
        , passwordGrid: M.GridView.design({
              childViews: 'passwordLabel passwordInput'
            , layout: M.TWO_COLUMNS
            , passwordLabel: M.LabelView.design({
                value: M.I18N.l('password')
            })
            , passwordInput: M.TextFieldView.design({
                inputType: M.INPUT_PASSWORD
            })
        })
        , grid: M.GridView.design({
              childViews: 'button icon'
            , layout: {
                  cssClass: 'digiButton'
                , columns: {
                      0: 'button'
                    , 1: 'icon'
                }
            }
            , button: M.ButtonView.design({
                  value: M.I18N.l('assume')
                , cssClass: 'digiButton'
                , anchorLocation: M.RIGHT
                , events: {
                    tap: {
                        //target: DigiWebApp.NavigationController,
                        //action: 'toSettingsPage'
            			action: function() {
//            				if (DigiWebApp.SettingsController.globalDebugMode) {
//            					console.log("\"" + $('#' + DigiWebApp.SettingsPasswordPage.content.passwordGrid.passwordInput.id).val() + "\"");
//            					console.log("\"" + DigiWebApp.SettingsController.getSetting('settingsPassword') + "\"");
//            				}
            				try{DigiWebApp.ApplicationController.vibrate();}catch(e3){}
            				if ($('#' + DigiWebApp.SettingsPasswordPage.content.passwordGrid.passwordInput.id).val() === DigiWebApp.SettingsController.getSetting('settingsPassword')) {
            					DigiWebApp.NavigationController.toSettingsPage();
            				} else {
            		        	DigiWebApp.ApplicationController.nativeAlertDialogView({
            		                  title: M.I18N.l('wrongPasswordTitle')
            		                , message: M.I18N.l('wrongPasswordMsg')
            		            });            					
            				}
            			}
                    }
                }
            })
            , icon: M.ImageView.design({
                value: 'theme/images/icon_bookTime.png'
            })
        })
    })
});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: SpesenPage
// ==========================================================================

DigiWebApp.SpesenPage = M.PageView.design({

    /* Use the 'events' property to bind events like 'pageshow' */
      events: {
		pagebeforeshow: {
            //target: DigiWebApp.BookingController
            //, action: 'init'
			action: function() {
	
				var i;
				if (DigiWebApp.SpesenAuswahlOption.find().length === 0) {
					i = 1;
					DigiWebApp.SpesenAuswahlOption.createRecord({id: i, beschreibung: "keine Spesen"}).saveSorted(); i = i + 1;						// 1
					DigiWebApp.SpesenAuswahlOption.createRecord({id: i, beschreibung: "Tagesspesen"}).saveSorted(); i = i + 1;						// 2
					DigiWebApp.SpesenAuswahlOption.createRecord({id: i, beschreibung: "mehrtägige Spesen"}).saveSorted(); i = i + 1;				// 3
				}

				if (DigiWebApp.UebernachtungAuswahlOption.find().length === 0) {
					i = 1;
					DigiWebApp.UebernachtungAuswahlOption.createRecord({id: i, beschreibung: "keine Übernachtung"}).saveSorted(); i = i + 1;		// 1
					DigiWebApp.UebernachtungAuswahlOption.createRecord({id: i, beschreibung: "Übernachtung mit Pauschale"}).saveSorted(); i = i + 1;// 2
					DigiWebApp.UebernachtungAuswahlOption.createRecord({id: i, beschreibung: "Übernachtung mit Beleg"}).saveSorted(); i = i + 1;	// 3
				}
				
		        var spesenOptionen = DigiWebApp.SpesenAuswahlOption.findSorted();
		        spesenOptionen = _.map(spesenOptionen, function(opt) {
		        	if (opt) {
		                var obj = { label: opt.get('beschreibung'), value: opt.get('id') };
		                if(opt.get('id') == 1) {
		                    obj.isSelected = YES;
		                }
		                return obj;
		        	}
		        });
		        spesenOptionen = _.compact(spesenOptionen);/* remove falsy values from positions with _.compact() */
		        DigiWebApp.BookingController.set("spesenOptionen", spesenOptionen);


		        var uebernachtungOptionen = DigiWebApp.UebernachtungAuswahlOption.findSorted();
		        uebernachtungOptionen = _.map(uebernachtungOptionen, function(opt) {
		        	if (opt) {
		                var obj = { label: opt.get('beschreibung'), value: opt.get('id') };
		                if(opt.get('id') == 1) {
		                    obj.isSelected = YES;
		                }
		                return obj;
		        	}
		        });
		        uebernachtungOptionen = _.compact(uebernachtungOptionen);/* remove falsy values from positions with _.compact() */
		        DigiWebApp.BookingController.set("uebernachtungOptionen", uebernachtungOptionen);

			}
        }
    }

    , myCallback: function() {

    }
        
    , tab_action_timeoutvar: null    
    
    , tab_action: function() {
    	clearTimeout(DigiWebApp.SpesenPage.tab_action_timeoutvar);
    		            	
		// save to currentBooking
		DigiWebApp.BookingController.currentBooking.set('spesenAuswahl', M.ViewManager.getView('spesenPage', 'spesenAuswahl').getSelection(YES).value);
		DigiWebApp.BookingController.currentBooking.set('uebernachtungAuswahl', M.ViewManager.getView('spesenPage', 'uebernachtungAuswahl').getSelection(YES).value);
		DigiWebApp.BookingController.currentBooking.save();

		DigiWebApp.SpesenPage.myCallback();
    }
    
    , childViews: 'header content'

    , cssClass: 'remarkPage'

    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.backToBookTimePagePOP();}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('Spesen_Ausloese')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
          childViews: 'spesenAuswahl uebernachtungAuswahl spacer grid'

        , spacer: M.LabelView.design({
            value: '&nbsp;<br />'
        })
        
        , spesenAuswahl: M.SelectionListView.design({
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('noData')
                , label: M.I18N.l('Spesen')
                //, cssClass: 'unselectable'
                , applyTheme: NO
                , contentBinding: {
                      target: DigiWebApp.BookingController
                    , property: 'spesenOptionen'
                }
                , events: {
                    change: {
                          target: DigiWebApp.BookingController
                        , action: function() {
                            //this.setPositions();
                        }
                    }
                }
        })
            
        , uebernachtungAuswahl: M.SelectionListView.design({
              selectionMode: M.SINGLE_SELECTION_DIALOG
            , label: M.I18N.l('Uebernachtung')
            , initialText: M.I18N.l('noData')
            //, cssClass: 'unselectable'
            , applyTheme: NO
            , contentBinding: {
                  target: DigiWebApp.BookingController
                , property: 'uebernachtungOptionen'
            }
            , events: {
                change: {
                      target: DigiWebApp.BookingController
                    , action: function() {
                        //this.setActivities(YES);
                    }
                }
            }
        })
        	  
        , grid: M.GridView.design({
        	
              childViews: 'button icon'
            , layout: {
                  cssClass: 'digiButton'
                , columns: {
                      0: 'button'
                    , 1: 'icon'
                }
            }
            
            , button: M.ButtonView.design({
                  value: M.I18N.l('SpeichernUndBuchen')
                , cssClass: 'digiButton'
                , anchorLocation: M.RIGHT
                , events: {
                    tap: {
                        //  target: DigiWebApp.NavigationController
                        //, action: 'toSettingsPage'
            			action: function() {
        					DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('Save'));
        					DigiWebApp.SpesenPage.tab_action_timeoutvar = setTimeout("DigiWebApp.SpesenPage.tab_action();", 50);
            			}
                    }
                }
            })
            
            , icon: M.ImageView.design({
                value: 'theme/images/icon_bookTime.png'
            })
            
        })
    })
});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: SplashViewPage
// ==========================================================================

DigiWebApp.SplashViewPage = M.PageView.design({

    /* Use the 'events' property to bind events like 'pageshow' */
      events: {
		  pagebeforeshow: {
            /*  target: DigiWebApp.ApplicationController,
            , action: 'regSecEv'*/
            action: function() {
				if (!(window.newAppVersionAvailable || DigiWebApp.ApplicationController.useSplashJustForFade)) {
					if (navigator.platform === "BlackBerry" && restartOnBlackBerry) {
						DigiWebApp.ApplicationController.blackBerryRestart_var = setTimeout("DigiWebApp.ApplicationController.blackBerryRestart()", 3000);
					} else {
						DigiWebApp.ApplicationController.regSecEv(YES);	
					}
				}
			}
        }
		, pageshow: {
            /*  target: DigiWebApp.ApplicationController,
            , action: 'regSecEv'*/
            action: function() {
				if (!(window.newAppVersionAvailable || DigiWebApp.ApplicationController.useSplashJustForFade)) {
						DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('waitingForDevice'));
				}
			}
        }

    }

    , childViews: 'content'

    , cssClass: 'splashViewPage'

    , logo: M.ImageView.design({
          value:'theme/images/logo.png'
        , cssClass: 'logoSplashPage'
    })

    , content: M.ScrollView.design({

          cssClass: 'infoBox'

        , childViews: 'title info'

        , title: M.LabelView.design({
            //  value: 'DIGI-WebApp'
              value: ''
            , cssClass: 'appTitle'
        })

        , info: M.LabelView.design({
              value: ''
            , cssClass: 'infoMsg'
            , contentBinding: {
                  target: DigiWebApp.ApplicationController
                , property: 'infoMsg'
            }
        })

    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: StudieChecklisteTemplateView
// ==========================================================================

DigiWebApp.StudieChecklisteTemplateView = M.DigiListItemView.design({

      isSelectable: NO

    , childViews: 'comboBoxView'

    , events: {
        tap: {
			action: function(id, m_id) {

			}
        }
    }

	, label: M.LabelView.design({
          cssClass: 'unselectable'
        , computedValue: {
              valuePattern: '<%= label %>'
            //  value: '01.01.2011, 08:00 - 08:20 Uhr, 0:20 h'
            , operation: function(v) {
				return v;
            }
        }
    })

	, comboBox: M.LabelView.design({
          cssClass: 'unselectable'
        , computedValue: {
              valuePattern: '<%= comboBox %>'
            //  value: [{label: "eintrag 1", value: 1},{label: "eintrag 2", value: 2}]
            , operation: function(v) {
				if (v && typeof(v) === "object" && v.length > 0) {
					// comboBoxView befüllen und anzeigen
					DigiWebApp.StudieChecklisteController.set("t1", $(this));
					DigiWebApp.StudieChecklisteController.set("t2", this);
				} else {
					// comboBoxView verstecken
					console.log(this);
				}
				return '';
            }
        }
    })

    , comboBoxView: M.DigiSelectionListView.design({
              selectionMode: M.SINGLE_SELECTION_DIALOG
            , initialText: M.I18N.l('noData')
            , applyTheme: NO
            , computedValue: {
		        valuePattern: '<%= comboBox %>'
		      //  value: [{label: "eintrag 1", value: 1},{label: "eintrag 2", value: 2}]
		      , operation: function(v) {
//					if (v && typeof(v) === "object" && v.length > 0) {
//						// comboBoxView befüllen und anzeigen
//						DigiWebApp.StudieChecklisteController.set("t1", $(this));
//						DigiWebApp.StudieChecklisteController.set("t2", this);
//					} else {
//						// comboBoxView verstecken
//						console.log(this);
//					}
    				console.log(v);
					return v;
		      }
		  }

//            , contentBinding: {
//			        target: DigiWebApp.StudieChecklisteController
//			      , property: 'listData'
//			  }
//			  , events: {
//			      change: {
//			            target: DigiWebApp.StudieChecklisteController
//			          , action: function() {
//			              //this.setPositions();
//			          }
//			      }
//			      , tap: {
//						action: function() {
//			      		try{DigiWebApp.ApplicationController.vibrate();}catch(e){}
//						}
//			      }
//			  }
    })

});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: StudieChecklistePage
// ==========================================================================

m_require('app/views/StudieChecklisteTemplateView');

DigiWebApp.StudieChecklistePage = M.PageView.design({

    /* Use the 'events' property to bind events like 'pageshow' */
      events: {
		pagebeforeshow: {
            target: DigiWebApp.StudieChecklisteController,
            action: 'init'
        }
    }

    , childViews: 'header content'

    , cssClass: 'studieChecklistePage'

    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                      , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.backToDashboardPage();}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('settings')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
          childViews: 'list'
        
              , list: M.DigiListView.design({
                  contentBinding: {
                      target: DigiWebApp.StudieChecklisteController
                    , property: 'listData'
                }
                , listItemTemplateView: DigiWebApp.StudieChecklisteTemplateView
            })
    })
    
});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: TabBar
// ==========================================================================

DigiWebApp.TabBar = M.TabBarView.design({

      childViews: 'tabItem1 tabItem2'

    , anchorLocation: M.BOTTOM

    , isFixed: YES // useless as TMP set position fixed hard in code... :-(

    , transition: M.TRANSITION.FADE

    , name: 'tabbar1'

    , tabItem1: M.TabBarItemView.design({
          value: M.I18N.l('book')
        , page: 'bookingPage'
        , icon: 'book'
    })

    , tabItem2: M.TabBarItemView.design({
          value: M.I18N.l('menu')
        , page: 'dashboard'
        , icon: 'menu'
    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BookingPage
// ==========================================================================

m_require('app/views/TabBar.js');

DigiWebApp.BookingPage = M.PageView.design({

      childViews: 'header content tabBar'

    , events: {
		  pagebeforeshow: {
            //  target: DigiWebApp.BookingController
            //, action: 'init'
			action: function() {
				if (DigiWebApp.SettingsController.featureAvailable("416")) {
					DigiWebApp.NavigationController.toBookTimePage(); // zum Scholpp-Custom-BookingScreen
				} else {
					DigiWebApp.BookingController.init();
				}
			}
        }
        , pageshow: {
        	action: function() {
        		DigiWebApp.TabBar.setActiveTab(DigiWebApp.TabBar.tabItem1);
        		if (DigiWebApp.SettingsController.featureAvailable('415')) {
        			$('#' + DigiWebApp.BookingPage.header.feierabendButton.id).show(); 			
        		} else {
        			$('#' + DigiWebApp.BookingPage.header.feierabendButton.id).hide();
        		}
        		if (DigiWebApp.SettingsController.featureAvailable('402')) {
        			$('#' + DigiWebApp.BookingPage.header.materialButton.id).show(); 			
        		} else {
        			$('#' + DigiWebApp.BookingPage.header.materialButton.id).hide();
        		}
        	}
        }
    }

    , cssClass: 'bookTimePage'

    , header: M.ToolbarView.design({
          childViews: 'materialButton title feierabendButton'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , materialButton: M.ButtonView.design({
	            value: M.I18N.l('BautagebuchMaterial')
	          , anchorLocation: M.LEFT
	          , events: {
	              tap: {
		      			action: function() {
        					try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
	        				DigiWebApp.DashboardController.materialerfassung();
						}
	              }
	          }
	      })
        , pauseButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
        			action: function() {
        				// TODO: schnelle Pause implementieren
						//DigiWebApp.BookingController.closeDay();
					}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('timeRegistration')
            , anchorLocation: M.CENTER
        })
        , feierabendButton: M.ButtonView.design({
              value: '&nbsp;&nbsp;&nbsp;'
            , icon: 'home'
            , anchorLocation: M.RIGHT
            , events: {
                tap: {
        			action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
        				DigiWebApp.BookingController.closeDay();
					}
                }
            }
        })
        , anchorLocation: M.TOP
    })

	, content: M.ScrollView.design({
          childViews: 'order position activity grid currentBookingLabel' //'gridOrder gridPosition gridActivity grid',
        , cssClass: 'unselectable'

        , order: M.SelectionListView.design({
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('noData')
                , label: M.I18N.l('order')
                //, cssClass: 'unselectable'
                , applyTheme: NO
                , contentBinding: {
                      target: DigiWebApp.SelectionController
                    , property: 'orders'
                }
                , events: {
                    change: {
                          target: DigiWebApp.SelectionController
                        , action: function() {
                            this.setPositions();
                        }
                    }
//	                , tap: {
//	    				action: function() {
//	                		try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
//		  				}
//	                }
                }
        })
            
        , position: M.SelectionListView.design({
              selectionMode: M.SINGLE_SELECTION_DIALOG
            , label: M.I18N.l('position')
            , initialText: M.I18N.l('noData')
            //, cssClass: 'unselectable'
            , applyTheme: NO
            , contentBinding: {
                  target: DigiWebApp.SelectionController
                , property: 'positions'
            }
            , events: {
                change: {
                      target: DigiWebApp.SelectionController
                    , action: function() {
                        this.setActivities(YES);
                    }
                }
//	            , tap: {
//					action: function() {
//	            		try{DigiWebApp.ApplicationController.vibrate();}catch(e3){}
//	  				}
//	            }
            }
        })

        , activity: M.SelectionListView.design({
              selectionMode: M.SINGLE_SELECTION_DIALOG
            , label: M.I18N.l('activity')
            , initialText: M.I18N.l('noData')
            //, cssClass: 'unselectable'
            , applyTheme: NO
            , contentBinding: {
                  target: DigiWebApp.SelectionController
                , property: 'activities'
            }
            , events: {
                change: {
                      target: DigiWebApp.SelectionController
                    , action: function() {
                        this.saveSelection();
                    }
                }
//	            , tap: {
//					action: function(id, event) {
//	            		//try{DigiWebApp.ApplicationController.vibrate();}catch(e4){}
//	        			try{event.stopImmediatePropagation();}catch(e4){try{event.stopPropagation();}catch(e4){}}
//	            		return false;
//	  				}
//	            }
            }
        })

        , grid: M.GridView.design({
              childViews: 'button icon'
            , layout: {
                  cssClass: 'marginTop40 digiButton'
                , columns: {
                      0: 'button'
                    , 1: 'icon'
                }
            }
            , button: M.ButtonView.design({
                  value: M.I18N.l('book2')
                , cssClass: 'digiButton'
                , anchorLocation: M.RIGHT
                , events: {
                    tap: {
                          target: DigiWebApp.BookingController
                        , action: 'book'
            			    					
 						/*, action: function() {
				                DigiWebApp.BookingController.book();
						}*/
                    }
                }
            })
            , icon: M.ImageView.design({
                value: 'theme/images/icon_bookTime.png'
            })
        })

        , currentBookingLabel: M.LabelView.design({
              cssClass: 'marginTop25 whiteLabel unselectable'
            , computedValue: {
                  contentBinding: {
                      target: DigiWebApp.BookingController
                    , property: 'currentBookingStr'
                }
                , value: ''
                , operation: function(v) {
                	if (v !== "") {
                    	return M.I18N.l('bookingRunningSince') + ' &nbsp;' + v;
                    } else {
                    	return '';
                    }
                }
            }
        })
    })

    , tabBar: DigiWebApp.TabBar

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: DashboardPage
// ==========================================================================

m_require('app/views/TabBar.js');
m_require('app/views/ButtonDashboardTemplateView.js');

DigiWebApp.ButtonDashboardPage = M.PageView.design({

    childViews: 'header content tabBar'

    , cssClass: 'buttonDashboardPage unselectable'

    , events: {
		  pagebeforeshow: {
            target: DigiWebApp.DashboardController,
            action: 'initButtons'
        }
        , pageshow: {
        	action: function() {
        		DigiWebApp.TabBar.setActiveTab(DigiWebApp.TabBar.tabItem2);
        	}
        }
    }
    
    , needsUpdate: true

    , header: M.ToolbarView.design({
        value: M.I18N.l('menu')
        , cssClass: 'header unselectable'
        , isFixed: YES
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({

        childViews: 'list'

        , list: M.ListView.design({
            contentBinding: {
                target: DigiWebApp.DashboardController,
                property: 'itemsButtons'
            }
            , listItemTemplateView: DigiWebApp.ButtonDashboardTemplateView
        })
    })

    , tabBar: DigiWebApp.TabBar

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: BookingPage
// ==========================================================================

m_require('app/views/TabBar.js');

DigiWebApp.BookingPageWithIconsScholpp = M.PageView.design({

      childViews: 'header content tabBar'

    , events: {
		  pagebeforeshow: {
              target: DigiWebApp.BookingController
            , action: 'init'
        }
        , pageshow: {
        	action: function() {
        		DigiWebApp.TabBar.setActiveTab(DigiWebApp.TabBar.tabItem1);
        		$('#' + DigiWebApp.BookingPageWithIconsScholpp.content.activity.id + "_container").hide();
        		$('#' + DigiWebApp.BookingPageWithIconsScholpp.content.spesenkennzeichen.id).attr('disabled', 'disabled');
        		
        		if (DigiWebApp.SettingsController.featureAvailable('424')) {
        			// für Kunde Stooss
//        			try{$('[id=' + DigiWebApp.BookingPageWithIconsScholpp.header.feierabendButton.id  + ']').each(function() { $(this).show(); });}catch(e){}
//        			try{$('[id=' + DigiWebApp.BookingPageWithIconsScholpp.content.spesenkennzeichen.id  + ']').each(function() { $(this).hide(); });}catch(e){}
//        			try{$('[id=' + DigiWebApp.BookingPageWithIconsScholpp.content.uebernachtungskennzeichen.id  + ']').each(function() { $(this).hide(); });}catch(e){}
        			$('#' + DigiWebApp.BookingPageWithIconsScholpp.header.feierabendButton.id).show();
            		$('#' + DigiWebApp.BookingPageWithIconsScholpp.content.spesenkennzeichen.id + "_container").hide();
            		$('#' + DigiWebApp.BookingPageWithIconsScholpp.content.uebernachtungskennzeichen.id + "_container").hide();
        		} else {
        			// für Kunde Scholpp
        			$('#' + DigiWebApp.BookingPageWithIconsScholpp.header.feierabendButton.id).hide();
            		$('#' + DigiWebApp.BookingPageWithIconsScholpp.content.spesenkennzeichen.id + "_container").show();
            		$('#' + DigiWebApp.BookingPageWithIconsScholpp.content.uebernachtungskennzeichen.id + "_container").show();
        		}
        	}
        }
    }

    , cssClass: 'bookTimePageWithIcons'

    , header: M.ToolbarView.design({
          childViews: 'title feierabendButton'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , pauseButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
        			action: function() {
        				// TODO: schnelle Pause implementieren
						//DigiWebApp.BookingController.closeDay();
					}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('timeRegistration')
            , anchorLocation: M.CENTER
        })
        , feierabendButton: M.ButtonView.design({
              value: '&nbsp;&nbsp;&nbsp;'
            , icon: 'home'
            , anchorLocation: M.RIGHT
            , events: {
                tap: {
        			action: function() {
        				DigiWebApp.BookingController.closeDay();
					}
                }
            }
        })
        , anchorLocation: M.TOP
    })

	, content: M.ScrollView.design({
          //childViews: 'order position activity grid currentBookingLabel' //'gridOrder gridPosition gridActivity grid',
          childViews: 'order position activity uebernachtungskennzeichen spesenkennzeichen fahrzeit_arbeitszeit_spezial_ButtonGrid unterbrechung_pause_arbeitsende_ButtonGrid currentBookingLabel' //'gridOrder gridPosition gridActivity grid',
        , cssClass: 'unselectable'
        	
        , activityLabel: M.LabelView.design({
        	  value: M.I18N.l('activity')
        	, cssClass: 'whiteLabel16px'
        })

        , unterbrechung_pause_arbeitsende_ButtonGrid: M.GridView.design({
        		childViews: 'unterbrechungButtonGrid pauseButtonGrid arbeitsendeButtonGrid'
              , layout: M.THREE_COLUMNS
              , arbeitsendeButtonGrid: M.GridView.design({
                  childViews: 'button icon'
                , layout: {
                      cssClass: 'scholppButton'
                    , columns: {
                          0: 'button'
                        , 1: 'icon'
                    }
                }
                , button: M.ButtonView.design({
                      value: "Ende"
                    , cssClass: 'scholppButton'
                    , anchorLocation: M.RIGHT
                    , events: {
                        tap: {
		    				action: function() { try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
		    					M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').setSelection("6");
		    					DigiWebApp.ScholppBookingController.bucheArbeitsende();
		        			}
                        }
                    }
                })
                , icon: M.ImageView.design({
                      value: 'theme/images/48x48_plain_home.png'
                    , events: {
		                  tap: {
			    				action: function() { try{DigiWebApp.ApplicationController.vibrate();}catch(e3){}
			    					M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').setSelection("6");
	          	  					DigiWebApp.ScholppBookingController.bucheArbeitsende();
		          				}
		                  }
		            }
                })
            })

            , unterbrechungButtonGrid: M.GridView.design({
                  childViews: 'button icon'
                , layout: {
                      cssClass: 'scholppButton'
                    , columns: {
                          0: 'button'
                        , 1: 'icon'
                    }
                }
                , button: M.ButtonView.design({
                      value: "Unterbrechung"
                    , cssClass: 'scholppButton'
                    , anchorLocation: M.RIGHT
                    , events: {
		                  tap: {
			    				action: function() { try{DigiWebApp.ApplicationController.vibrate();}catch(e4){}
			    					M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').setSelection("6");
			    					DigiWebApp.ScholppBookingController.bucheUnterbrechung();
		          				}
		                  }
		            }
                })
                , icon: M.ImageView.design({
                      value: 'theme/images/48x48_plain_clock_pause.png'
                    , events: {
		                  tap: {
			    				action: function() { try{DigiWebApp.ApplicationController.vibrate();}catch(e5){}
			    					M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').setSelection("6");
	          	  					DigiWebApp.ScholppBookingController.bucheUnterbrechung();
		          				}
		                  }
		            }
                })
            })

            , pauseButtonGrid: M.GridView.design({
                  childViews: 'button icon'
                , layout: {
                      cssClass: 'scholppButton'
                    , columns: {
                          0: 'button'
                        , 1: 'icon'
                    }
                }
                , button: M.ButtonView.design({
                      value: " "
                    , cssClass: 'scholppButton'
                    , anchorLocation: M.RIGHT
                    , events: {
		                  tap: {
			    				action: function() { try{DigiWebApp.ApplicationController.vibrate();}catch(e6){}
		    						//M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').setSelection("6");
	          	  					//DigiWebApp.ScholppBookingController.buchePause();
		          				}
		                  }
		            }
                })
                , icon: M.ImageView.design({
                      value: ''
                    , events: {
		                  tap: {
			    				action: function() { try{DigiWebApp.ApplicationController.vibrate();}catch(e7){}
		    						//M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').setSelection("6");
	          	  					//DigiWebApp.ScholppBookingController.buchePause();
		          				}
		                  }
		            }
                })
            })
        })
        
        , fahrzeit_arbeitszeit_spezial_ButtonGrid: M.GridView.design({
        	  childViews: 'fahrzeitButtonGrid arbeitszeitButtonGrid spezialButtonGrid'
            , layout: M.THREE_COLUMNS

            , fahrzeitButtonGrid: M.GridView.design({
                childViews: 'button icon'
              , layout: {
                    cssClass: 'scholppButton'
                  , columns: {
                        0: 'button'
                      , 1: 'icon'
                  }
              }
              , button: M.ButtonView.design({
                    value: "Reisezeit"
                  , cssClass: 'scholppButton'
                  , anchorLocation: M.RIGHT
                  , events: {
                      tap: {
		    				action: function() { try{DigiWebApp.ApplicationController.vibrate();}catch(e8){}
            	  				DigiWebApp.ScholppBookingController.bucheFahrzeit();
              				}
                      }
                  }
              })
              , icon: M.ImageView.design({
                    value: 'theme/images/48x48_plain_car_compact_grey.png'
                  , events: {
	                  tap: {
		    				action: function() { try{DigiWebApp.ApplicationController.vibrate();}catch(e9){}
            	  				DigiWebApp.ScholppBookingController.bucheFahrzeit();
	          				}
	                  }
	              }
              })
            })
            , arbeitszeitButtonGrid: M.GridView.design({
                  childViews: 'button icon'
                , layout: {
                      cssClass: 'scholppButton'
                    , columns: {
                          0: 'button'
                        , 1: 'icon'
                    }
                }
                , button: M.ButtonView.design({
                      value: "Arbeitszeit"
                    , cssClass: 'scholppButton'
                    , anchorLocation: M.RIGHT
                    , events: {
		                  tap: {
			    				action: function() { try{DigiWebApp.ApplicationController.vibrate();}catch(e10){}
		    						M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').setSelection("6");
	          	  					DigiWebApp.ScholppBookingController.bucheArbeitszeit();
		          				}
		                  }
		            }
                })
                , icon: M.ImageView.design({
                      value: 'theme/images/48x48_plain_wrench.png'
                    , events: {
		                  tap: {
			    				action: function() { try{DigiWebApp.ApplicationController.vibrate();}catch(e11){}
		    						M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').setSelection("6");
	          	  					DigiWebApp.ScholppBookingController.bucheArbeitszeit();
		          				}
		                  }
		            }
                })
            })
            , spezialButtonGrid: M.GridView.design({
                childViews: 'button icon'
              , layout: {
                    cssClass: 'scholppButton'
                  , columns: {
                        0: 'button'
                      , 1: 'icon'
                  }
              }
              , button: M.ButtonView.design({
                    value: "&nbsp;"
                  , cssClass: 'scholppButton'
                  , anchorLocation: M.RIGHT
                  , events: {
		                  tap: {
			    				action: function() { try{DigiWebApp.ApplicationController.vibrate();}catch(e12){}
			    					//M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').setSelection("6");
	          	  					//DigiWebApp.ScholppBookingController.bucheArbeitszeit();
		          				}
		                  }
		            }
              })
              , icon: M.ImageView.design({
                    value: ''
                  , events: {
		                  tap: {
			    				action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e13){}
		    						//M.ViewManager.getView('bookingPageWithIconsScholpp', 'uebernachtungskennzeichen').setSelection("6");
		    						//DigiWebApp.ScholppBookingController.bucheArbeitszeit();
		          				}
		                  }
		            }
              })
          })

        })

        , order: M.SelectionListView.design({
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , initialText: M.I18N.l('order')
                , label: ''
                //, cssClass: 'unselectable'
                , applyTheme: NO
                , contentBinding: {
                      target: DigiWebApp.SelectionController
                    , property: 'orders'
                }
                , events: {
                    change: {
                          target: DigiWebApp.SelectionController
                        , action: function() {
                            this.setPositions();
                        }
                    }
//	                , tap: {
//	    				action: function() {
//	                		try{DigiWebApp.ApplicationController.vibrate();}catch(e14){}
//		  				}
//	                }
                }
        })
            
        , position: M.SelectionListView.design({
              selectionMode: M.SINGLE_SELECTION_DIALOG
            , label: ''
            , initialText: M.I18N.l('position')
            //, cssClass: 'unselectable'
            , applyTheme: NO
            , contentBinding: {
                  target: DigiWebApp.SelectionController
                , property: 'positions'
            }
            , events: {
                change: {
                      target: DigiWebApp.SelectionController
                    , action: function() {
                        this.setActivities(YES);
                    }
                }
//	            , tap: {
//					action: function() {
//	            		try{DigiWebApp.ApplicationController.vibrate();}catch(e15){}
//	  				}
//	            }
            }
        })

        , activity: M.SelectionListView.design({
              selectionMode: M.SINGLE_SELECTION_DIALOG
            , label: ''
            , initialText: M.I18N.l('activity')
            //, cssClass: 'unselectable'
            , applyTheme: NO
            , contentBinding: {
                  target: DigiWebApp.SelectionController
                , property: 'activities'
            }
            , events: {
                change: {
                      target: DigiWebApp.SelectionController
                    , action: function() {
                        this.saveSelection();
                    }
                }
            }
        })

        , uebernachtungskennzeichen: M.SelectionListView.design({
              selectionMode: M.SINGLE_SELECTION_DIALOG
            //, cssClass: 'unselectable'
            , applyTheme: NO
            , contentBinding: {
                  target: DigiWebApp.SelectionController
                , property: 'uebernachtungskennzeichenScholpp'
            }
            , events: {
                change: {
                      target: DigiWebApp.SelectionController
                    , action: function() {
                        this.saveSelection();
                    }
                }
            }
        })

        , spesenkennzeichen: M.SelectionListView.design({
              selectionMode: M.SINGLE_SELECTION_DIALOG
            //, cssClass: 'unselectable'
            , applyTheme: NO
            , contentBinding: {
                  target: DigiWebApp.SelectionController
                , property: 'spesenkennzeichenScholpp'
            }
            , events: {
                change: {
                      target: DigiWebApp.SelectionController
                    , action: function() {
                        //this.saveSelection();
                    }
                }
            }
        })

        , grid: M.GridView.design({
              childViews: 'button icon'
            , layout: {
                  cssClass: 'marginTop40 digiButton'
                , columns: {
                      0: 'button'
                    , 1: 'icon'
                }
            }
            , button: M.ButtonView.design({
                  value: M.I18N.l('book2')
                , cssClass: 'digiButton'
                , anchorLocation: M.RIGHT
                , events: {
                    tap: {
                          target: DigiWebApp.BookingController
                        , action: 'book'
            			    					
 						/*, action: function() {
				                DigiWebApp.BookingController.book();
						}*/
                    }
                }
            })
            , icon: M.ImageView.design({
                value: 'theme/images/icon_bookTime.png'
            })
        })

        , currentBookingLabel: M.LabelView.design({
              cssClass: 'marginTop15 whiteLabel unselectable'
            , computedValue: {
                  contentBinding: {
                      target: DigiWebApp.BookingController
                    , property: 'currentBookingStr'
                }
                , value: ''
                , operation: function(v) {
                	if (v !== "") {
                    	return M.I18N.l('bookingRunningSince') + ' &nbsp;' + v;
                    } else {
                    	return '';
                    }
                }
            }
        })
    })

    , tabBar: DigiWebApp.TabBar

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: DashboardPage
// ==========================================================================

m_require('app/views/TabBar.js');
m_require('app/views/DashboardTemplateView.js');

DigiWebApp.DashboardPage = M.PageView.design({

    childViews: 'header content tabBar'

    , cssClass: 'dashboardPage unselectable'

    , events: {
		  pagebeforeshow: {
            //target: DigiWebApp.DashboardController,
            //action: 'init'
			action: function() {
				if (DigiWebApp.SettingsController.featureAvailable('404')) {
					DigiWebApp.NavigationController.toButtonDashboardPage();
				} else {
					DigiWebApp.DashboardController.init();
				}
			}
        }
        , pageshow: {
        	action: function() {
        		DigiWebApp.TabBar.setActiveTab(DigiWebApp.TabBar.tabItem2);
        	}
        }
    }
    
    , needsUpdate: true

    , header: M.ToolbarView.design({
        value: M.I18N.l('menu')
        , cssClass: 'header unselectable'
        , isFixed: YES
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({

        childViews: 'list'

        , list: M.ListView.design({
            contentBinding: {
                target: DigiWebApp.DashboardController,
                property: 'items'
            }
            , listItemTemplateView: DigiWebApp.DashboardTemplateView
        })
    })

    , tabBar: DigiWebApp.TabBar

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: HandOrderPage
// ==========================================================================

m_require('app/views/TabBar.js');

DigiWebApp.HandOrderPage = M.PageView.design({

    //  childViews: 'header content tabBar'
      childViews: 'header content'

    , cssClass: 'handApplicationPage'

    , events: {
		pageshow: {
			action: function() {
				$('#' + DigiWebApp.HandOrderPage.content.orderName.id)[0].focus();
			}
	    }
 	}

	, header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.backToDashboardPage();}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('handApplications')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
          childViews: 'orderName grid'
        , orderName: M.TextFieldView.design({
            label: M.I18N.l('orderName')
        })
        , grid: M.GridView.design({
              childViews: 'button icon'
            , layout: {
                  cssClass: 'digiButton hack'
                , columns: {
                      0: 'button'
                    , 1: 'icon'
                }
            }
            , button: M.ButtonView.design({
                  value: M.I18N.l('assume')
                , cssClass: 'digiButton'
                , anchorLocation: M.RIGHT
                , events: {
                    tap: {
                          target: DigiWebApp.HandOrderController
                        , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} this.save();}
                    }
                }
            })
            , icon: M.ImageView.design({
                value: 'theme/images/icon_bookTime.png'
            })
        })

    })

    , tabBar: DigiWebApp.TabBar

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: InfoPage
// ==========================================================================

m_require('app/views/TabBar.js');

DigiWebApp.InfoPage = M.PageView.design({

      lastTimePageWasLoaded: null
     
    , events: {
		  pagebeforeshow: {
            action: function() {
            	DigiWebApp.InfoPage.pagebeforeshowFunction();
            }
        }
        , pagehide: {
            action: function() {
                // reset click counter to reset settings
                DigiWebApp.ApplicationController.clickCounter = 0;
            }
        }
    }
    
    , pagebeforeshowFunction: function() {
            // reset click counter to reset settings
            DigiWebApp.ApplicationController.clickCounter = 0;
            M.ViewManager.getView('infoPage', 'languageSelection').setSelection(M.I18N.getLanguage());
            DigiWebApp.InfoPage.lastTimePageWasLoaded = +new Date();
			DigiWebApp.InfoPage.content.cordovaVersionLabel.renderUpdate();
			DigiWebApp.InfoPage.content.deviceinfo.renderUpdate();
			DigiWebApp.InfoPage.content.connectioninfo.renderUpdate();
			DigiWebApp.InfoPage.content.localStorageUsage.renderUpdate();
			DigiWebApp.InfoPage.content.mitarbeiterNameVornameLabel.renderUpdate();
    }

    , cssClass: 'infoPage'

    //, childViews: 'header content tabBar'
    , childViews: 'header content'

    , header: M.ToolbarView.design({
          childViews: 'backButton title refreshButton'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {
                    	try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
	        			try{event.stopImmediatePropagation();}catch(e4){try{event.stopPropagation();}catch(e4){}}
                    	this.backToDashboardPage();
	            		return false;
                    }
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('info')
            , anchorLocation: M.CENTER
        })
        , refreshButton: M.ButtonView.design({
              value: M.I18N.l('refresh')
            , icon: 'refresh'
            , anchorLocation: M.RIGHT
            , events: {
                tap: {
        			action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} 
			        	DigiWebApp.SettingsController.mitarbeiterNameVorname = "";
				        var settings = DigiWebApp.Settings.find();    		
				    	var MitarbeiterWebAppID = "0";
				    	try { MitarbeiterWebAppID = settings[0].get("workerId"); } catch(e4) { console.error(e4); }
						DigiWebApp.SettingsController.refreshMitarbeiterNameVorname(MitarbeiterWebAppID, DigiWebApp.InfoPage.pagebeforeshowFunction);
					}
                }
            }
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({

          childViews: 'logo languageSelection spacer8 companyIdLabel mitarbeiterNameVornameLabel spacer9 versionLabel cordovaVersionLabel companyLabel streetLabel cityLabel emailLabel1 spacer1 emailLabel2 spacer2 spacer3 TMPVersionLabel spacer4 deviceinfo spacer5 connectioninfo spacer6 environmentinfo spacer7 localStorageUsage'

        , logo: M.ImageView.design({
              value: 'theme/images/NeuesLogo2013.png'
            , cssClass: 'logoInfoPage marginBottom25 unselectable'
        })

        , languageSelection: M.SelectionListView.design({
                  selectionMode: M.SINGLE_SELECTION_DIALOG
                , label: M.I18N.l('applicationLanguage')
                , applyTheme: NO
                //, childViews: "languageDeDe languageEnUs languageEsEs languageFrFr languageNlNl"
                , childViews: "languageDeDe languageEnUs"
				, languageDeDe: M.SelectionListItemView.design({
			          value: 'de_de'
			        , label: M.I18N.l('language_de_de')
			    })
			    , languageEnUs: M.SelectionListItemView.design({
			          value: 'en_us'
			        , label: M.I18N.l('language_en_us')
			    })
			    , languageFrFr: M.SelectionListItemView.design({
			          value: 'fr_fr'
			        , label: M.I18N.l('language_fr_fr')
			    })
			    , languageEsEs: M.SelectionListItemView.design({
			          value: 'es_es'
			        , label: M.I18N.l('language_es_es')
			    })
			    , languageNlNl: M.SelectionListItemView.design({
			          value: 'nl_nl'
			        , label: M.I18N.l('language_nl_nl')
			    })
                , events: {
                    change: {
                        action: function() {
                            var selectedLanguage = M.ViewManager.getView('infoPage', 'languageSelection').getSelection(YES).value;
                            M.I18N.setLanguage(selectedLanguage);
                        }
                    }
//			        , tap: {
//						action: function() {
//			        		try{DigiWebApp.ApplicationController.vibrate();}catch(e5){}
//							}
//			        }
                }
        })

        , companyIdLabel: M.LabelView.design({
              computedValue: {
                  value: ''
                , operation: function(v) {
                	var myCompanyId = "";
                	try { myCompanyId = DigiWebApp.Settings.find()[0].get("company"); } catch(e6) { /*console.error(e6);*/ }
                    return M.I18N.l('company') + ': ' + myCompanyId;
                }
            }
            , cssClass: 'infoLabel unselectable'
        })

        , mitarbeiterNameVornameLabel: M.LabelView.design({
              computedValue: {
                  value: ''
                , operation: function(v) {
                	var myWorkerId = "";
                	try { myWorkerId = DigiWebApp.Settings.find()[0].get("workerId"); } catch(e7) { /*console.error(e7);*/ }
                    var outString = M.I18N.l('configuredUser') + ': ' + myWorkerId;
//                    if (typeof(DigiWebApp.SettingsController.mitarbeiterNameVorname) !== "undefined" && DigiWebApp.SettingsController.mitarbeiterNameVorname !== null && DigiWebApp.SettingsController.mitarbeiterNameVorname !== "") {
//                    	outString = outString + ' (' + DigiWebApp.SettingsController.mitarbeiterNameVorname + ')';
//                    }
                    if (DigiWebApp.SettingsController.getSetting("mitarbeiterVorname") !== "" || DigiWebApp.SettingsController.getSetting("mitarbeiterNachname") !== "") { 
                    	outString = outString + " (" + DigiWebApp.SettingsController.getSetting("mitarbeiterVorname") + " " + DigiWebApp.SettingsController.getSetting("mitarbeiterNachname") + ")";
//                    	if (DigiWebApp.SettingsController.getSetting("debug"))  {
//                    		outString = outString + "<br/>MitarbeiterID: " + DigiWebApp.SettingsController.getSetting("mitarbeiterId");	
//                    	}
                    }
                    return outString;
                }
            }
            , cssClass: 'infoLabel unselectable'
        })

        , versionLabel: M.LabelView.design({
              computedValue: {
                  value: ''
                , operation: function(v) {
                    return 'Version: ' + M.Application.getConfig('version');
                }
            }
            , cssClass: 'infoLabel unselectable'
        })

        , cordovaVersionLabel: M.LabelView.design({
              computedValue: {
                  value: ''
                , operation: function(v) {
                	var output = '';
                	if (typeof(device) !== "undefined") {
                		if (typeof(device.cordova) !== "undefined") output = output + 'Cordova: ' + device.cordova;
                		if (typeof(device.phonegap) !== "undefined") {
                			if (output !== "") output = output + "<br/>"; 
                			output = output + 'PhoneGap: ' + device.phonegap;
                		}
                    }
                    //console.log("cordovaVersionLabel: " + output);
                    return output;
                }
            }
            , cssClass: 'infoLabel marginBottom25 unselectable'
        })

        , TMPVersionLabel: M.LabelView.design({
              computedValue: {
                  value: ''
                , operation: function(v) {
                	return 'The-M-Project: ' + M.Version;
                }
            }
            , cssClass: 'infoLabel marginBottom25 unselectable'
        })

        , buildLabel: M.LabelView.design({
              value: 'Build: 5461'
            , cssClass: 'infoLabel marginBottom25 unselectable'
        })

        , companyLabel: M.LabelView.design({
              value: 'DIGI-Zeiterfassung GmbH'
            , cssClass: 'infoLabel unselectable'
        })

        , streetLabel: M.LabelView.design({
              value: 'Raiffeisenstr. 30'
            , cssClass: 'infoLabel unselectable'
        })

        , cityLabel: M.LabelView.design({
              value: 'D-70794 Filderstadt'
            , cssClass: 'infoLabel marginBottom25 unselectable'
        })

        , emailLabel1: M.LabelView.design({
              value: 'eMail: '
            , cssClass: 'infoLabel unselectable'
            , isInline: YES
        })

        , emailLabel2: M.LabelView.design({
              value: 'support@digi-zeiterfassung.de'
            , hyperlinkTarget: 'support@digi-zeiterfassung.de" onclick="return DigiWebApp.InfoPage.lastTimePageWasLoaded < (+new Date() - 1000);"'
            , hyperlinkType: M.HYPERLINK_EMAIL
            , cssClass: 'infoLabel unselectable'
            , isInline: YES
        })

        , spacer1: M.LabelView.design({
            value: ' '
        })

        , spacer2: M.LabelView.design({
            value: ' '
        })

        , spacer3: M.LabelView.design({
            value: '&nbsp;'
        })

        , spacer4: M.LabelView.design({
            value: ' '
        })

        , spacer5: M.LabelView.design({
            value: ' '
        })

        , spacer6: M.LabelView.design({
            value: ' '
        })

        , spacer7: M.LabelView.design({
            value: ' '
        })

        , spacer8: M.LabelView.design({
              value: '<br /><br />'
            , cssClass: 'infoLabel unselectable'
        })

        , spacer9: M.LabelView.design({
              value: '<br />'
            , cssClass: 'infoLabel unselectable'
        })

        , webLabel1: M.LabelView.design({
              value: 'Web: '
            , cssClass: 'infoLabel unselectable'
            , isInline: YES
        })

        , webLabel2: M.LabelView.design({
              value: 'www.digi-zeiterfassung.de'
            , hyperlinkTarget: 'http://www.digi-zeiterfassung.de" onclick="return DigiWebApp.InfoPage.lastTimePageWasLoaded < (+new Date() - 1000);"'
            , hyperlinkType: M.HYPERLINK_WEBSITE
            , cssClass: 'infoLabel unselectable'
            , isInline: YES
        })
	
        , localStorageUsage: M.LabelView.design({
              computedValue: {
                  value: ''
                , operation: function(v) {
                	var output = "";
                	var LSsize = new Number(JSON.stringify(localStorage).length / 1048576).toFixed(2); 
                	if (typeof(localStorage) !== "undefined") {
                    	output = 'LocalStorage-Usage: ' + LSsize + ' MB<br />';
                    }
                    return output;
                }
            }
            , cssClass: 'infoLabel marginTop25 unselectable'
        })

        , environmentinfo: M.LabelView.design({
              computedValue: {
                  value: ''
                , operation: function(v) {
                	var output = "";
                	if (typeof(M.Environment) !== "undefined") {
                    	output = 'Environment Platform: '     + M.Environment.getPlatform()     + '<br />';
                    }
                    //console.log("environmentinfo: " + output);
                    return output;
                }
            }
            , cssClass: 'infoLabel marginTop25 unselectable'
        })

        , deviceinfo: M.LabelView.design({
              computedValue: {
                  value: ''
                , operation: function(v) {
                	var output = "";
                	if (typeof(device) !== "undefined") {
                    	output = 'Device Name: '     + device.name     + '<br />' + 
			                     'Device Model: ' + device.model + '<br />' + 
			                     'Device Platform: ' + device.platform + '<br />' + 
                                 'Device UUID: '     + device.uuid     + '<br />' + 
                                 'Device Version: '  + device.version  + '<br />';
                    }
                    //console.log("deviceinfo: " + output);
                    return output;
                }
            }
            , cssClass: 'infoLabel marginTop25 unselectable'
        })

        , connectioninfo: M.LabelView.design({
              computedValue: {
                  value: ''
                , operation: function(v) {
					if (typeof(navigator.connection) !== "undefined" && typeof(Connection) !== "undefined") {
					
						var networkState = navigator.connection.type;
				
				        var states = {};
				        states[Connection.UNKNOWN]  = 'Unknown connection';
				        states[Connection.ETHERNET] = 'Ethernet connection';
				        states[Connection.WIFI]     = 'WiFi connection';
				        states[Connection.CELL_2G]  = 'Cell 2G connection';
				        states[Connection.CELL_3G]  = 'Cell 3G connection';
				        states[Connection.CELL_4G]  = 'Cell 4G connection';
				        states[Connection.CELL]     = 'Cellular connection';
				        states[Connection.NONE]     = 'No network connection';
				
				        return 'Connection type: ' + states[networkState];
				        
				    } else {
                    	return '';
				    }
                }
            }
            , cssClass: 'infoLabel marginBottom25 unselectable'
        })

    })

    , tabBar: DigiWebApp.TabBar

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: SettingsPage
// ==========================================================================

m_require('app/views/DummyTemplateView');
m_require('app/views/TabBar.js');

DigiWebApp.SettingsPage = M.PageView.design({

    //  childViews: 'header content tabBar'
      childViews: 'header content'

    , events: {
		pagebeforeshow: {
              target: DigiWebApp.SettingsController
            , action: 'init'
        }
    }

    , cssClass: 'settingsPage'

    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                    //  target: DigiWebApp.NavigationController
                    //, action: 'backToDashboardPage'
        			action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
        				if (!DigiWebApp.SettingsController.showCredentialsAlert) {
        					DigiWebApp.NavigationController.backToDashboardPage();
        				}
        			}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('settings')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
        //  childViews: 'companyGrid passwordGrid connectionCodeGrid workerIdGrid autoTransferAfterBookTimeCheck autoTransferAfterClosingDayCheck autoSyncAfterBookTimeCheck remarkIsMandatory autoSaveGPSData GPSDataIsMandatory useTransitionsSetting grid'
          childViews: 'companyGrid passwordGrid connectionCodeGrid workerIdGrid autoTransferAfterBookTimeCheck autoTransferAfterClosingDayCheck autoSyncAfterBookTimeCheck stammdatenabgleichBeimAppStartCheck remarkIsMandatory remarkIsOptional autoSaveGPSData detailierteZeitdaten useTransitionsSetting daysToHoldBookingsOnDeviceSliderContainer bautagebuchLimit_autoStartUhrzeit ServiceApp_ermittleGeokoordinate ServiceApp_datenUebertragen ServiceApp_engeKopplung ServiceApp_PORTGrid ServiceApp_FallBack auftragsDetailsKoppeln vibrationsDauerSliderContainer terminlisteEinstellungen festePauseStornierenEinstellungen grid'
        , daysToHoldBookingsOnDeviceSliderContainer: M.ContainerView.design({
      	  		  childViews: 'daysToHoldBookingsOnDeviceSlider'
		        , daysToHoldBookingsOnDeviceSlider: M.SliderView.design({
		        	  label: M.I18N.l('daysToHoldBookingsOnDeviceLabel')
		        	, min: 1
		        	, max: 60
		        	, highlightLeftPart: YES
		        	, cssClass: 'daysToHoldBookingsOnDeviceSlider'
		            , contentBinding: {
		                  target: DigiWebApp.SettingsController
		                , property: 'settings.daysToHoldBookingsOnDevice'
		            }
		        })
        })
        , vibrationsDauerSliderContainer: M.ContainerView.design({
      	  		  childViews: 'vibrationsDauerSlider'
		        , vibrationsDauerSlider: M.SliderView.design({
		        	  label: M.I18N.l('vibrationsDauerLabel')
		        	, min: 0
		        	, max: 200
		        	, highlightLeftPart: YES
		        	, cssClass: 'vibrationsDauerSlider'
		            , contentBinding: {
		                  target: DigiWebApp.SettingsController
		                , property: 'settings.vibrationsDauer'
		            }
		        })
        })
        , companyGrid: M.GridView.design({
              childViews: 'companyLabel companyInput'
            , layout: M.TWO_COLUMNS
            , companyLabel: M.LabelView.design({
                value: M.I18N.l('company')
            })
            , companyInput: M.TextFieldView.design({
            	  inputType: M.INPUT_NUMBER
                , contentBinding: {
                      target: DigiWebApp.SettingsController
                    , property: 'settings.company'
                }
            })
        })
        , passwordGrid: M.GridView.design({
              childViews: 'passwordLabel passwordInput'
            , layout: M.TWO_COLUMNS
            , passwordLabel: M.LabelView.design({
                value: M.I18N.l('password')
            })
            , passwordInput: M.TextFieldView.design({
                  inputType: M.INPUT_PASSWORD
                , contentBinding: {
                      target: DigiWebApp.SettingsController
                    , property: 'settings.password'
                }
            })
        })
        , connectionCodeGrid: M.GridView.design({
              childViews: 'connectionCodeLabel connectionCodeInput'
            , layout: M.TWO_COLUMNS
            , connectionCodeLabel: M.LabelView.design({
                value: M.I18N.l('connectionCode')
            })
            , connectionCodeInput: M.TextFieldView.design({
                  inputType: M.INPUT_PASSWORD
                , contentBinding: {
                      target: DigiWebApp.SettingsController
                    , property: 'settings.connectionCode'
                }
            })
        })
        , workerIdGrid: M.GridView.design({
              childViews: 'workerIdLabel workerIdInput'
            , layout: M.TWO_COLUMNS
            , workerIdLabel: M.LabelView.design({
                value: M.I18N.l('workerId')
            })
            , workerIdInput: M.TextFieldView.design({
            	    inputType: M.INPUT_NUMBER
                  , contentBinding: {
                      target: DigiWebApp.SettingsController
                    , property: 'settings.workerId'
                }
            })
        })
        , autoTransferAfterBookTimeCheck: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            , contentBinding: {
                  target: DigiWebApp.SettingsController
                , property: 'settings.autoTransferAfterBookTime'
            }
        })
        , autoTransferAfterClosingDayCheck: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            , contentBinding: {
                  target: DigiWebApp.SettingsController
                , property: 'settings.autoTransferAfterClosingDay'
            }
        })
        , stammdatenabgleichBeimAppStartCheck: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            , contentBinding: {
                  target: DigiWebApp.SettingsController
                , property: 'settings.stammdatenabgleichBeimAppStart'
            }
        })
        , autoSyncAfterBookTimeCheck: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            , contentBinding: {
                  target: DigiWebApp.SettingsController
                , property: 'settings.autoSyncAfterBookTime'
            }
        })
        , remarkIsMandatory: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            //, cssClass: 'invisibleSetting',
            , contentBinding: {
                  target: DigiWebApp.SettingsController
                , property: 'settings.remarkIsMandatory'
            }
        })
        , remarkIsOptional: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            //, cssClass: 'invisibleSetting',
            , contentBinding: {
                  target: DigiWebApp.SettingsController
                , property: 'settings.remarkIsOptional'
            }
        })
        , detailierteZeitdaten: M.SelectionListView.design({
            selectionMode: M.MULTIPLE_SELECTION
          //, cssClass: 'invisibleSetting',
          , contentBinding: {
                target: DigiWebApp.SettingsController
              , property: 'settings.detailierteZeitdaten'
          }
        })
        , useTransitionsSetting: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            , contentBinding: {
                  target: DigiWebApp.SettingsController
                , property: 'settings.useTransitionsSetting'
            }
        })
        , autoSaveGPSData: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            , contentBinding: {
                  target: DigiWebApp.SettingsController
                , property: 'settings.autoSaveGPSData'
            }
        })
        , bautagebuchLimit_autoStartUhrzeit: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            , contentBinding: {
                  target: DigiWebApp.SettingsController
                , property: 'settings.bautagebuchLimit_autoStartUhrzeit'
            }
        })
        , GPSDataIsMandatory: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            , cssClass: 'lastSelectBox'
            , contentBinding: {
                  target: DigiWebApp.SettingsController
                , property: 'settings.GPSDataIsMandatory'
            }
        })
        , ServiceApp_ermittleGeokoordinate: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            //, cssClass: 'invisibleSetting',
            , contentBinding: {
                  target: DigiWebApp.SettingsController
                , property: 'settings.ServiceApp_ermittleGeokoordinate'
            }
        })
        , ServiceApp_datenUebertragen: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            //, cssClass: 'invisibleSetting',
            , contentBinding: {
                  target: DigiWebApp.SettingsController
                , property: 'settings.ServiceApp_datenUebertragen'
            }
        })
        , ServiceApp_engeKopplung: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            //, cssClass: 'invisibleSetting',
            , contentBinding: {
                  target: DigiWebApp.SettingsController
                , property: 'settings.ServiceApp_engeKopplung'
            }
        })
        , ServiceApp_FallBack: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            //, cssClass: 'invisibleSetting',
            , contentBinding: {
                  target: DigiWebApp.SettingsController
                , property: 'settings.ServiceApp_FallBack'
            }
        })
        , ServiceApp_PORTGrid: M.GridView.design({
              childViews: 'ServiceApp_PORTLabel ServiceApp_PORTInput'
            , layout: M.TWO_COLUMNS
            , ServiceApp_PORTLabel: M.LabelView.design({
                value: M.I18N.l('ServiceApp_PORT')
            })
            , ServiceApp_PORTInput: M.TextFieldView.design({
                  contentBinding: {
                      target: DigiWebApp.SettingsController
                    , property: 'settings.ServiceApp_PORT'
                }
            })
        })
        , auftragsDetailsKoppeln: M.SelectionListView.design({
              selectionMode: M.MULTIPLE_SELECTION
            //, cssClass: 'invisibleSetting',
            , contentBinding: {
                  target: DigiWebApp.SettingsController
                , property: 'settings.auftragsDetailsKoppeln'
            }
        })

        , terminlisteEinstellungen: M.ContainerView.design({
      	  		  childViews: 'terminlisteEinstellungen_titel terminliste_keineKuenstlichenTermine terminliste_ignoriereAuftragszeitraum' // terminliste_keineKuenstlichenTermine terminliste_ignoriereAuftragszeitraum'
      	  		, cssClass: 'terminlisteEinstellungen'
		        , terminlisteEinstellungen_titel: M.ListView.design({
	        	  	  isDividedList: YES
	                , contentBinding: {
		            	  target: DigiWebApp.SettingsController
		            	, property: 'terminlisteEinstellungen_titel'
		        	}
		        	, listItemTemplateView: DigiWebApp.DummyTemplateView
	  	      	})
	  	      	, terminliste_keineKuenstlichenTermine: M.SelectionListView.design({
	        	  	  selectionMode: M.MULTIPLE_SELECTION
		            , contentBinding: {
		                  target: DigiWebApp.SettingsController
		                , property: 'settings.terminliste_keineKuenstlichenTermine'
		            }
		        })
		        , terminliste_ignoriereAuftragszeitraum: M.SelectionListView.design({
		              selectionMode: M.MULTIPLE_SELECTION
		            , contentBinding: {
		                  target: DigiWebApp.SettingsController
		                , property: 'settings.terminliste_ignoriereAuftragszeitraum'
		            }
		        })
        })

        , festePauseStornierenEinstellungen: M.ContainerView.design({
		  		  childViews: 'festePauseStornierenEinstellungen_titel festePauseStornieren_nurAktuellerTag'
		  		, cssClass: 'festePauseStornierenEinstellungen'
		        , festePauseStornierenEinstellungen_titel: M.ListView.design({
	      	  	  isDividedList: YES
	              , contentBinding: {
		            	  target: DigiWebApp.SettingsController
		            	, property: 'festePauseStornierenEinstellungen_titel'
		        	}
		        	, listItemTemplateView: DigiWebApp.DummyTemplateView
		      	})
		      	, festePauseStornieren_nurAktuellerTag: M.SelectionListView.design({
	      	  	  selectionMode: M.MULTIPLE_SELECTION
		            , contentBinding: {
		                  target: DigiWebApp.SettingsController
		                , property: 'settings.festePauseStornieren_nurAktuellerTag'
		            }
		        })
        })
	  
        , grid: M.GridView.design({
              childViews: 'button icon'
            , layout: {
                  cssClass: 'digiButton'
                , columns: {
                      0: 'button'
                    , 1: 'icon'
                }
            }
            , button: M.ButtonView.design({
                  value: M.I18N.l('assume')
                , cssClass: 'digiButton'
                , anchorLocation: M.RIGHT
                , events: {
                    tap: {
                          target: DigiWebApp.SettingsController
                        , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} this.save();}
                    }
                }
            })
            , icon: M.ImageView.design({
                value: 'theme/images/icon_bookTime.png'
            })
        })
    })
    	
    , tabBar: DigiWebApp.TabBar

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: TerminlisteTemplateView
// ==========================================================================

DigiWebApp.TerminlisteTemplateView = M.ListItemView.design({

      isSelectable: YES

    , childViews: 'betreff beschreibung auftragsBezeichnung positionsBezeichnung positionBegin positionEnd spacer1 von bis'

    , events: {
        tap: {
			action: function(id, m_id, a, b) {
						var doShow = NO;
					    var view = M.ViewManager.getViewById(id);
					    var positionId = view.positionId;
					    var position = null;
						_.each(DigiWebApp.Position.find(), function(item) {
							if (item.get("id") === positionId) {
								position = item;
							}
						});
						
						if (position !== null) {
							var auftrag = _.find(DigiWebApp.Order.find(), function(el) { 
								return parseInt(position.get("orderId")) === parseInt(el.get("id"));
							});
							if (DigiWebApp.SettingsController.featureAvailable("406")) {
								// Auftragsinfo
								if (typeof(M.ViewManager.getView('orderInfoPage', 'order').getSelection()) === "undefined") {
									DigiWebApp.OrderInfoController.init();
								}
								DigiWebApp.NavigationController.toOrderInfoPageTransition();
								M.ViewManager.getView('orderInfoPage', 'order').setSelection(position.get("orderId"));
								DigiWebApp.OrderInfoController.activeOrder = [auftrag];
								DigiWebApp.OrderInfoController.setPositions();
								M.ViewManager.getView('orderInfoPage', 'position').setSelection(position.get("id"));
								DigiWebApp.OrderInfoController.activePosition = [position];
								DigiWebApp.OrderInfoController.setItem();
							} else {
								// vorausgewählte Buchungsliste
								if (typeof(M.ViewManager.getView('bookingPage', 'order').getSelection()) === "undefined") {
									DigiWebApp.BookingController.init();
								}
								DigiWebApp.NavigationController.toBookTimePageTransition();
								M.ViewManager.getView('bookingPage', 'order').setSelection(position.get("orderId"));
								DigiWebApp.SelectionController.setPositions();
								M.ViewManager.getView('bookingPage', 'position').setSelection(position.get("id"));
								DigiWebApp.SelectionController.setActivities(YES);
							}
						}
			}
		}
	}


	, betreff: M.LabelView.design({
	    cssClass: 'bold unselectable'
	  , computedValue: {
	        valuePattern: '<%= betreff %>'
	      , operation: function(v) {
				var text = v;
				if (text !== "" && typeof(text) !== "undefined" && text !== "undefined" && text !== "null" && text !== null) {
					return M.I18N.l('betreff') + ': ' + text;
				} else {
					return '';
				}
	      }
	  }
	})
	
	, beschreibung: M.LabelView.design({
	    cssClass: 'normal unselectable'
	  , computedValue: {
	        valuePattern: '<%= beschreibung %>'
	      , operation: function(v) {
				var text = v;
				if (text !== "" && typeof(text) !== "undefined" && text !== "undefined" && text !== "null" && text !== null) {
					return M.I18N.l('beschreibung') + ': ' + text + "<br/><br/>";
				} else {
					return '';
				}
	      }
	  }
	})

	//	  auftragsBezeichnung: "6657Heim"
	, auftragsBezeichnung: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= positionId %>'
          , operation: function(v) {
				var text = "";
				var pos = _.find(DigiWebApp.Position.find(), function(el) {
					return parseInt(el.get("id")) === parseInt(v);
				});
				if (pos) {
					var obj = _.find(DigiWebApp.Order.find(), function(el) {
						return parseInt(el.get("id")) === parseInt(pos.get("orderId"));
					});
					if (obj) {
						text = obj.get("name");
					}
				}
				if (text !== "" && typeof(text) !== "undefined" && text !== "undefined" && text !== "null" && text !== null) {
					return M.I18N.l('order') + ': ' + text;
				} else {
					return '';
				}
          }
      }
	})

	//	  positionsBezeichnung: "6657Heim"
	, positionsBezeichnung: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= positionId %>'
          , operation: function(v) {
				var text = "";
				var obj = _.find(DigiWebApp.Position.find(), function(el) {
					return parseInt(el.get("id")) === parseInt(v);
				});
				if (obj) {
					text = obj.get("name");
				}
				if (text !== "" && typeof(text) !== "undefined" && text !== "undefined" && text !== "null" && text !== null) {
					return M.I18N.l('position') + ': ' + text;
				} else {
					return '';
				}
          }
      }
	})
      
	, positionBegin: M.LabelView.design({
        cssClass: 'normal unselectable'
      , isInline: YES
      , computedValue: {
            valuePattern: '<%= positionId %>'
          , operation: function(v) {
				var text = "";
				var obj = _.find(DigiWebApp.Position.find(), function(el) {
					return parseInt(el.get("id")) === parseInt(v);
				});
				if (obj) {
					text = obj.get("positionBegin");
				}
				if (text !== "" && typeof(text) !== "undefined" && text !== "undefined" && text !== "null" && text !== null) {
					return M.I18N.l('positionZeitraum') + ": " + text;
				} else {
					return '';
				}
          }
      }
	})

	, positionEnd: M.LabelView.design({
        cssClass: 'normalInline unselectable'
      , isInline: YES
      , computedValue: {
            valuePattern: '<%= positionId %>'
          , operation: function(v) {
				var text = "";
				var obj = _.find(DigiWebApp.Position.find(), function(el) {
					return parseInt(el.get("id")) === parseInt(v);
				});
				if (obj) {
					text = obj.get("positionEnd");
				}
				if (text !== "" && typeof(text) !== "undefined" && text !== "undefined" && text !== "null" && text !== null) {
					return ' - ' + text;
				} else {
					return ' - ' + M.I18N.l('open');
				}
          }
      }
	})

	, spacer1: M.LabelView.design({
	    value: ' '
	})

	, von: M.LabelView.design({
        cssClass: 'bold unselectable'
      , isInline: YES
      , computedValue: {
            valuePattern: '<%= von %>'
          , operation: function(v) {
				if (v && v.indexOf("00:00:00") === -1) {
					var uhrzeit = v.split(" ")[1];
					return uhrzeit.split(":")[0] + ":" + uhrzeit.split(":")[1]
				} else {
					return '';
				}
          }
      }
	})

	, bis: M.LabelView.design({
        cssClass: 'boldInline unselectable'
      , isInline: YES
      , computedValue: {
            valuePattern: '<%= bis %>'
          , operation: function(v) {
				if (v && v.indexOf("23:59:59") === -1) {
					var uhrzeit = v.split(" ")[1];
					return " - " + uhrzeit.split(":")[0] + ":" + uhrzeit.split(":")[1]
				} else {
					return '';
				}
          }
      }
	})

});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: TerminlisteVorZurueckTabBar
// ==========================================================================

DigiWebApp.TerminlisteVorZurueckTabBar = M.TabBarView.design({

      childViews: 'tabItemZurueck tabItemDayToShow tabItemVor'

    , anchorLocation: M.BOTTOM

    , isFixed: YES 

    , transition: M.TRANSITION.FADE

    , name: 'terminlistevorzuruecktabbar'

    , tabItemZurueck: M.TabBarItemView.design({
          value: M.I18N.l('backward')
        , page: 'terminlistePage'
        , icon: 'arrow-l'
        , switchPage: function() {
    		try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
			DigiWebApp.TerminlisteVorZurueckTabBar.backwardHandler();
    	}
    })

    , tabItemDayToShow: M.TabBarItemView.design({
          value: ''
        , page: 'terminlistePage'
        , icon: ''
    })

    , tabItemVor: M.TabBarItemView.design({
          value: M.I18N.l('forward')
        , page: 'terminlistePage'
        , icon: 'arrow-r'
        , switchPage: function() {
    		try{DigiWebApp.ApplicationController.vibrate();}catch(e3){}
    		DigiWebApp.TerminlisteVorZurueckTabBar.forwardHandler();
    	}
    })
        
    , backwardHandler: function() {
		//DigiWebApp.TerminlisteController.set('items', null);
		DigiWebApp.TerminlisteController.items = null;
		var today = D8.create(DigiWebApp.TerminlisteController.datum);
		var yesterday = today.yesterday();
		DigiWebApp.TerminlisteController.set('datum', today.addMinutes(-today.date.getTimezoneOffset() + yesterday.date.getTimezoneOffset()).addDays(-1).format("dd.mm.yyyy"));
		DigiWebApp.TerminlisteController.init(YES);
	}

	, forwardHandler: function() {
		//DigiWebApp.TerminlisteController.set('items', null);
		DigiWebApp.TerminlisteController.items = null;
		var today = D8.create(DigiWebApp.TerminlisteController.datum);
		var tomorrow = today.tomorrow();
		DigiWebApp.TerminlisteController.set('datum', today.addMinutes(-today.date.getTimezoneOffset() + tomorrow.date.getTimezoneOffset()).addDays(1).format("dd.mm.yyyy"));
		DigiWebApp.TerminlisteController.init(YES);
	}

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: TerminlistePage
// ==========================================================================

m_require('app/views/TerminlisteTemplateView');
m_require('app/views/TerminlisteVorZurueckTabBar.js');

DigiWebApp.TerminlistePage = M.PageView.design({

    /* Use the 'events' property to bind events like 'pageshow' */
      events: {
		pagebeforeshow: {
            target: DigiWebApp.TerminlisteController,
            action: 'init'
        }
    }

    , childViews: 'header content tabBar'

    , cssClass: 'terminlistePage'

    , header: M.ToolbarView.design({
          childViews: 'backButton titleGrid'
        , cssClass: 'header'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                    //  target: DigiWebApp.NavigationController
                    //, action: 'backToDashboardPagePOP'
        			action: function() {
        				try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
						if (DigiWebApp.SettingsController.featureAvailable('404')) {
			        		DigiWebApp.NavigationController.backToButtonDashboardPagePOP();
						} else {
			        		DigiWebApp.NavigationController.backToDashboardPagePOP();
						}
        			}
                }
            }
        })
        , titleGrid: M.GridView.design({
        	  childViews: 'titleDay titleTextFieldView'
            , anchorLocation: M.CENTER
            , layout: { 
        		cssClass: 'dateTitleGrid' 
	    		, columns: { 
	    		      0: 'dateTitleGridColumn1' 
	    		    , 1: 'dateTitleGridColumn2' 
	    		}
	        }
	        , titleDay: M.LabelView.design({
	        	computedValue: {
		            contentBinding: {
		                target: DigiWebApp.TerminlisteController,
		                property: 'datumAsDate'
		            },
		            value: 0,
		            operation: function(v) {
		                return DigiWebApp.ApplicationController.dayNamesShort[D8.create(v).date.getDay()].substring(0,2);
		            }
		        }
	        	, cssClass: 'dateTitleDay'
	        })
	        , titleTextFieldView: M.TextFieldView.design({
	              value: ''
	            , cssClass: 'dateTitle'
	            , anchorLocation: M.CENTER
	            , inputType: M.INPUT_DATE
	            , contentBinding: {
	        		  target: DigiWebApp.TerminlisteController
	        		, property: 'datumAsDate'
	        	}
		        , contentBindingReverse: {
		    		  target: DigiWebApp.TerminlisteController
		    		, property: 'datumAsDate'
		    	}
	            , events: {
	            	  blur: {
	            		action: function() {
	            			if (DigiWebApp.TerminlisteController.datumAsDate) {
	            				var datumArray = DigiWebApp.TerminlisteController.datumAsDate.split("-");
								DigiWebApp.TerminlisteController.set("datum", datumArray[2] + "." + datumArray[1] + "." + datumArray[0]);
	            			}
	            		}
	            	}
		            , tap: {
		                action: function() {
	            			try{DigiWebApp.ApplicationController.vibrate();}catch(e3){}
	        			}
		            }
		        }
	        })
        })
        , titleLabel: M.LabelView.design({
              value: M.I18N.l('Terminliste')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
            childViews: 'terminliste'
          , terminliste: M.ListView.design({
        	  	  isDividedList: YES
                , contentBinding: {
	                  target: DigiWebApp.TerminlisteController
	                , property: 'items'
	            }
	            , listItemTemplateView: DigiWebApp.TerminlisteTemplateView
	      })
    })

    , tabBar: DigiWebApp.TerminlisteVorZurueckTabBar

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: TimeDataForEditTemplateView
// ==========================================================================

DigiWebApp.TimeDataForEditTemplateView = M.ListItemView.design({

      isSelectable: NO

    , childViews: 'date order position activity latitude longitude'

    , events: {
        tap: {
			action: function(id, m_id) {
			}
        }
    }

	, date: M.LabelView.design({
          cssClass: 'date'
        , computedValue: {
              valuePattern: '<%= date %>'
            //  value: '01.01.2011, 08:00 - 08:20 Uhr, 0:20 h'
            , operation: function(myV) {
                var v = myV.split(',');
                //var date1 = M.Date.create(Number(v[0]));
                //var date2 = v[1] !== "0" ? M.Date.create(Number(v[1])) : null;
                var date1;
                var date2;
                var dateStart;
                var dateEnd;
                if (typeof(v[2]) === "undefined" ) {
                	dateStart = new Date(Number(v[0]));
                    date1 = M.Date.create(dateStart.getTime());
                    date2 = null;
                    if (v[1] !== "0") {
                    	dateEnd = new Date(Number(v[1]));
                    	date2 = M.Date.create(dateEnd.getTime());
                    }
                } else {
                	dateStart = new Date(Number(v[0]) + (1000 * 60 * (new Date().getTimezoneOffset() - Number(v[2]))));
                    date1 = M.Date.create(dateStart.getTime());
                    date2 = null;
                    if (v[1] !== "0") {
                    	var dateEnd = new Date(Number(v[1]) + (1000 * 60 * (new Date().getTimezoneOffset() - Number(v[2]))));
                    	date2 = M.Date.create(dateEnd.getTime());
                    }
                }
                if (date2) {
                    // cut minutes down => 12:05:59 is going to be 12:05:00
                    date1 = M.Date.create(date1.format('mm/dd/yyyy HH:MM'));
                    date2 = M.Date.create(date2.format('mm/dd/yyyy HH:MM'));

                    if (date1.format('mm/dd/yyyy HH:MM') === date2.format('mm/dd/yyyy HH:MM')) { // if booking is closed in the same minute
                        return date1.format('dd.mm.yyyy') + ', ' + date1.format('HH:MM') + ' - ' + date2.format('HH:MM') + ' ' + M.I18N.l('oclock') + ', 00:01 h';
                    } else {
                        var timeBetween = date1.timeBetween(date2, M.MINUTES);
                        if (timeBetween < 1) {
                            timeBetween = M.Math.round(timeBetween, M.CEIL);
                        } else {
                            timeBetween = M.Math.round(date1.timeBetween(date2, M.MINUTES), M.FLOOR);
                        }
                        if (timeBetween > 59) {
                            var hours = M.Math.round(timeBetween / 60, M.FLOOR);
                            hours = hours < 10 ? '0' + hours : hours;
                            var minutes = timeBetween % 60;
                            minutes = minutes < 10 ? '0' + minutes : minutes;
                            timeBetween = hours + ':' + minutes;
                        } else {
                            timeBetween = '00:' + (timeBetween < 10 ? '0' : '') + timeBetween;
                        }
                        return date1.format('dd.mm.yyyy') + ', ' + date1.format('HH:MM') + ' - ' + date2.format('HH:MM') + ' ' + M.I18N.l('oclock') + ', ' + timeBetween + ' h';
                    }
                } else {
                    return date1.format('dd.mm.yyyy') + ', ' + date1.format('HH:MM') + ' - ' + M.I18N.l('now') + ' (' + M.Date.create().format('HH:MM') + ')';
                }

            }
        }
    })

    , order: M.LabelView.design({
          cssClass: 'application'
        , computedValue: {
              valuePattern: '<%= orderId %>'
            , operation: function(v) {
                var order = _.select(DigiWebApp.Order.findSorted().concat(DigiWebApp.HandOrder.findSorted()), function(o) {
                    if (o) return v == o.get('id') || v == o.get('name'); // || get('name') is for checking handOrders also
                });
                if (order && order.length > 0) {
                    order = order[0];
                    if (DigiWebApp.SettingsController.globalDebugMode) {
                    	return M.I18N.l('order') + ': ' + order.get('name') + ' (' + order.get('id') + ')';
                    } else {
                    	return M.I18N.l('order') + ': ' + order.get('name');
                    }
                } else {
                    return M.I18N.l('order') + ': ' + M.I18N.l('notDefined');
                }
            }
        }
    })

    , position: M.LabelView.design({
          cssClass: 'position'
        , computedValue: {
              valuePattern: '<%= positionId %>'
            , operation: function(v) {
                if(v) {
                    var position = _.select(DigiWebApp.Position.findSorted(), function(p) {
                        if (p) return v == p.get('id');
                    });
                    if (position && position.length > 0) {
                        position = position[0];
                        return M.I18N.l('position') + ': ' + position.get('name');
                    } else {
                        return M.I18N.l('position') + ': ' + M.I18N.l('notDefined');
                    }
                } else {
                    return M.I18N.l('position') + ': ' + M.I18N.l('unknown');
                }

            }
        }
    })

    , activity: M.LabelView.design({
          cssClass: 'activity'
        , computedValue: {
              valuePattern: '<%= activityId %>'
            , operation: function(v) {
                if (v) {
                	var activity = null;
                	if (parseInt(v) !== 0) {
                        activity = _.select(DigiWebApp.Activity.findSorted(), function(a) {
                        	if (a) return v == a.get('id');
                        });
                	}
                    if (activity && activity.length > 0) {
                        activity = activity[0];
                        return M.I18N.l('activity') + ': ' + activity.get('name');
                    } else {
                        return M.I18N.l('activity') + ': ' + M.I18N.l('notDefined');
                    }
                } else {
                    return M.I18N.l('activity') + ': ' + M.I18N.l('unknown');
                }
            }
        }
    })
    
    , latitude: M.LabelView.design({
          cssClass: 'location'
        , computedValue: {
              valuePattern: '<%= latitude %>'
            , operation: function(v) {
                if (v > 0) {
                	var str = new Number(v);
               		return M.I18N.l('latitude') + ': ' + str.toFixed(6);
                } else {
                    //return M.I18N.l('latitude') + ': ' + M.I18N.l('GPSnotactive');
                	return '';
                }
            }
        }
    })

    , longitude: M.LabelView.design({
          cssClass: 'location'
        , computedValue: {
              valuePattern: '<%= longitude %>'
            , operation: function(v) {
                if (v > 0) { 
                	var str = new Number(v);
               		return M.I18N.l('longitude') + ': ' + str.toFixed(6);
                } else {
                    //return M.I18N.l('longitude') + ': ' + M.I18N.l('GPSnotactive');
                    return '';
                }
            }
        }
    })

    , remark: M.LabelView.design({
          cssClass: 'remark'
        , computedValue: {
              valuePattern: '<%= remark %>'
            , operation: function(v) {
                if (v) { 
               		return M.I18N.l('remark') + ': ' + v;
                } else {
                    return '';
                }
            }
        }
    })

});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: EditTimeDataPage
// ==========================================================================

m_require('app/views/TimeDataForEditTemplateView');

DigiWebApp.EditTimeDataPage = M.PageView.design({

      bookingToEdit: null
    
    , signaturePadAPI: null
	
	/* Use the 'events' property to bind events like 'pageshow' */
    , events: {
		pagebeforeshow: {
			action: function() {
	
				// load data
				DigiWebApp.BookingController.setTimeDataForEdit();
				//DigiWebApp.BookingController.setNotBookedBookings();
				
        		// Feature 405 (Unterschrift)
        		if ((DigiWebApp.SettingsController.featureAvailable('405')) && (typeof window.requestFileSystem !== "undefined")) {
        			$('#' + DigiWebApp.EditTimeDataPage.content.signature.id).show();
					// init canvas
					var sigPadOptions = {
							    bgColour : '#fff'
							  , lineTop: 130
							  , drawOnly : true
							};
					if (DigiWebApp.EditTimeDataPage.signaturePadAPI === null) {
						DigiWebApp.EditTimeDataPage.signaturePadAPI = $('.sigPad').signaturePad(sigPadOptions);
					}
        		} else {
        			$('#' + DigiWebApp.EditTimeDataPage.content.signature.id).hide();
        		}
						
        		// load remark
        		if (typeof(DigiWebApp.EditTimeDataPage.bookingToEdit) !== "undefined" && DigiWebApp.EditTimeDataPage.bookingToEdit !== null) {
					if (typeof(DigiWebApp.EditTimeDataPage.bookingToEdit.get('remark')) !== "undefined" && DigiWebApp.EditTimeDataPage.bookingToEdit.get('remark') !== null) {
						$('#' + DigiWebApp.EditTimeDataPage.content.remarkInput.id).val(DigiWebApp.EditTimeDataPage.bookingToEdit.get('remark'));
						M.ViewManager.getView('editTimeDataPage', 'remarkInput').value = DigiWebApp.EditTimeDataPage.bookingToEdit.get('remark');
					} else {
						$('#' + DigiWebApp.EditTimeDataPage.content.remarkInput.id).val("");
						M.ViewManager.getView('editTimeDataPage', 'remarkInput').value = "";
					}
				} else {
					$('#' + DigiWebApp.EditTimeDataPage.content.remarkInput.id).val("");
					M.ViewManager.getView('editTimeDataPage', 'remarkInput').value = "";
				}
        		
				// load gefahreneKilometer
        		if (typeof(DigiWebApp.EditTimeDataPage.bookingToEdit) !== "undefined" && DigiWebApp.EditTimeDataPage.bookingToEdit !== null) {
					if (typeof(DigiWebApp.EditTimeDataPage.bookingToEdit.get('gefahreneKilometer')) !== "undefined" && DigiWebApp.EditTimeDataPage.bookingToEdit.get('gefahreneKilometer') !== null) {
						$('#' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id).val(DigiWebApp.EditTimeDataPage.bookingToEdit.get('gefahreneKilometer'));
						M.ViewManager.getView('editTimeDataPage', 'gefahreneKilometerInput').value = DigiWebApp.EditTimeDataPage.bookingToEdit.get('gefahreneKilometer');
					} else {
						$('#' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id).val("0");
						M.ViewManager.getView('editTimeDataPage', 'gefahreneKilometerInput').value = "0";
					}
				} else {
					$('#' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id).val("0");
					M.ViewManager.getView('editTimeDataPage', 'gefahreneKilometerInput').value = "0";
				}

        		// enable feature 403
        		if (DigiWebApp.SettingsController.featureAvailable('403')) {
	        		// show label
					$('[for=' + DigiWebApp.EditTimeDataPage.content.remarkInput.id  + ']').each(function() {
	    					$(this).show();
	    			});
					// show textarea
	        		$('[id=' + DigiWebApp.EditTimeDataPage.content.remarkInput.id  + ']').each(function() {
	    					$(this).show();
	    			});
				} else {
					// hide label
	        		$('[for=' + DigiWebApp.EditTimeDataPage.content.remarkInput.id  + ']').each(function() {
	    					$(this).hide();
	    			});
					// hide textarea
					$('[id=' + DigiWebApp.EditTimeDataPage.content.remarkInput.id  + ']').each(function() {
	    					$(this).hide();
	    			});
				}
//				if (DigiWebApp.SettingsController.featureAvailable('403')) {
//					$('#' + DigiWebApp.EditTimeDataPage.content.remarkInput.id).parent().show()
//					$('#' + DigiWebApp.EditTimeDataPage.content.remarkInput.id).show();
//					$('label[for="' + DigiWebApp.EditTimeDataPage.content.remarkInput.id + '"]').show();
//				} else {
//					$('#' + DigiWebApp.EditTimeDataPage.content.remarkInput.id).parent().hide()
//					$('#' + DigiWebApp.EditTimeDataPage.content.remarkInput.id).hide();
//					$('label[for="' + DigiWebApp.EditTimeDataPage.content.remarkInput.id + '"]').hide();
//				}
        		
				// gefahreneKilometer ausblenden falls Freischaltung dazu fehlt
        		if (DigiWebApp.SettingsController.featureAvailable('422')) {
        			if (typeof(DigiWebApp.BookingController.currentBooking) !== "undefined" && DigiWebApp.BookingController.currentBooking !== null) {
	        			var currentActivity = null;
	        			_.each(DigiWebApp.Activity.find(), function(el) {if (el.get("id") === parseInt(DigiWebApp.BookingController.currentBooking.get("activityId"))) currentActivity = el;});
	        			if (currentActivity !== null && currentActivity.get("istFahrzeitRelevant")) {
			        		// show label
							$('[for=' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id  + ']').each(function() {
			    					$(this).show();
			    			});
							// show textarea
			        		$('[id=' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id  + ']').each(function() {
			    					$(this).show();
			    			});
	        			} else {
	    					// hide label
	    	        		$('[for=' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id  + ']').each(function() {
	    	    					$(this).hide();
	    	    			});
	    					// hide textarea
	    					$('[id=' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id  + ']').each(function() {
	    	    					$(this).hide();
	    	    			});
	        			}
        			} else {
    					// hide label
    	        		$('[for=' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id  + ']').each(function() {
    	    					$(this).hide();
    	    			});
    					// hide textarea
    					$('[id=' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id  + ']').each(function() {
    	    					$(this).hide();
    	    			});
        			}
				} else {
					// hide label
	        		$('[for=' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id  + ']').each(function() {
	    					$(this).hide();
	    			});
					// hide textarea
					$('[id=' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id  + ']').each(function() {
	    					$(this).hide();
	    			});
				}
//				if (DigiWebApp.SettingsController.featureAvailable('422')) {
//					$('#' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id).parent().show()
//					$('#' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id).show();
//					$('label[for="' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id + '"]').show();
//				} else {
//					$('#' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id).parent().hide()
//					$('#' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id).hide();
//					$('label[for="' + DigiWebApp.EditTimeDataPage.content.gefahreneKilometerInput.id + '"]').hide();
//				}

        		// Feature 405 (Unterschrift)
        		if ((DigiWebApp.SettingsController.featureAvailable('405')) && (typeof window.requestFileSystem !== "undefined")) {
        			// load signature
        			DigiWebApp.EditTimeDataPage.bookingToEdit.readFromFile(function(fileContent){
        				if (fileContent && (fileContent !== "")) {
       						DigiWebApp.EditTimeDataPage.signaturePadAPI.regenerate(fileContent);
        				} else {
        					DigiWebApp.EditTimeDataPage.signaturePadAPI.clearCanvas();
        				}
        			}, function() {
        				DigiWebApp.EditTimeDataPage.signaturePadAPI.clearCanvas();
        			});
        		}
				
			}
        }
    }

    , myCallback: function() {

    }
    
    , tab_action_timeoutvar: null    
    
    , tab_action: function() {
    	clearTimeout(DigiWebApp.EditTimeDataPage.tab_action_timeoutvar);
    	
    	var unterschriftString = "";
    	// Feature 405 (Unterschrift)
		if ((DigiWebApp.SettingsController.featureAvailable('405')) && (typeof window.requestFileSystem !== "undefined") && DigiWebApp.EditTimeDataPage.signaturePadAPI) {
			//unterschriftImageString = DigiWebApp.EditTimeDataPage.signaturePadAPI.getSignatureImage();
    		unterschriftString = DigiWebApp.EditTimeDataPage.signaturePadAPI.getSignatureString();
			//var unterschriftRawValue = $('#' + DigiWebApp.EditTimeDataPage.content.signature.signatureform.signaturecanvas.id).val();
    	
			//console.log(DigiWebApp.EditTimeDataPage.signaturePadAPI);
			//console.log(unterschriftImageString);
			
		}
    	
    	if (M.ViewManager.getView('editTimeDataPage', 'remarkInput').value.length > 255) {
	        DigiWebApp.ApplicationController.DigiLoaderView.hide();
    		DigiWebApp.ApplicationController.nativeAlertDialogView({
    			  title: M.I18N.l('remarkTooLong')
    			, message: M.I18N.l('remarkTooLongMessage')
    		});
		} else {
			
			if ( (DigiWebApp.SettingsController.getSetting('remarkIsMandatory')) && (M.ViewManager.getView('editTimeDataPage', 'remarkInput').value === '') ) {
		        DigiWebApp.ApplicationController.DigiLoaderView.hide();
	    		DigiWebApp.ApplicationController.nativeAlertDialogView({
	    			  title: M.I18N.l('remarkIsMandatory')
	    			, message: M.I18N.l('remarkIsMandatoryMessage')
	    		});
			} else {
	            //if (/[[^a-zA-Z0-9_-äöüÄÖÜ,. !?;:/\\@€=]]+/.test(M.ViewManager.getView('editTimeDataPage', 'remarkInput').value)) {
	            if (DigiWebApp.ApplicationController.sonderzeichenCheck(M.ViewManager.getView('editTimeDataPage', 'remarkInput').value)) {
	    	        DigiWebApp.ApplicationController.DigiLoaderView.hide();
	                DigiWebApp.ApplicationController.nativeAlertDialogView({
	                      title: M.I18N.l('specialCharProblem')
	                    , message: M.I18N.l('specialCharProblemMsg')
	                });
	            } else {
    				// save remark und gefahreneKilometer in bookingToEdit
    				DigiWebApp.EditTimeDataPage.bookingToEdit.set('remark', M.ViewManager.getView('editTimeDataPage', 'remarkInput').value);
    				DigiWebApp.EditTimeDataPage.bookingToEdit.set('gefahreneKilometer', M.ViewManager.getView('editTimeDataPage', 'gefahreneKilometerInput').value);
    				DigiWebApp.EditTimeDataPage.bookingToEdit.save();

    				if (unterschriftString !== "") {
    					// save signature
    					DigiWebApp.EditTimeDataPage.bookingToEdit.set('fileType', DigiWebApp.ApplicationController.CONSTTextFiletype);
    					DigiWebApp.EditTimeDataPage.bookingToEdit.set("unterschrift_breite", DigiWebApp.EditTimeDataPage.content.signature.signatureform.signaturecanvas.canvasWidth);
    					DigiWebApp.EditTimeDataPage.bookingToEdit.set("unterschrift_hoehe", DigiWebApp.EditTimeDataPage.content.signature.signatureform.signaturecanvas.canvasHeight);
    					DigiWebApp.EditTimeDataPage.bookingToEdit.save();
    					DigiWebApp.EditTimeDataPage.bookingToEdit.saveToFile(unterschriftString, DigiWebApp.EditTimeDataPage.myCallback);
    				} else {
    					DigiWebApp.EditTimeDataPage.myCallback();
    				}
	            }
			}
		}
    }

    , childViews: 'header content'

    , cssClass: 'remarkPage'

    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.backToTimeDataPage();}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('EditTimeDataPageTitle')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
          childViews: 'orderbox remarkInput gefahreneKilometerInput signature saveGrid'
        
        , orderbox: M.ListView.design({
        	
            contentBinding: {
            	  target: DigiWebApp.BookingController
            	, property: 'timeDataForEdit'
        	}

        	, listItemTemplateView: DigiWebApp.TimeDataForEditTemplateView
        	
        })
        
        , remarkInput: M.TextFieldView.design({
                  label: M.I18N.l('remark')
                , cssClass: 'remarkInput'
                , hasMultipleLines: YES
                , initialText: "max. 255 " + M.I18N.l('characters')
                , numberOfChars: 255
        })
            
        , gefahreneKilometerInput: M.TextFieldView.design({
                  label: M.I18N.l('gefahreneKilometer')
                , cssClass: 'remarkInput'
                , hasMultipleLines: NO
        	    , inputType: M.INPUT_NUMBER
        })
            
        , signature: M.ContainerView.design({
        	
        	  childViews: 'signatureform'
        		  
            , cssClass: 'signaturecanvas marginTop20 marginBottom20'

        	, signatureform: M.FormView.design({
            	
            	  childViews: 'signaturecanvas'
            	
            	, signaturecanvas: M.CanvasView.design({

            		  label: M.I18N.l('signature')

            		, canvasWidth: 300
                    , canvasHeight: 150
                	
                    , render: function() {
                    	if (this.label) {
                    		this.html += '<label for="' + this.id + '" class="signaturecanvaslabel">' + this.label + '</label>';
                    	}
    					this.html += '  <div id="' + this.id + '_container" class="sig sigWrapper">';
        				this.html += '    <canvas id="' + this.id + '_canvas" class="pad" width="' + this.canvasWidth + 'px" height="' + this.canvasHeight + 'px"></canvas>';
        				this.html += '    <input id="' + this.id + '" type="hidden" name="output" class="output">';
        				this.html += '  </div>';
                    	return this.html;
                	}
    	        })
                	
                , render: function() {
            		this.html += '<form method="post" action="" class="sigPad">';
                	this.renderChildViews();
    				this.html += '</form>';
                	return this.html;
            	}
            })
        })
        	        
        , saveGrid: M.GridView.design({
              childViews: 'saveButton icon'
            , layout: {
                  cssClass: 'digiButton marginTop25'
                , columns: {
                      0: 'saveRemarkButton'
                    , 1: 'icon'
                }
            }
            
            , saveButton: M.ButtonView.design({
                  value: M.I18N.l('assume')
                , cssClass: 'digiButton'
                , anchorLocation: M.RIGHT
                , events: {
                    tap: {
            			action: function() {
            				try{DigiWebApp.ApplicationController.vibrate();}catch(e3){} 
            				DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('Save'));
            				DigiWebApp.EditTimeDataPage.tab_action_timeoutvar = setTimeout("DigiWebApp.EditTimeDataPage.tab_action();", 50);
            			}
                    }
                }
            })
            , icon: M.ImageView.design({
                value: 'theme/images/icon_bookTime.png'
            })
        })
    })
});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: RemarkPage
// ==========================================================================

m_require('app/views/TimeDataForEditTemplateView');

DigiWebApp.RemarkPage = M.PageView.design({

    /* Use the 'events' property to bind events like 'pageshow' */
      events: {
		pagebeforeshow: {
            //target: DigiWebApp.MyController,
            //action: 'init'
			action: function() {

				// load data
				DigiWebApp.BookingController.setTimeDataForRemark();
				//DigiWebApp.BookingController.setNotBookedBookings();
								
        		if (DigiWebApp.SettingsController.featureAvailable('403')) {
	        		// show label
					$('[for=' + DigiWebApp.RemarkPage.content.remarkInput.id  + ']').each(function() {
	    					$(this).show();
	    			});
					// show textarea
	        		$('[id=' + DigiWebApp.RemarkPage.content.remarkInput.id  + ']').each(function() {
	    					$(this).show();
	    			});
				} else {
					// hide label
	        		$('[for=' + DigiWebApp.RemarkPage.content.remarkInput.id  + ']').each(function() {
	    					$(this).hide();
	    			});
					// hide textarea
					$('[id=' + DigiWebApp.RemarkPage.content.remarkInput.id  + ']').each(function() {
	    					$(this).hide();
	    			});
				}
//				if (DigiWebApp.SettingsController.featureAvailable('403')) {
//					$('#' + DigiWebApp.RemarkPage.content.remarkInput.id).parent().show()
//					$('#' + DigiWebApp.RemarkPage.content.remarkInput.id).show();
//					$('label[for="' + DigiWebApp.RemarkPage.content.remarkInput.id + '"]').show();
//				} else {
//					$('#' + DigiWebApp.RemarkPage.content.remarkInput.id).parent().hide()
//					$('#' + DigiWebApp.RemarkPage.content.remarkInput.id).hide();
//					$('label[for="' + DigiWebApp.RemarkPage.content.remarkInput.id + '"]').hide();
//				}
        		
				// gefahreneKilometer ausblenden falls Freischaltung dazu fehlt
        		if (DigiWebApp.SettingsController.featureAvailable('422')) {
        			if (typeof(DigiWebApp.BookingController.currentBooking) !== "undefined" && DigiWebApp.BookingController.currentBooking !== null) {
	        			var currentActivity = null;
	        			_.each(DigiWebApp.Activity.find(), function(el) {if (el.get("id") === parseInt(DigiWebApp.BookingController.currentBooking.get("activityId"))) currentActivity = el;});
	        			if (currentActivity !== null && currentActivity.get("istFahrzeitRelevant")) {
			        		// show label
							$('[for=' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id  + ']').each(function() {
			    					$(this).show();
			    			});
							// show textarea
			        		$('[id=' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id  + ']').each(function() {
			    					$(this).show();
			    			});
	        			} else {
	    					// hide label
	    	        		$('[for=' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id  + ']').each(function() {
	    	    					$(this).hide();
	    	    			});
	    					// hide textarea
	    					$('[id=' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id  + ']').each(function() {
	    	    					$(this).hide();
	    	    			});
	        			}
        			} else {
    					// hide label
    	        		$('[for=' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id  + ']').each(function() {
    	    					$(this).hide();
    	    			});
    					// hide textarea
    					$('[id=' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id  + ']').each(function() {
    	    					$(this).hide();
    	    			});
        			}
				} else {
					// hide label
	        		$('[for=' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id  + ']').each(function() {
	    					$(this).hide();
	    			});
					// hide textarea
					$('[id=' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id  + ']').each(function() {
	    					$(this).hide();
	    			});
				}
//				if (DigiWebApp.SettingsController.featureAvailable('422')) {
//					$('#' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id).parent().show()
//					$('#' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id).show();
//					$('label[for="' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id + '"]').show();
//				} else {
//					$('#' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id).parent().hide()
//					$('#' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id).hide();
//					$('label[for="' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id + '"]').hide();
//				}
				
				// load remark
				if (typeof(DigiWebApp.BookingController.currentBooking) !== "undefined" && DigiWebApp.BookingController.currentBooking !== null) {
					if (typeof(DigiWebApp.BookingController.currentBooking.get('remark')) !== "undefined" && DigiWebApp.BookingController.currentBooking.get('remark') !== null) {
						//M.ViewManager.getView('remarkPage', 'remarkInput').setValue(DigiWebApp.BookingController.currentBooking.get('remark'));
						$('#' + DigiWebApp.RemarkPage.content.remarkInput.id).val(DigiWebApp.BookingController.currentBooking.get('remark'));
						M.ViewManager.getView('remarkPage', 'remarkInput').value = DigiWebApp.BookingController.currentBooking.get('remark');
					} else {
						//M.ViewManager.getView('remarkPage', 'remarkInput').setValue(null);
						$('#' + DigiWebApp.RemarkPage.content.remarkInput.id).val("");
						M.ViewManager.getView('remarkPage', 'remarkInput').value = "";
					}
				} else {
					//M.ViewManager.getView('remarkPage', 'remarkInput').setValue(null);
					$('#' + DigiWebApp.RemarkPage.content.remarkInput.id).val("");
					M.ViewManager.getView('remarkPage', 'remarkInput').value = "";
				}
				$('#' + DigiWebApp.RemarkPage.content.remarkInput.id)[0].focus();
				$('#' + DigiWebApp.RemarkPage.content.remarkInput.id)[0].blur();

				// load gefahreneKilometer
				if (typeof(DigiWebApp.BookingController.currentBooking) !== "undefined" && DigiWebApp.BookingController.currentBooking !== null) {
					if (typeof(DigiWebApp.BookingController.currentBooking.get('gefahreneKilometer')) !== "undefined" && DigiWebApp.BookingController.currentBooking.get('gefahreneKilometer') !== null) {
						//M.ViewManager.getView('remarkPage', 'gefahreneKilometerInput').setValue(DigiWebApp.BookingController.currentBooking.get('gefahreneKilometer'));
						$('#' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id).val(DigiWebApp.BookingController.currentBooking.get('gefahreneKilometer'));
						M.ViewManager.getView('remarkPage', 'gefahreneKilometerInput').value = DigiWebApp.BookingController.currentBooking.get('gefahreneKilometer');
					} else {
						//M.ViewManager.getView('remarkPage', 'gefahreneKilometerInput').setValue(null);
						$('#' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id).val("0");
						M.ViewManager.getView('remarkPage', 'gefahreneKilometerInput').value = "0";
					}
				} else {
					//M.ViewManager.getView('remarkPage', 'gefahreneKilometerInput').setValue(null);
					$('#' + DigiWebApp.RemarkPage.content.gefahreneKilometerInput.id).val("0");
					M.ViewManager.getView('remarkPage', 'gefahreneKilometerInput').value = "0";
				}
			}
        }
    }

    , myCallback: function() {

    }
    
    , tab_action_timeoutvar: null    
    
    , tab_action: function() {
    	clearTimeout(DigiWebApp.RemarkPage.tab_action_timeoutvar);
    	
		if (M.ViewManager.getView('remarkPage', 'remarkInput').value.length > 255) {
	        DigiWebApp.ApplicationController.DigiLoaderView.hide();
    		DigiWebApp.ApplicationController.nativeAlertDialogView({
    			  title: M.I18N.l('remarkTooLong')
    			, message: M.I18N.l('remarkTooLongMessage')
    		});
		} else {
			
			if ( (DigiWebApp.SettingsController.getSetting('remarkIsMandatory')) && (M.ViewManager.getView('remarkPage', 'remarkInput').value === '') ) {
		        DigiWebApp.ApplicationController.DigiLoaderView.hide();
	    		DigiWebApp.ApplicationController.nativeAlertDialogView({
	    			  title: M.I18N.l('remarkIsMandatory')
	    			, message: M.I18N.l('remarkIsMandatoryMessage')
	    		});
			} else {
	            //if (/[[^a-zA-Z0-9_-äöüÄÖÜ,. !?;:/\\@€=]]+/.test(M.ViewManager.getView('remarkPage', 'remarkInput').value)) {
	            if (DigiWebApp.ApplicationController.sonderzeichenCheck(M.ViewManager.getView('remarkPage', 'remarkInput').value)) {
	    	        DigiWebApp.ApplicationController.DigiLoaderView.hide();
	                DigiWebApp.ApplicationController.nativeAlertDialogView({
	                      title: M.I18N.l('specialCharProblem')
	                    , message: M.I18N.l('specialCharProblemMsg')
	                });
	            } else {
	            	
	    			// save booking
	    			DigiWebApp.BookingController.currentBooking.set('remark', M.ViewManager.getView('remarkPage', 'remarkInput').value);
	    			DigiWebApp.BookingController.currentBooking.set('gefahreneKilometer', parseInt(M.ViewManager.getView('remarkPage', 'gefahreneKilometerInput').value));
	    			DigiWebApp.BookingController.currentBooking.save();
	    			
	    			DigiWebApp.RemarkPage.myCallback();
	            }
			}
		}
    }
    
    , childViews: 'header content'

    , cssClass: 'remarkPage'

    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.backToBookTimePagePOP();}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('remark')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
          childViews: 'orderbox remarkInput gefahreneKilometerInput grid'
        
        , orderbox: M.ListView.design({
        	
              contentBinding: {
            	  target: DigiWebApp.BookingController
            	, property: 'timeDataForEdit'
        	}

        	, listItemTemplateView: DigiWebApp.TimeDataForEditTemplateView
        	
        })

        , remarkInput: M.TextFieldView.design({
                  label: M.I18N.l('remark')
                , cssClass: 'remarkInput'
                , hasMultipleLines: YES
                , initialText: "max. 255 " + M.I18N.l('characters')
                , numberOfChars: 255
        })
            
        , gefahreneKilometerInput: M.TextFieldView.design({
                  label: M.I18N.l('gefahreneKilometer')
                , cssClass: 'remarkInput'
                , hasMultipleLines: NO
        	    , inputType: M.INPUT_NUMBER
        })
            
        , grid: M.GridView.design({
        	
              childViews: 'button icon'
            , layout: {
                  cssClass: 'digiButton marginTop25'
                , columns: {
                      0: 'button'
                    , 1: 'icon'
                }
            }
            
            , button: M.ButtonView.design({
                  value: M.I18N.l('closeBooking')
                , cssClass: 'digiButton'
                , anchorLocation: M.RIGHT
                , events: {
                    tap: {
                        //  target: DigiWebApp.NavigationController
                        //, action: 'toSettingsPage'
            			action: function() {
        					DigiWebApp.ApplicationController.DigiLoaderView.show(M.I18N.l('Save'));
        					DigiWebApp.RemarkPage.tab_action_timeoutvar = setTimeout("DigiWebApp.RemarkPage.tab_action();", 50);
            			}
                    }
                }
            })
            
            , icon: M.ImageView.design({
                value: 'theme/images/icon_bookTime.png'
            })
            
        })
    })
});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: TimeDataSentDaysTemplateView
// ==========================================================================

DigiWebApp.TimeDataSentDaysTemplateView = M.ListItemView.design({

      isSelectable: YES

    , childViews: 'tagLabel'

    , events: {
        tap: {
			action: function(id, m_id) {

				_.each(DigiWebApp.SentTimeDataDays.find(), function(day) {
					if (day.m_id === m_id) {
						DigiWebApp.BookingController.dayToDisplay = day;
					}
				});
				DigiWebApp.NavigationController.toTimeDataArchivePageTransition();

			}
        }
    }

    , tagLabel: M.LabelView.design({
          cssClass: 'tagLabel unselectable'
        , computedValue: {
              valuePattern: '<%= tagLabel %>'
            , operation: function(v) {
                	return M.I18N.l('archivedTimeDataOf') + ' ' +v;
            }
        }
    })

});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: TimeDataSentTemplateView
// ==========================================================================

DigiWebApp.TimeDataSentTemplateView = M.ListItemView.design({

      isSelectable: NO

    , childViews: 'date order position activity latitude longitude genauigkeit_von eolVon erfassungsverfahren_von gpszeitstempel_von latitude_bis longitude_bis genauigkeit_bis eolBis erfassungsverfahren_bis gpszeitstempel_bis ServiceApp_Status remark gefahreneKilometer'

    , events: {
        tap: {
			action: function(id, m_id) {

			}
        }
    }

	, date: M.LabelView.design({
          cssClass: 'date unselectable'
        , computedValue: {
              valuePattern: '<%= date %>'
            //  value: '01.01.2011, 08:00 - 08:20 Uhr, 0:20 h'
            // 0: timeStampStart, 1: timeStampEnd, 2: timeZoneOffset, 3: DateStart, 4: TimeStart, 5: DateEnd, 6: TimeEnd
            , operation: function(myV) {
                var v = myV.split(',');
                //var date1 = M.Date.create(Number(v[0]));
                //var date2 = v[1] !== "0" ? M.Date.create(Number(v[1])) : null;
                var date1;
                var date2;
                var dateStart;
                var dateEnd;
                if (typeof(v[2]) === "undefined" ) {
                	dateStart = new Date(Number(v[0]));
                    date1 = M.Date.create(dateStart.getTime());
                    date2 = null;
                    if (v[1] !== "0") {
                    	dateEnd = new Date(Number(v[1]));
                    	date2 = M.Date.create(dateEnd.getTime());
                    }
                } else {
                	dateStart = new Date(Number(v[0]) + (1000 * 60 * (new Date().getTimezoneOffset() - Number(v[2]))));
                    date1 = M.Date.create(dateStart.getTime());
                    date2 = null;
                    if (v[1] !== "0") {
                    	dateEnd = new Date(Number(v[1]) + (1000 * 60 * (new Date().getTimezoneOffset() - Number(v[2]))));
                    	date2 = M.Date.create(dateEnd.getTime());
                    }
                }
                //console.log(v, dateStart, date1, date2);
                if (date2) {
                    // cut minutes down => 12:05:59 is going to be 12:05:00
                    date1 = M.Date.create(date1.format('mm/dd/yyyy HH:MM'));
                    date2 = M.Date.create(date2.format('mm/dd/yyyy HH:MM'));
                    //console.log(date1, date2);

                    if (date1.format('mm/dd/yyyy HH:MM') === date2.format('mm/dd/yyyy HH:MM')) { // if booking is closed in the same minute
                        //return date1.format('dd.mm.yyyy') + ', ' + date1.format('HH:MM') + ' - ' + date2.format('HH:MM') + ' ' + M.I18N.l('oclock') + ', 00:01 h';
                    	return v[3] + ', ' + v[4] + ' - ' + v[6] + ' ' + M.I18N.l('oclock') + ', 00:01 h';
                    } else {
                        var timeBetween = date1.timeBetween(date2, M.MINUTES);
                        if (timeBetween < 1) {
                            timeBetween = M.Math.round(timeBetween, M.CEIL);
                        } else {
                            timeBetween = M.Math.round(date1.timeBetween(date2, M.MINUTES), M.FLOOR);
                        }
                        if (timeBetween > 59) {
                            var hours = M.Math.round(timeBetween / 60, M.FLOOR);
                            hours = hours < 10 ? '0' + hours : hours;
                            var minutes = timeBetween % 60;
                            minutes = minutes < 10 ? '0' + minutes : minutes;
                            timeBetween = hours + ':' + minutes;
                        } else {
                            timeBetween = '00:' + (timeBetween < 10 ? '0' : '') + timeBetween;
                        }
                        //return date1.format('dd.mm.yyyy') + ', ' + date1.format('HH:MM') + ' - ' + date2.format('HH:MM') + ' ' + M.I18N.l('oclock') + ', ' + timeBetween + ' h';
                        return v[3] + ', ' + v[4] + ' - ' + v[6] + ' ' + M.I18N.l('oclock') + ', ' + timeBetween + ' h';
                    }


                } else {
                    //return date1.format('dd.mm.yyyy') + ', ' + date1.format('HH:MM') + ' - ' + M.I18N.l('open');
                	return v[3] + ', ' + v[4] + ' - ' + M.I18N.l('open');
                }

            }
        }
    })

    , order: M.LabelView.design({
          cssClass: 'application unselectable'
        , computedValue: {
              valuePattern: '<%= orderName %>'
            , operation: function(v) {
    			if (v !== "") {
                	return M.I18N.l('order') + ': ' + v;
                } else {
                    return M.I18N.l('order') + ': ' + M.I18N.l('notDefined');
                }
            }
        }
    })

    , position: M.LabelView.design({
          cssClass: 'position unselectable'
        , computedValue: {
              valuePattern: '<%= positionName %>'
            , operation: function(v) {
				if (v !== "") {
		        	return M.I18N.l('position') + ': ' + v;
		        } else {
		            return M.I18N.l('position') + ': ' + M.I18N.l('notDefined');
		        }
            }
        }
    })

    , activity: M.LabelView.design({
          cssClass: 'activity unselectable'
        , computedValue: {
              valuePattern: '<%= activityName %>'
            , operation: function(v) {
				if (v !== "") {
		        	return M.I18N.l('activity') + ': ' + v;
		        } else {
		            return M.I18N.l('activity') + ': ' + M.I18N.l('notDefined');
		        }
            }
        }
    })
    
    , latitude: M.LabelView.design({
          cssClass: 'location unselectable'
        , isInline: YES
        , computedValue: {
              valuePattern: '<%= latitude %>'
            , operation: function(v) {
                if (v > 0 && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) {
                	var str = new Number(v);
               		return M.I18N.l('vonKoordinate') + ': ' + str.toFixed(4);
               		//return M.I18N.l('latitude_von') + ': ' + str.toFixed(6);
                } else {
                    //return M.I18N.l('latitude_von') + ': ' + M.I18N.l('GPSnotactive');
                	return '';
                }
            }
        }
    })

    , longitude: M.LabelView.design({
          cssClass: 'location unselectable'
        , isInline: YES
        , computedValue: {
              valuePattern: '<%= longitude %>'
            , operation: function(v) {
                if (v > 0 && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) { 
                	var str = new Number(v);
               		return ', ' + str.toFixed(4);
               		//return M.I18N.l('longitude_von') + ': ' + str.toFixed(6);
                } else {
                    //return M.I18N.l('longitude_von') + ': ' + M.I18N.l('GPSnotactive');
                    return '';
                }
            }
        }
    })

    , genauigkeit_von: M.LabelView.design({
          cssClass: 'location unselectable'
        , isInline: YES
        , computedValue: {
              valuePattern: '<%= genauigkeitVon %>'
            , operation: function(v) {
                if (v > 0 && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) { 
               		return ' (' + M.I18N.l('genauigkeit') + ': ' + v + ' m)';
               		//return M.I18N.l('longitude_bis') + ': ' + str.toFixed(6);
                } else {
                    //return M.I18N.l('longitude_bis') + ': ' + M.I18N.l('GPSnotactive');
                    return '';
                }
            }
        }
    })

    , eolVon: M.LabelView.design({
	        cssClass: 'location unselectable'
	      , value: ''
	  })
        
    , latitude_bis: M.LabelView.design({
          cssClass: 'location unselectable'
        , isInline: YES
        , computedValue: {
              valuePattern: '<%= latitude_bis %>'
            , operation: function(v) {
                if (v > 0 && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) {
                	var str = new Number(v);
               		return M.I18N.l('bisKoordinate') + ': ' + str.toFixed(4);
               		//return M.I18N.l('latitude_bis') + ': ' + str.toFixed(6);
                } else {
                    //return M.I18N.l('latitude_bis') + ': ' + M.I18N.l('GPSnotactive');
                	return '';
                }
            }
        }
    })

    , longitude_bis: M.LabelView.design({
          cssClass: 'location unselectable'
        , isInline: YES
        , computedValue: {
              valuePattern: '<%= longitude_bis %>'
            , operation: function(v) {
                if (v > 0 && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) { 
                	var str = new Number(v);
               		return ', ' + str.toFixed(4);
               		//return M.I18N.l('longitude_bis') + ': ' + str.toFixed(6);
                } else {
                    //return M.I18N.l('longitude_bis') + ': ' + M.I18N.l('GPSnotactive');
                    return '';
                }
            }
        }
    })

    , genauigkeit_bis: M.LabelView.design({
          cssClass: 'location unselectable'
        , isInline: YES
        , computedValue: {
              valuePattern: '<%= genauigkeitBis %>'
            , operation: function(v) {
                if (v > 0 && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) { 
               		return ' (' + M.I18N.l('genauigkeit') + ': ' + v + ' m)';
               		//return M.I18N.l('longitude_bis') + ': ' + str.toFixed(6);
                } else {
                    //return M.I18N.l('longitude_bis') + ': ' + M.I18N.l('GPSnotactive');
                    return '';
                }
            }
        }
    })

    , eolBis: M.LabelView.design({
	        cssClass: 'location unselectable'
	      , value: ''
	  })
    
    , erfassungsverfahren_von: M.LabelView.design({
          cssClass: 'location unselectable'
        , computedValue: {
              valuePattern: '<%= ermittlungsverfahrenVon %>'
            , operation: function(v) {
                if (v !== null && typeof(v) !== "undefined"  && v !== "undefined" && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) {
               		return M.I18N.l('erfassungsverfahren_von') + ': ' + v.substring(0,16) + "...";
                } else {
                    //return M.I18N.l('erfassungsverfahren_von') + ': ' + M.I18N.l('GPSnotactive');
                	return '';
                }
            }
        }
    })

    , erfassungsverfahren_bis: M.LabelView.design({
          cssClass: 'location unselectable'
        , computedValue: {
              valuePattern: '<%= ermittlungsverfahrenBis %>'
            , operation: function(v) {
                if (v !== null && typeof(v) !== "undefined"  && v !== "undefined" && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) {
               		return M.I18N.l('erfassungsverfahren_bis') + ': ' + v.substring(0,16) + "...";
                } else {
                    //return M.I18N.l('erfassungsverfahren_bis') + ': ' + M.I18N.l('GPSnotactive');
                	return '';
                }
            }
        }
    })

    , gpszeitstempel_von: M.LabelView.design({
          cssClass: 'location unselectable'
        , computedValue: {
              valuePattern: '<%= gps_zeitstempelVon %>'
            , operation: function(v) {
                if (v > 0 && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) {
                	try {
	                	var a = M.Date.create(parseInt(v));
	               		return M.I18N.l('gpszeitstempel_von') + ': ' + a.format('dd.mm.yyyy HH:MM');
                	} catch (eDate1) {
                		return '';
                	}
                } else {
                    //return M.I18N.l('gpszeitstempel_von') + ': ' + M.I18N.l('GPSnotactive');
                	return '';
                }
            }
        }
    })

    , gpszeitstempel_bis: M.LabelView.design({
          cssClass: 'location unselectable'
        , computedValue: {
              valuePattern: '<%= gps_zeitstempelBis %>'
            , operation: function(v) {
                if (v > 0 && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) {
                	try {
	                	var a = M.Date.create(parseInt(v));
	               		return M.I18N.l('gpszeitstempel_bis') + ': ' + a.format('dd.mm.yyyy HH:MM');
                	} catch (eDate2) {
                		return '';
                	}
                } else {
                    //return M.I18N.l('gpszeitstempel_bis') + ': ' + M.I18N.l('GPSnotactive');
                	return '';
                }
            }
        }
    })

    , ServiceApp_Status: M.LabelView.design({
          cssClass: 'location unselectable'
        , computedValue: {
              valuePattern: '<%= ServiceApp_Status %>'
            , operation: function(v) {
                if (v !== null && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten") && DigiWebApp.SettingsController.getSetting("debug")) {
               		return 'Status: ' + v;
                } else {
                    //return M.I18N.l('erfassungsverfahren_bis') + ': ' + M.I18N.l('GPSnotactive');
                	return '';
                }
            }
        }
    })

    , remark: M.LabelView.design({
          cssClass: 'remark unselectable'
        , computedValue: {
              valuePattern: '<%= remark %>'
            , operation: function(v) {
                if (v) { 
               		return M.I18N.l('remark') + ': ' + v;
                } else {
                    return '';
                }
            }
        }
    })

    , gefahreneKilometer: M.LabelView.design({
        cssClass: 'remark'
      , computedValue: {
            valuePattern: '<%= gefahreneKilometer %>'
          , operation: function(v) {
              if (v && v > 0) { 
             		return M.I18N.l('gefahreneKilometer') + ': ' + v;
              } else {
                  return '';
              }
          }
      }
    })

});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: TimeDataArchivePage
// ==========================================================================

m_require('app/views/TimeDataSentTemplateView');

DigiWebApp.TimeDataArchivePage = M.PageView.design({

      events: {
		pagebeforeshow: {
              target: DigiWebApp.BookingController
            , action: 'setArchivedBookings'
        }
    }

    , childViews: 'header contentSent'

    , cssClass: 'timeDataPage unselectable'

    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.backToTimeDataPage();}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('archivedTimeData')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , contentSent: M.ScrollView.design({
          childViews: 'list'
        , cssClass: 'sentBookings'
        , list: M.ListView.design({
              contentBinding: {
                  target: DigiWebApp.BookingController
                , property: 'timeDataSentArchived'
            }
            , listItemTemplateView: DigiWebApp.TimeDataSentTemplateView
        })
    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: TimeDataTemplateView
// ==========================================================================

DigiWebApp.TimeDataTemplateView = M.ListItemView.design({

      isSelectable: YES

      , childViews: 'date order position activity latitude longitude genauigkeit_von eolVon erfassungsverfahren_von gpszeitstempel_von latitude_bis longitude_bis genauigkeit_bis eolBis erfassungsverfahren_bis gpszeitstempel_bis ServiceApp_Status remark gefahreneKilometer'

    , events: {
        tap: {
			action: function(id, m_id) {
			    // Start::Bemerkungsfeld (403) oder Unterschrift (405)
			    if (DigiWebApp.SettingsController.featureAvailable('403') || ((DigiWebApp.SettingsController.featureAvailable('405')) && (typeof window.requestFileSystem !== "undefined"))) {
					// if remark-feature active: go to remarkpage
					// load booking in EditTimeData.bookingToEdit
			    	//console.log('remark is active');
					_.each(DigiWebApp.Booking.find(), function(booking) {
						if (booking.m_id === m_id) {
							DigiWebApp.EditTimeDataPage.bookingToEdit = booking;
						}
					});
					DigiWebApp.NavigationController.toEditTimeDataPage();
			    } else {
					// else: nothing
			    	//if (DigiWebApp.SettingsController.globalDebugMode) console.log(id);
			    }
			    // End::Bemerkungsfeld oder Unterschrift
			}
        }
    }

	, date: M.LabelView.design({
          cssClass: 'date unselectable'
        , computedValue: {
              valuePattern: '<%= date %>'
            //, value: '01.01.2011, 08:00 - 08:20 Uhr, 0:20 h',
            // 0: timeStampStart, 1: timeStampEnd, 2: timeZoneOffset, 3: DateStart, 4: TimeStart, 5: DateEnd, 6: TimeEnd
            , operation: function(myV) {
				//console.log(v);
                var v = myV.split(',');
                //var date1 = M.Date.create(Number(v[0]));
                //var date2 = v[1] !== "0" ? M.Date.create(Number(v[1])) : null;
                var date1;
                var date2;
                var dateStart;
                var dateEnd;
                if (typeof(v[2]) === "undefined" ) {
                	dateStart = new Date(Number(v[0]));
                    date1 = M.Date.create(dateStart.getTime());
                    date2 = null;
                    if (v[1] !== "0") {
                    	dateEnd = new Date(Number(v[1]));
                    	date2 = M.Date.create(dateEnd.getTime());
                    }
                } else {
                	dateStart = new Date(Number(v[0]) + (1000 * 60 * (new Date().getTimezoneOffset() - Number(v[2]))));
                    date1 = M.Date.create(dateStart.getTime());
                    date2 = null;
                    if (v[1] !== "0") {
                    	dateEnd = new Date(Number(v[1]) + (1000 * 60 * (new Date().getTimezoneOffset() - Number(v[2]))));
                    	date2 = M.Date.create(dateEnd.getTime());
                    }
                }
                if (date2) {
                    // cut minutes down => 12:05:59 is going to be 12:05:00
                    date1 = M.Date.create(date1.format('mm/dd/yyyy HH:MM'));
                    date2 = M.Date.create(date2.format('mm/dd/yyyy HH:MM'));

                    if (date1.format('mm/dd/yyyy HH:MM') === date2.format('mm/dd/yyyy HH:MM')) { // if booking is closed in the same minute
                        //return date1.format('dd.mm.yyyy') + ', ' + date1.format('HH:MM') + ' - ' + date2.format('HH:MM') + ' ' + M.I18N.l('oclock') + ', 00:01 h';
                    	return v[3] + ', ' + v[4] + ' - ' + v[6] + ' ' + M.I18N.l('oclock') + ', 00:01 h';
                    } else {
                        var timeBetween = date1.timeBetween(date2, M.MINUTES);
                        if (timeBetween < 1) {
                            timeBetween = M.Math.round(timeBetween, M.CEIL);
                        } else {
                            timeBetween = M.Math.round(date1.timeBetween(date2, M.MINUTES), M.FLOOR);
                        }
                        if (timeBetween > 59) {
                            var hours = M.Math.round(timeBetween / 60, M.FLOOR);
                            hours = hours < 10 ? '0' + hours : hours;
                            var minutes = timeBetween % 60;
                            minutes = minutes < 10 ? '0' + minutes : minutes;
                            timeBetween = hours + ':' + minutes;
                        } else {
                            timeBetween = '00:' + (timeBetween < 10 ? '0' : '') + timeBetween;
                        }
                        //return date1.format('dd.mm.yyyy') + ', ' + date1.format('HH:MM') + ' - ' + date2.format('HH:MM') + ' ' + M.I18N.l('oclock') + ', ' + timeBetween + ' h';
                        return v[3] + ', ' + v[4] + ' - ' + v[6] + ' ' + M.I18N.l('oclock') + ', ' + timeBetween + ' h';
                    }


                } else {
                    //return date1.format('dd.mm.yyyy') + ', ' + date1.format('HH:MM') + ' - ' + M.I18N.l('open');
                	return v[3] + ', ' + v[4] + ' - ' + M.I18N.l('open');
                }

            }
        }
    })

//    , order: M.LabelView.design({
//          cssClass: 'application unselectable'
//        , computedValue: {
//              valuePattern: '<%= orderName %>'
//            , operation: function(v) {
//    			if (v !== "") {
//                	return M.I18N.l('order') + ': ' + v;
//                } else {
//                    return M.I18N.l('order') + ': ' + M.I18N.l('notDefined');
//                }
//            }
//        }
//    })
//
//    , position: M.LabelView.design({
//          cssClass: 'position unselectable'
//        , computedValue: {
//              valuePattern: '<%= positionName %>'
//            , operation: function(v) {
//				if (v !== "") {
//		        	return M.I18N.l('position') + ': ' + v;
//		        } else {
//		            return M.I18N.l('position') + ': ' + M.I18N.l('notDefined');
//		        }
//            }
//        }
//    })
//
//    , activity: M.LabelView.design({
//          cssClass: 'activity unselectable'
//        , computedValue: {
//              valuePattern: '<%= activityName %>'
//            , operation: function(v) {
//				if (v !== "") {
//		        	return M.I18N.l('activity') + ': ' + v;
//		        } else {
//		            return M.I18N.l('activity') + ': ' + M.I18N.l('notDefined');
//		        }
//            }
//        }
//    })
//    
//    , order_ID: M.LabelView.design({
//          cssClass: 'application unselectable'
//        , computedValue: {
//              valuePattern: '<%= orderId %>'
//            , operation: function(v) {
//                var order = _.select(DigiWebApp.Order.findSorted().concat(DigiWebApp.HandOrder.findSorted()), function(o) {
//                    return v == o.get('id') || v == o.get('name'); // || get('name') is for checking handOrders also
//                });
//                if(order && order.length > 0) {
//                    order = order[0];
//                    if (DigiWebApp.SettingsController.globalDebugMode) {
//                    	return M.I18N.l('order') + ': ' + order.get('name') + ' (' + order.get('id') + ')';
//                    } else {
//                    	return M.I18N.l('order') + ': ' + order.get('name');
//                    }
//                } else {
//                    return M.I18N.l('order') + ': ' + M.I18N.l('notDefined');
//                }
//            }
//        }
//    })
//
//    , position_ID: M.LabelView.design({
//          cssClass: 'position unselectable'
//        , computedValue: {
//              valuePattern: '<%= positionId %>'
//            , operation: function(v) {
//                if(v) {
//                    var position = _.select(DigiWebApp.Position.findSorted(), function(p) {
//                        return v == p.get('id');
//                    });
//                    if(position && position.length > 0) {
//                        position = position[0];
//                        return M.I18N.l('position') + ': ' + position.get('name');
//                    } else {
//                        return M.I18N.l('position') + ': ' + M.I18N.l('notDefined');
//                    }
//                } else {
//                    return M.I18N.l('position') + ': ' + M.I18N.l('unknown');
//                }
//
//            }
//        }
//    })
//
//    , activity_ID: M.LabelView.design({
//          cssClass: 'activity unselectable'
//        , computedValue: {
//              valuePattern: '<%= activityId %>'
//            , operation: function(v) {
//                if(v) {
//                    var activity = _.select(DigiWebApp.Activity.findSorted(), function(a) {
//                        return v == a.get('id');
//                    });
//                    if(activity && activity.length > 0) {
//                        activity = activity[0];
//                        return M.I18N.l('activity') + ': ' + activity.get('name');
//                    } else {
//                        return M.I18N.l('activity') + ': ' + M.I18N.l('notDefined');
//                    }
//
//                } else {
//                    return M.I18N.l('activity') + ': ' + M.I18N.l('unknown');
//                }
//            }
//        }
//    })
    
    , order: M.LabelView.design({
          cssClass: 'application unselectable'
        , computedValue: {
              valuePattern: '<%= orderName %>'
            , operation: function(v) {
                var order = _.select(DigiWebApp.Order.findSorted().concat(DigiWebApp.HandOrder.findSorted()), function(o) {
                    if (o) return v == o.get('id') || v == o.get('name'); // || get('name') is for checking handOrders also
                });
                if (order && order.length > 0) {
                    order = order[0];
                    if (DigiWebApp.SettingsController.globalDebugMode) {
                    	return M.I18N.l('order') + ': ' + order.get('name') + ' (' + order.get('id') + ')';
                    } else {
                    	return M.I18N.l('order') + ': ' + order.get('name');
                    }
                } else {
                    return M.I18N.l('order') + ': ' + M.I18N.l('notDefined');
                }
            }
        }
    })

    , position: M.LabelView.design({
          cssClass: 'position unselectable'
        , computedValue: {
              valuePattern: '<%= positionId %>'
            , operation: function(v) {
                if (v) {
                    var position = _.select(DigiWebApp.Position.findSorted(), function(p) {
                        if (p) return v == p.get('id');
                    });
                    if (position && position.length > 0) {
                        position = position[0];
                        return M.I18N.l('position') + ': ' + position.get('name');
                    } else {
                        return M.I18N.l('position') + ': ' + M.I18N.l('notDefined');
                    }
                } else {
                    return M.I18N.l('position') + ': ' + M.I18N.l('unknown');
                }

            }
        }
    })

    , activity: M.LabelView.design({
          cssClass: 'activity unselectable'
        , computedValue: {
              valuePattern: '<%= activityId %>'
            , operation: function(v) {
                if (v) {
                	var activity = null;
                	if (parseInt(v) !== 0) {
                        activity = _.select(DigiWebApp.Activity.findSorted(), function(a) {
                        	if (a) return v == a.get('id');
                        });
                	}
                    if (activity && activity.length > 0) {
                        activity = activity[0];
                        return M.I18N.l('activity') + ': ' + activity.get('name');
                    } else {
                        return M.I18N.l('activity') + ': ' + M.I18N.l('notDefined');
                    }

                } else {
                    return M.I18N.l('activity') + ': ' + M.I18N.l('unknown');
                }
            }
        }
    })

    , latitude: M.LabelView.design({
        cssClass: 'location unselectable'
      , isInline: YES
      , computedValue: {
            valuePattern: '<%= latitude %>'
          , operation: function(v) {
              if (v > 0 && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) {
              	var str = new Number(v);
             		return M.I18N.l('vonKoordinate') + ': ' + str.toFixed(4);
             		//return M.I18N.l('latitude_von') + ': ' + str.toFixed(6);
              } else {
                  //return M.I18N.l('latitude_von') + ': ' + M.I18N.l('GPSnotactive');
              	return '';
              }
          }
      }
  })

  , longitude: M.LabelView.design({
        cssClass: 'location unselectable'
      , isInline: YES
      , computedValue: {
            valuePattern: '<%= longitude %>'
          , operation: function(v) {
              if (v > 0 && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) { 
              	var str = new Number(v);
             		return ', ' + str.toFixed(4);
             		//return M.I18N.l('longitude_von') + ': ' + str.toFixed(6);
              } else {
                  //return M.I18N.l('longitude_von') + ': ' + M.I18N.l('GPSnotactive');
                  return '';
              }
          }
      }
  })

  , genauigkeit_von: M.LabelView.design({
        cssClass: 'location unselectable'
      , isInline: YES
      , computedValue: {
            valuePattern: '<%= genauigkeitVon %>'
          , operation: function(v) {
              if (v > 0 && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) { 
             		return ' (' + M.I18N.l('genauigkeit') + ': ' + v + ' m)';
             		//return M.I18N.l('longitude_bis') + ': ' + str.toFixed(6);
              } else {
                  //return M.I18N.l('longitude_bis') + ': ' + M.I18N.l('GPSnotactive');
                  return '';
              }
          }
      }
  })

  , eolVon: M.LabelView.design({
	        cssClass: 'location unselectable'
	      , value: ''
	  })
      
  , latitude_bis: M.LabelView.design({
        cssClass: 'location unselectable'
      , isInline: YES
      , computedValue: {
            valuePattern: '<%= latitude_bis %>'
          , operation: function(v) {
              if (v > 0 && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) {
              	var str = new Number(v);
             		return M.I18N.l('bisKoordinate') + ': ' + str.toFixed(4);
             		//return M.I18N.l('latitude_bis') + ': ' + str.toFixed(6);
              } else {
                  //return M.I18N.l('latitude_bis') + ': ' + M.I18N.l('GPSnotactive');
              	return '';
              }
          }
      }
  })

  , longitude_bis: M.LabelView.design({
        cssClass: 'location unselectable'
      , isInline: YES
      , computedValue: {
            valuePattern: '<%= longitude_bis %>'
          , operation: function(v) {
              if (v > 0 && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) { 
              	var str = new Number(v);
             		return ', ' + str.toFixed(4);
             		//return M.I18N.l('longitude_bis') + ': ' + str.toFixed(6);
              } else {
                  //return M.I18N.l('longitude_bis') + ': ' + M.I18N.l('GPSnotactive');
                  return '';
              }
          }
      }
  })

  , genauigkeit_bis: M.LabelView.design({
        cssClass: 'location unselectable'
      , isInline: YES
      , computedValue: {
            valuePattern: '<%= genauigkeitBis %>'
          , operation: function(v) {
              if (v > 0 && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) { 
             		return ' (' + M.I18N.l('genauigkeit') + ': ' + v + ' m)';
             		//return M.I18N.l('longitude_bis') + ': ' + str.toFixed(6);
              } else {
                  //return M.I18N.l('longitude_bis') + ': ' + M.I18N.l('GPSnotactive');
                  return '';
              }
          }
      }
  })

  , eolBis: M.LabelView.design({
	        cssClass: 'location unselectable'
	      , value: ''
	  })
  
  , erfassungsverfahren_von: M.LabelView.design({
        cssClass: 'location unselectable'
      , computedValue: {
            valuePattern: '<%= ermittlungsverfahrenVon %>'
          , operation: function(v) {
              if (v !== null && typeof(v) !== "undefined"  && v !== "undefined"  && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) {
             		return M.I18N.l('erfassungsverfahren_von') + ': ' + v.substring(0,16) + "...";
              } else {
                  //return M.I18N.l('erfassungsverfahren_von') + ': ' + M.I18N.l('GPSnotactive');
              	return '';
              }
          }
      }
  })

  , erfassungsverfahren_bis: M.LabelView.design({
        cssClass: 'location unselectable'
      , computedValue: {
            valuePattern: '<%= ermittlungsverfahrenBis %>'
          , operation: function(v) {
              if (v !== null && typeof(v) !== "undefined"  && v !== "undefined"  && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) {
             		return M.I18N.l('erfassungsverfahren_bis') + ': ' + v.substring(0,16) + "...";
              } else {
                  //return M.I18N.l('erfassungsverfahren_bis') + ': ' + M.I18N.l('GPSnotactive');
              	return '';
              }
          }
      }
  })

  , gpszeitstempel_von: M.LabelView.design({
        cssClass: 'location unselectable'
      , computedValue: {
            valuePattern: '<%= gps_zeitstempelVon %>'
          , operation: function(v) {
              if (v > 0 && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) {
              	try {
	                	var a = M.Date.create(parseInt(v));
	               		return M.I18N.l('gpszeitstempel_von') + ': ' + a.format('dd.mm.yyyy HH:MM');
              	} catch (eDate1) {
              		return '';
              	}
              } else {
                  //return M.I18N.l('gpszeitstempel_von') + ': ' + M.I18N.l('GPSnotactive');
              	return '';
              }
          }
      }
  })

  , gpszeitstempel_bis: M.LabelView.design({
        cssClass: 'location unselectable'
      , computedValue: {
            valuePattern: '<%= gps_zeitstempelBis %>'
          , operation: function(v) {
              if (v > 0 && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten")) {
              	try {
	                	var a = M.Date.create(parseInt(v));
	               		return M.I18N.l('gpszeitstempel_bis') + ': ' + a.format('dd.mm.yyyy HH:MM');
              	} catch (eDate2) {
              		return '';
              	}
              } else {
                  //return M.I18N.l('gpszeitstempel_bis') + ': ' + M.I18N.l('GPSnotactive');
              	return '';
              }
          }
      }
  })

  , ServiceApp_Status: M.LabelView.design({
        cssClass: 'location unselectable'
      , computedValue: {
            valuePattern: '<%= ServiceApp_Status %>'
          , operation: function(v) {
              if (v !== null && DigiWebApp.SettingsController.getSetting("detailierteZeitdaten") && DigiWebApp.SettingsController.getSetting("debug")) {
             		return 'Status: ' + v;
              } else {
                  //return M.I18N.l('erfassungsverfahren_bis') + ': ' + M.I18N.l('GPSnotactive');
              	return '';
              }
          }
      }
  })

  , remark: M.LabelView.design({
        cssClass: 'remark unselectable'
      , computedValue: {
            valuePattern: '<%= remark %>'
          , operation: function(v) {
              if (v) { 
             		return M.I18N.l('remark') + ': ' + v;
              } else {
                  return '';
              }
          }
      }
  })


  , gefahreneKilometer: M.LabelView.design({
      cssClass: 'remark'
    , computedValue: {
          valuePattern: '<%= gefahreneKilometer %>'
        , operation: function(v) {
            if (v && v > 0) { 
           		return M.I18N.l('gefahreneKilometer') + ': ' + v;
            } else {
                return '';
            }
        }
    }
  })

});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: TimeDataPage
// ==========================================================================

m_require('app/views/TimeDataTemplateView');
m_require('app/views/TimeDataSentTemplateView');
m_require('app/views/TimeDataSentDaysTemplateView');

DigiWebApp.TimeDataPage = M.PageView.design({

      events: {
		  pagebeforeshow: {
              target: DigiWebApp.BookingController
            , action: 'setNotBookedBookings'
        }
		, pageshow: {
			action: function() {
				if (DigiWebApp.BookingController.timeData) {
					if (DigiWebApp.BookingController.timeData.length !== 0) {
						$('#' + DigiWebApp.TimeDataPage.contentNotSent.id).show();
					} else {
						$('#' + DigiWebApp.TimeDataPage.contentNotSent.id).hide();
					}
				} else {
					$('#' + DigiWebApp.TimeDataPage.contentNotSent.id).hide();
				}
				if (DigiWebApp.BookingController.timeDataSent) {
					if (DigiWebApp.BookingController.timeDataSent.length !== 0) {
						$('#' + DigiWebApp.TimeDataPage.contentSent.id).show();
					} else {
						$('#' + DigiWebApp.TimeDataPage.contentSent.id).hide();
					}
				} else {
					$('#' + DigiWebApp.TimeDataPage.contentSent.id).hide();
				}
				if (DigiWebApp.BookingController.timeDataSentDays) {
					if (DigiWebApp.BookingController.timeDataSentDays.length !== 0) {
						$('#' + DigiWebApp.TimeDataPage.contentDays.id).show();
					} else {
						$('#' + DigiWebApp.TimeDataPage.contentDays.id).hide();
					}
				} else {
					$('#' + DigiWebApp.TimeDataPage.contentDays.id).hide();
				}
			}
		}
    }

    , childViews: 'header contentNotSent contentSent contentDays'

    , cssClass: 'timeDataPage unselectable'

    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.backToDashboardPage();}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('timeData')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , contentNotSent: M.ScrollView.design({
          childViews: 'list'
        , list: M.ListView.design({
              contentBinding: {
                  target: DigiWebApp.BookingController
                , property: 'timeData'
            }
            , listItemTemplateView: DigiWebApp.TimeDataTemplateView
        })
    })

    , contentSent: M.ScrollView.design({
          childViews: 'list'
        , cssClass: 'sentBookings'
        , list: M.ListView.design({
              contentBinding: {
                  target: DigiWebApp.BookingController
                , property: 'timeDataSent'
            }
            , listItemTemplateView: DigiWebApp.TimeDataSentTemplateView
        })
    })


    , contentDays: M.ScrollView.design({
          childViews: 'list'
        , cssClass: 'sentBookings'
        , list: M.ListView.design({
              contentBinding: {
                  target: DigiWebApp.BookingController
                , property: 'timeDataSentDays'
            }
            , listItemTemplateView: DigiWebApp.TimeDataSentDaysTemplateView
        })
    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: VorZurueckTabBar
// ==========================================================================

DigiWebApp.VorZurueckTabBar = M.TabBarView.design({

      childViews: 'tabItemZurueck tabItemDayToShow tabItemVor'

    , anchorLocation: M.BOTTOM

    , isFixed: YES // useless as TMP set position fixed hard in code... :-(

    , transition: M.TRANSITION.FADE

    , name: 'vorzuruecktabbar'

    , tabItemZurueck: M.TabBarItemView.design({
          value: M.I18N.l('backward')
        , page: 'zeitbuchungenPage'
        , icon: 'arrow-l'
        , switchPage: function() {
    		try{DigiWebApp.ApplicationController.vibrate();}catch(e2){}
			DigiWebApp.VorZurueckTabBar.backwardHandler();
    	}
    })

    , tabItemDayToShow: M.TabBarItemView.design({
          value: ''
        , page: 'zeitbuchungenPage'
        , icon: ''
    })

    , tabItemVor: M.TabBarItemView.design({
          value: M.I18N.l('forward')
        , page: 'zeitbuchungenPage'
        , icon: 'arrow-r'
        , switchPage: function() {
    		try{DigiWebApp.ApplicationController.vibrate();}catch(e3){}
    		DigiWebApp.VorZurueckTabBar.forwardHandler();
    	}
    })
        
    , backwardHandler: function() {
		DigiWebApp.ZeitbuchungenController.set('items', null);
		DigiWebApp.ZeitbuchungenController.items = null;
		DigiWebApp.ZeitbuchungenController.set('datum', D8.create(DigiWebApp.ZeitbuchungenController.datum).addDays(-1).format("dd.mm.yyyy"));
		DigiWebApp.ZeitbuchungenController.init(YES);
	}

	, forwardHandler: function() {
		DigiWebApp.ZeitbuchungenController.set('items', null);
		DigiWebApp.ZeitbuchungenController.items = null;
		DigiWebApp.ZeitbuchungenController.set('datum', D8.create(DigiWebApp.ZeitbuchungenController.datum).addDays(1).format("dd.mm.yyyy"));
		DigiWebApp.ZeitbuchungenController.init(YES);
	}

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: ZeitbuchungDetailsPage
// ==========================================================================

DigiWebApp.ZeitbuchungDetailsPage = M.PageView.design({

//      events: {
//		  pagebeforeshow: {
//            action: function() {
//
//			}
//        }
//        , pagehide: {
//            action: function() {
//
//        	}
//        }
//    }

	  updateContent: function() {
		_.each(DigiWebApp.ZeitbuchungDetailsPage.content, function(c) { 
			try {
				if (   c.id !== DigiWebApp.ZeitbuchungDetailsPage.content.infoButton.id
					&& c.id !== DigiWebApp.ZeitbuchungDetailsPage.content.showBookingCoordinatesInMapButton.id
					&& c.id !== DigiWebApp.ZeitbuchungDetailsPage.content.showPositionCoordinatesInMapButton.id
				) {
					c.renderUpdate();
				}
			} catch(e2) { /*console.error(e2);*/ } 
		});							
	}

    , cssClass: 'zeitbuchungDetailsPage'

    , childViews: 'header content'

    , header: M.ToolbarView.design({
          childViews: 'backButton title'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: 'backToZeitbuchungenPageTransition'
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('Zeitbuchung')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({

    	  childViews: 'datum von bis spacerNachBis dauer infoButton spacerNachButton order position handApplications activity activityPositionInWorkplan spacerNachActivityPositionInWorkplan remark farbeAmpel gpsBreite gpsLaenge showBookingCoordinatesInMapButton gpsBreitePosition gpsLaengePosition showPositionCoordinatesInMapButton'
        	  
        , cssClass: 'content'

        , datum: M.LabelView.design({
              computedValue: {
                  value: ''
                , operation: function(v) {
        			if (DigiWebApp.ZeitbuchungenController.itemForDetails !== null) {
        				return DigiWebApp.ZeitbuchungenController.itemForDetails.get("datum") + ', ';
        			}
                }
            }
        	, isInline: YES
            , cssClass: 'datum unselectable'
        })

        , von: M.LabelView.design({
            computedValue: {
                value: ''
              , operation: function(v) {
					if (DigiWebApp.ZeitbuchungenController.itemForDetails !== null) {
    					if (DigiWebApp.ZeitbuchungenController.itemForDetails.get("bis") === "" || DigiWebApp.ZeitbuchungenController.itemForDetails.get("bis") === "-") {
    						return M.I18N.l('since') + ' ' + DigiWebApp.ZeitbuchungenController.itemForDetails.get("von");
    					} else {
    						return DigiWebApp.ZeitbuchungenController.itemForDetails.get("von");
    					}
					} else {
						return '';
					}
	              }
	          }
	       	  , isInline: YES
	          , cssClass: 'von marginBottom20 unselectable'
	      })

        , bis: M.LabelView.design({
	          computedValue: {
	              value: ''
	            , operation: function(v) {
	    	  			if (DigiWebApp.ZeitbuchungenController.itemForDetails !== null) {
	    					if (DigiWebApp.ZeitbuchungenController.itemForDetails.get("bis") !== "" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("bis") !== "-") {
	    						return ' - ' + DigiWebApp.ZeitbuchungenController.itemForDetails.get("bis");
	    					} else {
	    						return '';
	    					}
						} else {
							return '';
						}
	      			}
		        }
		      	, isInline: YES
		        , cssClass: 'bis marginBottom20 unselectable'
      	})

		, spacerNachBis: M.LabelView.design({
		      value: ' '
		})
	
        , dauer: M.LabelView.design({
	          computedValue: {
	              value: ''
	            , operation: function(v) {
	    	  			if (DigiWebApp.ZeitbuchungenController.itemForDetails !== null) {
	    					if ((DigiWebApp.ZeitbuchungenController.itemForDetails.get("dauer") !== "" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("dauer") !== "-" && typeof(DigiWebApp.ZeitbuchungenController.itemForDetails.get("dauer")) !== "undefined")
	    					&& (DigiWebApp.ZeitbuchungenController.itemForDetails.get("bis") !== "" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("bis") !== "-")
	    					) {
	    						return M.I18N.l('dauer') + ': ' + DigiWebApp.ZeitbuchungenController.itemForDetails.get("dauer");
	    					} else {
	    						return '';
	    					}
						} else {
							return '';
						}
	      			}
		        }
		        , cssClass: 'dauer unselectable'
      	})

        , order: M.LabelView.design({
            computedValue: {
                value: ''
              , operation: function(v) {
      	  			if (DigiWebApp.ZeitbuchungenController.itemForDetails !== null) {
      					if (DigiWebApp.ZeitbuchungenController.itemForDetails.get("auftragsBezeichnung") !== "" && typeof(DigiWebApp.ZeitbuchungenController.itemForDetails.get("auftragsBezeichnung")) !== "undefined" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("auftragsBezeichnung") !== "null" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("auftragsBezeichnung") !== null) {
      						//$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.infoButton.id).button("enable");
      						return M.I18N.l('order') + ': ' + DigiWebApp.ZeitbuchungenController.itemForDetails.get("auftragsBezeichnung");
      					} else {
      						//$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.infoButton.id).button("disable");
      						return M.I18N.l('order') + ': -';
      					}
  					} else {
  						//$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.infoButton.id).button("disable");
  						return M.I18N.l('order') + ': -';
  					}
    			}
  	        }
  	        , cssClass: 'normalDetail marginLeft35 moveUp38 unselectable'
    	})

        , position: M.LabelView.design({
            computedValue: {
                value: ''
              , operation: function(v) {
      	  			if (DigiWebApp.ZeitbuchungenController.itemForDetails !== null) {
      					if (DigiWebApp.ZeitbuchungenController.itemForDetails.get("positionsBezeichnung") !== "" && typeof(DigiWebApp.ZeitbuchungenController.itemForDetails.get("positionsBezeichnung")) !== "undefined" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("positionsBezeichnung") !== "null" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("positionsBezeichnung") !== null) {
      						//$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.infoButton.id).button("enable");
      						return M.I18N.l('position') + ': ' + DigiWebApp.ZeitbuchungenController.itemForDetails.get("positionsBezeichnung");
      					} else {
      						//$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.infoButton.id).button("disable");
      						return M.I18N.l('position') + ': -';
      					}
  					} else {
  						//$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.infoButton.id).button("disable");
  						return M.I18N.l('position') + ': -';
  					}
    			}
  	        }
  	        , cssClass: 'normalDetail marginLeft35 marginTop0 marginBottom10 unselectable'
    	})

        , infoButton: M.ButtonView.design({
        	computedValue: {
        		value: ''
        	  , operation: function() {
        			return '?';
        		}
        	}
            , anchorLocation: M.LEFT
  	        , cssClass: 'posInfoButton'
            , events: {
                tap: {
                    target: DigiWebApp.NavigationController,
                    action: 'toOrderDetailsPageTransition'
//            		action: function() {
//            			if (DigiWebApp.ZeitbuchungenController.itemForDetails.get("positionsId") !== 0) {
//            				DigiWebApp.NavigationController.toOrderDetailsPageTransition();
//            			}
//            		}
            	}
        	}
        	, isInline: YES
    	})

		, spacerNachButton: M.LabelView.design({
		      value: ' '
	      	, isInline: YES
		})
	
        , handApplications: M.LabelView.design({
            computedValue: {
                value: ''
              , operation: function(v) {
      	  			if (DigiWebApp.ZeitbuchungenController.itemForDetails !== null) {
      					if (DigiWebApp.ZeitbuchungenController.itemForDetails.get("handauftragsBezeichnung") !== "" && typeof(DigiWebApp.ZeitbuchungenController.itemForDetails.get("handauftragsBezeichnung")) !== "undefined" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("handauftragsBezeichnung") !== "null" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("handauftragsBezeichnung") !== null) {
      						return M.I18N.l('handApplications') + ': ' + DigiWebApp.ZeitbuchungenController.itemForDetails.get("handauftragsBezeichnung");
      					} else {
      						return '';
      					}
  					} else {
  						return '';
  					}
        			}
  	        }
  	        , cssClass: 'normalDetail unselectable'
    	})

        , activity: M.LabelView.design({
            computedValue: {
                value: ''
              , operation: function(v) {
      	  			if (DigiWebApp.ZeitbuchungenController.itemForDetails !== null) {
      					if (DigiWebApp.ZeitbuchungenController.itemForDetails.get("taetigkeit") !== "" && typeof(DigiWebApp.ZeitbuchungenController.itemForDetails.get("taetigkeit")) !== "undefined" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("taetigkeit") !== "null" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("taetigkeit") !== null) {
      						return M.I18N.l('activity') + ': ' + DigiWebApp.ZeitbuchungenController.itemForDetails.get("taetigkeit");
      					} else {
      						return '';
      					}
  					} else {
  						return '';
  					}
        			}
  	        }
        	, isInline: YES
  	        , cssClass: 'normalDetail unselectable'
    	})

        , activityPositionInWorkplan: M.LabelView.design({
            computedValue: {
                value: ''
              , operation: function(v) {
      	  			if (DigiWebApp.ZeitbuchungenController.itemForDetails !== null) {
      					if (DigiWebApp.ZeitbuchungenController.itemForDetails.get("taetigkeitreihenfolge") !== "" && typeof(DigiWebApp.ZeitbuchungenController.itemForDetails.get("taetigkeitreihenfolge")) !== "undefined" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("taetigkeitreihenfolge") !== "null" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("taetigkeitreihenfolge") !== null) {
      						return ' (' + DigiWebApp.ZeitbuchungenController.itemForDetails.get("taetigkeitreihenfolge") + ')';
      					} else {
      						return '';
      					}
  					} else {
  						return '';
  					}
    			}
  	        }
        	, isInline: YES
  	        , cssClass: 'normalDetail unselectable'
    	})

		, spacerNachActivityPositionInWorkplan: M.LabelView.design({
		      value: ' '
		})
	
        , remark: M.LabelView.design({
            computedValue: {
                value: ''
              , operation: function(v) {
      	  			if (DigiWebApp.ZeitbuchungenController.itemForDetails !== null) {
      					if (DigiWebApp.ZeitbuchungenController.itemForDetails.get("remark") !== "" && typeof(DigiWebApp.ZeitbuchungenController.itemForDetails.get("remark")) !== "undefined" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("remark") !== "null" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("remark") !== null) {
      						return M.I18N.l('remark') + ': ' + DigiWebApp.ZeitbuchungenController.itemForDetails.get("remark");
      					} else {
      						return '';
      					}
  					} else {
  						return '';
  					}
    			}
  	        }
  	        , cssClass: 'normalDetail unselectable'
    	})

        , gpsBreite: M.LabelView.design({
            computedValue: {
                value: ''
              , operation: function(v) {
      	  			if (DigiWebApp.ZeitbuchungenController.itemForDetails !== null) {
      					if (DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsBreite") !== "" && typeof(DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsBreite")) !== "undefined" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsBreite") !== "0.0" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsBreite") !== 0 && DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsBreite") !== null) {
      						$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.showBookingCoordinatesInMapButton.id).show();
      						var str = new Number(DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsBreite"));
      						return M.I18N.l('booking') + '-' + M.I18N.l('latitude') + ': ' + str.toFixed(6);
      					} else {
      						$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.showBookingCoordinatesInMapButton.id).hide();
      						return '';
      					}
  					} else {
  						$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.showBookingCoordinatesInMapButton.id).hide();
  						return '';
  					}
    			}
  	        }
  	        , cssClass: 'smallDetail marginTop12 unselectable'
    	})

        , gpsLaenge: M.LabelView.design({
            computedValue: {
                value: ''
              , operation: function(v) {
      	  			if (DigiWebApp.ZeitbuchungenController.itemForDetails !== null) {
      					if (DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsLaenge") !== "" && typeof(DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsLaenge")) !== "undefined" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsLaenge") !== "0.0" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsLaenge") !== 0 && DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsLaenge") !== null) {
      						$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.showBookingCoordinatesInMapButton.id).show();
      						var str = new Number(DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsLaenge"));
      						return M.I18N.l('booking') + '-' + M.I18N.l('longitude') + ': ' + str.toFixed(6);
      					} else {
      						$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.showBookingCoordinatesInMapButton.id).hide();
      						return '';
      					}
  					} else {
  						$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.showBookingCoordinatesInMapButton.id).hide();
  						return '';
  					}
    			}
  	        }
  	        , cssClass: 'smallDetail unselectable'
    	})

        , gpsBreitePosition: M.LabelView.design({
            computedValue: {
                value: ''
              , operation: function(v) {
      	  			if (DigiWebApp.ZeitbuchungenController.itemForDetails !== null) {
      					if (DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsBreitePosition") !== "" && typeof(DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsBreitePosition")) !== "undefined" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsBreitePosition") !== "0.0" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsBreitePosition") !== 0 && DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsBreitePosition") !== null) {
      						$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.showPositionCoordinatesInMapButton.id).show();
      						var str = new Number(DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsBreitePosition"));
      						return M.I18N.l('order') + '-' + M.I18N.l('latitude') + ': ' + str.toFixed(6);
      					} else {
      						$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.showPositionCoordinatesInMapButton.id).hide();
      						return '';
      					}
  					} else {
  						$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.showPositionCoordinatesInMapButton.id).hide();
  						return '';
  					}
    			}
  	        }
  	        , cssClass: 'smallDetail marginTop12 unselectable'
    	})

        , gpsLaengePosition: M.LabelView.design({
            computedValue: {
                value: ''
              , operation: function(v) {
      	  			if (DigiWebApp.ZeitbuchungenController.itemForDetails !== null) {
      					if (DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsLaengePosition") !== "" && typeof(DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsLaengePosition")) !== "undefined" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsLaengePosition") !== "0.0" && DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsLaengePosition") !== 0 && DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsLaengePosition") !== null) {
      						$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.showPositionCoordinatesInMapButton.id).show();
      						var str = new Number(DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsLaengePosition"));
      						return M.I18N.l('order') + '-' + M.I18N.l('longitude') + ': ' + str.toFixed(6);
      					} else {
      						$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.showPositionCoordinatesInMapButton.id).hide();
      						return '';
      					}
  					} else {
  						$('#' + DigiWebApp.ZeitbuchungDetailsPage.content.showPositionCoordinatesInMapButton.id).hide();
  						return '';
  					}
    			}
  	        }
  	        , cssClass: 'smallDetail unselectable'
    	})

        , farbeAmpel: M.LabelView.design({
            computedValue: {
                value: ''
              , operation: function(v) {
      	  			if (DigiWebApp.ZeitbuchungenController.itemForDetails !== null) {
      					if (DigiWebApp.ZeitbuchungenController.itemForDetails.get("farbeAmpel") !== "" && typeof(DigiWebApp.ZeitbuchungenController.itemForDetails.get("farbeAmpel")) !== "undefined") {
      						var myColor = DigiWebApp.ZeitbuchungenController.itemForDetails.get("farbeAmpel");
      						return M.I18N.l('geozoneTrafficlight') + ': ' + '<span style="box-shadow: 2px 2px 6px rgba(0,0,0,0.6);background:' + myColor + ';color:' + myColor + ';margin-right: 5px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>';
      					} else {
      						return '';
      					}
  					} else {
  						return '';
  					}
    			}
  	        }
  	        , cssClass: 'normalDetail unselectable'
    	})

	    , showBookingCoordinatesInMapButton: M.ButtonView.design({
	        //  value: M.I18N.l('showBookingCoordinatesInMap')
	        //, cssClass: 'digiButton'
	        //, anchorLocation: M.CENTER
        	computedValue: {
	    		value: ''
	    	  , operation: function() {
	    			return M.I18N.l('showBookingCoordinatesInMap');
	    		}
	    	}
	        , events: {
	            tap: {
	                action: function() {
						var longitude = DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsLaenge");
						var latitude = DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsBreite");
						var zoom = '15';
						var url_byCoordinates = "";
						if ((longitude === '0.0' && latitude === '0.0') || (longitude === 0 && latitude === 0)) return;
						switch ( DigiWebApp.SettingsController.getSetting('mapType') ) {
							case "OSM":
								if (DigiWebApp.SettingsController.featureAvailable('419')) {
									alert(M.I18N.l('showInMapScholpp'));
								} else {
									alert(M.I18N.l('showInMapOSMAlert'));
								}
								url_byCoordinates = "http://www.openstreetmap.org/index.html?mlat=" + latitude + "&mlon=" + longitude + "&zoom=" + zoom + "&layers=M";
								break;
							case "Bing":
								if (DigiWebApp.SettingsController.featureAvailable('419')) {
									alert(M.I18N.l('showInMapScholpp'));
								} else {
									alert(M.I18N.l('showInMapBingAlert'));
								}
								url_byCoordinates = "http://www.bing.com/maps/default.aspx?rtp=adr.~pos." + latitude + "_" + longitude + "_&lvl=" + (zoom + 1);
								break;
							case "Google":
								if (DigiWebApp.SettingsController.featureAvailable('419')) {
									alert(M.I18N.l('showInMapScholpp'));
								} else {
									alert(M.I18N.l('showInMapGoogleAlert'));
								}
								url_byCoordinates = "http://maps.google.com/maps?q=" + latitude + "+" + longitude + "&hl=de";
								break;
							default:
								url_byCoordinates = "disabled";
								break;
						}
						if (url_byCoordinates !== "disabled") {
		    				if (typeof(plugins) !== "undefined") {
			    				if (typeof(plugins.childBrowser) !== "undefined") {
			    					try { plugins.childBrowser.close(); } catch(e2) { alert("Error: " + e2.message); }
			    					try { 
				    					plugins.childBrowser.showWebPage(encodeURI(url_byCoordinates), { showNavigationBar: true });
			    					} catch(e3) { alert("Error: " + e3.message); }
			    				} else {
			    					DigiWebApp.ApplicationController.inAppBrowser_var = window.open(url_byCoordinates,'childBrowser','width=800,height=600,menubar=no,status=no,location=yes,copyhistory=no,directories=no');
			    				}
		    				} else {
		    					DigiWebApp.ApplicationController.inAppBrowser_var = window.open(url_byCoordinates,'childBrowser','width=800,height=600,menubar=no,status=no,location=yes,copyhistory=no,directories=no');
		    				}
						} else {
							// TODO: Error-Message for disabled Map-Services
						}
	    			}
	            }
	        }
	    })
	    
	    , showPositionCoordinatesInMapButton: M.ButtonView.design({
	        //  value: M.I18N.l('showPositionCoordinatesInMap')
	        //, cssClass: 'digiButton'
	        //, anchorLocation: M.CENTER
        	computedValue: {
        		value: ''
        	  , operation: function() {
        			return M.I18N.l('showPositionCoordinatesInMap');
        		}
        	}
	        , events: {
	            tap: {
	                action: function() {
						var longitude = DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsLaengePosition");
						var latitude = DigiWebApp.ZeitbuchungenController.itemForDetails.get("gpsBreitePosition");
						var zoom = '15';
						var url_byCoordinates = "";
						if ((longitude === '0.0' && latitude === '0.0') || (longitude === 0 && latitude === 0)) return;
						switch ( DigiWebApp.SettingsController.getSetting('mapType') ) {
							case "OSM":
								if (DigiWebApp.SettingsController.featureAvailable('419')) {
									alert(M.I18N.l('showInMapScholpp'));
								} else {
									alert(M.I18N.l('showInMapOSMAlert'));
								}
								url_byCoordinates = "http://www.openstreetmap.org/index.html?mlat=" + latitude + "&mlon=" + longitude + "&zoom=" + zoom + "&layers=M";
								break;
							case "Bing":
								if (DigiWebApp.SettingsController.featureAvailable('419')) {
									alert(M.I18N.l('showInMapScholpp'));
								} else {
									alert(M.I18N.l('showInMapBingAlert'));
								}
								url_byCoordinates = "http://www.bing.com/maps/default.aspx?rtp=adr.~pos." + latitude + "_" + longitude + "_&lvl=" + (zoom + 1);
								break;
							case "Google":
								if (DigiWebApp.SettingsController.featureAvailable('419')) {
									alert(M.I18N.l('showInMapScholpp'));
								} else {
									alert(M.I18N.l('showInMapGoogleAlert'));
								}
								url_byCoordinates = "http://maps.google.com/maps?q=" + latitude + "+" + longitude + "&hl=de";
								break;
							default:
								url_byCoordinates = "disabled";
								break;
						}
						if (url_byCoordinates !== "disabled") {
		    				if (typeof(plugins) !== "undefined") {
			    				if (typeof(plugins.childBrowser) !== "undefined") {
			    					try { plugins.childBrowser.close(); } catch(e4) { alert("Error: " + e4.message); }
			    					try { 
				    					plugins.childBrowser.showWebPage(encodeURI(url_byCoordinates), { showNavigationBar: true });
			    					} catch(e5) { alert("Error: " + e5.message); }
			    				} else {
			    					DigiWebApp.ApplicationController.inAppBrowser_var = window.open(url_byCoordinates,'childBrowser','width=800,height=600,menubar=no,status=no,location=yes,copyhistory=no,directories=no');
			    				}
		    				} else {
		    					DigiWebApp.ApplicationController.inAppBrowser_var = window.open(url_byCoordinates,'childBrowser','width=800,height=600,menubar=no,status=no,location=yes,copyhistory=no,directories=no');
		    				}
						} else {
							// TODO: Error-Message for disabled Map-Services
						}
	    			}
	            }
	        }
	    })
    	
    })

});


// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: ZeitbuchungenTemplateView
// ==========================================================================

DigiWebApp.ZeitbuchungenTemplateView = M.ListItemView.design({

      isSelectable: YES

    , childViews: 'datum von bis dauer spacer2 auftragsBezeichnung positionsBezeichnung handauftragsBezeichnung taetigkeit gpsBreite gpsLaenge gpsBreitePosition gpsLaengePosition'

    , events: {
        tap: {
			action: function(id, m_id) {
						var doShow = NO;
					    var view = M.ViewManager.getViewById(id);
					    var mitarbeiter_modelId = view.modelId;
						_.each(DigiWebApp.ZeitbuchungenController.items, function(ZeitbuchungenItem) {
							if (ZeitbuchungenItem.m_id === mitarbeiter_modelId) {
									doShow = YES;
									DigiWebApp.ZeitbuchungenController.set('itemForDetails', ZeitbuchungenItem);
									DigiWebApp.ZeitbuchungDetailsPage.updateContent();
							}
						});
						
						if (doShow === YES) {
							DigiWebApp.NavigationController.toZeitbuchungDetailsPageTransition();
						}
			}
		}
	}

	, spacer1: M.LabelView.design({
	    value: ' '
	})

	, spacer2: M.LabelView.design({
	    value: ' '
	})

	//	  auftragsBezeichnung: "6657Heim"
	, auftragsBezeichnung: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= auftragsBezeichnung %>'
          , operation: function(v) {
				if (v !== "" && typeof(v) !== "undefined" && v !== "undefined" && v !== "null" && v !== null) {
					return M.I18N.l('order') + ': ' + v;
				} else {
					return '';
				}
              }
      }
	})
	//	  auftragsId: "950"
	, auftragsId: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= auftragsId %>'
          , operation: function(v) {
                  return v;
              }
      }
	})
	//	  bis: "10:37:08"
	, bis: M.LabelView.design({
        cssClass: 'bold unselectable'
      , isInline: YES
      , computedValue: {
            valuePattern: '<%= bis %>'
          , operation: function(v) {
					if (v !== '-') {
						return v;
					} else {
						return M.I18N.l('now');
					}
              }
      }
	})
	//	  datum: "14.06.2012"
	, datum: M.LabelView.design({
        cssClass: 'bold unselectable'
      , isInline: YES
      , computedValue: {
            valuePattern: '<%= datum %>'
          , operation: function(v) {
				if (v !== "-") {
			        return v;
				} else {
					return "";
				}
              }
      }
	})
	//	  dauer: "00:00"
	, dauer: M.LabelView.design({
        cssClass: 'normal unselectable'
      , isInline: YES
      , computedValue: {
            valuePattern: '<%= dauer %>'
          , operation: function(v) {
					if (v !== "00:00" && v !== "-" && v !== "null" && v !== null) {
						return ' (' + v + ')';
					} else {
						return '';
					}
              }
      }
	})
	//	  farbeAmpel: ""
	, farbeAmpel: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= farbeAmpel %>'
          , operation: function(v) {
                  return v;
              }
      }
	})
	//	  gpsBreite: "0.0"
	, gpsBreite: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= gpsBreite %>'
          , operation: function(v) {
			        if (v != "0.0" && v !== "null" && v !== null) { 
			        	var str = new Number(v);
			       		return M.I18N.l('latitude') + ': ' + str.toFixed(6);
			        } else {
			            //return M.I18N.l('latitude') + ': ' + M.I18N.l('GPSnotactive');
			            return '';
			        }
              }
      }
	})
	//	  gpsBreitePosition: "0.0"
	, gpsBreitePosition: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= gpsBreitePosition %>'
          , operation: function(v) {
		        if (v != "0.0" && v !== "null" && v !== null) { 
		        	var str = new Number(v);
		       		return M.I18N.l('position') + '-' + M.I18N.l('latitude') + ': ' + str.toFixed(6);
		        } else {
		            //return M.I18N.l('position') + '-' + M.I18N.l('latitude') + ': ' + M.I18N.l('GPSnotactive');
		            return '';
		        }
              }
      }
	})
	//	  gpsLaenge: "0.0"
	, gpsLaenge: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= gpsLaenge %>'
          , operation: function(v) {
		        if (v != "0.0" && v !== "null" && v !== null) { 
		        	var str = new Number(v);
		       		return M.I18N.l('longitude') + ': ' + str.toFixed(6);
		        } else {
		            //return M.I18N.l('longitude') + ': ' + M.I18N.l('GPSnotactive');
		            return '';
		        }
              }
      }
	})
	//	  gpsLaengePosition: "0.0"
	, gpsLaengePosition: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= gpsLaengePosition %>'
          , operation: function(v) {
			        if (v != "0.0" && v !== "null" && v !== null) { 
			        	var str = new Number(v);
			       		return M.I18N.l('position') + '-' + M.I18N.l('longitude') + ': ' + str.toFixed(6);
			        } else {
			            //return M.I18N.l('position') + '-' + M.I18N.l('longitude') + ': ' + M.I18N.l('GPSnotactive');
			            return '';
			        }
              }
      }
	})
	//	  handauftragsBezeichnung: "6657Heim"
	, handauftragsBezeichnung: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= handauftragsBezeichnung %>'
          , operation: function(v) {
				if (v !== "" && typeof(v) !== "undefined" && v !== "undefined" && v !== "null" && v !== null) {
					return M.I18N.l('handApplications') + ': ' + v;
				} else {
					return '';
				}
              }
      }
	})
	//	  handauftragsId: "950"
	, handauftragsId: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= handauftragsId %>'
          , operation: function(v) {
                  return v;
              }
      }
	})
	//	  mitarbeiterId: "12"
	, mitarbeiterId: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= mitarbeiterId %>'
          , operation: function(v) {
                  return v;
              }
      }
	})
	//	  name: "Alber"
	, name: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= name %>'
          , operation: function(v) {
                  return v;
              }
      }
	})
	//	  nameVorname: "Alber, Michael"
	, nameVorname: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= nameVorname %>'
          , operation: function(v) {
                  return v;
              }
      }
	})
	//	  positionsBezeichnung: "6657Heim"
	, positionsBezeichnung: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= positionsBezeichnung %>'
          , operation: function(v) {
				if (v !== "" && typeof(v) !== "undefined" && v !== "undefined" && v !== "null" && v !== null) {
					return M.I18N.l('position') + ': ' + v;
				} else {
					return '';
				}
              }
      }
	})
	//	  positionsId: "1874"
	, positionsId: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= positionsId %>'
          , operation: function(v) {
                  return v;
              }
      }
	})
	//	  taetigkeit: "HolzLackraum"
	, taetigkeit: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= taetigkeit %>'
          , operation: function(v) {
				if (v !== "" && typeof(v) !== "undefined" && v !== "undefined" && v !== "null" && v !== null) {
					return M.I18N.l('activity') + ': ' + v;
				} else {
					return '';
				}
              }
      }
	})
	//	  taetigkeitsId: "21"
	, taetigkeitsId: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= taetigkeitsId %>'
          , operation: function(v) {
                  return v;
              }
      }
	})
	//	  taetigkeitsart: "0"
	, taetigkeitsart: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= taetigkeitsart %>'
          , operation: function(v) {
                  return v;
              }
      }
	})
	//	  von: "10:36:45"
	, von: M.LabelView.design({
        cssClass: 'bold unselectable'
      , isInline: YES
      , computedValue: {
            valuePattern: '<%= von %>'
          , operation: function(v) {
                  return ' ' + v + ' - ';
              }
      }
	})
	//	  vorname: "Michael"
	, vorname: M.LabelView.design({
        cssClass: 'normal unselectable'
      , computedValue: {
            valuePattern: '<%= vorname %>'
          , operation: function(v) {
                  return v;
              }
      }
	})
      
});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp
// View: ZeitbuchungenPage
// ==========================================================================

m_require('app/views/ZeitbuchungenTemplateView');
m_require('app/views/VorZurueckTabBar.js');

DigiWebApp.ZeitbuchungenPage = M.PageView.design({

      events: {
		pageshow: {
            target: DigiWebApp.ZeitbuchungenController,
            action: 'init'
        }
    }

    , childViews: 'header content tabBar'

    , cssClass: 'zeitbuchungenPage unselectable'

    , header: M.ToolbarView.design({
        childViews: 'backButton title'
        , cssClass: 'header unselectable'
        , isFixed: YES
        , backButton: M.ButtonView.design({
              value: M.I18N.l('back')
            , icon: 'arrow-l'
            , anchorLocation: M.LEFT
            , events: {
                tap: {
                      target: DigiWebApp.NavigationController
                    , action: function() {try{DigiWebApp.ApplicationController.vibrate();}catch(e2){} this.backToAnwesenheitslistePageTransition();}
                }
            }
        })
        , title: M.LabelView.design({
              value: M.I18N.l('Zeitbuchungen')
            , anchorLocation: M.CENTER
        })
        , anchorLocation: M.TOP
    })

    , content: M.ScrollView.design({
          childViews: 'list'
        , list: M.ListView.design({
              contentBinding: {
                  target: DigiWebApp.ZeitbuchungenController
                , property: 'items'
            }
            , listItemTemplateView: DigiWebApp.ZeitbuchungenTemplateView
        })
    })

    , tabBar: DigiWebApp.VorZurueckTabBar

});



// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: DigiWebApp 
// ==========================================================================

function parseBool(val) {
	       if (val === "YES") {
		return YES;
	} else if (val === YES) {
		return YES;
	} else if (val === "true") {
		return YES;
	} else if (val === true) {
		return YES;
	} else if (val === "NO") {
		return NO;
	} else if (val === NO) {
		return NO;
	} else if (val === "false") {
		return NO;
	} else if (val === false) {
		return NO;
	}
}

function isGUID(guidString) {
	return /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(guidString);
}

// Extend Number with padLeft-Member
Number.prototype.padLeft = function (n,str) {
    return (this < 0 ? '-' : '') + 
            Array(n-String(Math.abs(this)).length+1)
             .join(str||'0') + 
           (Math.abs(this));
}

function bulkClearInterval(maxIntervalId) {
	for (var i=0; i<=maxIntervalId; i++) {
		clearInterval(i);
	}
}

window.timeoutList = new Array();
window.intervalList = new Array();

window.oldSetTimeout = window.setTimeout;
window.oldSetInterval = window.setInterval;
window.oldClearTimeout = window.clearTimeout;
window.oldClearInterval = window.clearInterval;

window.setTimeout = function(code, delay) {
    var retval = window.oldSetTimeout(code, delay);
    window.timeoutList.push(retval);
    return retval;
};
window.clearTimeout = function(id) {
    var ind = window.timeoutList.indexOf(id);
    if(ind >= 0) {
        window.timeoutList.splice(ind, 1);
    }
    var retval = window.oldClearTimeout(id);
    return retval;
};
window.setInterval = function(code, delay) {
    var retval = window.oldSetInterval(code, delay);
    window.intervalList.push(retval);
    return retval;
};
window.clearInterval = function(id) {
    var ind = window.intervalList.indexOf(id);
    if(ind >= 0) {
        window.intervalList.splice(ind, 1);
    }
    var retval = window.oldClearInterval(id);
    return retval;
};
window.clearAllTimeouts = function() {
    for(var i in window.timeoutList) {
        window.oldClearTimeout(window.timeoutList[i]);
    }
    window.timeoutList = new Array();
};
window.clearAllIntervals = function() {
    for(var i in window.intervalList) {
        window.oldClearInterval(window.intervalList[i]);
    }
    window.intervalList = new Array();
};
function addToListIfNotFoundById(list, element, id) {
	var found = _.find(list, function(el) {
		if (typeof(el.get) === "function") {
			return parseInt(el.get("id")) === parseInt(id);
		} else {
			return parseInt(el.id) === parseInt(id)
		}
	});
	if (!found) {
		list.push(element);
	}
	return list;
}

if (!window.console) {
	window.console = {
		log: function(a) {}
	};
} else {
	if (window.console.logLevel) {
		window.console.logLevel = 3;
	}
}


var newAppVersionAvailable = NO;

M.Application.useTransitions = NO;

var DigiWebApp = DigiWebApp || {app: null};

function writeToLog(myWriteContent, mySuccessCallback, myErrorCallback) {		
	
	var successCallback;
	if (typeof(mySuccessCallback) !== "function") {
		successCallback = function(){};
	} else {
		successCallback = mySuccessCallback;
	}
	var errorCallback;
	if (typeof(myErrorCallback) !== "function") {
		errorCallback = function(){};
	} else {
		errorCallback = myErrorCallback;
	}

	var now = new Date();
	var writeContent = "";
	if (typeof(myWriteContent) === "string") {
		writeContent = myWriteContent;
	} else {
		writeContent = JSON.stringify(myWriteContent);
	}
	writeContent = new String("\n----------------------------------------------------------\n" + now.getFullYear() + "-" + ("0" + (now.getMonth() + 1)).slice(-2) + "-" + ("0" + now.getDate()).slice(-2) + " " + ("0" + now.getHours()).slice(-2) + ":" + ("0" + now.getMinutes()).slice(-2) + ":" + ("0" + now.getSeconds()).slice(-2) + "." + ("0" + now.getMilliseconds()).slice(-2) + " " + writeContent + "\n");
	
	var fileName = now.getFullYear() + "-" + ("0" + (now.getMonth() + 1)).slice(-2) + "-" + ("0" + now.getDate()).slice(-2) + "_DIGI-WebApp.log.txt";
		
	// check if LocalFileSystem is defined
	if (typeof window.requestFileSystem === "undefined") {
		//console.error("writeToLog: no LocalFileSystem available");
		//alert("writeToLog: no LocalFileSystem available");
		successCallback("");
        return true;
    }

	try {
		
		console.log(writeContent.toString());
		
		var myQuota = DigiWebApp.ApplicationController.CONSTApplicationQuota;
	    // open filesystem
		if (typeof(navigator.webkitPersistentStorage) !== "undefined") {
			navigator.webkitPersistentStorage.requestQuota(myQuota, function(grantedBytes) {
			    window.requestFileSystem(PERSISTENT, grantedBytes, function(fileSystem) {
			    	
			    	// get dataDirectory from filesystem (create if not exists)
			    	fileSystem.root.getDirectory("DIGIWebAppLogs", {create: true, exclusive: false}, function(dataDirectory) {
			
				    	// get fileEntry from filesystem (create if not exists)
				    	dataDirectory.getFile(fileName, {create: true, exclusive: false}, function(fileEntry) {
			
				    		fileEntry.createWriter(function(writer) {
				    				
				    			writer.onerror = function(evt) {
				    				//console.error("writeError", evt);
				    				errorCallback(evt);
				    			};
				    			
				    			writer.onwriteend = function(evt) {
					    			//writer.onwriteend = function(ev) {
				    					successCallback(evt);
					    			//};
				    				//writer.truncate(writeContent.length);
				    	        };
				    	        // Create a new Blob and write it to log.txt.
				    	        var blob = new Blob([writeContent], {type: 'text/plain'});
				    	        
				    	        writer.seek(writer.length);
			    	        	writer.write(blob);
			
				    		}, errorCallback); // fileEntry.createWriter
				   		}, errorCallback);     // dataDirectory.getFile
				   	}, errorCallback);         // fileSystem.root.getDirectory
			    }, errorCallback);             // window.requestFileSystem
			}, function(e) {
				  console.error('Error while requesting Quota', e);
  		            DigiWebApp.ApplicationController.nativeAlertDialogView({
		                title: M.I18N.l('error')
		              , message: M.I18N.l('errorWhileRequestingQuota') + ": " + err
		            });	    		        					
			});

		} else {
	    
		    window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
		    	
		    	// get dataDirectory from filesystem (create if not exists)
		    	fileSystem.root.getDirectory("DIGIWebAppLogs", {create: true, exclusive: false}, function(dataDirectory) {
		
			    	// get fileEntry from filesystem (create if not exists)
			    	dataDirectory.getFile(fileName, {create: true, exclusive: false}, function(fileEntry) {
		
			    		fileEntry.createWriter(function(writer) {
			    				
			    			writer.onerror = function(evt) {
			    				//console.error("writeError", evt);
			    				errorCallback(evt);
			    			};
			    			
			    			writer.onwriteend = function(evt) {
				    			//writer.onwriteend = function(ev) {
			    					successCallback(evt);
				    			//};
			    				//writer.truncate(writeContent.length);
			    	        };
			    	        
			    	        writer.seek(writer.length);
		    	        	writer.write(writeContent.toString());
		
			    		}, errorCallback); // fileEntry.createWriter
			   		}, errorCallback);     // dataDirectory.getFile
			   	}, errorCallback);         // fileSystem.root.getDirectory
		    }, errorCallback);             // window.requestFileSystem
		}
	} catch(e2) {
		errorCallback(e2);
	}

}


 function trackError(ex) {
//	var exceptionAlert = "";
//	//exceptionAlert = "Es trat leider eine unbehandelte Ausnahme auf:" + "\n\n";
//	try {
//		if (ex.indexOf("Line Number: 0") !== -1) {
//			return true;
//		}
//	} catch(e) {
//	}
//	if (typeof(ex.message === "undefined")) {
//		exceptionAlert = exceptionAlert + "'" + ex + "'";
//	} else {
//		exceptionAlert = exceptionAlert + "'" + ex.message + "'";
//	}
//	if (typeof(ex.stack) !== "undefined") {
//		exceptionAlert = exceptionAlert + "\n" + ex.stack.split("\n")[1];
//	} else if (typeof(ex.lineNumber) !== "undefined") {
//		if (ex.lineNumber === "0" || ex.lineNumber === 0) {
//			return true;
//		}
//		exceptionAlert = exceptionAlert + " at " + ex.lineNumber;
//	} else if (typeof(ex.line) !== "undefined") {
//		if (ex.line === "0" || ex.line === 0) {
//			return true;
//		}
//		exceptionAlert = exceptionAlert + " at " + ex.line;
//	}
//	exceptionAlert = exceptionAlert + "\n\n" + "Bitte melden Sie dies bei DIGI-Zeiterfassung GmbH, damit dieser Fehler behoben werden kann." + "\n\n" + "Herzlichen Dank!";
//	alert(exceptionAlert);
	
	try {
		if (typeof(ex) === "string") {
			var logText = "Exception " + ex;
			writeToLog(logText);
		} else {
			var logText = "Exception " + ex.name + ": " + ex.message + "\nStack: " + ex.stack;
			writeToLog(logText);
		}
	 
		console.log(ex);
		if (typeof(ex.stack) !== "undefined") {
			console.log(ex.stack);
		}

	} catch(ex2) {}
	
	return true;

}

window.onerror = function (msg, url, line) {
	writeToLog('window.onerror: ' + msg + '\nURL: ' + url + '\nLine Number: ' + line);
	return true;
};


//override jQuery.fn.bind to wrap every provided function in try/catch
var jQueryBind = jQuery.fn.bind;
jQuery.fn.bind = function( type, myData, myFn ) {
	var fn = myFn;
	var data = myData;
	if ( !fn && data && typeof data == 'function' ) {
		fn = data;
		data = null;
	}
	if ( fn ) {
		var origFn = fn;
		var wrappedFn = function() { 
			try {
				//console.log("jQuery.fn.bind: applying function for type '" + type + "'");
				origFn.apply( this, arguments );
			} catch ( ex ) {
				trackError( ex );
				// re-throw ex iff error should propogate
				//throw ex;
			}
		};
		fn = wrappedFn;
	}
	return jQueryBind.call( this, type, data, fn );
};

;!(function ($) {
    $.fn.classes = function (callback) {
        var classes = [];
        $.each(this, function (i, v) {
            var splitClassName = v.className.split(/\s+/);
            for (var j in splitClassName) {
                var className = splitClassName[j];
                if (-1 === classes.indexOf(className)) {
                    classes.push(className);
                }
            }
        });
        if ('function' === typeof callback) {
            for (var i in classes) {
                callback(classes[i]);
            }
        }
        return classes;
    };
})(jQuery);

// reloading app one more time
if (typeof(localStorage) !== "undefined") {
	var reloadAppOneMoreTime = localStorage.getItem("reloadAppOneMoreTime");
	if (reloadAppOneMoreTime !== null) {
		localStorage.removeItem("reloadAppOneMoreTime");
		if (window.applicationCache) {
			if (window.applicationCache.status == window.applicationCache.UPDATEREADY) {
				window.applicationCache.swapCache();
			}
		}
		if (typeof(navigator.app) !== "undefined") {
			if (typeof(location.origin) !== "undefined") {
				navigator.app.loadUrl(location.origin + location.pathname);					
			} else {
				navigator.app.loadUrl(location.protocol + '//' + location.pathname);
			}
		} else {
			window.location.reload();
		}
	}
}

$(window).bind('load', function(e) {
	//console.log("window onload event");
	if (window.applicationCache) {
		$(window.applicationCache).bind('updateready', function(e2) {
			if (window.applicationCache.status == window.applicationCache.UPDATEREADY) {
				console.log("Browser downloaded a new app cache");
				window.newAppVersionAvailable = YES;
				if (confirm(M.I18N.l('applicationUpdateAvailableMsg') + "\n\n" + DigiWebApp.app.config.version)) { 
					// Swap it in and reload the page to get the new hotness.
					try {
						window.applicationCache.swapCache();
						if (typeof(localStorage) !== "undefined") {
							localStorage.setItem("reloadAppOneMoreTime", "true");
						}
						if (typeof(navigator.app) !== "undefined") {
							if (typeof(location.origin) !== "undefined") {
								navigator.app.loadUrl(location.origin + location.pathname);					
							} else {
								navigator.app.loadUrl(location.protocol + '//' + location.pathname);
							}
						} else {
							window.location.reload();
						}
					} catch(ex) {
						console.log(ex);
					}
				} else {
					DigiWebApp.NavigationController.toSplashViewPageTransition();
					DigiWebApp.NavigationController.toDashboardPage();
				}
			} else {
				// Manifest didn't changed. Nothing new to server.
			}
		});
	} else {
		//console.log("!!!!!! no window.applicationCache !!!!!!")
	}
});

var gefundeneFreischaltungen = [];
function searchForFeature(featureId) {
	if (gefundeneFreischaltungen.length === 0) {
		// alle Freischaltungen in Array laden
	    for (var i = 0; i < localStorage.length; i++) {
	        var k = localStorage.key(i);
	        var regexResult = new RegExp('^' + M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX + 'Features_').exec(k);
	        if (regexResult) {
	            var record = JSON.parse(localStorage.getItem(k));
	            gefundeneFreischaltungen.push(record);
	        }
	    }
	}
	
	var featureInArray = _.filter(gefundeneFreischaltungen,function(record){return record.id == featureId;});
	if (featureInArray.length != 0) {
		return (featureInArray[0].isAvailable == "true");
	}
	
// alte, direkte Variante
//    for (var i = 0; i < localStorage.length; i++) {
//        var k = localStorage.key(i);
//        var regexResult = new RegExp('^' + M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX + 'Features_').exec(k);
//        if (regexResult) {
//            var record = JSON.parse(localStorage.getItem(k));
//        	if (featureId.toString() === record.id.toString()) {
//        		return (record.isAvailable.toString() === "true");
//        	}
//        }
//    }
	
    return false;    
}

if(localStorage) {
	var language = null;
	language = localStorage.getItem(M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX + 'lang');
	if (language === null) {
		localStorage.setItem(M.LOCAL_STORAGE_PREFIX + M.Application.name + M.LOCAL_STORAGE_SUFFIX + 'lang', 'de_de');
		//M.I18N.setLanguage('de_de');
	}
}

// reduce pre-rendering on BlackBerry to reduce time spent on native-splash
var DigiWebAppBlackBerryDesign = {

    entryPage : 'splashView',

    splashView: DigiWebApp.SplashViewPage

};

var DigiWebAppOrdinaryDesign = {

      entryPage : 'splashView'

    , splashView: DigiWebApp.SplashViewPage

    , dashboard: DigiWebApp.DashboardPage

    , bookingPage: DigiWebApp.BookingPage

    , settingsPage: DigiWebApp.SettingsPage

    , settingsPasswordPage: DigiWebApp.SettingsPasswordPage

    , timeDataPage: DigiWebApp.TimeDataPage

    , employeePage: DigiWebApp.EmployeePage

    , infoPage: DigiWebApp.InfoPage
            
};

if (searchForFeature(400)) { // Camera
	DigiWebAppOrdinaryDesign.mediaListPage = DigiWebApp.MediaListPage; // für 400 & 401
	DigiWebAppOrdinaryDesign.cameraPage = DigiWebApp.CameraPage;
	DigiWebAppOrdinaryDesign.editPicturePage = DigiWebApp.EditPicturePage;
	DigiWebAppOrdinaryDesign.fileChooserPage = DigiWebApp.FileChooserPage;
}

if (searchForFeature(401)) { // Audio
	DigiWebAppOrdinaryDesign.mediaListPage = DigiWebApp.MediaListPage; // für 400 & 401
	DigiWebAppOrdinaryDesign.audioPage = DigiWebApp.AudioPage;
	DigiWebAppOrdinaryDesign.demoaudioPage = DigiWebApp.DemoAudioPage;
	DigiWebAppOrdinaryDesign.demomediaPage = DigiWebApp.DemoMediaPage;
	DigiWebAppOrdinaryDesign.fileChooserPage = DigiWebApp.FileChooserPage;
}

if (searchForFeature(402)) { // Materialerfassung
	// hat (noch) keine eigenen Views
	// --> benutzt weiter unten die Views des Bautagebuches
}

if (searchForFeature(403) && !(searchForFeature(409))) { // Bemerkungsfeld
	DigiWebAppOrdinaryDesign.editTimeDataPage = DigiWebApp.EditTimeDataPage; // für 405 & 403
	DigiWebAppOrdinaryDesign.remarkPage = DigiWebApp.RemarkPage;
}

if (searchForFeature(404)) { // Button-Menü (mit Icons alá DTC6) (aktuell nur bei Scholpp; diese Freischaltung deaktiviert auch die Animationen)
	DigiWebAppOrdinaryDesign.buttonsDashboard = DigiWebApp.ButtonDashboardPage;
}

if (searchForFeature(405) && !(searchForFeature(409))) { // Unterschrift
	DigiWebAppOrdinaryDesign.editTimeDataPage = DigiWebApp.EditTimeDataPage; // für 405 & 403
}

if (searchForFeature(406) && !(searchForFeature(409))) { // Auftragsinfo
	DigiWebAppOrdinaryDesign.orderInfoPage = DigiWebApp.OrderInfoPage;
}

if (searchForFeature(407)) { // Tagescheckliste
	DigiWebAppOrdinaryDesign.studieChecklistePage = DigiWebApp.StudieChecklistePage;
}

if (searchForFeature(408)) { // Anwesenheitsliste
	DigiWebAppOrdinaryDesign.anwesenheitslistePage = DigiWebApp.AnwesenheitslistePage;
	DigiWebAppOrdinaryDesign.zeitbuchungenPage = DigiWebApp.ZeitbuchungenPage;
	DigiWebAppOrdinaryDesign.zeitbuchungDetailsPage = DigiWebApp.ZeitbuchungDetailsPage;
	DigiWebAppOrdinaryDesign.orderDetailsPage = DigiWebApp.OrderDetailsPage;
}

if (searchForFeature(409)) { // ChefTool-Only
	// hat keine eigenen Views, Buchungs-Views ausblenden
	//try{delete DigiWebAppOrdinaryDesign.bookingPage;}catch(e2){}
	try{delete DigiWebAppOrdinaryDesign.timeDataPage;}catch(e3){}
	try{delete DigiWebAppOrdinaryDesign.employeePage;}catch(e4){}
	try{delete DigiWebAppOrdinaryDesign.handOrderPage;}catch(e5){}
}

if ( !(searchForFeature(410)) && !(searchForFeature(409)) ) { // Menüeintrag "Handauftrag" ausblenden
	// soll heißen, füge den View nur hinzu, wenn dieses Feature NICHT gesetzt ist.
	DigiWebAppOrdinaryDesign.handOrderPage = DigiWebApp.HandOrderPage;
}

if ( (searchForFeature(411)) && !(searchForFeature(409)) ) { // Buchungen X Tage vorhalten
	DigiWebAppOrdinaryDesign.timeDataArchivePage = DigiWebApp.TimeDataArchivePage;
}
	
if (searchForFeature(412) || searchForFeature(402)) { // Bautagebuch && Materialerfassung
	DigiWebAppOrdinaryDesign.bautagebuchBautageberichteListePage = DigiWebApp.BautagebuchBautageberichteListePage;
	DigiWebAppOrdinaryDesign.bautagebuchBautageberichtDetailsPage = DigiWebApp.BautagebuchBautageberichtDetailsPage;
	DigiWebAppOrdinaryDesign.bautagebuchMaterialienListePage = DigiWebApp.BautagebuchMaterialienListePage;
	DigiWebAppOrdinaryDesign.bautagebuchMaterialienDetailsPage = DigiWebApp.BautagebuchMaterialienDetailsPage;
	DigiWebAppOrdinaryDesign.bautagebuchMedienListePage = DigiWebApp.BautagebuchMedienListePage;
	DigiWebAppOrdinaryDesign.bautagebuchMedienDetailsPage = DigiWebApp.BautagebuchMedienDetailsPage;
	DigiWebAppOrdinaryDesign.bautagebuchNotizenListePage = DigiWebApp.BautagebuchNotizenListePage;
	DigiWebAppOrdinaryDesign.bautagebuchNotizenDetailsPage = DigiWebApp.BautagebuchNotizenDetailsPage;
	DigiWebAppOrdinaryDesign.bautagebuchZeitenListePage = DigiWebApp.BautagebuchZeitenListePage;
	DigiWebAppOrdinaryDesign.bautagebuchZeitenDetailsPage = DigiWebApp.BautagebuchZeitenDetailsPage;
	DigiWebAppOrdinaryDesign.bautagebuchEinstellungenPage = DigiWebApp.BautagebuchEinstellungenPage;
	DigiWebAppOrdinaryDesign.bautagebuchWetterPage = DigiWebApp.BautagebuchWetterPage;
	DigiWebAppOrdinaryDesign.bautagebuchZusammenfassungPage = DigiWebApp.BautagebuchZusammenfassungPage;
	DigiWebAppOrdinaryDesign.fileChooserPage = DigiWebApp.FileChooserPage;
	DigiWebAppOrdinaryDesign.bautagebuchMitarbeiterAuswahlPage = DigiWebApp.BautagebuchMitarbeiterAuswahlPage;
}

if ( (searchForFeature(416) || searchForFeature(424)) && !(searchForFeature(409)) ) { // Buchungsscreen mit Tätigkeitsicons und ButtonMenü
	DigiWebAppOrdinaryDesign.bookingPageWithIconsScholpp = DigiWebApp.BookingPageWithIconsScholpp;
}

if (searchForFeature(418)) { // Spesen/Auslöse (wird bei Feierabend abgefragt)
	DigiWebAppOrdinaryDesign.spesenPage = DigiWebApp.SpesenPage;
}

if (searchForFeature(422)) { // gefahrene Kilometer
	DigiWebAppOrdinaryDesign.editTimeDataPage = DigiWebApp.EditTimeDataPage; // für 405 & 403
	DigiWebAppOrdinaryDesign.remarkPage = DigiWebApp.RemarkPage;
}

if (searchForFeature(423)) { // Terminliste
	DigiWebAppOrdinaryDesign.terminlistePage = DigiWebApp.TerminlistePage;
}

if (searchForFeature(425)) { // FestePauseStornieren
	DigiWebAppOrdinaryDesign.festePauseStornierenPage = DigiWebApp.FestePauseStornierenPage;
}

var restartOnBlackBerry = true;
if (navigator.platform === "BlackBerry" && restartOnBlackBerry) {
	if (navigator.appVersion.indexOf("Version/") !== -1) {
		// disable restartOnBlackBerry if version > 6
		var bb_version = Number(navigator.appVersion.substr(navigator.appVersion.indexOf("Version/") + 8,1));
		if (bb_version > 6) restartOnBlackBerry = false; //disable restart on newer BlackBerries
	}
}

if (navigator.platform === "BlackBerry" && restartOnBlackBerry) {
	// we will reset the design to DigiWebAppOrdinaryDesign later on in SplashViewPage.onPageshow
	DigiWebApp.app = M.Application.design(DigiWebAppBlackBerryDesign);
} else {
	DigiWebApp.app = M.Application.design(DigiWebAppOrdinaryDesign);	
}

